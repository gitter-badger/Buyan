if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15868__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__15868 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15868__delegate.call(this, args);
    };
    G__15868.cljs$lang$maxFixedArity = 0;
    G__15868.cljs$lang$applyTo = function(arglist__15869) {
      var args = cljs.core.seq(arglist__15869);
      return G__15868__delegate(args);
    };
    G__15868.cljs$core$IFn$_invoke$arity$variadic = G__15868__delegate;
    return G__15868;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3651__auto__ = ty;
    if (cljs.core.truth_(and__3651__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3651__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4533__auto___15870 = len;
  var i_15871 = 0;
  while (true) {
    if (i_15871 < n__4533__auto___15870) {
      new_arr[i_15871] = arr[i_15871];
      var G__15872 = i_15871 + 1;
      i_15871 = G__15872;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__15873__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__15873 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15873__delegate.call(this, array, i, idxs);
    };
    G__15873.cljs$lang$maxFixedArity = 2;
    G__15873.cljs$lang$applyTo = function(arglist__15874) {
      var array = cljs.core.first(arglist__15874);
      arglist__15874 = cljs.core.next(arglist__15874);
      var i = cljs.core.first(arglist__15874);
      var idxs = cljs.core.rest(arglist__15874);
      return G__15873__delegate(array, i, idxs);
    };
    G__15873.cljs$core$IFn$_invoke$arity$variadic = G__15873__delegate;
    return G__15873;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__15875__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__15875 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15875__delegate.call(this, array, idx, idx2, idxv);
    };
    G__15875.cljs$lang$maxFixedArity = 3;
    G__15875.cljs$lang$applyTo = function(arglist__15876) {
      var array = cljs.core.first(arglist__15876);
      arglist__15876 = cljs.core.next(arglist__15876);
      var idx = cljs.core.first(arglist__15876);
      arglist__15876 = cljs.core.next(arglist__15876);
      var idx2 = cljs.core.first(arglist__15876);
      var idxv = cljs.core.rest(arglist__15876);
      return G__15875__delegate(array, idx, idx2, idxv);
    };
    G__15875.cljs$core$IFn$_invoke$arity$variadic = G__15875__delegate;
    return G__15875;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj15878 = {};
  return obj15878;
}();
cljs.core.IFn = function() {
  var obj15880 = {};
  return obj15880;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3651__auto__ = this$;
      if (and__3651__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4300__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3663__auto__ = cljs.core._invoke[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._invoke["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj15882 = {};
  return obj15882;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3651__auto__ = value;
    if (and__3651__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4300__auto__ = value == null ? null : value;
    return function() {
      var or__3663__auto__ = cljs.core._clone[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._clone["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15884 = {};
  return obj15884;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._count[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._count["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15886 = {};
  return obj15886;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._empty[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._empty["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15888 = {};
  return obj15888;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._conj[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._conj["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15890 = {};
  return obj15890;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3651__auto__ = coll;
      if (and__3651__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4300__auto__ = coll == null ? null : coll;
      return function() {
        var or__3663__auto__ = cljs.core._nth[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._nth["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3651__auto__ = coll;
      if (and__3651__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4300__auto__ = coll == null ? null : coll;
      return function() {
        var or__3663__auto__ = cljs.core._nth[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._nth["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj15892 = {};
  return obj15892;
}();
cljs.core.ISeq = function() {
  var obj15894 = {};
  return obj15894;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._first[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._first["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._rest[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._rest["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15896 = {};
  return obj15896;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._next[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._next["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15898 = {};
  return obj15898;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3651__auto__ = o;
      if (and__3651__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4300__auto__ = o == null ? null : o;
      return function() {
        var or__3663__auto__ = cljs.core._lookup[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._lookup["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3651__auto__ = o;
      if (and__3651__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4300__auto__ = o == null ? null : o;
      return function() {
        var or__3663__auto__ = cljs.core._lookup[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._lookup["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj15900 = {};
  return obj15900;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._assoc[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._assoc["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15902 = {};
  return obj15902;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._dissoc[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._dissoc["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15904 = {};
  return obj15904;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._key[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._key["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._val[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._val["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15906 = {};
  return obj15906;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._disjoin[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._disjoin["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15908 = {};
  return obj15908;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._peek[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._peek["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._pop[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._pop["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15910 = {};
  return obj15910;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._assoc_n[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15912 = {};
  return obj15912;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._deref[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._deref["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15914 = {};
  return obj15914;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15916 = {};
  return obj15916;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._meta[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._meta["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15918 = {};
  return obj15918;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._with_meta[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._with_meta["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15920 = {};
  return obj15920;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3651__auto__ = coll;
      if (and__3651__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4300__auto__ = coll == null ? null : coll;
      return function() {
        var or__3663__auto__ = cljs.core._reduce[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._reduce["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3651__auto__ = coll;
      if (and__3651__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4300__auto__ = coll == null ? null : coll;
      return function() {
        var or__3663__auto__ = cljs.core._reduce[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._reduce["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj15922 = {};
  return obj15922;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15924 = {};
  return obj15924;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._equiv[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._equiv["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15926 = {};
  return obj15926;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._hash[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._hash["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15928 = {};
  return obj15928;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._seq[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._seq["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15930 = {};
  return obj15930;
}();
cljs.core.IList = function() {
  var obj15932 = {};
  return obj15932;
}();
cljs.core.IRecord = function() {
  var obj15934 = {};
  return obj15934;
}();
cljs.core.IReversible = function() {
  var obj15936 = {};
  return obj15936;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._rseq[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._rseq["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15938 = {};
  return obj15938;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._entry_key[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._entry_key["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._comparator[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._comparator["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15940 = {};
  return obj15940;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3651__auto__ = writer;
    if (and__3651__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4300__auto__ = writer == null ? null : writer;
    return function() {
      var or__3663__auto__ = cljs.core._write[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._write["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3651__auto__ = writer;
    if (and__3651__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4300__auto__ = writer == null ? null : writer;
    return function() {
      var or__3663__auto__ = cljs.core._flush[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._flush["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15942 = {};
  return obj15942;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._pr_writer[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15944 = {};
  return obj15944;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3651__auto__ = d;
    if (and__3651__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4300__auto__ = d == null ? null : d;
    return function() {
      var or__3663__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15946 = {};
  return obj15946;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3651__auto__ = this$;
    if (and__3651__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4300__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3663__auto__ = cljs.core._notify_watches[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3651__auto__ = this$;
    if (and__3651__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4300__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3663__auto__ = cljs.core._add_watch[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._add_watch["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3651__auto__ = this$;
    if (and__3651__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4300__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3663__auto__ = cljs.core._remove_watch[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15948 = {};
  return obj15948;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._as_transient[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._as_transient["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15950 = {};
  return obj15950;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3651__auto__ = tcoll;
    if (and__3651__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4300__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3663__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3651__auto__ = tcoll;
    if (and__3651__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4300__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3663__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15952 = {};
  return obj15952;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3651__auto__ = tcoll;
    if (and__3651__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4300__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3663__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15954 = {};
  return obj15954;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3651__auto__ = tcoll;
    if (and__3651__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4300__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3663__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15956 = {};
  return obj15956;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3651__auto__ = tcoll;
    if (and__3651__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4300__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3663__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3651__auto__ = tcoll;
    if (and__3651__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4300__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3663__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15958 = {};
  return obj15958;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3651__auto__ = tcoll;
    if (and__3651__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4300__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3663__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15960 = {};
  return obj15960;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3651__auto__ = x;
    if (and__3651__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4300__auto__ = x == null ? null : x;
    return function() {
      var or__3663__auto__ = cljs.core._compare[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._compare["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15962 = {};
  return obj15962;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._drop_first[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._drop_first["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15964 = {};
  return obj15964;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._chunked_first[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15966 = {};
  return obj15966;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._chunked_next[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15968 = {};
  return obj15968;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3651__auto__ = x;
    if (and__3651__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4300__auto__ = x == null ? null : x;
    return function() {
      var or__3663__auto__ = cljs.core._name[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._name["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3651__auto__ = x;
    if (and__3651__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4300__auto__ = x == null ? null : x;
    return function() {
      var or__3663__auto__ = cljs.core._namespace[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._namespace["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj15970 = {};
  return obj15970;
}();
cljs.core.IReset = function() {
  var obj15972 = {};
  return obj15972;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3651__auto__ = o;
    if (and__3651__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4300__auto__ = o == null ? null : o;
    return function() {
      var or__3663__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj15974 = {};
  return obj15974;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3651__auto__ = o;
      if (and__3651__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4300__auto__ = o == null ? null : o;
      return function() {
        var or__3663__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3651__auto__ = o;
      if (and__3651__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4300__auto__ = o == null ? null : o;
      return function() {
        var or__3663__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3651__auto__ = o;
      if (and__3651__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4300__auto__ = o == null ? null : o;
      return function() {
        var or__3663__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3651__auto__ = o;
      if (and__3651__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4300__auto__ = o == null ? null : o;
      return function() {
        var or__3663__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj15976 = {};
  return obj15976;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3651__auto__ = coll;
    if (and__3651__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4300__auto__ = coll == null ? null : coll;
    return function() {
      var or__3663__auto__ = cljs.core._iterator[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._iterator["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__15977 = i + 2;
        var G__15978 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__15977;
        h1 = G__15978;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj15980 = {};
  return obj15980;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__15981 = i + 1;
          var G__15982 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__15981;
          hash = G__15982;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15986 = {};
      return obj15986;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__15988 = o;
    if (G__15988) {
      var bit__4320__auto__ = G__15988.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4320__auto__ || G__15988.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3651__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3651__auto__) {
        return b.ns;
      } else {
        return and__3651__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4074__auto__ = self__._hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15990 = null;
  var G__15990__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__15990__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__15990 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15990__2.call(this, self__, coll);
      case 3:
        return G__15990__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15990.cljs$core$IFn$_invoke$arity$2 = G__15990__2;
  G__15990.cljs$core$IFn$_invoke$arity$3 = G__15990__3;
  return G__15990;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15989) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15989)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__15992 = x;
  if (G__15992) {
    var bit__4327__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3663__auto__ = bit__4327__auto__;
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return G__15992.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__15992.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__15992);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__15992);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__15994 = value;
  if (G__15994) {
    var bit__4327__auto__ = G__15994.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4327__auto__ || G__15994.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15994.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15994);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15994);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15996 = coll;
      if (G__15996) {
        var bit__4320__auto__ = G__15996.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4320__auto__ || G__15996.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15998 = coll;
      if (G__15998) {
        var bit__4320__auto__ = G__15998.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4320__auto__ || G__15998.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16000 = coll;
      if (G__16000) {
        var bit__4320__auto__ = G__16000.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4320__auto__ || G__16000.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16002 = coll;
      if (G__16002) {
        var bit__4320__auto__ = G__16002.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4320__auto__ || G__16002.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__16003__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16004 = y;
            var G__16005 = cljs.core.first.call(null, more);
            var G__16006 = cljs.core.next.call(null, more);
            x = G__16004;
            y = G__16005;
            more = G__16006;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16003 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16003__delegate.call(this, x, y, more);
    };
    G__16003.cljs$lang$maxFixedArity = 2;
    G__16003.cljs$lang$applyTo = function(arglist__16007) {
      var x = cljs.core.first(arglist__16007);
      arglist__16007 = cljs.core.next(arglist__16007);
      var y = cljs.core.first(arglist__16007);
      var more = cljs.core.rest(arglist__16007);
      return G__16003__delegate(x, y, more);
    };
    G__16003.cljs$core$IFn$_invoke$arity$variadic = G__16003__delegate;
    return G__16003;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__16008 = n + 1;
      var G__16009 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__16010 = cljs.core.next.call(null, coll__$1);
      n = G__16008;
      hash_code = G__16009;
      coll__$1 = G__16010;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__16011 = n + 1;
      var G__16012 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__16013 = cljs.core.next.call(null, coll__$1);
      n = G__16011;
      hash_code = G__16012;
      coll__$1 = G__16013;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__16014 = nval;
            var G__16015 = n + 1;
            val = G__16014;
            n = G__16015;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16016 = nval;
          var G__16017 = n + 1;
          val__$1 = G__16016;
          n = G__16017;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16018 = nval;
          var G__16019 = n + 1;
          val__$1 = G__16018;
          n = G__16019;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__16020 = nval;
            var G__16021 = n + 1;
            val = G__16020;
            n = G__16021;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16022 = nval;
          var G__16023 = n + 1;
          val__$1 = G__16022;
          n = G__16023;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16024 = nval;
          var G__16025 = n + 1;
          val__$1 = G__16024;
          n = G__16025;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__16027 = x;
  if (G__16027) {
    var bit__4327__auto__ = G__16027.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4327__auto__ || G__16027.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__16027.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__16027);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__16027);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__16029 = x;
  if (G__16029) {
    var bit__4327__auto__ = G__16029.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4327__auto__ || G__16029.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__16029.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__16029);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__16029);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__16030 = sn;
      s = G__16030;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__16031__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__16032 = conj.call(null, coll, x);
          var G__16033 = cljs.core.first.call(null, xs);
          var G__16034 = cljs.core.next.call(null, xs);
          coll = G__16032;
          x = G__16033;
          xs = G__16034;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__16031 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16031__delegate.call(this, coll, x, xs);
    };
    G__16031.cljs$lang$maxFixedArity = 2;
    G__16031.cljs$lang$applyTo = function(arglist__16035) {
      var coll = cljs.core.first(arglist__16035);
      arglist__16035 = cljs.core.next(arglist__16035);
      var x = cljs.core.first(arglist__16035);
      var xs = cljs.core.rest(arglist__16035);
      return G__16031__delegate(coll, x, xs);
    };
    G__16031.cljs$core$IFn$_invoke$arity$variadic = G__16031__delegate;
    return G__16031;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__16036 = cljs.core.next.call(null, s);
      var G__16037 = acc + 1;
      s = G__16036;
      acc = G__16037;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16039 = coll;
      if (G__16039) {
        var bit__4320__auto__ = G__16039.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4320__auto__ || G__16039.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__16040 = cljs.core.next.call(null, coll);
              var G__16041 = n - 1;
              coll = G__16040;
              n = G__16041;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__16042 = cljs.core.next.call(null, coll);
              var G__16043 = n - 1;
              var G__16044 = not_found;
              coll = G__16042;
              n = G__16043;
              not_found = G__16044;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__16049 = coll;
          if (G__16049) {
            var bit__4320__auto__ = G__16049.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4320__auto__ || G__16049.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__16050 = coll;
                  if (G__16050) {
                    var bit__4327__auto__ = G__16050.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4327__auto__ || G__16050.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16050.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16050);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16050);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__16051 = coll;
          if (G__16051) {
            var bit__4320__auto__ = G__16051.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4320__auto__ || G__16051.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__16052 = coll;
                  if (G__16052) {
                    var bit__4327__auto__ = G__16052.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4327__auto__ || G__16052.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16052.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16052);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16052);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__16055 = o;
        if (G__16055) {
          var bit__4320__auto__ = G__16055.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4320__auto__ || G__16055.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__16056 = o;
        if (G__16056) {
          var bit__4320__auto__ = G__16056.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4320__auto__ || G__16056.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__16057__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__16058 = ret;
          var G__16059 = cljs.core.first.call(null, kvs);
          var G__16060 = cljs.core.second.call(null, kvs);
          var G__16061 = cljs.core.nnext.call(null, kvs);
          coll = G__16058;
          k = G__16059;
          v = G__16060;
          kvs = G__16061;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__16057 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16057__delegate.call(this, coll, k, v, kvs);
    };
    G__16057.cljs$lang$maxFixedArity = 3;
    G__16057.cljs$lang$applyTo = function(arglist__16062) {
      var coll = cljs.core.first(arglist__16062);
      arglist__16062 = cljs.core.next(arglist__16062);
      var k = cljs.core.first(arglist__16062);
      arglist__16062 = cljs.core.next(arglist__16062);
      var v = cljs.core.first(arglist__16062);
      var kvs = cljs.core.rest(arglist__16062);
      return G__16057__delegate(coll, k, v, kvs);
    };
    G__16057.cljs$core$IFn$_invoke$arity$variadic = G__16057__delegate;
    return G__16057;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__16063__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__16064 = ret;
            var G__16065 = cljs.core.first.call(null, ks);
            var G__16066 = cljs.core.next.call(null, ks);
            coll = G__16064;
            k = G__16065;
            ks = G__16066;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__16063 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16063__delegate.call(this, coll, k, ks);
    };
    G__16063.cljs$lang$maxFixedArity = 2;
    G__16063.cljs$lang$applyTo = function(arglist__16067) {
      var coll = cljs.core.first(arglist__16067);
      arglist__16067 = cljs.core.next(arglist__16067);
      var k = cljs.core.first(arglist__16067);
      var ks = cljs.core.rest(arglist__16067);
      return G__16063__delegate(coll, k, ks);
    };
    G__16063.cljs$core$IFn$_invoke$arity$variadic = G__16063__delegate;
    return G__16063;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3663__auto__ = goog.isFunction(f);
  if (or__3663__auto__) {
    return or__3663__auto__;
  } else {
    var G__16071 = f;
    if (G__16071) {
      var bit__4327__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3663__auto____$1 = bit__4327__auto__;
        if (cljs.core.truth_(or__3663__auto____$1)) {
          return or__3663__auto____$1;
        } else {
          return G__16071.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__16071.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__16071);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__16071);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__16073 = null;
  var G__16073__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__16073__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__16073__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__16073__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__16073__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__16073__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__16073__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__16073__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__16073__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__16073__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__16073__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__16073__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__16073__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__16073__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__16073__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__16073__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__16073__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__16073__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__16073__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__16073__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__16073__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__16073__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__16073 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__16073__1.call(this, self__);
      case 2:
        return G__16073__2.call(this, self__, a);
      case 3:
        return G__16073__3.call(this, self__, a, b);
      case 4:
        return G__16073__4.call(this, self__, a, b, c);
      case 5:
        return G__16073__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16073__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16073__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16073__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16073__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16073__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16073__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16073__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16073__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16073__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16073__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16073__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16073__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16073__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16073__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16073__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16073__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16073__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16073.cljs$core$IFn$_invoke$arity$1 = G__16073__1;
  G__16073.cljs$core$IFn$_invoke$arity$2 = G__16073__2;
  G__16073.cljs$core$IFn$_invoke$arity$3 = G__16073__3;
  G__16073.cljs$core$IFn$_invoke$arity$4 = G__16073__4;
  G__16073.cljs$core$IFn$_invoke$arity$5 = G__16073__5;
  G__16073.cljs$core$IFn$_invoke$arity$6 = G__16073__6;
  G__16073.cljs$core$IFn$_invoke$arity$7 = G__16073__7;
  G__16073.cljs$core$IFn$_invoke$arity$8 = G__16073__8;
  G__16073.cljs$core$IFn$_invoke$arity$9 = G__16073__9;
  G__16073.cljs$core$IFn$_invoke$arity$10 = G__16073__10;
  G__16073.cljs$core$IFn$_invoke$arity$11 = G__16073__11;
  G__16073.cljs$core$IFn$_invoke$arity$12 = G__16073__12;
  G__16073.cljs$core$IFn$_invoke$arity$13 = G__16073__13;
  G__16073.cljs$core$IFn$_invoke$arity$14 = G__16073__14;
  G__16073.cljs$core$IFn$_invoke$arity$15 = G__16073__15;
  G__16073.cljs$core$IFn$_invoke$arity$16 = G__16073__16;
  G__16073.cljs$core$IFn$_invoke$arity$17 = G__16073__17;
  G__16073.cljs$core$IFn$_invoke$arity$18 = G__16073__18;
  G__16073.cljs$core$IFn$_invoke$arity$19 = G__16073__19;
  G__16073.cljs$core$IFn$_invoke$arity$20 = G__16073__20;
  G__16073.cljs$core$IFn$_invoke$arity$21 = G__16073__21;
  G__16073.cljs$core$IFn$_invoke$arity$22 = G__16073__22;
  return G__16073;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args16072) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16072)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__16077 = o;
    if (G__16077) {
      var bit__4327__auto__ = G__16077.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4327__auto__ || G__16077.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__16077.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__16077);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__16077);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3651__auto__ = !(o == null);
    if (and__3651__auto__) {
      var G__16081 = o;
      if (G__16081) {
        var bit__4327__auto__ = G__16081.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4327__auto__ || G__16081.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__16081.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16081);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16081);
      }
    } else {
      return and__3651__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__16082__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__16083 = ret;
            var G__16084 = cljs.core.first.call(null, ks);
            var G__16085 = cljs.core.next.call(null, ks);
            coll = G__16083;
            k = G__16084;
            ks = G__16085;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__16082 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16082__delegate.call(this, coll, k, ks);
    };
    G__16082.cljs$lang$maxFixedArity = 2;
    G__16082.cljs$lang$applyTo = function(arglist__16086) {
      var coll = cljs.core.first(arglist__16086);
      arglist__16086 = cljs.core.next(arglist__16086);
      var k = cljs.core.first(arglist__16086);
      var ks = cljs.core.rest(arglist__16086);
      return G__16082__delegate(coll, k, ks);
    };
    G__16082.cljs$core$IFn$_invoke$arity$variadic = G__16082__delegate;
    return G__16082;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16088 = x;
    if (G__16088) {
      var bit__4327__auto__ = G__16088.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4327__auto__ || G__16088.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__16088.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__16088);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__16088);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16090 = x;
    if (G__16090) {
      var bit__4327__auto__ = G__16090.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4327__auto__ || G__16090.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__16090.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__16090);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__16090);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__16092 = x;
  if (G__16092) {
    var bit__4327__auto__ = G__16092.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4327__auto__ || G__16092.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__16092.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__16092);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__16092);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__16094 = x;
  if (G__16094) {
    var bit__4327__auto__ = G__16094.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4327__auto__ || G__16094.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__16094.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__16094);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__16094);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__16096 = x;
  if (G__16096) {
    var bit__4327__auto__ = G__16096.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4327__auto__ || G__16096.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__16096.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__16096);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__16096);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__16098 = x;
  if (G__16098) {
    var bit__4327__auto__ = G__16098.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4327__auto__ || G__16098.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__16098.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16098);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16098);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16100 = x;
    if (G__16100) {
      var bit__4327__auto__ = G__16100.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4327__auto__ || G__16100.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__16100.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16100);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16100);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__16102 = x;
  if (G__16102) {
    var bit__4327__auto__ = G__16102.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4327__auto__ || G__16102.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__16102.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16102);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16102);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__16104 = x;
  if (G__16104) {
    var bit__4320__auto__ = G__16104.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4320__auto__ || G__16104.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj16108 = {};
    return obj16108;
  };
  var js_obj__1 = function() {
    var G__16109__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__16109 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16109__delegate.call(this, keyvals);
    };
    G__16109.cljs$lang$maxFixedArity = 0;
    G__16109.cljs$lang$applyTo = function(arglist__16110) {
      var keyvals = cljs.core.seq(arglist__16110);
      return G__16109__delegate(keyvals);
    };
    G__16109.cljs$core$IFn$_invoke$arity$variadic = G__16109__delegate;
    return G__16109;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16111 = i__$1 + 1;
      var G__16112 = j__$1 + 1;
      var G__16113 = len__$1 - 1;
      i__$1 = G__16111;
      j__$1 = G__16112;
      len__$1 = G__16113;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16114 = i__$1 - 1;
      var G__16115 = j__$1 - 1;
      var G__16116 = len__$1 - 1;
      i__$1 = G__16114;
      j__$1 = G__16115;
      len__$1 = G__16116;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16118 = {};
  return obj16118;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16120 = s;
    if (G__16120) {
      var bit__4327__auto__ = G__16120.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4327__auto__ || G__16120.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16120.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16120);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16120);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__16122 = s;
  if (G__16122) {
    var bit__4327__auto__ = G__16122.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4327__auto__ || G__16122.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16122.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16122);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16122);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3663__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3663__auto__) {
    return or__3663__auto__;
  } else {
    var G__16126 = f;
    if (G__16126) {
      var bit__4327__auto__ = G__16126.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4327__auto__ || G__16126.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16126.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16126);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16126);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__16127__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__16128 = cljs.core.conj.call(null, s, x__$1);
              var G__16129 = etc;
              s = G__16128;
              xs = G__16129;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__16127 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16127__delegate.call(this, x, y, more);
    };
    G__16127.cljs$lang$maxFixedArity = 2;
    G__16127.cljs$lang$applyTo = function(arglist__16130) {
      var x = cljs.core.first(arglist__16130);
      arglist__16130 = cljs.core.next(arglist__16130);
      var y = cljs.core.first(arglist__16130);
      var more = cljs.core.rest(arglist__16130);
      return G__16127__delegate(x, y, more);
    };
    G__16127.cljs$core$IFn$_invoke$arity$variadic = G__16127__delegate;
    return G__16127;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3663__auto__ = cljs.core.seq.call(null, coll);
    if (or__3663__auto__) {
      return or__3663__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__16132 = x;
            if (G__16132) {
              var bit__4320__auto__ = G__16132.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4320__auto__ || G__16132.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__16133 = xs;
        var G__16134 = ys;
        var G__16135 = len;
        var G__16136 = n + 1;
        xs = G__16133;
        ys = G__16134;
        len = G__16135;
        n = G__16136;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16137 = nval;
          var G__16138 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__16137;
          coll__$1 = G__16138;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__16141 = coll;
      if (G__16141) {
        var bit__4320__auto__ = G__16141.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4320__auto__ || G__16141.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__16142 = coll;
      if (G__16142) {
        var bit__4320__auto__ = G__16142.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4320__auto__ || G__16142.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__16143 = null;
      var G__16143__0 = function() {
        return f.call(null);
      };
      var G__16143__1 = function(x) {
        return cf.call(null, x);
      };
      var G__16143__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__16143 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__16143__0.call(this);
          case 1:
            return G__16143__1.call(this, x);
          case 2:
            return G__16143__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16143.cljs$core$IFn$_invoke$arity$0 = G__16143__0;
      G__16143.cljs$core$IFn$_invoke$arity$1 = G__16143__1;
      G__16143.cljs$core$IFn$_invoke$arity$2 = G__16143__2;
      return G__16143;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__16144__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__16144 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16144__delegate.call(this, x, y, more);
    };
    G__16144.cljs$lang$maxFixedArity = 2;
    G__16144.cljs$lang$applyTo = function(arglist__16145) {
      var x = cljs.core.first(arglist__16145);
      arglist__16145 = cljs.core.next(arglist__16145);
      var y = cljs.core.first(arglist__16145);
      var more = cljs.core.rest(arglist__16145);
      return G__16144__delegate(x, y, more);
    };
    G__16144.cljs$core$IFn$_invoke$arity$variadic = G__16144__delegate;
    return G__16144;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__16146__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__16146 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16146__delegate.call(this, x, y, more);
    };
    G__16146.cljs$lang$maxFixedArity = 2;
    G__16146.cljs$lang$applyTo = function(arglist__16147) {
      var x = cljs.core.first(arglist__16147);
      arglist__16147 = cljs.core.next(arglist__16147);
      var y = cljs.core.first(arglist__16147);
      var more = cljs.core.rest(arglist__16147);
      return G__16146__delegate(x, y, more);
    };
    G__16146.cljs$core$IFn$_invoke$arity$variadic = G__16146__delegate;
    return G__16146;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__16148__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__16148 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16148__delegate.call(this, x, y, more);
    };
    G__16148.cljs$lang$maxFixedArity = 2;
    G__16148.cljs$lang$applyTo = function(arglist__16149) {
      var x = cljs.core.first(arglist__16149);
      arglist__16149 = cljs.core.next(arglist__16149);
      var y = cljs.core.first(arglist__16149);
      var more = cljs.core.rest(arglist__16149);
      return G__16148__delegate(x, y, more);
    };
    G__16148.cljs$core$IFn$_invoke$arity$variadic = G__16148__delegate;
    return G__16148;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__16150__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__16150 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16150__delegate.call(this, x, y, more);
    };
    G__16150.cljs$lang$maxFixedArity = 2;
    G__16150.cljs$lang$applyTo = function(arglist__16151) {
      var x = cljs.core.first(arglist__16151);
      arglist__16151 = cljs.core.next(arglist__16151);
      var y = cljs.core.first(arglist__16151);
      var more = cljs.core.rest(arglist__16151);
      return G__16150__delegate(x, y, more);
    };
    G__16150.cljs$core$IFn$_invoke$arity$variadic = G__16150__delegate;
    return G__16150;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__16152__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__16153 = y;
            var G__16154 = cljs.core.first.call(null, more);
            var G__16155 = cljs.core.next.call(null, more);
            x = G__16153;
            y = G__16154;
            more = G__16155;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16152 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16152__delegate.call(this, x, y, more);
    };
    G__16152.cljs$lang$maxFixedArity = 2;
    G__16152.cljs$lang$applyTo = function(arglist__16156) {
      var x = cljs.core.first(arglist__16156);
      arglist__16156 = cljs.core.next(arglist__16156);
      var y = cljs.core.first(arglist__16156);
      var more = cljs.core.rest(arglist__16156);
      return G__16152__delegate(x, y, more);
    };
    G__16152.cljs$core$IFn$_invoke$arity$variadic = G__16152__delegate;
    return G__16152;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__16157__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16158 = y;
            var G__16159 = cljs.core.first.call(null, more);
            var G__16160 = cljs.core.next.call(null, more);
            x = G__16158;
            y = G__16159;
            more = G__16160;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16157 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16157__delegate.call(this, x, y, more);
    };
    G__16157.cljs$lang$maxFixedArity = 2;
    G__16157.cljs$lang$applyTo = function(arglist__16161) {
      var x = cljs.core.first(arglist__16161);
      arglist__16161 = cljs.core.next(arglist__16161);
      var y = cljs.core.first(arglist__16161);
      var more = cljs.core.rest(arglist__16161);
      return G__16157__delegate(x, y, more);
    };
    G__16157.cljs$core$IFn$_invoke$arity$variadic = G__16157__delegate;
    return G__16157;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__16162__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__16163 = y;
            var G__16164 = cljs.core.first.call(null, more);
            var G__16165 = cljs.core.next.call(null, more);
            x = G__16163;
            y = G__16164;
            more = G__16165;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16162 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16162__delegate.call(this, x, y, more);
    };
    G__16162.cljs$lang$maxFixedArity = 2;
    G__16162.cljs$lang$applyTo = function(arglist__16166) {
      var x = cljs.core.first(arglist__16166);
      arglist__16166 = cljs.core.next(arglist__16166);
      var y = cljs.core.first(arglist__16166);
      var more = cljs.core.rest(arglist__16166);
      return G__16162__delegate(x, y, more);
    };
    G__16162.cljs$core$IFn$_invoke$arity$variadic = G__16162__delegate;
    return G__16162;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__16167__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16168 = y;
            var G__16169 = cljs.core.first.call(null, more);
            var G__16170 = cljs.core.next.call(null, more);
            x = G__16168;
            y = G__16169;
            more = G__16170;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16167 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16167__delegate.call(this, x, y, more);
    };
    G__16167.cljs$lang$maxFixedArity = 2;
    G__16167.cljs$lang$applyTo = function(arglist__16171) {
      var x = cljs.core.first(arglist__16171);
      arglist__16171 = cljs.core.next(arglist__16171);
      var y = cljs.core.first(arglist__16171);
      var more = cljs.core.rest(arglist__16171);
      return G__16167__delegate(x, y, more);
    };
    G__16167.cljs$core$IFn$_invoke$arity$variadic = G__16167__delegate;
    return G__16167;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3970__auto__ = x;
    var y__3971__auto__ = y;
    return x__3970__auto__ > y__3971__auto__ ? x__3970__auto__ : y__3971__auto__;
  };
  var max__3 = function() {
    var G__16172__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3970__auto__ = x;
        var y__3971__auto__ = y;
        return x__3970__auto__ > y__3971__auto__ ? x__3970__auto__ : y__3971__auto__;
      }(), more);
    };
    var G__16172 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16172__delegate.call(this, x, y, more);
    };
    G__16172.cljs$lang$maxFixedArity = 2;
    G__16172.cljs$lang$applyTo = function(arglist__16173) {
      var x = cljs.core.first(arglist__16173);
      arglist__16173 = cljs.core.next(arglist__16173);
      var y = cljs.core.first(arglist__16173);
      var more = cljs.core.rest(arglist__16173);
      return G__16172__delegate(x, y, more);
    };
    G__16172.cljs$core$IFn$_invoke$arity$variadic = G__16172__delegate;
    return G__16172;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3977__auto__ = x;
    var y__3978__auto__ = y;
    return x__3977__auto__ < y__3978__auto__ ? x__3977__auto__ : y__3978__auto__;
  };
  var min__3 = function() {
    var G__16174__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3977__auto__ = x;
        var y__3978__auto__ = y;
        return x__3977__auto__ < y__3978__auto__ ? x__3977__auto__ : y__3978__auto__;
      }(), more);
    };
    var G__16174 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16174__delegate.call(this, x, y, more);
    };
    G__16174.cljs$lang$maxFixedArity = 2;
    G__16174.cljs$lang$applyTo = function(arglist__16175) {
      var x = cljs.core.first(arglist__16175);
      arglist__16175 = cljs.core.next(arglist__16175);
      var y = cljs.core.first(arglist__16175);
      var more = cljs.core.rest(arglist__16175);
      return G__16174__delegate(x, y, more);
    };
    G__16174.cljs$core$IFn$_invoke$arity$variadic = G__16174__delegate;
    return G__16174;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__16176__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__16176 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16176__delegate.call(this, x, y, more);
    };
    G__16176.cljs$lang$maxFixedArity = 2;
    G__16176.cljs$lang$applyTo = function(arglist__16177) {
      var x = cljs.core.first(arglist__16177);
      arglist__16177 = cljs.core.next(arglist__16177);
      var y = cljs.core.first(arglist__16177);
      var more = cljs.core.rest(arglist__16177);
      return G__16176__delegate(x, y, more);
    };
    G__16176.cljs$core$IFn$_invoke$arity$variadic = G__16176__delegate;
    return G__16176;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__16178__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__16178 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16178__delegate.call(this, x, y, more);
    };
    G__16178.cljs$lang$maxFixedArity = 2;
    G__16178.cljs$lang$applyTo = function(arglist__16179) {
      var x = cljs.core.first(arglist__16179);
      arglist__16179 = cljs.core.next(arglist__16179);
      var y = cljs.core.first(arglist__16179);
      var more = cljs.core.rest(arglist__16179);
      return G__16178__delegate(x, y, more);
    };
    G__16178.cljs$core$IFn$_invoke$arity$variadic = G__16178__delegate;
    return G__16178;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__16180__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__16180 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16180__delegate.call(this, x, y, more);
    };
    G__16180.cljs$lang$maxFixedArity = 2;
    G__16180.cljs$lang$applyTo = function(arglist__16181) {
      var x = cljs.core.first(arglist__16181);
      arglist__16181 = cljs.core.next(arglist__16181);
      var y = cljs.core.first(arglist__16181);
      var more = cljs.core.rest(arglist__16181);
      return G__16180__delegate(x, y, more);
    };
    G__16180.cljs$core$IFn$_invoke$arity$variadic = G__16180__delegate;
    return G__16180;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__16182__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__16182 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16182__delegate.call(this, x, y, more);
    };
    G__16182.cljs$lang$maxFixedArity = 2;
    G__16182.cljs$lang$applyTo = function(arglist__16183) {
      var x = cljs.core.first(arglist__16183);
      arglist__16183 = cljs.core.next(arglist__16183);
      var y = cljs.core.first(arglist__16183);
      var more = cljs.core.rest(arglist__16183);
      return G__16182__delegate(x, y, more);
    };
    G__16182.cljs$core$IFn$_invoke$arity$variadic = G__16182__delegate;
    return G__16182;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__16184__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__16184 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16184__delegate.call(this, x, y, more);
    };
    G__16184.cljs$lang$maxFixedArity = 2;
    G__16184.cljs$lang$applyTo = function(arglist__16185) {
      var x = cljs.core.first(arglist__16185);
      arglist__16185 = cljs.core.next(arglist__16185);
      var y = cljs.core.first(arglist__16185);
      var more = cljs.core.rest(arglist__16185);
      return G__16184__delegate(x, y, more);
    };
    G__16184.cljs$core$IFn$_invoke$arity$variadic = G__16184__delegate;
    return G__16184;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__16186__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__16186 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16186__delegate.call(this, x, y, more);
    };
    G__16186.cljs$lang$maxFixedArity = 2;
    G__16186.cljs$lang$applyTo = function(arglist__16187) {
      var x = cljs.core.first(arglist__16187);
      arglist__16187 = cljs.core.next(arglist__16187);
      var y = cljs.core.first(arglist__16187);
      var more = cljs.core.rest(arglist__16187);
      return G__16186__delegate(x, y, more);
    };
    G__16186.cljs$core$IFn$_invoke$arity$variadic = G__16186__delegate;
    return G__16186;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__16188__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__16188 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16188__delegate.call(this, x, y, more);
    };
    G__16188.cljs$lang$maxFixedArity = 2;
    G__16188.cljs$lang$applyTo = function(arglist__16189) {
      var x = cljs.core.first(arglist__16189);
      arglist__16189 = cljs.core.next(arglist__16189);
      var y = cljs.core.first(arglist__16189);
      var more = cljs.core.rest(arglist__16189);
      return G__16188__delegate(x, y, more);
    };
    G__16188.cljs$core$IFn$_invoke$arity$variadic = G__16188__delegate;
    return G__16188;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__16190__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16191 = y;
            var G__16192 = cljs.core.first.call(null, more);
            var G__16193 = cljs.core.next.call(null, more);
            x = G__16191;
            y = G__16192;
            more = G__16193;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16190 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16190__delegate.call(this, x, y, more);
    };
    G__16190.cljs$lang$maxFixedArity = 2;
    G__16190.cljs$lang$applyTo = function(arglist__16194) {
      var x = cljs.core.first(arglist__16194);
      arglist__16194 = cljs.core.next(arglist__16194);
      var y = cljs.core.first(arglist__16194);
      var more = cljs.core.rest(arglist__16194);
      return G__16190__delegate(x, y, more);
    };
    G__16190.cljs$core$IFn$_invoke$arity$variadic = G__16190__delegate;
    return G__16190;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16195 = n__$1 - 1;
      var G__16196 = cljs.core.next.call(null, xs);
      n__$1 = G__16195;
      xs = G__16196;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__16197__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__16198 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__16199 = cljs.core.next.call(null, more);
          sb = G__16198;
          more = G__16199;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__16197 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16197__delegate.call(this, x, ys);
    };
    G__16197.cljs$lang$maxFixedArity = 1;
    G__16197.cljs$lang$applyTo = function(arglist__16200) {
      var x = cljs.core.first(arglist__16200);
      var ys = cljs.core.rest(arglist__16200);
      return G__16197__delegate(x, ys);
    };
    G__16197.cljs$core$IFn$_invoke$arity$variadic = G__16197__delegate;
    return G__16197;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__16201 = cljs.core.next.call(null, xs);
            var G__16202 = cljs.core.next.call(null, ys);
            xs = G__16201;
            ys = G__16202;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16203 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__16204 = cljs.core.next.call(null, s);
        res = G__16203;
        s = G__16204;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__16205 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__16206 = cljs.core.next.call(null, s);
      h = G__16205;
      s = G__16206;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__16207 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__16208 = cljs.core.next.call(null, s__$1);
      h = G__16207;
      s__$1 = G__16208;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__16215_16221 = cljs.core.seq.call(null, fn_map);
  var chunk__16216_16222 = null;
  var count__16217_16223 = 0;
  var i__16218_16224 = 0;
  while (true) {
    if (i__16218_16224 < count__16217_16223) {
      var vec__16219_16225 = cljs.core._nth.call(null, chunk__16216_16222, i__16218_16224);
      var key_name_16226 = cljs.core.nth.call(null, vec__16219_16225, 0, null);
      var f_16227 = cljs.core.nth.call(null, vec__16219_16225, 1, null);
      var str_name_16228 = cljs.core.name.call(null, key_name_16226);
      obj[str_name_16228] = f_16227;
      var G__16229 = seq__16215_16221;
      var G__16230 = chunk__16216_16222;
      var G__16231 = count__16217_16223;
      var G__16232 = i__16218_16224 + 1;
      seq__16215_16221 = G__16229;
      chunk__16216_16222 = G__16230;
      count__16217_16223 = G__16231;
      i__16218_16224 = G__16232;
      continue;
    } else {
      var temp__4126__auto___16233 = cljs.core.seq.call(null, seq__16215_16221);
      if (temp__4126__auto___16233) {
        var seq__16215_16234__$1 = temp__4126__auto___16233;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16215_16234__$1)) {
          var c__4433__auto___16235 = cljs.core.chunk_first.call(null, seq__16215_16234__$1);
          var G__16236 = cljs.core.chunk_rest.call(null, seq__16215_16234__$1);
          var G__16237 = c__4433__auto___16235;
          var G__16238 = cljs.core.count.call(null, c__4433__auto___16235);
          var G__16239 = 0;
          seq__16215_16221 = G__16236;
          chunk__16216_16222 = G__16237;
          count__16217_16223 = G__16238;
          i__16218_16224 = G__16239;
          continue;
        } else {
          var vec__16220_16240 = cljs.core.first.call(null, seq__16215_16234__$1);
          var key_name_16241 = cljs.core.nth.call(null, vec__16220_16240, 0, null);
          var f_16242 = cljs.core.nth.call(null, vec__16220_16240, 1, null);
          var str_name_16243 = cljs.core.name.call(null, key_name_16241);
          obj[str_name_16243] = f_16242;
          var G__16244 = cljs.core.next.call(null, seq__16215_16234__$1);
          var G__16245 = null;
          var G__16246 = 0;
          var G__16247 = 0;
          seq__16215_16221 = G__16244;
          chunk__16216_16222 = G__16245;
          count__16217_16223 = G__16246;
          i__16218_16224 = G__16247;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__16249 = coll;
  if (G__16249) {
    var bit__4327__auto__ = G__16249.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4327__auto__ || G__16249.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16249.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16249);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16249);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__16250 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__16250;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__16251 = i - 1;
        var G__16252 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__16251;
        r = G__16252;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__16253) {
    var xs = cljs.core.seq(arglist__16253);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3663__auto__ = coll == null;
    if (or__3663__auto__) {
      return or__3663__auto__;
    } else {
      var G__16257 = coll;
      if (G__16257) {
        var bit__4320__auto__ = G__16257.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4320__auto__ || G__16257.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__16259 = x;
  if (G__16259) {
    var bit__4327__auto__ = G__16259.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4327__auto__ || G__16259.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16259.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16259);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16259);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4074__auto__ = self__._hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16261 = null;
  var G__16261__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__16261__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__16261 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16261__2.call(this, self__, coll);
      case 3:
        return G__16261__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16261.cljs$core$IFn$_invoke$arity$2 = G__16261__2;
  G__16261.cljs$core$IFn$_invoke$arity$3 = G__16261__3;
  return G__16261;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16260) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16260)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__16263 = x;
    if (G__16263) {
      var bit__4320__auto__ = G__16263.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4320__auto__ || G__16263.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__16264 = ls.sval();
        ls = G__16264;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__16266 = s;
    if (G__16266) {
      var bit__4320__auto__ = G__16266.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4320__auto__ || G__16266.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__16267 = cljs.core.next.call(null, s__$1);
      s__$1 = G__16267;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_16268 = 0;
  var xs_16269 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_16269) {
      ret[i_16268] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_16269));
      var G__16270 = i_16268 + 1;
      var G__16271 = cljs.core.next.call(null, xs_16269);
      i_16268 = G__16270;
      xs_16269 = G__16271;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16272 = i + 1;
          var G__16273 = cljs.core.next.call(null, s__$1);
          i = G__16272;
          s__$1 = G__16273;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4533__auto___16274 = size;
      var i_16275 = 0;
      while (true) {
        if (i_16275 < n__4533__auto___16274) {
          a[i_16275] = init_val_or_seq;
          var G__16276 = i_16275 + 1;
          i_16275 = G__16276;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16277 = i + 1;
          var G__16278 = cljs.core.next.call(null, s__$1);
          i = G__16277;
          s__$1 = G__16278;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4533__auto___16279 = size;
      var i_16280 = 0;
      while (true) {
        if (i_16280 < n__4533__auto___16279) {
          a[i_16280] = init_val_or_seq;
          var G__16281 = i_16280 + 1;
          i_16280 = G__16281;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16282 = i + 1;
          var G__16283 = cljs.core.next.call(null, s__$1);
          i = G__16282;
          s__$1 = G__16283;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4533__auto___16284 = size;
      var i_16285 = 0;
      while (true) {
        if (i_16285 < n__4533__auto___16284) {
          a[i_16285] = init_val_or_seq;
          var G__16286 = i_16285 + 1;
          i_16285 = G__16286;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16287 = i + 1;
          var G__16288 = cljs.core.next.call(null, s__$1);
          i = G__16287;
          s__$1 = G__16288;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4533__auto___16289 = size;
      var i_16290 = 0;
      while (true) {
        if (i_16290 < n__4533__auto___16289) {
          a[i_16290] = init_val_or_seq;
          var G__16291 = i_16290 + 1;
          i_16290 = G__16291;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__16292 = cljs.core.next.call(null, s__$1);
        var G__16293 = i - 1;
        var G__16294 = sum + 1;
        s__$1 = G__16292;
        i = G__16293;
        sum = G__16294;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__16295__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__16295 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16295__delegate.call(this, x, y, zs);
    };
    G__16295.cljs$lang$maxFixedArity = 2;
    G__16295.cljs$lang$applyTo = function(arglist__16296) {
      var x = cljs.core.first(arglist__16296);
      arglist__16296 = cljs.core.next(arglist__16296);
      var y = cljs.core.first(arglist__16296);
      var zs = cljs.core.rest(arglist__16296);
      return G__16295__delegate(x, y, zs);
    };
    G__16295.cljs$core$IFn$_invoke$arity$variadic = G__16295__delegate;
    return G__16295;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__16297__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__16297 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16297__delegate.call(this, a, b, c, d, more);
    };
    G__16297.cljs$lang$maxFixedArity = 4;
    G__16297.cljs$lang$applyTo = function(arglist__16298) {
      var a = cljs.core.first(arglist__16298);
      arglist__16298 = cljs.core.next(arglist__16298);
      var b = cljs.core.first(arglist__16298);
      arglist__16298 = cljs.core.next(arglist__16298);
      var c = cljs.core.first(arglist__16298);
      arglist__16298 = cljs.core.next(arglist__16298);
      var d = cljs.core.first(arglist__16298);
      var more = cljs.core.rest(arglist__16298);
      return G__16297__delegate(a, b, c, d, more);
    };
    G__16297.cljs$core$IFn$_invoke$arity$variadic = G__16297__delegate;
    return G__16297;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__16299__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16300 = ntcoll;
          var G__16301 = cljs.core.first.call(null, vals);
          var G__16302 = cljs.core.next.call(null, vals);
          tcoll = G__16300;
          val = G__16301;
          vals = G__16302;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16299 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16299__delegate.call(this, tcoll, val, vals);
    };
    G__16299.cljs$lang$maxFixedArity = 2;
    G__16299.cljs$lang$applyTo = function(arglist__16303) {
      var tcoll = cljs.core.first(arglist__16303);
      arglist__16303 = cljs.core.next(arglist__16303);
      var val = cljs.core.first(arglist__16303);
      var vals = cljs.core.rest(arglist__16303);
      return G__16299__delegate(tcoll, val, vals);
    };
    G__16299.cljs$core$IFn$_invoke$arity$variadic = G__16299__delegate;
    return G__16299;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__16304__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__16305 = ntcoll;
          var G__16306 = cljs.core.first.call(null, kvs);
          var G__16307 = cljs.core.second.call(null, kvs);
          var G__16308 = cljs.core.nnext.call(null, kvs);
          tcoll = G__16305;
          key = G__16306;
          val = G__16307;
          kvs = G__16308;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16304 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16304__delegate.call(this, tcoll, key, val, kvs);
    };
    G__16304.cljs$lang$maxFixedArity = 3;
    G__16304.cljs$lang$applyTo = function(arglist__16309) {
      var tcoll = cljs.core.first(arglist__16309);
      arglist__16309 = cljs.core.next(arglist__16309);
      var key = cljs.core.first(arglist__16309);
      arglist__16309 = cljs.core.next(arglist__16309);
      var val = cljs.core.first(arglist__16309);
      var kvs = cljs.core.rest(arglist__16309);
      return G__16304__delegate(tcoll, key, val, kvs);
    };
    G__16304.cljs$core$IFn$_invoke$arity$variadic = G__16304__delegate;
    return G__16304;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__16310__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__16311 = ntcoll;
          var G__16312 = cljs.core.first.call(null, ks);
          var G__16313 = cljs.core.next.call(null, ks);
          tcoll = G__16311;
          key = G__16312;
          ks = G__16313;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16310 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16310__delegate.call(this, tcoll, key, ks);
    };
    G__16310.cljs$lang$maxFixedArity = 2;
    G__16310.cljs$lang$applyTo = function(arglist__16314) {
      var tcoll = cljs.core.first(arglist__16314);
      arglist__16314 = cljs.core.next(arglist__16314);
      var key = cljs.core.first(arglist__16314);
      var ks = cljs.core.rest(arglist__16314);
      return G__16310__delegate(tcoll, key, ks);
    };
    G__16310.cljs$core$IFn$_invoke$arity$variadic = G__16310__delegate;
    return G__16310;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__16315__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16316 = ntcoll;
          var G__16317 = cljs.core.first.call(null, vals);
          var G__16318 = cljs.core.next.call(null, vals);
          tcoll = G__16316;
          val = G__16317;
          vals = G__16318;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16315 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16315__delegate.call(this, tcoll, val, vals);
    };
    G__16315.cljs$lang$maxFixedArity = 2;
    G__16315.cljs$lang$applyTo = function(arglist__16319) {
      var tcoll = cljs.core.first(arglist__16319);
      arglist__16319 = cljs.core.next(arglist__16319);
      var val = cljs.core.first(arglist__16319);
      var vals = cljs.core.rest(arglist__16319);
      return G__16315__delegate(tcoll, val, vals);
    };
    G__16315.cljs$core$IFn$_invoke$arity$variadic = G__16315__delegate;
    return G__16315;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4577 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4577);
      } else {
        return f.call(null, a4577);
      }
    } else {
      var b4578 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4577, b4578);
        } else {
          return f.call(null, a4577, b4578);
        }
      } else {
        var c4579 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4577, b4578, c4579);
          } else {
            return f.call(null, a4577, b4578, c4579);
          }
        } else {
          var d4580 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4577, b4578, c4579, d4580);
            } else {
              return f.call(null, a4577, b4578, c4579, d4580);
            }
          } else {
            var e4581 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4577, b4578, c4579, d4580, e4581);
              } else {
                return f.call(null, a4577, b4578, c4579, d4580, e4581);
              }
            } else {
              var f4582 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4577, b4578, c4579, d4580, e4581, f4582);
                } else {
                  return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582);
                }
              } else {
                var g4583 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4577, b4578, c4579, d4580, e4581, f4582, g4583);
                  } else {
                    return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583);
                  }
                } else {
                  var h4584 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584);
                    } else {
                      return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584);
                    }
                  } else {
                    var i4585 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585);
                      } else {
                        return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585);
                      }
                    } else {
                      var j4586 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586);
                        } else {
                          return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586);
                        }
                      } else {
                        var k4587 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587);
                          } else {
                            return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587);
                          }
                        } else {
                          var l4588 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588);
                            } else {
                              return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588);
                            }
                          } else {
                            var m4589 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589);
                              } else {
                                return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589);
                              }
                            } else {
                              var n4590 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590);
                                } else {
                                  return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590);
                                }
                              } else {
                                var o4591 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591);
                                  } else {
                                    return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591);
                                  }
                                } else {
                                  var p4592 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592);
                                    } else {
                                      return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592);
                                    }
                                  } else {
                                    var q4593 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593);
                                      } else {
                                        return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593);
                                      }
                                    } else {
                                      var r4594 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593, r4594);
                                        } else {
                                          return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593, r4594);
                                        }
                                      } else {
                                        var s4595 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593, r4594, s4595);
                                          } else {
                                            return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593, r4594, s4595);
                                          }
                                        } else {
                                          var t4596 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593, r4594, s4595, t4596);
                                            } else {
                                              return f.call(null, a4577, b4578, c4579, d4580, e4581, f4582, g4583, h4584, i4585, j4586, k4587, l4588, m4589, n4590, o4591, p4592, q4593, r4594, s4595, t4596);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__16320__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__16320 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__16320__delegate.call(this, f, a, b, c, d, args);
    };
    G__16320.cljs$lang$maxFixedArity = 5;
    G__16320.cljs$lang$applyTo = function(arglist__16321) {
      var f = cljs.core.first(arglist__16321);
      arglist__16321 = cljs.core.next(arglist__16321);
      var a = cljs.core.first(arglist__16321);
      arglist__16321 = cljs.core.next(arglist__16321);
      var b = cljs.core.first(arglist__16321);
      arglist__16321 = cljs.core.next(arglist__16321);
      var c = cljs.core.first(arglist__16321);
      arglist__16321 = cljs.core.next(arglist__16321);
      var d = cljs.core.first(arglist__16321);
      var args = cljs.core.rest(arglist__16321);
      return G__16320__delegate(f, a, b, c, d, args);
    };
    G__16320.cljs$core$IFn$_invoke$arity$variadic = G__16320__delegate;
    return G__16320;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__16322__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__16322 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16322__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__16322.cljs$lang$maxFixedArity = 6;
    G__16322.cljs$lang$applyTo = function(arglist__16323) {
      var obj = cljs.core.first(arglist__16323);
      arglist__16323 = cljs.core.next(arglist__16323);
      var f = cljs.core.first(arglist__16323);
      arglist__16323 = cljs.core.next(arglist__16323);
      var a = cljs.core.first(arglist__16323);
      arglist__16323 = cljs.core.next(arglist__16323);
      var b = cljs.core.first(arglist__16323);
      arglist__16323 = cljs.core.next(arglist__16323);
      var c = cljs.core.first(arglist__16323);
      arglist__16323 = cljs.core.next(arglist__16323);
      var d = cljs.core.first(arglist__16323);
      var args = cljs.core.rest(arglist__16323);
      return G__16322__delegate(obj, f, a, b, c, d, args);
    };
    G__16322.cljs$core$IFn$_invoke$arity$variadic = G__16322__delegate;
    return G__16322;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__16324__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__16324 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16324__delegate.call(this, x, y, more);
    };
    G__16324.cljs$lang$maxFixedArity = 2;
    G__16324.cljs$lang$applyTo = function(arglist__16325) {
      var x = cljs.core.first(arglist__16325);
      arglist__16325 = cljs.core.next(arglist__16325);
      var y = cljs.core.first(arglist__16325);
      var more = cljs.core.rest(arglist__16325);
      return G__16324__delegate(x, y, more);
    };
    G__16324.cljs$core$IFn$_invoke$arity$variadic = G__16324__delegate;
    return G__16324;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t16329 !== "undefined") {
  } else {
    cljs.core.t16329 = function(nil_iter, meta16330) {
      this.nil_iter = nil_iter;
      this.meta16330 = meta16330;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t16329.cljs$lang$type = true;
    cljs.core.t16329.cljs$lang$ctorStr = "cljs.core/t16329";
    cljs.core.t16329.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/t16329");
    };
    cljs.core.t16329.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t16329.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t16329.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t16329.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16331) {
      var self__ = this;
      var _16331__$1 = this;
      return self__.meta16330;
    };
    cljs.core.t16329.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16331, meta16330__$1) {
      var self__ = this;
      var _16331__$1 = this;
      return new cljs.core.t16329(self__.nil_iter, meta16330__$1);
    };
    cljs.core.__GT_t16329 = function __GT_t16329(nil_iter__$1, meta16330) {
      return new cljs.core.t16329(nil_iter__$1, meta16330);
    };
  }
  return new cljs.core.t16329(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3651__auto__ = !(lt.stepper == null);
      if (and__3651__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3651__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__16332 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__16332;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4533__auto___16333 = self__.iters.length;
  var i_16334 = 0;
  while (true) {
    if (i_16334 < n__4533__auto___16333) {
      self__.nexts[i_16334] = self__.iters[i_16334].next();
      var G__16335 = i_16334 + 1;
      i_16334 = G__16335;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3651__auto__ = !(lt.stepper == null);
      if (and__3651__auto__) {
        return this$.hasNext();
      } else {
        return and__3651__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__16336_16340 = cljs.core.seq.call(null, colls);
  var chunk__16337_16341 = null;
  var count__16338_16342 = 0;
  var i__16339_16343 = 0;
  while (true) {
    if (i__16339_16343 < count__16338_16342) {
      var coll_16344 = cljs.core._nth.call(null, chunk__16337_16341, i__16339_16343);
      iters.push(cljs.core.iter.call(null, coll_16344));
      var G__16345 = seq__16336_16340;
      var G__16346 = chunk__16337_16341;
      var G__16347 = count__16338_16342;
      var G__16348 = i__16339_16343 + 1;
      seq__16336_16340 = G__16345;
      chunk__16337_16341 = G__16346;
      count__16338_16342 = G__16347;
      i__16339_16343 = G__16348;
      continue;
    } else {
      var temp__4126__auto___16349 = cljs.core.seq.call(null, seq__16336_16340);
      if (temp__4126__auto___16349) {
        var seq__16336_16350__$1 = temp__4126__auto___16349;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16336_16350__$1)) {
          var c__4433__auto___16351 = cljs.core.chunk_first.call(null, seq__16336_16350__$1);
          var G__16352 = cljs.core.chunk_rest.call(null, seq__16336_16350__$1);
          var G__16353 = c__4433__auto___16351;
          var G__16354 = cljs.core.count.call(null, c__4433__auto___16351);
          var G__16355 = 0;
          seq__16336_16340 = G__16352;
          chunk__16337_16341 = G__16353;
          count__16338_16342 = G__16354;
          i__16339_16343 = G__16355;
          continue;
        } else {
          var coll_16356 = cljs.core.first.call(null, seq__16336_16350__$1);
          iters.push(cljs.core.iter.call(null, coll_16356));
          var G__16357 = cljs.core.next.call(null, seq__16336_16350__$1);
          var G__16358 = null;
          var G__16359 = 0;
          var G__16360 = 0;
          seq__16336_16340 = G__16357;
          chunk__16337_16341 = G__16358;
          count__16338_16342 = G__16359;
          i__16339_16343 = G__16360;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3663__auto__ = cljs.core.seq.call(null, coll);
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__16361__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__16361 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16361__delegate.call(this, xform, coll, colls);
    };
    G__16361.cljs$lang$maxFixedArity = 2;
    G__16361.cljs$lang$applyTo = function(arglist__16362) {
      var xform = cljs.core.first(arglist__16362);
      arglist__16362 = cljs.core.next(arglist__16362);
      var coll = cljs.core.first(arglist__16362);
      var colls = cljs.core.rest(arglist__16362);
      return G__16361__delegate(xform, coll, colls);
    };
    G__16361.cljs$core$IFn$_invoke$arity$variadic = G__16361__delegate;
    return G__16361;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__16363 = pred;
        var G__16364 = cljs.core.next.call(null, coll);
        pred = G__16363;
        coll = G__16364;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3663__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        var G__16365 = pred;
        var G__16366 = cljs.core.next.call(null, coll);
        pred = G__16365;
        coll = G__16366;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__16367 = null;
    var G__16367__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__16367__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__16367__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__16367__3 = function() {
      var G__16368__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__16368 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__16368__delegate.call(this, x, y, zs);
      };
      G__16368.cljs$lang$maxFixedArity = 2;
      G__16368.cljs$lang$applyTo = function(arglist__16369) {
        var x = cljs.core.first(arglist__16369);
        arglist__16369 = cljs.core.next(arglist__16369);
        var y = cljs.core.first(arglist__16369);
        var zs = cljs.core.rest(arglist__16369);
        return G__16368__delegate(x, y, zs);
      };
      G__16368.cljs$core$IFn$_invoke$arity$variadic = G__16368__delegate;
      return G__16368;
    }();
    G__16367 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__16367__0.call(this);
        case 1:
          return G__16367__1.call(this, x);
        case 2:
          return G__16367__2.call(this, x, y);
        default:
          return G__16367__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16367.cljs$lang$maxFixedArity = 2;
    G__16367.cljs$lang$applyTo = G__16367__3.cljs$lang$applyTo;
    G__16367.cljs$core$IFn$_invoke$arity$0 = G__16367__0;
    G__16367.cljs$core$IFn$_invoke$arity$1 = G__16367__1;
    G__16367.cljs$core$IFn$_invoke$arity$2 = G__16367__2;
    G__16367.cljs$core$IFn$_invoke$arity$variadic = G__16367__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__16367;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__16370__delegate = function(args) {
      return x;
    };
    var G__16370 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16370__delegate.call(this, args);
    };
    G__16370.cljs$lang$maxFixedArity = 0;
    G__16370.cljs$lang$applyTo = function(arglist__16371) {
      var args = cljs.core.seq(arglist__16371);
      return G__16370__delegate(args);
    };
    G__16370.cljs$core$IFn$_invoke$arity$variadic = G__16370__delegate;
    return G__16370;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__16372 = null;
      var G__16372__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__16372__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__16372__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__16372__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__16372__4 = function() {
        var G__16373__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__16373 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16373__delegate.call(this, x, y, z, args);
        };
        G__16373.cljs$lang$maxFixedArity = 3;
        G__16373.cljs$lang$applyTo = function(arglist__16374) {
          var x = cljs.core.first(arglist__16374);
          arglist__16374 = cljs.core.next(arglist__16374);
          var y = cljs.core.first(arglist__16374);
          arglist__16374 = cljs.core.next(arglist__16374);
          var z = cljs.core.first(arglist__16374);
          var args = cljs.core.rest(arglist__16374);
          return G__16373__delegate(x, y, z, args);
        };
        G__16373.cljs$core$IFn$_invoke$arity$variadic = G__16373__delegate;
        return G__16373;
      }();
      G__16372 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16372__0.call(this);
          case 1:
            return G__16372__1.call(this, x);
          case 2:
            return G__16372__2.call(this, x, y);
          case 3:
            return G__16372__3.call(this, x, y, z);
          default:
            return G__16372__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16372.cljs$lang$maxFixedArity = 3;
      G__16372.cljs$lang$applyTo = G__16372__4.cljs$lang$applyTo;
      G__16372.cljs$core$IFn$_invoke$arity$0 = G__16372__0;
      G__16372.cljs$core$IFn$_invoke$arity$1 = G__16372__1;
      G__16372.cljs$core$IFn$_invoke$arity$2 = G__16372__2;
      G__16372.cljs$core$IFn$_invoke$arity$3 = G__16372__3;
      G__16372.cljs$core$IFn$_invoke$arity$variadic = G__16372__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16372;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__16375 = null;
      var G__16375__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__16375__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__16375__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__16375__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__16375__4 = function() {
        var G__16376__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__16376 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16376__delegate.call(this, x, y, z, args);
        };
        G__16376.cljs$lang$maxFixedArity = 3;
        G__16376.cljs$lang$applyTo = function(arglist__16377) {
          var x = cljs.core.first(arglist__16377);
          arglist__16377 = cljs.core.next(arglist__16377);
          var y = cljs.core.first(arglist__16377);
          arglist__16377 = cljs.core.next(arglist__16377);
          var z = cljs.core.first(arglist__16377);
          var args = cljs.core.rest(arglist__16377);
          return G__16376__delegate(x, y, z, args);
        };
        G__16376.cljs$core$IFn$_invoke$arity$variadic = G__16376__delegate;
        return G__16376;
      }();
      G__16375 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16375__0.call(this);
          case 1:
            return G__16375__1.call(this, x);
          case 2:
            return G__16375__2.call(this, x, y);
          case 3:
            return G__16375__3.call(this, x, y, z);
          default:
            return G__16375__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16375.cljs$lang$maxFixedArity = 3;
      G__16375.cljs$lang$applyTo = G__16375__4.cljs$lang$applyTo;
      G__16375.cljs$core$IFn$_invoke$arity$0 = G__16375__0;
      G__16375.cljs$core$IFn$_invoke$arity$1 = G__16375__1;
      G__16375.cljs$core$IFn$_invoke$arity$2 = G__16375__2;
      G__16375.cljs$core$IFn$_invoke$arity$3 = G__16375__3;
      G__16375.cljs$core$IFn$_invoke$arity$variadic = G__16375__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16375;
    }();
  };
  var comp__4 = function() {
    var G__16378__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__16379__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__16380 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__16381 = cljs.core.next.call(null, fs__$2);
                ret = G__16380;
                fs__$2 = G__16381;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__16379 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__16379__delegate.call(this, args);
          };
          G__16379.cljs$lang$maxFixedArity = 0;
          G__16379.cljs$lang$applyTo = function(arglist__16382) {
            var args = cljs.core.seq(arglist__16382);
            return G__16379__delegate(args);
          };
          G__16379.cljs$core$IFn$_invoke$arity$variadic = G__16379__delegate;
          return G__16379;
        }();
      }(fs__$1);
    };
    var G__16378 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16378__delegate.call(this, f1, f2, f3, fs);
    };
    G__16378.cljs$lang$maxFixedArity = 3;
    G__16378.cljs$lang$applyTo = function(arglist__16383) {
      var f1 = cljs.core.first(arglist__16383);
      arglist__16383 = cljs.core.next(arglist__16383);
      var f2 = cljs.core.first(arglist__16383);
      arglist__16383 = cljs.core.next(arglist__16383);
      var f3 = cljs.core.first(arglist__16383);
      var fs = cljs.core.rest(arglist__16383);
      return G__16378__delegate(f1, f2, f3, fs);
    };
    G__16378.cljs$core$IFn$_invoke$arity$variadic = G__16378__delegate;
    return G__16378;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__16384__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__16384 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16384__delegate.call(this, args);
      };
      G__16384.cljs$lang$maxFixedArity = 0;
      G__16384.cljs$lang$applyTo = function(arglist__16385) {
        var args = cljs.core.seq(arglist__16385);
        return G__16384__delegate(args);
      };
      G__16384.cljs$core$IFn$_invoke$arity$variadic = G__16384__delegate;
      return G__16384;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__16386__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__16386 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16386__delegate.call(this, args);
      };
      G__16386.cljs$lang$maxFixedArity = 0;
      G__16386.cljs$lang$applyTo = function(arglist__16387) {
        var args = cljs.core.seq(arglist__16387);
        return G__16386__delegate(args);
      };
      G__16386.cljs$core$IFn$_invoke$arity$variadic = G__16386__delegate;
      return G__16386;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__16388__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__16388 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16388__delegate.call(this, args);
      };
      G__16388.cljs$lang$maxFixedArity = 0;
      G__16388.cljs$lang$applyTo = function(arglist__16389) {
        var args = cljs.core.seq(arglist__16389);
        return G__16388__delegate(args);
      };
      G__16388.cljs$core$IFn$_invoke$arity$variadic = G__16388__delegate;
      return G__16388;
    }();
  };
  var partial__5 = function() {
    var G__16390__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__16391__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__16391 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__16391__delegate.call(this, args);
        };
        G__16391.cljs$lang$maxFixedArity = 0;
        G__16391.cljs$lang$applyTo = function(arglist__16392) {
          var args = cljs.core.seq(arglist__16392);
          return G__16391__delegate(args);
        };
        G__16391.cljs$core$IFn$_invoke$arity$variadic = G__16391__delegate;
        return G__16391;
      }();
    };
    var G__16390 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16390__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__16390.cljs$lang$maxFixedArity = 4;
    G__16390.cljs$lang$applyTo = function(arglist__16393) {
      var f = cljs.core.first(arglist__16393);
      arglist__16393 = cljs.core.next(arglist__16393);
      var arg1 = cljs.core.first(arglist__16393);
      arglist__16393 = cljs.core.next(arglist__16393);
      var arg2 = cljs.core.first(arglist__16393);
      arglist__16393 = cljs.core.next(arglist__16393);
      var arg3 = cljs.core.first(arglist__16393);
      var more = cljs.core.rest(arglist__16393);
      return G__16390__delegate(f, arg1, arg2, arg3, more);
    };
    G__16390.cljs$core$IFn$_invoke$arity$variadic = G__16390__delegate;
    return G__16390;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__16394 = null;
      var G__16394__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__16394__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__16394__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__16394__4 = function() {
        var G__16395__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__16395 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16395__delegate.call(this, a, b, c, ds);
        };
        G__16395.cljs$lang$maxFixedArity = 3;
        G__16395.cljs$lang$applyTo = function(arglist__16396) {
          var a = cljs.core.first(arglist__16396);
          arglist__16396 = cljs.core.next(arglist__16396);
          var b = cljs.core.first(arglist__16396);
          arglist__16396 = cljs.core.next(arglist__16396);
          var c = cljs.core.first(arglist__16396);
          var ds = cljs.core.rest(arglist__16396);
          return G__16395__delegate(a, b, c, ds);
        };
        G__16395.cljs$core$IFn$_invoke$arity$variadic = G__16395__delegate;
        return G__16395;
      }();
      G__16394 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__16394__1.call(this, a);
          case 2:
            return G__16394__2.call(this, a, b);
          case 3:
            return G__16394__3.call(this, a, b, c);
          default:
            return G__16394__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16394.cljs$lang$maxFixedArity = 3;
      G__16394.cljs$lang$applyTo = G__16394__4.cljs$lang$applyTo;
      G__16394.cljs$core$IFn$_invoke$arity$1 = G__16394__1;
      G__16394.cljs$core$IFn$_invoke$arity$2 = G__16394__2;
      G__16394.cljs$core$IFn$_invoke$arity$3 = G__16394__3;
      G__16394.cljs$core$IFn$_invoke$arity$variadic = G__16394__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16394;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__16397 = null;
      var G__16397__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16397__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__16397__4 = function() {
        var G__16398__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__16398 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16398__delegate.call(this, a, b, c, ds);
        };
        G__16398.cljs$lang$maxFixedArity = 3;
        G__16398.cljs$lang$applyTo = function(arglist__16399) {
          var a = cljs.core.first(arglist__16399);
          arglist__16399 = cljs.core.next(arglist__16399);
          var b = cljs.core.first(arglist__16399);
          arglist__16399 = cljs.core.next(arglist__16399);
          var c = cljs.core.first(arglist__16399);
          var ds = cljs.core.rest(arglist__16399);
          return G__16398__delegate(a, b, c, ds);
        };
        G__16398.cljs$core$IFn$_invoke$arity$variadic = G__16398__delegate;
        return G__16398;
      }();
      G__16397 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16397__2.call(this, a, b);
          case 3:
            return G__16397__3.call(this, a, b, c);
          default:
            return G__16397__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16397.cljs$lang$maxFixedArity = 3;
      G__16397.cljs$lang$applyTo = G__16397__4.cljs$lang$applyTo;
      G__16397.cljs$core$IFn$_invoke$arity$2 = G__16397__2;
      G__16397.cljs$core$IFn$_invoke$arity$3 = G__16397__3;
      G__16397.cljs$core$IFn$_invoke$arity$variadic = G__16397__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16397;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__16400 = null;
      var G__16400__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__16400__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__16400__4 = function() {
        var G__16401__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__16401 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16401__delegate.call(this, a, b, c, ds);
        };
        G__16401.cljs$lang$maxFixedArity = 3;
        G__16401.cljs$lang$applyTo = function(arglist__16402) {
          var a = cljs.core.first(arglist__16402);
          arglist__16402 = cljs.core.next(arglist__16402);
          var b = cljs.core.first(arglist__16402);
          arglist__16402 = cljs.core.next(arglist__16402);
          var c = cljs.core.first(arglist__16402);
          var ds = cljs.core.rest(arglist__16402);
          return G__16401__delegate(a, b, c, ds);
        };
        G__16401.cljs$core$IFn$_invoke$arity$variadic = G__16401__delegate;
        return G__16401;
      }();
      G__16400 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__16400__2.call(this, a, b);
          case 3:
            return G__16400__3.call(this, a, b, c);
          default:
            return G__16400__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16400.cljs$lang$maxFixedArity = 3;
      G__16400.cljs$lang$applyTo = G__16400__4.cljs$lang$applyTo;
      G__16400.cljs$core$IFn$_invoke$arity$2 = G__16400__2;
      G__16400.cljs$core$IFn$_invoke$arity$3 = G__16400__3;
      G__16400.cljs$core$IFn$_invoke$arity$variadic = G__16400__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16400;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4533__auto___16403 = size;
          var i_16404 = 0;
          while (true) {
            if (i_16404 < n__4533__auto___16403) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_16404, cljs.core._nth.call(null, c, i_16404)));
              var G__16405 = i_16404 + 1;
              i_16404 = G__16405;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__16406 = null;
        var G__16406__0 = function() {
          return rf.call(null);
        };
        var G__16406__1 = function(result) {
          return rf.call(null, result);
        };
        var G__16406__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__16406 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16406__0.call(this);
            case 1:
              return G__16406__1.call(this, result);
            case 2:
              return G__16406__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16406.cljs$core$IFn$_invoke$arity$0 = G__16406__0;
        G__16406.cljs$core$IFn$_invoke$arity$1 = G__16406__1;
        G__16406.cljs$core$IFn$_invoke$arity$2 = G__16406__2;
        return G__16406;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4533__auto___16407 = size;
          var i_16408 = 0;
          while (true) {
            if (i_16408 < n__4533__auto___16407) {
              var x_16409 = f.call(null, cljs.core._nth.call(null, c, i_16408));
              if (x_16409 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_16409);
              }
              var G__16410 = i_16408 + 1;
              i_16408 = G__16410;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16411 = cljs.core.seq.call(null, self__.watches);
  var chunk__16412 = null;
  var count__16413 = 0;
  var i__16414 = 0;
  while (true) {
    if (i__16414 < count__16413) {
      var vec__16415 = cljs.core._nth.call(null, chunk__16412, i__16414);
      var key = cljs.core.nth.call(null, vec__16415, 0, null);
      var f = cljs.core.nth.call(null, vec__16415, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__16417 = seq__16411;
      var G__16418 = chunk__16412;
      var G__16419 = count__16413;
      var G__16420 = i__16414 + 1;
      seq__16411 = G__16417;
      chunk__16412 = G__16418;
      count__16413 = G__16419;
      i__16414 = G__16420;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16411);
      if (temp__4126__auto__) {
        var seq__16411__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16411__$1)) {
          var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16411__$1);
          var G__16421 = cljs.core.chunk_rest.call(null, seq__16411__$1);
          var G__16422 = c__4433__auto__;
          var G__16423 = cljs.core.count.call(null, c__4433__auto__);
          var G__16424 = 0;
          seq__16411 = G__16421;
          chunk__16412 = G__16422;
          count__16413 = G__16423;
          i__16414 = G__16424;
          continue;
        } else {
          var vec__16416 = cljs.core.first.call(null, seq__16411__$1);
          var key = cljs.core.nth.call(null, vec__16416, 0, null);
          var f = cljs.core.nth.call(null, vec__16416, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__16425 = cljs.core.next.call(null, seq__16411__$1);
          var G__16426 = null;
          var G__16427 = 0;
          var G__16428 = 0;
          seq__16411 = G__16425;
          chunk__16412 = G__16426;
          count__16413 = G__16427;
          i__16414 = G__16428;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__16432__delegate = function(x, p__16429) {
      var map__16431 = p__16429;
      var map__16431__$1 = cljs.core.seq_QMARK_.call(null, map__16431) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16431) : map__16431;
      var validator = cljs.core.get.call(null, map__16431__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__16431__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__16432 = function(x, var_args) {
      var p__16429 = null;
      if (arguments.length > 1) {
        p__16429 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16432__delegate.call(this, x, p__16429);
    };
    G__16432.cljs$lang$maxFixedArity = 1;
    G__16432.cljs$lang$applyTo = function(arglist__16433) {
      var x = cljs.core.first(arglist__16433);
      var p__16429 = cljs.core.rest(arglist__16433);
      return G__16432__delegate(x, p__16429);
    };
    G__16432.cljs$core$IFn$_invoke$arity$variadic = G__16432__delegate;
    return G__16432;
  }();
  atom = function(x, var_args) {
    var p__16429 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__16434__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__16434 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16434__delegate.call(this, a, f, x, y, more);
    };
    G__16434.cljs$lang$maxFixedArity = 4;
    G__16434.cljs$lang$applyTo = function(arglist__16435) {
      var a = cljs.core.first(arglist__16435);
      arglist__16435 = cljs.core.next(arglist__16435);
      var f = cljs.core.first(arglist__16435);
      arglist__16435 = cljs.core.next(arglist__16435);
      var x = cljs.core.first(arglist__16435);
      arglist__16435 = cljs.core.next(arglist__16435);
      var y = cljs.core.first(arglist__16435);
      var more = cljs.core.rest(arglist__16435);
      return G__16434__delegate(a, f, x, y, more);
    };
    G__16434.cljs$core$IFn$_invoke$arity$variadic = G__16434__delegate;
    return G__16434;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__16436 = null;
          var G__16436__0 = function() {
            return rf.call(null);
          };
          var G__16436__1 = function(result) {
            return rf.call(null, result);
          };
          var G__16436__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__16436 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16436__0.call(this);
              case 1:
                return G__16436__1.call(this, result);
              case 2:
                return G__16436__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16436.cljs$core$IFn$_invoke$arity$0 = G__16436__0;
          G__16436.cljs$core$IFn$_invoke$arity$1 = G__16436__1;
          G__16436.cljs$core$IFn$_invoke$arity$2 = G__16436__2;
          return G__16436;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4533__auto___16437 = size;
            var i_16438 = 0;
            while (true) {
              if (i_16438 < n__4533__auto___16437) {
                var x_16439 = f.call(null, idx + i_16438, cljs.core._nth.call(null, c, i_16438));
                if (x_16439 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_16439);
                }
                var G__16440 = i_16438 + 1;
                i_16438 = G__16440;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            return p.call(null, y);
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            var and__3651__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3651__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3651__auto____$1;
            }
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__16447__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__16447 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16447__delegate.call(this, x, y, z, args);
        };
        G__16447.cljs$lang$maxFixedArity = 3;
        G__16447.cljs$lang$applyTo = function(arglist__16448) {
          var x = cljs.core.first(arglist__16448);
          arglist__16448 = cljs.core.next(arglist__16448);
          var y = cljs.core.first(arglist__16448);
          arglist__16448 = cljs.core.next(arglist__16448);
          var z = cljs.core.first(arglist__16448);
          var args = cljs.core.rest(arglist__16448);
          return G__16447__delegate(x, y, z, args);
        };
        G__16447.cljs$core$IFn$_invoke$arity$variadic = G__16447__delegate;
        return G__16447;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            var and__3651__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3651__auto____$1)) {
              var and__3651__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3651__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3651__auto____$2;
              }
            } else {
              return and__3651__auto____$1;
            }
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            var and__3651__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3651__auto____$1)) {
              var and__3651__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3651__auto____$2)) {
                var and__3651__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3651__auto____$3)) {
                  var and__3651__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3651__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3651__auto____$4;
                  }
                } else {
                  return and__3651__auto____$3;
                }
              } else {
                return and__3651__auto____$2;
              }
            } else {
              return and__3651__auto____$1;
            }
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__16449__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16441_SHARP_) {
            var and__3651__auto__ = p1.call(null, p1__16441_SHARP_);
            if (cljs.core.truth_(and__3651__auto__)) {
              return p2.call(null, p1__16441_SHARP_);
            } else {
              return and__3651__auto__;
            }
          }, args));
        };
        var G__16449 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16449__delegate.call(this, x, y, z, args);
        };
        G__16449.cljs$lang$maxFixedArity = 3;
        G__16449.cljs$lang$applyTo = function(arglist__16450) {
          var x = cljs.core.first(arglist__16450);
          arglist__16450 = cljs.core.next(arglist__16450);
          var y = cljs.core.first(arglist__16450);
          arglist__16450 = cljs.core.next(arglist__16450);
          var z = cljs.core.first(arglist__16450);
          var args = cljs.core.rest(arglist__16450);
          return G__16449__delegate(x, y, z, args);
        };
        G__16449.cljs$core$IFn$_invoke$arity$variadic = G__16449__delegate;
        return G__16449;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            var and__3651__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3651__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3651__auto____$1;
            }
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            var and__3651__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3651__auto____$1)) {
              var and__3651__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3651__auto____$2)) {
                var and__3651__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3651__auto____$3)) {
                  var and__3651__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3651__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3651__auto____$4;
                  }
                } else {
                  return and__3651__auto____$3;
                }
              } else {
                return and__3651__auto____$2;
              }
            } else {
              return and__3651__auto____$1;
            }
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3651__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3651__auto__)) {
            var and__3651__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3651__auto____$1)) {
              var and__3651__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3651__auto____$2)) {
                var and__3651__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3651__auto____$3)) {
                  var and__3651__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3651__auto____$4)) {
                    var and__3651__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3651__auto____$5)) {
                      var and__3651__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3651__auto____$6)) {
                        var and__3651__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3651__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3651__auto____$7;
                        }
                      } else {
                        return and__3651__auto____$6;
                      }
                    } else {
                      return and__3651__auto____$5;
                    }
                  } else {
                    return and__3651__auto____$4;
                  }
                } else {
                  return and__3651__auto____$3;
                }
              } else {
                return and__3651__auto____$2;
              }
            } else {
              return and__3651__auto____$1;
            }
          } else {
            return and__3651__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__16451__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__16442_SHARP_) {
            var and__3651__auto__ = p1.call(null, p1__16442_SHARP_);
            if (cljs.core.truth_(and__3651__auto__)) {
              var and__3651__auto____$1 = p2.call(null, p1__16442_SHARP_);
              if (cljs.core.truth_(and__3651__auto____$1)) {
                return p3.call(null, p1__16442_SHARP_);
              } else {
                return and__3651__auto____$1;
              }
            } else {
              return and__3651__auto__;
            }
          }, args));
        };
        var G__16451 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16451__delegate.call(this, x, y, z, args);
        };
        G__16451.cljs$lang$maxFixedArity = 3;
        G__16451.cljs$lang$applyTo = function(arglist__16452) {
          var x = cljs.core.first(arglist__16452);
          arglist__16452 = cljs.core.next(arglist__16452);
          var y = cljs.core.first(arglist__16452);
          arglist__16452 = cljs.core.next(arglist__16452);
          var z = cljs.core.first(arglist__16452);
          var args = cljs.core.rest(arglist__16452);
          return G__16451__delegate(x, y, z, args);
        };
        G__16451.cljs$core$IFn$_invoke$arity$variadic = G__16451__delegate;
        return G__16451;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__16453__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16443_SHARP_) {
                return p1__16443_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16444_SHARP_) {
                var and__3651__auto__ = p1__16444_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3651__auto__)) {
                  return p1__16444_SHARP_.call(null, y);
                } else {
                  return and__3651__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__16445_SHARP_) {
                var and__3651__auto__ = p1__16445_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3651__auto__)) {
                  var and__3651__auto____$1 = p1__16445_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3651__auto____$1)) {
                    return p1__16445_SHARP_.call(null, z);
                  } else {
                    return and__3651__auto____$1;
                  }
                } else {
                  return and__3651__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__16454__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__16446_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__16446_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__16454 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16454__delegate.call(this, x, y, z, args);
            };
            G__16454.cljs$lang$maxFixedArity = 3;
            G__16454.cljs$lang$applyTo = function(arglist__16455) {
              var x = cljs.core.first(arglist__16455);
              arglist__16455 = cljs.core.next(arglist__16455);
              var y = cljs.core.first(arglist__16455);
              arglist__16455 = cljs.core.next(arglist__16455);
              var z = cljs.core.first(arglist__16455);
              var args = cljs.core.rest(arglist__16455);
              return G__16454__delegate(x, y, z, args);
            };
            G__16454.cljs$core$IFn$_invoke$arity$variadic = G__16454__delegate;
            return G__16454;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__16453 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16453__delegate.call(this, p1, p2, p3, ps);
    };
    G__16453.cljs$lang$maxFixedArity = 3;
    G__16453.cljs$lang$applyTo = function(arglist__16456) {
      var p1 = cljs.core.first(arglist__16456);
      arglist__16456 = cljs.core.next(arglist__16456);
      var p2 = cljs.core.first(arglist__16456);
      arglist__16456 = cljs.core.next(arglist__16456);
      var p3 = cljs.core.first(arglist__16456);
      var ps = cljs.core.rest(arglist__16456);
      return G__16453__delegate(p1, p2, p3, ps);
    };
    G__16453.cljs$core$IFn$_invoke$arity$variadic = G__16453__delegate;
    return G__16453;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3663__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3663__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3663__auto____$1)) {
            return or__3663__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__16463__delegate = function(x, y, z, args) {
          var or__3663__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3663__auto__)) {
            return or__3663__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__16463 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16463__delegate.call(this, x, y, z, args);
        };
        G__16463.cljs$lang$maxFixedArity = 3;
        G__16463.cljs$lang$applyTo = function(arglist__16464) {
          var x = cljs.core.first(arglist__16464);
          arglist__16464 = cljs.core.next(arglist__16464);
          var y = cljs.core.first(arglist__16464);
          arglist__16464 = cljs.core.next(arglist__16464);
          var z = cljs.core.first(arglist__16464);
          var args = cljs.core.rest(arglist__16464);
          return G__16463__delegate(x, y, z, args);
        };
        G__16463.cljs$core$IFn$_invoke$arity$variadic = G__16463__delegate;
        return G__16463;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3663__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3663__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3663__auto____$1)) {
            return or__3663__auto____$1;
          } else {
            var or__3663__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3663__auto____$2)) {
              return or__3663__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3663__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3663__auto____$1)) {
            return or__3663__auto____$1;
          } else {
            var or__3663__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3663__auto____$2)) {
              return or__3663__auto____$2;
            } else {
              var or__3663__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3663__auto____$3)) {
                return or__3663__auto____$3;
              } else {
                var or__3663__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3663__auto____$4)) {
                  return or__3663__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__16465__delegate = function(x, y, z, args) {
          var or__3663__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3663__auto__)) {
            return or__3663__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3663__auto__) {
              return function(p1__16457_SHARP_) {
                var or__3663__auto____$1 = p1.call(null, p1__16457_SHARP_);
                if (cljs.core.truth_(or__3663__auto____$1)) {
                  return or__3663__auto____$1;
                } else {
                  return p2.call(null, p1__16457_SHARP_);
                }
              };
            }(or__3663__auto__), args);
          }
        };
        var G__16465 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16465__delegate.call(this, x, y, z, args);
        };
        G__16465.cljs$lang$maxFixedArity = 3;
        G__16465.cljs$lang$applyTo = function(arglist__16466) {
          var x = cljs.core.first(arglist__16466);
          arglist__16466 = cljs.core.next(arglist__16466);
          var y = cljs.core.first(arglist__16466);
          arglist__16466 = cljs.core.next(arglist__16466);
          var z = cljs.core.first(arglist__16466);
          var args = cljs.core.rest(arglist__16466);
          return G__16465__delegate(x, y, z, args);
        };
        G__16465.cljs$core$IFn$_invoke$arity$variadic = G__16465__delegate;
        return G__16465;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3663__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3663__auto____$1)) {
            return or__3663__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3663__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3663__auto____$1)) {
            return or__3663__auto____$1;
          } else {
            var or__3663__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3663__auto____$2)) {
              return or__3663__auto____$2;
            } else {
              var or__3663__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3663__auto____$3)) {
                return or__3663__auto____$3;
              } else {
                var or__3663__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3663__auto____$4)) {
                  return or__3663__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3663__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3663__auto____$1)) {
            return or__3663__auto____$1;
          } else {
            var or__3663__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3663__auto____$2)) {
              return or__3663__auto____$2;
            } else {
              var or__3663__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3663__auto____$3)) {
                return or__3663__auto____$3;
              } else {
                var or__3663__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3663__auto____$4)) {
                  return or__3663__auto____$4;
                } else {
                  var or__3663__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3663__auto____$5)) {
                    return or__3663__auto____$5;
                  } else {
                    var or__3663__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3663__auto____$6)) {
                      return or__3663__auto____$6;
                    } else {
                      var or__3663__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3663__auto____$7)) {
                        return or__3663__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__16467__delegate = function(x, y, z, args) {
          var or__3663__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3663__auto__)) {
            return or__3663__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3663__auto__) {
              return function(p1__16458_SHARP_) {
                var or__3663__auto____$1 = p1.call(null, p1__16458_SHARP_);
                if (cljs.core.truth_(or__3663__auto____$1)) {
                  return or__3663__auto____$1;
                } else {
                  var or__3663__auto____$2 = p2.call(null, p1__16458_SHARP_);
                  if (cljs.core.truth_(or__3663__auto____$2)) {
                    return or__3663__auto____$2;
                  } else {
                    return p3.call(null, p1__16458_SHARP_);
                  }
                }
              };
            }(or__3663__auto__), args);
          }
        };
        var G__16467 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16467__delegate.call(this, x, y, z, args);
        };
        G__16467.cljs$lang$maxFixedArity = 3;
        G__16467.cljs$lang$applyTo = function(arglist__16468) {
          var x = cljs.core.first(arglist__16468);
          arglist__16468 = cljs.core.next(arglist__16468);
          var y = cljs.core.first(arglist__16468);
          arglist__16468 = cljs.core.next(arglist__16468);
          var z = cljs.core.first(arglist__16468);
          var args = cljs.core.rest(arglist__16468);
          return G__16467__delegate(x, y, z, args);
        };
        G__16467.cljs$core$IFn$_invoke$arity$variadic = G__16467__delegate;
        return G__16467;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__16469__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16459_SHARP_) {
                return p1__16459_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16460_SHARP_) {
                var or__3663__auto__ = p1__16460_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3663__auto__)) {
                  return or__3663__auto__;
                } else {
                  return p1__16460_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__16461_SHARP_) {
                var or__3663__auto__ = p1__16461_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3663__auto__)) {
                  return or__3663__auto__;
                } else {
                  var or__3663__auto____$1 = p1__16461_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3663__auto____$1)) {
                    return or__3663__auto____$1;
                  } else {
                    return p1__16461_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__16470__delegate = function(x, y, z, args) {
              var or__3663__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3663__auto__)) {
                return or__3663__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3663__auto__, ps__$1) {
                  return function(p1__16462_SHARP_) {
                    return cljs.core.some.call(null, p1__16462_SHARP_, args);
                  };
                }(or__3663__auto__, ps__$1), ps__$1);
              }
            };
            var G__16470 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16470__delegate.call(this, x, y, z, args);
            };
            G__16470.cljs$lang$maxFixedArity = 3;
            G__16470.cljs$lang$applyTo = function(arglist__16471) {
              var x = cljs.core.first(arglist__16471);
              arglist__16471 = cljs.core.next(arglist__16471);
              var y = cljs.core.first(arglist__16471);
              arglist__16471 = cljs.core.next(arglist__16471);
              var z = cljs.core.first(arglist__16471);
              var args = cljs.core.rest(arglist__16471);
              return G__16470__delegate(x, y, z, args);
            };
            G__16470.cljs$core$IFn$_invoke$arity$variadic = G__16470__delegate;
            return G__16470;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__16469 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16469__delegate.call(this, p1, p2, p3, ps);
    };
    G__16469.cljs$lang$maxFixedArity = 3;
    G__16469.cljs$lang$applyTo = function(arglist__16472) {
      var p1 = cljs.core.first(arglist__16472);
      arglist__16472 = cljs.core.next(arglist__16472);
      var p2 = cljs.core.first(arglist__16472);
      arglist__16472 = cljs.core.next(arglist__16472);
      var p3 = cljs.core.first(arglist__16472);
      var ps = cljs.core.rest(arglist__16472);
      return G__16469__delegate(p1, p2, p3, ps);
    };
    G__16469.cljs$core$IFn$_invoke$arity$variadic = G__16469__delegate;
    return G__16469;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__16474 = null;
        var G__16474__0 = function() {
          return rf.call(null);
        };
        var G__16474__1 = function(result) {
          return rf.call(null, result);
        };
        var G__16474__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__16474__3 = function() {
          var G__16475__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__16475 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__16475__delegate.call(this, result, input, inputs);
          };
          G__16475.cljs$lang$maxFixedArity = 2;
          G__16475.cljs$lang$applyTo = function(arglist__16476) {
            var result = cljs.core.first(arglist__16476);
            arglist__16476 = cljs.core.next(arglist__16476);
            var input = cljs.core.first(arglist__16476);
            var inputs = cljs.core.rest(arglist__16476);
            return G__16475__delegate(result, input, inputs);
          };
          G__16475.cljs$core$IFn$_invoke$arity$variadic = G__16475__delegate;
          return G__16475;
        }();
        G__16474 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__16474__0.call(this);
            case 1:
              return G__16474__1.call(this, result);
            case 2:
              return G__16474__2.call(this, result, input);
            default:
              return G__16474__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16474.cljs$lang$maxFixedArity = 2;
        G__16474.cljs$lang$applyTo = G__16474__3.cljs$lang$applyTo;
        G__16474.cljs$core$IFn$_invoke$arity$0 = G__16474__0;
        G__16474.cljs$core$IFn$_invoke$arity$1 = G__16474__1;
        G__16474.cljs$core$IFn$_invoke$arity$2 = G__16474__2;
        G__16474.cljs$core$IFn$_invoke$arity$variadic = G__16474__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__16474;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4533__auto___16477 = size;
          var i_16478 = 0;
          while (true) {
            if (i_16478 < n__4533__auto___16477) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_16478)));
              var G__16479 = i_16478 + 1;
              i_16478 = G__16479;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__16480__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__16473_SHARP_) {
          return cljs.core.apply.call(null, f, p1__16473_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__16480 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16480__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16480.cljs$lang$maxFixedArity = 4;
    G__16480.cljs$lang$applyTo = function(arglist__16481) {
      var f = cljs.core.first(arglist__16481);
      arglist__16481 = cljs.core.next(arglist__16481);
      var c1 = cljs.core.first(arglist__16481);
      arglist__16481 = cljs.core.next(arglist__16481);
      var c2 = cljs.core.first(arglist__16481);
      arglist__16481 = cljs.core.next(arglist__16481);
      var c3 = cljs.core.first(arglist__16481);
      var colls = cljs.core.rest(arglist__16481);
      return G__16480__delegate(f, c1, c2, c3, colls);
    };
    G__16480.cljs$core$IFn$_invoke$arity$variadic = G__16480__delegate;
    return G__16480;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__16482 = null;
          var G__16482__0 = function() {
            return rf.call(null);
          };
          var G__16482__1 = function(result) {
            return rf.call(null, result);
          };
          var G__16482__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__16482 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16482__0.call(this);
              case 1:
                return G__16482__1.call(this, result);
              case 2:
                return G__16482__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16482.cljs$core$IFn$_invoke$arity$0 = G__16482__0;
          G__16482.cljs$core$IFn$_invoke$arity$1 = G__16482__1;
          G__16482.cljs$core$IFn$_invoke$arity$2 = G__16482__2;
          return G__16482;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__16483 = null;
          var G__16483__0 = function() {
            return rf.call(null);
          };
          var G__16483__1 = function(result) {
            return rf.call(null, result);
          };
          var G__16483__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__16483 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16483__0.call(this);
              case 1:
                return G__16483__1.call(this, result);
              case 2:
                return G__16483__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16483.cljs$core$IFn$_invoke$arity$0 = G__16483__0;
          G__16483.cljs$core$IFn$_invoke$arity$1 = G__16483__1;
          G__16483.cljs$core$IFn$_invoke$arity$2 = G__16483__2;
          return G__16483;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__16484 = n__$1 - 1;
          var G__16485 = cljs.core.rest.call(null, s);
          n__$1 = G__16484;
          coll__$1 = G__16485;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__16486 = cljs.core.next.call(null, s);
      var G__16487 = cljs.core.next.call(null, lead);
      s = G__16486;
      lead = G__16487;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__16488 = null;
          var G__16488__0 = function() {
            return rf.call(null);
          };
          var G__16488__1 = function(result) {
            return rf.call(null, result);
          };
          var G__16488__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3651__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3651__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3651__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__16488 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16488__0.call(this);
              case 1:
                return G__16488__1.call(this, result);
              case 2:
                return G__16488__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16488.cljs$core$IFn$_invoke$arity$0 = G__16488__0;
          G__16488.cljs$core$IFn$_invoke$arity$1 = G__16488__1;
          G__16488.cljs$core$IFn$_invoke$arity$2 = G__16488__2;
          return G__16488;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3651__auto__ = s;
          if (and__3651__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3651__auto__;
          }
        }())) {
          var G__16489 = pred__$1;
          var G__16490 = cljs.core.rest.call(null, s);
          pred__$1 = G__16489;
          coll__$1 = G__16490;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__16491__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__16491 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16491__delegate.call(this, c1, c2, colls);
    };
    G__16491.cljs$lang$maxFixedArity = 2;
    G__16491.cljs$lang$applyTo = function(arglist__16492) {
      var c1 = cljs.core.first(arglist__16492);
      arglist__16492 = cljs.core.next(arglist__16492);
      var c2 = cljs.core.first(arglist__16492);
      var colls = cljs.core.rest(arglist__16492);
      return G__16491__delegate(c1, c2, colls);
    };
    G__16491.cljs$core$IFn$_invoke$arity$variadic = G__16491__delegate;
    return G__16491;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__16493__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__16493 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16493__delegate.call(this, f, colls);
    };
    G__16493.cljs$lang$maxFixedArity = 1;
    G__16493.cljs$lang$applyTo = function(arglist__16494) {
      var f = cljs.core.first(arglist__16494);
      var colls = cljs.core.rest(arglist__16494);
      return G__16493__delegate(f, colls);
    };
    G__16493.cljs$core$IFn$_invoke$arity$variadic = G__16493__delegate;
    return G__16493;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__16495 = null;
        var G__16495__0 = function() {
          return rf.call(null);
        };
        var G__16495__1 = function(result) {
          return rf.call(null, result);
        };
        var G__16495__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__16495 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16495__0.call(this);
            case 1:
              return G__16495__1.call(this, result);
            case 2:
              return G__16495__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16495.cljs$core$IFn$_invoke$arity$0 = G__16495__0;
        G__16495.cljs$core$IFn$_invoke$arity$1 = G__16495__1;
        G__16495.cljs$core$IFn$_invoke$arity$2 = G__16495__2;
        return G__16495;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4533__auto___16496 = size;
          var i_16497 = 0;
          while (true) {
            if (i_16497 < n__4533__auto___16496) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_16497)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_16497));
              } else {
              }
              var G__16498 = i_16497 + 1;
              i_16497 = G__16498;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__16499_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__16499_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__16502 = to;
        if (G__16502) {
          var bit__4320__auto__ = G__16502.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4320__auto__ || G__16502.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__16503 = to;
      if (G__16503) {
        var bit__4320__auto__ = G__16503.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4320__auto__ || G__16503.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__16504__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__16504 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16504__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__16504.cljs$lang$maxFixedArity = 4;
    G__16504.cljs$lang$applyTo = function(arglist__16505) {
      var f = cljs.core.first(arglist__16505);
      arglist__16505 = cljs.core.next(arglist__16505);
      var c1 = cljs.core.first(arglist__16505);
      arglist__16505 = cljs.core.next(arglist__16505);
      var c2 = cljs.core.first(arglist__16505);
      arglist__16505 = cljs.core.next(arglist__16505);
      var c3 = cljs.core.first(arglist__16505);
      var colls = cljs.core.rest(arglist__16505);
      return G__16504__delegate(f, c1, c2, c3, colls);
    };
    G__16504.cljs$core$IFn$_invoke$arity$variadic = G__16504__delegate;
    return G__16504;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__16507 = m__$1;
          if (G__16507) {
            var bit__4327__auto__ = G__16507.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4327__auto__ || G__16507.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__16507.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16507);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__16507);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__16508 = sentinel;
            var G__16509 = m__$2;
            var G__16510 = cljs.core.next.call(null, ks__$1);
            sentinel = G__16508;
            m__$1 = G__16509;
            ks__$1 = G__16510;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__16511, v) {
  var vec__16513 = p__16511;
  var k = cljs.core.nth.call(null, vec__16513, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__16513, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__16514, f) {
    var vec__16524 = p__16514;
    var k = cljs.core.nth.call(null, vec__16524, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16524, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__16515, f, a) {
    var vec__16525 = p__16515;
    var k = cljs.core.nth.call(null, vec__16525, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16525, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__16516, f, a, b) {
    var vec__16526 = p__16516;
    var k = cljs.core.nth.call(null, vec__16526, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16526, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__16517, f, a, b, c) {
    var vec__16527 = p__16517;
    var k = cljs.core.nth.call(null, vec__16527, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__16527, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__16529__delegate = function(m, p__16518, f, a, b, c, args) {
      var vec__16528 = p__16518;
      var k = cljs.core.nth.call(null, vec__16528, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__16528, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__16529 = function(m, p__16518, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__16529__delegate.call(this, m, p__16518, f, a, b, c, args);
    };
    G__16529.cljs$lang$maxFixedArity = 6;
    G__16529.cljs$lang$applyTo = function(arglist__16530) {
      var m = cljs.core.first(arglist__16530);
      arglist__16530 = cljs.core.next(arglist__16530);
      var p__16518 = cljs.core.first(arglist__16530);
      arglist__16530 = cljs.core.next(arglist__16530);
      var f = cljs.core.first(arglist__16530);
      arglist__16530 = cljs.core.next(arglist__16530);
      var a = cljs.core.first(arglist__16530);
      arglist__16530 = cljs.core.next(arglist__16530);
      var b = cljs.core.first(arglist__16530);
      arglist__16530 = cljs.core.next(arglist__16530);
      var c = cljs.core.first(arglist__16530);
      var args = cljs.core.rest(arglist__16530);
      return G__16529__delegate(m, p__16518, f, a, b, c, args);
    };
    G__16529.cljs$core$IFn$_invoke$arity$variadic = G__16529__delegate;
    return G__16529;
  }();
  update_in = function(m, p__16518, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__16518, f);
      case 4:
        return update_in__4.call(this, m, p__16518, f, a);
      case 5:
        return update_in__5.call(this, m, p__16518, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__16518, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__16518, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4243__auto__, writer__4244__auto__, opts__4245__auto__) {
  return cljs.core._write.call(null, writer__4244__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__16531 = ll - 5;
      var G__16532 = r;
      ll = G__16531;
      ret = G__16532;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__16533 = cljs.core.pv_aget.call(null, node, 0);
      var G__16534 = level - 5;
      node = G__16533;
      level = G__16534;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__16535 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__16536 = level - 5;
        node = G__16535;
        level = G__16536;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__16538 = j + 1;
              var G__16539 = init__$3;
              j = G__16538;
              init__$2 = G__16539;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16540 = i + len;
        var G__16541 = init__$2;
        i = G__16540;
        init__$1 = G__16541;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__16542 = j + 1;
              var G__16543 = init__$3;
              j = G__16542;
              init__$2 = G__16543;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16544 = i + len;
        var G__16545 = init__$2;
        i = G__16544;
        init__$1 = G__16545;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4533__auto___16546 = len;
    var i_16547 = 0;
    while (true) {
      if (i_16547 < n__4533__auto___16546) {
        new_tail[i_16547] = self__.tail[i_16547];
        var G__16548 = i_16547 + 1;
        i_16547 = G__16548;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__16549 = null;
  var G__16549__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16549__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16549 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16549__2.call(this, self__, k);
      case 3:
        return G__16549__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16549.cljs$core$IFn$_invoke$arity$2 = G__16549__2;
  G__16549.cljs$core$IFn$_invoke$arity$3 = G__16549__3;
  return G__16549;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args16537) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16537)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__16550 = i + 1;
        var G__16551 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__16550;
        out = G__16551;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__16552) {
    var args = cljs.core.seq(arglist__16552);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3970__auto__ = self__.end;
    var y__3971__auto__ = v_pos + 1;
    return x__3970__auto__ > y__3971__auto__ ? x__3970__auto__ : y__3971__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__16554 = null;
  var G__16554__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16554__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16554 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16554__2.call(this, self__, k);
      case 3:
        return G__16554__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16554.cljs$core$IFn$_invoke$arity$2 = G__16554__2;
  G__16554.cljs$core$IFn$_invoke$arity$3 = G__16554__3;
  return G__16554;
}();
cljs.core.Subvec.prototype.apply = function(self__, args16553) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16553)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__16555 = meta;
      var G__16556 = v.v;
      var G__16557 = v.start + start;
      var G__16558 = v.start + end;
      var G__16559 = __hash;
      meta = G__16555;
      v = G__16556;
      start = G__16557;
      end = G__16558;
      __hash = G__16559;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj16563 = {};
    return obj16563;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__16564 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__16565 = level - 5;
        node = G__16564;
        level = G__16565;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__16567 = null;
  var G__16567__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16567__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16567 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16567__2.call(this, self__, k);
      case 3:
        return G__16567__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16567.cljs$core$IFn$_invoke$arity$2 = G__16567__2;
  G__16567.cljs$core$IFn$_invoke$arity$3 = G__16567__3;
  return G__16567;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args16566) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16566)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3663__auto__ = self__.front;
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3663__auto__ = self__.rear;
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__16568 = i + incr;
        i = G__16568;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__16569 = i + 1;
      var G__16570 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__16569;
      out = G__16570;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj16574 = {};
    return obj16574;
  }();
  var l = ks.length;
  var i_16575 = 0;
  while (true) {
    if (i_16575 < l) {
      var k_16576 = ks[i_16575];
      new_obj[k_16576] = obj[k_16576];
      var G__16577 = i_16575 + 1;
      i_16575 = G__16577;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16580 = cljs.core.rest.call(null, keys__$1);
        var G__16581 = init__$2;
        keys__$1 = G__16580;
        init__$1 = G__16581;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__16578_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16578_SHARP_, self__.strobj[p1__16578_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__16582 = null;
  var G__16582__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16582__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16582 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16582__2.call(this, self__, k);
      case 3:
        return G__16582__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16582.cljs$core$IFn$_invoke$arity$2 = G__16582__2;
  G__16582.cljs$core$IFn$_invoke$arity$3 = G__16582__3;
  return G__16582;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args16579) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16579)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj16584 = {};
  return obj16584;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__16585 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__16585, 0, null);
    var v = cljs.core.nth.call(null, vec__16585, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__16586 = i + 2;
        i = G__16586;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__16587 = i + 2;
        i = G__16587;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__16588 = i + 2;
        i = G__16588;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__16589 = i + 2;
        i = G__16589;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__16590 = i + 2;
        i = G__16590;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_16591 = 0;
  while (true) {
    if (i_16591 < l) {
      narr[i_16591] = arr[i_16591];
      var G__16592 = i_16591 + 1;
      i_16591 = G__16592;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16594 = cljs.core.seq.call(null, coll);
  var chunk__16595 = null;
  var count__16596 = 0;
  var i__16597 = 0;
  while (true) {
    if (i__16597 < count__16596) {
      var vec__16598 = cljs.core._nth.call(null, chunk__16595, i__16597);
      var k = cljs.core.nth.call(null, vec__16598, 0, null);
      var v = cljs.core.nth.call(null, vec__16598, 1, null);
      f.call(null, v, k);
      var G__16604 = seq__16594;
      var G__16605 = chunk__16595;
      var G__16606 = count__16596;
      var G__16607 = i__16597 + 1;
      seq__16594 = G__16604;
      chunk__16595 = G__16605;
      count__16596 = G__16606;
      i__16597 = G__16607;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16594);
      if (temp__4126__auto__) {
        var seq__16594__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16594__$1)) {
          var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16594__$1);
          var G__16608 = cljs.core.chunk_rest.call(null, seq__16594__$1);
          var G__16609 = c__4433__auto__;
          var G__16610 = cljs.core.count.call(null, c__4433__auto__);
          var G__16611 = 0;
          seq__16594 = G__16608;
          chunk__16595 = G__16609;
          count__16596 = G__16610;
          i__16597 = G__16611;
          continue;
        } else {
          var vec__16599 = cljs.core.first.call(null, seq__16594__$1);
          var k = cljs.core.nth.call(null, vec__16599, 0, null);
          var v = cljs.core.nth.call(null, vec__16599, 1, null);
          f.call(null, v, k);
          var G__16612 = cljs.core.next.call(null, seq__16594__$1);
          var G__16613 = null;
          var G__16614 = 0;
          var G__16615 = 0;
          seq__16594 = G__16612;
          chunk__16595 = G__16613;
          count__16596 = G__16614;
          i__16597 = G__16615;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16616 = i + 2;
        var G__16617 = init__$2;
        i = G__16616;
        init__$1 = G__16617;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__16600 = other;
    if (G__16600) {
      var bit__4320__auto__ = G__16600.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4320__auto__ || G__16600.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__16618 = i + 2;
              i = G__16618;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj16602 = {};
    return obj16602;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__16619 = s + 2;
            var G__16620 = d;
            s = G__16619;
            d = G__16620;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__16621 = s + 2;
            var G__16622 = d + 2;
            s = G__16621;
            d = G__16622;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__16603 = cljs.core.aclone.call(null, self__.arr);
        G__16603[idx + 1] = v;
        return G__16603;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16623 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16624 = cljs.core.next.call(null, es);
          ret = G__16623;
          es = G__16624;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__16625 = null;
  var G__16625__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16625__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16625 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16625__2.call(this, self__, k);
      case 3:
        return G__16625__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16625.cljs$core$IFn$_invoke$arity$2 = G__16625__2;
  G__16625.cljs$core$IFn$_invoke$arity$3 = G__16625__3;
  return G__16625;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args16593) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16593)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16626 = i + 2;
        var G__16627 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__16626;
        ret = G__16627;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__16628_16630 = self__.arr;
      G__16628_16630.pop();
      G__16628_16630.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__16629 = o;
      if (G__16629) {
        var bit__4327__auto__ = G__16629.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4327__auto__ || G__16629.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16629.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16629);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16629);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16631 = cljs.core.next.call(null, es);
          var G__16632 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16631;
          tcoll__$2 = G__16632;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__16633 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__16634 = i + 2;
      out = G__16633;
      i = G__16634;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4243__auto__, writer__4244__auto__, opts__4245__auto__) {
  return cljs.core._write.call(null, writer__4244__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__16637 = cljs.core.aclone.call(null, arr);
    G__16637[i] = a;
    return G__16637;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__16638 = cljs.core.aclone.call(null, arr);
    G__16638[i] = a;
    G__16638[j] = b;
    return G__16638;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__16639 = i + 2;
        var G__16640 = init__$2;
        i = G__16639;
        init__$1 = G__16640;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_16641 = 0;
        var j_16642 = 0;
        while (true) {
          if (i_16641 < 32) {
            if ((self__.bitmap >>> i_16641 & 1) === 0) {
              var G__16643 = i_16641 + 1;
              var G__16644 = j_16642;
              i_16641 = G__16643;
              j_16642 = G__16644;
              continue;
            } else {
              nodes[i_16641] = !(self__.arr[j_16642] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_16642]), self__.arr[j_16642], self__.arr[j_16642 + 1], added_leaf_QMARK_) : self__.arr[j_16642 + 1];
              var G__16645 = i_16641 + 1;
              var G__16646 = j_16642 + 2;
              i_16641 = G__16645;
              j_16642 = G__16646;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_16647 = 0;
      var j_16648 = 0;
      while (true) {
        if (i_16647 < 32) {
          if ((self__.bitmap >>> i_16647 & 1) === 0) {
            var G__16649 = i_16647 + 1;
            var G__16650 = j_16648;
            i_16647 = G__16649;
            j_16648 = G__16650;
            continue;
          } else {
            nodes[i_16647] = !(self__.arr[j_16648] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_16648]), self__.arr[j_16648], self__.arr[j_16648 + 1], added_leaf_QMARK_) : self__.arr[j_16648 + 1];
            var G__16651 = i_16647 + 1;
            var G__16652 = j_16648 + 2;
            i_16647 = G__16651;
            j_16648 = G__16652;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__16653 = i + 1;
        var G__16654 = j + 2;
        var G__16655 = bitmap | 1 << i;
        i = G__16653;
        j = G__16654;
        bitmap = G__16655;
        continue;
      } else {
        var G__16656 = i + 1;
        var G__16657 = j;
        var G__16658 = bitmap;
        i = G__16656;
        j = G__16657;
        bitmap = G__16658;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__16659 = i + 1;
          var G__16660 = init__$2;
          i = G__16659;
          init__$1 = G__16660;
          continue;
        }
      } else {
        var G__16661 = i + 1;
        var G__16662 = init__$1;
        i = G__16661;
        init__$1 = G__16662;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__16663 = i + 2;
        i = G__16663;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__16664 = j + 2;
                j = G__16664;
                continue;
              }
            } else {
              var G__16665 = j + 2;
              j = G__16665;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__16666 = j + 1;
              j = G__16666;
              continue;
            }
          } else {
            var G__16667 = j + 1;
            j = G__16667;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16669 = cljs.core.seq.call(null, coll);
  var chunk__16670 = null;
  var count__16671 = 0;
  var i__16672 = 0;
  while (true) {
    if (i__16672 < count__16671) {
      var vec__16673 = cljs.core._nth.call(null, chunk__16670, i__16672);
      var k = cljs.core.nth.call(null, vec__16673, 0, null);
      var v = cljs.core.nth.call(null, vec__16673, 1, null);
      f.call(null, v, k);
      var G__16677 = seq__16669;
      var G__16678 = chunk__16670;
      var G__16679 = count__16671;
      var G__16680 = i__16672 + 1;
      seq__16669 = G__16677;
      chunk__16670 = G__16678;
      count__16671 = G__16679;
      i__16672 = G__16680;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16669);
      if (temp__4126__auto__) {
        var seq__16669__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16669__$1)) {
          var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16669__$1);
          var G__16681 = cljs.core.chunk_rest.call(null, seq__16669__$1);
          var G__16682 = c__4433__auto__;
          var G__16683 = cljs.core.count.call(null, c__4433__auto__);
          var G__16684 = 0;
          seq__16669 = G__16681;
          chunk__16670 = G__16682;
          count__16671 = G__16683;
          i__16672 = G__16684;
          continue;
        } else {
          var vec__16674 = cljs.core.first.call(null, seq__16669__$1);
          var k = cljs.core.nth.call(null, vec__16674, 0, null);
          var v = cljs.core.nth.call(null, vec__16674, 1, null);
          f.call(null, v, k);
          var G__16685 = cljs.core.next.call(null, seq__16669__$1);
          var G__16686 = null;
          var G__16687 = 0;
          var G__16688 = 0;
          seq__16669 = G__16685;
          chunk__16670 = G__16686;
          count__16671 = G__16687;
          i__16672 = G__16688;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj16676 = {};
    return obj16676;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16689 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16690 = cljs.core.next.call(null, es);
          ret = G__16689;
          es = G__16690;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__16691 = null;
  var G__16691__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16691__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16691 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16691__2.call(this, self__, k);
      case 3:
        return G__16691__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16691.cljs$core$IFn$_invoke$arity$2 = G__16691__2;
  G__16691.cljs$core$IFn$_invoke$arity$3 = G__16691__3;
  return G__16691;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args16668) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16668)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__16692 = i + 1;
      var G__16693 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__16692;
      out = G__16693;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__16694 = o;
      if (G__16694) {
        var bit__4327__auto__ = G__16694.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4327__auto__ || G__16694.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16694.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16694);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__16694);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16695 = cljs.core.next.call(null, es);
          var G__16696 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__16695;
          tcoll__$1 = G__16696;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__16697 = ascending_QMARK_ ? t.left : t.right;
      var G__16698 = cljs.core.conj.call(null, stack__$1, t);
      t = G__16697;
      stack__$1 = G__16698;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__16700 = null;
  var G__16700__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16700__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16700 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16700__2.call(this, self__, k);
      case 3:
        return G__16700__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16700.cljs$core$IFn$_invoke$arity$2 = G__16700__2;
  G__16700.cljs$core$IFn$_invoke$arity$3 = G__16700__3;
  return G__16700;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args16699) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16699)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__16702 = null;
  var G__16702__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16702__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16702 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16702__2.call(this, self__, k);
      case 3:
        return G__16702__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16702.cljs$core$IFn$_invoke$arity$2 = G__16702__2;
  G__16702.cljs$core$IFn$_invoke$arity$3 = G__16702__3;
  return G__16702;
}();
cljs.core.RedNode.prototype.apply = function(self__, args16701) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16701)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.RedNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.RedNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app__$1, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.BlackNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.BlackNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app__$1, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16704 = cljs.core.seq.call(null, coll);
  var chunk__16705 = null;
  var count__16706 = 0;
  var i__16707 = 0;
  while (true) {
    if (i__16707 < count__16706) {
      var vec__16708 = cljs.core._nth.call(null, chunk__16705, i__16707);
      var k = cljs.core.nth.call(null, vec__16708, 0, null);
      var v = cljs.core.nth.call(null, vec__16708, 1, null);
      f.call(null, v, k);
      var G__16710 = seq__16704;
      var G__16711 = chunk__16705;
      var G__16712 = count__16706;
      var G__16713 = i__16707 + 1;
      seq__16704 = G__16710;
      chunk__16705 = G__16711;
      count__16706 = G__16712;
      i__16707 = G__16713;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16704);
      if (temp__4126__auto__) {
        var seq__16704__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16704__$1)) {
          var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16704__$1);
          var G__16714 = cljs.core.chunk_rest.call(null, seq__16704__$1);
          var G__16715 = c__4433__auto__;
          var G__16716 = cljs.core.count.call(null, c__4433__auto__);
          var G__16717 = 0;
          seq__16704 = G__16714;
          chunk__16705 = G__16715;
          count__16706 = G__16716;
          i__16707 = G__16717;
          continue;
        } else {
          var vec__16709 = cljs.core.first.call(null, seq__16704__$1);
          var k = cljs.core.nth.call(null, vec__16709, 0, null);
          var v = cljs.core.nth.call(null, vec__16709, 1, null);
          f.call(null, v, k);
          var G__16718 = cljs.core.next.call(null, seq__16704__$1);
          var G__16719 = null;
          var G__16720 = 0;
          var G__16721 = 0;
          seq__16704 = G__16718;
          chunk__16705 = G__16719;
          count__16706 = G__16720;
          i__16707 = G__16721;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__16722 = t.left;
          t = G__16722;
          continue;
        } else {
          var G__16723 = t.right;
          t = G__16723;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__16724 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__16725 = cljs.core.next.call(null, es);
          ret = G__16724;
          es = G__16725;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__16726 = null;
  var G__16726__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16726__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16726 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16726__2.call(this, self__, k);
      case 3:
        return G__16726__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16726.cljs$core$IFn$_invoke$arity$2 = G__16726__2;
  G__16726.cljs$core$IFn$_invoke$arity$3 = G__16726__3;
  return G__16726;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args16703) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16703)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__16727 = cljs.core.conj.call(null, stack, t);
              var G__16728 = t.left;
              stack = G__16727;
              t = G__16728;
              continue;
            } else {
              var G__16729 = stack;
              var G__16730 = t.right;
              stack = G__16729;
              t = G__16730;
              continue;
            }
          } else {
            if (c > 0) {
              var G__16731 = cljs.core.conj.call(null, stack, t);
              var G__16732 = t.right;
              stack = G__16731;
              t = G__16732;
              continue;
            } else {
              var G__16733 = stack;
              var G__16734 = t.left;
              stack = G__16733;
              t = G__16734;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__16735 = cljs.core.nnext.call(null, in$);
        var G__16736 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16735;
        out = G__16736;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__16737) {
    var keyvals = cljs.core.seq(arglist__16737);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__16738) {
    var keyvals = cljs.core.seq(arglist__16738);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj16742 = {};
      return obj16742;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__16743 = cljs.core.nnext.call(null, kvs);
        kvs = G__16743;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__16744) {
    var keyvals = cljs.core.seq(arglist__16744);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__16745 = cljs.core.nnext.call(null, in$);
        var G__16746 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16745;
        out = G__16746;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__16747) {
    var keyvals = cljs.core.seq(arglist__16747);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__16748 = cljs.core.nnext.call(null, in$);
        var G__16749 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16748;
        out = G__16749;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__16750) {
    var comparator = cljs.core.first(arglist__16750);
    var keyvals = cljs.core.rest(arglist__16750);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16751 = self__.mseq;
    if (G__16751) {
      var bit__4327__auto__ = G__16751.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4327__auto__ || G__16751.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16751.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16751);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16751);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16752 = self__.mseq;
    if (G__16752) {
      var bit__4327__auto__ = G__16752.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4327__auto__ || G__16752.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16752.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16752);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16752);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16753 = self__.mseq;
    if (G__16753) {
      var bit__4327__auto__ = G__16753.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4327__auto__ || G__16753.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16753.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16753);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16753);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16754 = self__.mseq;
    if (G__16754) {
      var bit__4327__auto__ = G__16754.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4327__auto__ || G__16754.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16754.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16754);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16754);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__16755_SHARP_, p2__16756_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3663__auto__ = p1__16755_SHARP_;
          if (cljs.core.truth_(or__3663__auto__)) {
            return or__3663__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__16756_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__16757) {
    var maps = cljs.core.seq(arglist__16757);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3663__auto__ = m1;
            if (cljs.core.truth_(or__3663__auto__)) {
              return or__3663__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__16758) {
    var f = cljs.core.first(arglist__16758);
    var maps = cljs.core.rest(arglist__16758);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__16759 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__16760 = cljs.core.next.call(null, keys);
      ret = G__16759;
      keys = G__16760;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16763 = cljs.core.seq.call(null, coll);
  var chunk__16764 = null;
  var count__16765 = 0;
  var i__16766 = 0;
  while (true) {
    if (i__16766 < count__16765) {
      var vec__16767 = cljs.core._nth.call(null, chunk__16764, i__16766);
      var k = cljs.core.nth.call(null, vec__16767, 0, null);
      var v = cljs.core.nth.call(null, vec__16767, 1, null);
      f.call(null, v, k);
      var G__16769 = seq__16763;
      var G__16770 = chunk__16764;
      var G__16771 = count__16765;
      var G__16772 = i__16766 + 1;
      seq__16763 = G__16769;
      chunk__16764 = G__16770;
      count__16765 = G__16771;
      i__16766 = G__16772;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16763);
      if (temp__4126__auto__) {
        var seq__16763__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16763__$1)) {
          var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16763__$1);
          var G__16773 = cljs.core.chunk_rest.call(null, seq__16763__$1);
          var G__16774 = c__4433__auto__;
          var G__16775 = cljs.core.count.call(null, c__4433__auto__);
          var G__16776 = 0;
          seq__16763 = G__16773;
          chunk__16764 = G__16774;
          count__16765 = G__16775;
          i__16766 = G__16776;
          continue;
        } else {
          var vec__16768 = cljs.core.first.call(null, seq__16763__$1);
          var k = cljs.core.nth.call(null, vec__16768, 0, null);
          var v = cljs.core.nth.call(null, vec__16768, 1, null);
          f.call(null, v, k);
          var G__16777 = cljs.core.next.call(null, seq__16763__$1);
          var G__16778 = null;
          var G__16779 = 0;
          var G__16780 = 0;
          seq__16763 = G__16777;
          chunk__16764 = G__16778;
          count__16765 = G__16779;
          i__16766 = G__16780;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16761_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16761_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__16781 = null;
  var G__16781__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16781__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16781 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16781__2.call(this, self__, k);
      case 3:
        return G__16781__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16781.cljs$core$IFn$_invoke$arity$2 = G__16781__2;
  G__16781.cljs$core$IFn$_invoke$arity$3 = G__16781__3;
  return G__16781;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args16762) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16762)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16782 = i + 1;
        var G__16783 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__16782;
        out = G__16783;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__16784 = i + 1;
        var G__16785 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__16784;
        out = G__16785;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__16787 = null;
  var G__16787__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__16787__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__16787 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16787__2.call(this, self__, k);
      case 3:
        return G__16787__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16787.cljs$core$IFn$_invoke$arity$2 = G__16787__2;
  G__16787.cljs$core$IFn$_invoke$arity$3 = G__16787__3;
  return G__16787;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args16786) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16786)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16790 = cljs.core.seq.call(null, coll);
  var chunk__16791 = null;
  var count__16792 = 0;
  var i__16793 = 0;
  while (true) {
    if (i__16793 < count__16792) {
      var vec__16794 = cljs.core._nth.call(null, chunk__16791, i__16793);
      var k = cljs.core.nth.call(null, vec__16794, 0, null);
      var v = cljs.core.nth.call(null, vec__16794, 1, null);
      f.call(null, v, k);
      var G__16796 = seq__16790;
      var G__16797 = chunk__16791;
      var G__16798 = count__16792;
      var G__16799 = i__16793 + 1;
      seq__16790 = G__16796;
      chunk__16791 = G__16797;
      count__16792 = G__16798;
      i__16793 = G__16799;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16790);
      if (temp__4126__auto__) {
        var seq__16790__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16790__$1)) {
          var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16790__$1);
          var G__16800 = cljs.core.chunk_rest.call(null, seq__16790__$1);
          var G__16801 = c__4433__auto__;
          var G__16802 = cljs.core.count.call(null, c__4433__auto__);
          var G__16803 = 0;
          seq__16790 = G__16800;
          chunk__16791 = G__16801;
          count__16792 = G__16802;
          i__16793 = G__16803;
          continue;
        } else {
          var vec__16795 = cljs.core.first.call(null, seq__16790__$1);
          var k = cljs.core.nth.call(null, vec__16795, 0, null);
          var v = cljs.core.nth.call(null, vec__16795, 1, null);
          f.call(null, v, k);
          var G__16804 = cljs.core.next.call(null, seq__16790__$1);
          var G__16805 = null;
          var G__16806 = 0;
          var G__16807 = 0;
          seq__16790 = G__16804;
          chunk__16791 = G__16805;
          count__16792 = G__16806;
          i__16793 = G__16807;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16788_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16788_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__16808 = null;
  var G__16808__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16808__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16808 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16808__2.call(this, self__, k);
      case 3:
        return G__16808__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16808.cljs$core$IFn$_invoke$arity$2 = G__16808__2;
  G__16808.cljs$core$IFn$_invoke$arity$3 = G__16808__3;
  return G__16808;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args16789) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16789)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4527__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4527__auto__.length) {
        var G__16809 = i + 1;
        var G__16810 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__16809;
        res = G__16810;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__16811 = cljs.core._next.call(null, in$__$1);
          var G__16812 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__16811;
          out = G__16812;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__16813__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__16813 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16813__delegate.call(this, keys);
    };
    G__16813.cljs$lang$maxFixedArity = 0;
    G__16813.cljs$lang$applyTo = function(arglist__16814) {
      var keys = cljs.core.seq(arglist__16814);
      return G__16813__delegate(keys);
    };
    G__16813.cljs$core$IFn$_invoke$arity$variadic = G__16813__delegate;
    return G__16813;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__16815) {
    var keys = cljs.core.seq(arglist__16815);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__16816) {
    var comparator = cljs.core.first(arglist__16816);
    var keys = cljs.core.rest(arglist__16816);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__16817_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__16817_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__16817_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__16818_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__16818_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__16818_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__16825, seen__$1) {
        while (true) {
          var vec__16826 = p__16825;
          var f = cljs.core.nth.call(null, vec__16826, 0, null);
          var xs__$1 = vec__16826;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__16827 = cljs.core.rest.call(null, s);
              var G__16828 = seen__$1;
              p__16825 = G__16827;
              seen__$1 = G__16828;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__16829 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__16830 = cljs.core.next.call(null, s__$1);
      ret = G__16829;
      s__$1 = G__16830;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__16832 = x;
    if (G__16832) {
      var bit__4320__auto__ = G__16832.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4320__auto__ || G__16832.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__16833 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__16834 = cljs.core.next.call(null, ks);
      var G__16835 = cljs.core.next.call(null, vs);
      map = G__16833;
      ks = G__16834;
      vs = G__16835;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__16838__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16836_SHARP_, p2__16837_SHARP_) {
        return max_key.call(null, k, p1__16836_SHARP_, p2__16837_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__16838 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16838__delegate.call(this, k, x, y, more);
    };
    G__16838.cljs$lang$maxFixedArity = 3;
    G__16838.cljs$lang$applyTo = function(arglist__16839) {
      var k = cljs.core.first(arglist__16839);
      arglist__16839 = cljs.core.next(arglist__16839);
      var x = cljs.core.first(arglist__16839);
      arglist__16839 = cljs.core.next(arglist__16839);
      var y = cljs.core.first(arglist__16839);
      var more = cljs.core.rest(arglist__16839);
      return G__16838__delegate(k, x, y, more);
    };
    G__16838.cljs$core$IFn$_invoke$arity$variadic = G__16838__delegate;
    return G__16838;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__16842__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16840_SHARP_, p2__16841_SHARP_) {
        return min_key.call(null, k, p1__16840_SHARP_, p2__16841_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__16842 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16842__delegate.call(this, k, x, y, more);
    };
    G__16842.cljs$lang$maxFixedArity = 3;
    G__16842.cljs$lang$applyTo = function(arglist__16843) {
      var k = cljs.core.first(arglist__16843);
      arglist__16843 = cljs.core.next(arglist__16843);
      var x = cljs.core.first(arglist__16843);
      arglist__16843 = cljs.core.next(arglist__16843);
      var y = cljs.core.first(arglist__16843);
      var more = cljs.core.rest(arglist__16843);
      return G__16842__delegate(k, x, y, more);
    };
    G__16842.cljs$core$IFn$_invoke$arity$variadic = G__16842__delegate;
    return G__16842;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__16844 = null;
          var G__16844__0 = function() {
            return rf.call(null);
          };
          var G__16844__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__16844__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__16844 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16844__0.call(this);
              case 1:
                return G__16844__1.call(this, result);
              case 2:
                return G__16844__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16844.cljs$core$IFn$_invoke$arity$0 = G__16844__0;
          G__16844.cljs$core$IFn$_invoke$arity$1 = G__16844__1;
          G__16844.cljs$core$IFn$_invoke$arity$2 = G__16844__2;
          return G__16844;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__16845 = null;
        var G__16845__0 = function() {
          return rf.call(null);
        };
        var G__16845__1 = function(result) {
          return rf.call(null, result);
        };
        var G__16845__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__16845 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16845__0.call(this);
            case 1:
              return G__16845__1.call(this, result);
            case 2:
              return G__16845__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16845.cljs$core$IFn$_invoke$arity$0 = G__16845__0;
        G__16845.cljs$core$IFn$_invoke$arity$1 = G__16845__1;
        G__16845.cljs$core$IFn$_invoke$arity$2 = G__16845__2;
        return G__16845;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16848 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16848, 0, null);
        var s = vec__16848;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16849 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16849, 0, null);
      var s = vec__16849;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16852 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16852, 0, null);
        var s = vec__16852;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16853 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16853, 0, null);
      var s = vec__16853;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__16854 = i + self__.step;
        var G__16855 = ret__$1;
        i = G__16854;
        ret = G__16855;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__16856 = null;
          var G__16856__0 = function() {
            return rf.call(null);
          };
          var G__16856__1 = function(result) {
            return rf.call(null, result);
          };
          var G__16856__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__16856 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16856__0.call(this);
              case 1:
                return G__16856__1.call(this, result);
              case 2:
                return G__16856__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16856.cljs$core$IFn$_invoke$arity$0 = G__16856__0;
          G__16856.cljs$core$IFn$_invoke$arity$1 = G__16856__1;
          G__16856.cljs$core$IFn$_invoke$arity$2 = G__16856__2;
          return G__16856;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__16858 = null;
          var G__16858__0 = function() {
            return rf.call(null);
          };
          var G__16858__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__16858__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__16858 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16858__0.call(this);
              case 1:
                return G__16858__1.call(this, result);
              case 2:
                return G__16858__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16858.cljs$core$IFn$_invoke$arity$0 = G__16858__0;
          G__16858.cljs$core$IFn$_invoke$arity$1 = G__16858__1;
          G__16858.cljs$core$IFn$_invoke$arity$2 = G__16858__2;
          return G__16858;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__16857_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__16857_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__16869 = null;
      var G__16869__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__16869__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__16869__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__16869__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__16869__4 = function() {
        var G__16870__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__16870 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16870__delegate.call(this, x, y, z, args);
        };
        G__16870.cljs$lang$maxFixedArity = 3;
        G__16870.cljs$lang$applyTo = function(arglist__16871) {
          var x = cljs.core.first(arglist__16871);
          arglist__16871 = cljs.core.next(arglist__16871);
          var y = cljs.core.first(arglist__16871);
          arglist__16871 = cljs.core.next(arglist__16871);
          var z = cljs.core.first(arglist__16871);
          var args = cljs.core.rest(arglist__16871);
          return G__16870__delegate(x, y, z, args);
        };
        G__16870.cljs$core$IFn$_invoke$arity$variadic = G__16870__delegate;
        return G__16870;
      }();
      G__16869 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16869__0.call(this);
          case 1:
            return G__16869__1.call(this, x);
          case 2:
            return G__16869__2.call(this, x, y);
          case 3:
            return G__16869__3.call(this, x, y, z);
          default:
            return G__16869__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16869.cljs$lang$maxFixedArity = 3;
      G__16869.cljs$lang$applyTo = G__16869__4.cljs$lang$applyTo;
      G__16869.cljs$core$IFn$_invoke$arity$0 = G__16869__0;
      G__16869.cljs$core$IFn$_invoke$arity$1 = G__16869__1;
      G__16869.cljs$core$IFn$_invoke$arity$2 = G__16869__2;
      G__16869.cljs$core$IFn$_invoke$arity$3 = G__16869__3;
      G__16869.cljs$core$IFn$_invoke$arity$variadic = G__16869__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16869;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__16872 = null;
      var G__16872__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__16872__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__16872__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__16872__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__16872__4 = function() {
        var G__16873__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__16873 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16873__delegate.call(this, x, y, z, args);
        };
        G__16873.cljs$lang$maxFixedArity = 3;
        G__16873.cljs$lang$applyTo = function(arglist__16874) {
          var x = cljs.core.first(arglist__16874);
          arglist__16874 = cljs.core.next(arglist__16874);
          var y = cljs.core.first(arglist__16874);
          arglist__16874 = cljs.core.next(arglist__16874);
          var z = cljs.core.first(arglist__16874);
          var args = cljs.core.rest(arglist__16874);
          return G__16873__delegate(x, y, z, args);
        };
        G__16873.cljs$core$IFn$_invoke$arity$variadic = G__16873__delegate;
        return G__16873;
      }();
      G__16872 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16872__0.call(this);
          case 1:
            return G__16872__1.call(this, x);
          case 2:
            return G__16872__2.call(this, x, y);
          case 3:
            return G__16872__3.call(this, x, y, z);
          default:
            return G__16872__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16872.cljs$lang$maxFixedArity = 3;
      G__16872.cljs$lang$applyTo = G__16872__4.cljs$lang$applyTo;
      G__16872.cljs$core$IFn$_invoke$arity$0 = G__16872__0;
      G__16872.cljs$core$IFn$_invoke$arity$1 = G__16872__1;
      G__16872.cljs$core$IFn$_invoke$arity$2 = G__16872__2;
      G__16872.cljs$core$IFn$_invoke$arity$3 = G__16872__3;
      G__16872.cljs$core$IFn$_invoke$arity$variadic = G__16872__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16872;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__16875 = null;
      var G__16875__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__16875__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__16875__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__16875__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__16875__4 = function() {
        var G__16876__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__16876 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16876__delegate.call(this, x, y, z, args);
        };
        G__16876.cljs$lang$maxFixedArity = 3;
        G__16876.cljs$lang$applyTo = function(arglist__16877) {
          var x = cljs.core.first(arglist__16877);
          arglist__16877 = cljs.core.next(arglist__16877);
          var y = cljs.core.first(arglist__16877);
          arglist__16877 = cljs.core.next(arglist__16877);
          var z = cljs.core.first(arglist__16877);
          var args = cljs.core.rest(arglist__16877);
          return G__16876__delegate(x, y, z, args);
        };
        G__16876.cljs$core$IFn$_invoke$arity$variadic = G__16876__delegate;
        return G__16876;
      }();
      G__16875 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16875__0.call(this);
          case 1:
            return G__16875__1.call(this, x);
          case 2:
            return G__16875__2.call(this, x, y);
          case 3:
            return G__16875__3.call(this, x, y, z);
          default:
            return G__16875__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16875.cljs$lang$maxFixedArity = 3;
      G__16875.cljs$lang$applyTo = G__16875__4.cljs$lang$applyTo;
      G__16875.cljs$core$IFn$_invoke$arity$0 = G__16875__0;
      G__16875.cljs$core$IFn$_invoke$arity$1 = G__16875__1;
      G__16875.cljs$core$IFn$_invoke$arity$2 = G__16875__2;
      G__16875.cljs$core$IFn$_invoke$arity$3 = G__16875__3;
      G__16875.cljs$core$IFn$_invoke$arity$variadic = G__16875__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16875;
    }();
  };
  var juxt__4 = function() {
    var G__16878__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__16879 = null;
          var G__16879__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16859_SHARP_, p2__16860_SHARP_) {
                return cljs.core.conj.call(null, p1__16859_SHARP_, p2__16860_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16879__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16861_SHARP_, p2__16862_SHARP_) {
                return cljs.core.conj.call(null, p1__16861_SHARP_, p2__16862_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16879__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16863_SHARP_, p2__16864_SHARP_) {
                return cljs.core.conj.call(null, p1__16863_SHARP_, p2__16864_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16879__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16865_SHARP_, p2__16866_SHARP_) {
                return cljs.core.conj.call(null, p1__16865_SHARP_, p2__16866_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16879__4 = function() {
            var G__16880__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__16867_SHARP_, p2__16868_SHARP_) {
                  return cljs.core.conj.call(null, p1__16867_SHARP_, cljs.core.apply.call(null, p2__16868_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__16880 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16880__delegate.call(this, x, y, z, args);
            };
            G__16880.cljs$lang$maxFixedArity = 3;
            G__16880.cljs$lang$applyTo = function(arglist__16881) {
              var x = cljs.core.first(arglist__16881);
              arglist__16881 = cljs.core.next(arglist__16881);
              var y = cljs.core.first(arglist__16881);
              arglist__16881 = cljs.core.next(arglist__16881);
              var z = cljs.core.first(arglist__16881);
              var args = cljs.core.rest(arglist__16881);
              return G__16880__delegate(x, y, z, args);
            };
            G__16880.cljs$core$IFn$_invoke$arity$variadic = G__16880__delegate;
            return G__16880;
          }();
          G__16879 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__16879__0.call(this);
              case 1:
                return G__16879__1.call(this, x);
              case 2:
                return G__16879__2.call(this, x, y);
              case 3:
                return G__16879__3.call(this, x, y, z);
              default:
                return G__16879__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16879.cljs$lang$maxFixedArity = 3;
          G__16879.cljs$lang$applyTo = G__16879__4.cljs$lang$applyTo;
          G__16879.cljs$core$IFn$_invoke$arity$0 = G__16879__0;
          G__16879.cljs$core$IFn$_invoke$arity$1 = G__16879__1;
          G__16879.cljs$core$IFn$_invoke$arity$2 = G__16879__2;
          G__16879.cljs$core$IFn$_invoke$arity$3 = G__16879__3;
          G__16879.cljs$core$IFn$_invoke$arity$variadic = G__16879__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__16879;
        }();
      }(fs__$1);
    };
    var G__16878 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16878__delegate.call(this, f, g, h, fs);
    };
    G__16878.cljs$lang$maxFixedArity = 3;
    G__16878.cljs$lang$applyTo = function(arglist__16882) {
      var f = cljs.core.first(arglist__16882);
      arglist__16882 = cljs.core.next(arglist__16882);
      var g = cljs.core.first(arglist__16882);
      arglist__16882 = cljs.core.next(arglist__16882);
      var h = cljs.core.first(arglist__16882);
      var fs = cljs.core.rest(arglist__16882);
      return G__16878__delegate(f, g, h, fs);
    };
    G__16878.cljs$core$IFn$_invoke$arity$variadic = G__16878__delegate;
    return G__16878;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__16883 = cljs.core.next.call(null, coll);
        coll = G__16883;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__16884 = n - 1;
        var G__16885 = cljs.core.next.call(null, coll);
        n = G__16884;
        coll = G__16885;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__16887 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__16887, 0, null);
    var flags = cljs.core.nth.call(null, vec__16887, 1, null);
    var pattern = cljs.core.nth.call(null, vec__16887, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_16889 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_16890__$1 = cljs.core.next.call(null, coll);
      var n_16891 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_16890__$1 && (n_16891 == null || !(n_16891 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_16890__$1), writer, opts);
          var G__16892 = cljs.core.next.call(null, coll_16890__$1);
          var G__16893 = n_16891 - 1;
          coll_16890__$1 = G__16892;
          n_16891 = G__16893;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_16890__$1) && n_16891 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_16889;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__16898 = cljs.core.seq.call(null, ss);
    var chunk__16899 = null;
    var count__16900 = 0;
    var i__16901 = 0;
    while (true) {
      if (i__16901 < count__16900) {
        var s = cljs.core._nth.call(null, chunk__16899, i__16901);
        cljs.core._write.call(null, writer, s);
        var G__16902 = seq__16898;
        var G__16903 = chunk__16899;
        var G__16904 = count__16900;
        var G__16905 = i__16901 + 1;
        seq__16898 = G__16902;
        chunk__16899 = G__16903;
        count__16900 = G__16904;
        i__16901 = G__16905;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__16898);
        if (temp__4126__auto__) {
          var seq__16898__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__16898__$1)) {
            var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16898__$1);
            var G__16906 = cljs.core.chunk_rest.call(null, seq__16898__$1);
            var G__16907 = c__4433__auto__;
            var G__16908 = cljs.core.count.call(null, c__4433__auto__);
            var G__16909 = 0;
            seq__16898 = G__16906;
            chunk__16899 = G__16907;
            count__16900 = G__16908;
            i__16901 = G__16909;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__16898__$1);
            cljs.core._write.call(null, writer, s);
            var G__16910 = cljs.core.next.call(null, seq__16898__$1);
            var G__16911 = null;
            var G__16912 = 0;
            var G__16913 = 0;
            seq__16898 = G__16910;
            chunk__16899 = G__16911;
            count__16900 = G__16912;
            i__16901 = G__16913;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__16914) {
    var writer = cljs.core.first(arglist__16914);
    var ss = cljs.core.rest(arglist__16914);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj16916 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj16916;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3651__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3651__auto__)) {
          var and__3651__auto____$1 = function() {
            var G__16922 = obj;
            if (G__16922) {
              var bit__4327__auto__ = G__16922.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4327__auto__ || G__16922.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__16922.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16922);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16922);
            }
          }();
          if (and__3651__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3651__auto____$1;
          }
        } else {
          return and__3651__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__16923 = obj;
            if (G__16923) {
              var bit__4320__auto__ = G__16923.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4320__auto__ || G__16923.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__16925 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__16925;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__16924 = obj;
                            if (G__16924) {
                              var bit__4327__auto__ = G__16924.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4327__auto__ || G__16924.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__16924.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16924);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16924);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__16930 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__16931 = null;
  var count__16932 = 0;
  var i__16933 = 0;
  while (true) {
    if (i__16933 < count__16932) {
      var obj = cljs.core._nth.call(null, chunk__16931, i__16933);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__16934 = seq__16930;
      var G__16935 = chunk__16931;
      var G__16936 = count__16932;
      var G__16937 = i__16933 + 1;
      seq__16930 = G__16934;
      chunk__16931 = G__16935;
      count__16932 = G__16936;
      i__16933 = G__16937;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16930);
      if (temp__4126__auto__) {
        var seq__16930__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16930__$1)) {
          var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__16930__$1);
          var G__16938 = cljs.core.chunk_rest.call(null, seq__16930__$1);
          var G__16939 = c__4433__auto__;
          var G__16940 = cljs.core.count.call(null, c__4433__auto__);
          var G__16941 = 0;
          seq__16930 = G__16938;
          chunk__16931 = G__16939;
          count__16932 = G__16940;
          i__16933 = G__16941;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__16930__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__16942 = cljs.core.next.call(null, seq__16930__$1);
          var G__16943 = null;
          var G__16944 = 0;
          var G__16945 = 0;
          seq__16930 = G__16942;
          chunk__16931 = G__16943;
          count__16932 = G__16944;
          i__16933 = G__16945;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__16946) {
    var objs = cljs.core.seq(arglist__16946);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__16947) {
    var objs = cljs.core.seq(arglist__16947);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__16948) {
    var objs = cljs.core.seq(arglist__16948);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__16949) {
    var objs = cljs.core.seq(arglist__16949);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__16950) {
    var objs = cljs.core.seq(arglist__16950);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__16951) {
    var objs = cljs.core.seq(arglist__16951);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__16952) {
    var objs = cljs.core.seq(arglist__16952);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__16953) {
    var objs = cljs.core.seq(arglist__16953);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__16954) {
    var iref = cljs.core.first(arglist__16954);
    arglist__16954 = cljs.core.next(arglist__16954);
    var f = cljs.core.first(arglist__16954);
    var args = cljs.core.rest(arglist__16954);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__16955_SHARP_, p2__16956_SHARP_) {
    var ret = rf.call(null, p1__16955_SHARP_, p2__16956_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__16957 = null;
      var G__16957__0 = function() {
        return rf.call(null);
      };
      var G__16957__1 = function(result) {
        return rf.call(null, result);
      };
      var G__16957__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__16957 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__16957__0.call(this);
          case 1:
            return G__16957__1.call(this, result);
          case 2:
            return G__16957__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16957.cljs$core$IFn$_invoke$arity$0 = G__16957__0;
      G__16957.cljs$core$IFn$_invoke$arity$1 = G__16957__1;
      G__16957.cljs$core$IFn$_invoke$arity$2 = G__16957__2;
      return G__16957;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__16958 = null;
          var G__16958__0 = function() {
            return rf.call(null);
          };
          var G__16958__1 = function(result) {
            return rf.call(null, result);
          };
          var G__16958__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__16958 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16958__0.call(this);
              case 1:
                return G__16958__1.call(this, result);
              case 2:
                return G__16958__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16958.cljs$core$IFn$_invoke$arity$0 = G__16958__0;
          G__16958.cljs$core$IFn$_invoke$arity$1 = G__16958__1;
          G__16958.cljs$core$IFn$_invoke$arity$2 = G__16958__2;
          return G__16958;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__16960_SHARP_, p2__16959_SHARP_) {
    return proc.call(null, p2__16959_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj16962 = {};
  return obj16962;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3651__auto__ = x;
    if (and__3651__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4300__auto__ = x == null ? null : x;
    return function() {
      var or__3663__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3651__auto__ = x;
    if (and__3651__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4300__auto__ = x == null ? null : x;
    return function() {
      var or__3663__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__16964 = k;
    if (G__16964) {
      var bit__4327__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3663__auto__ = bit__4327__auto__;
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          return G__16964.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__16964.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16964);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16964);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__16978 = x;
      if (G__16978) {
        var bit__4327__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3663__auto__ = bit__4327__auto__;
          if (cljs.core.truth_(or__3663__auto__)) {
            return or__3663__auto__;
          } else {
            return G__16978.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__16978.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16978);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16978);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj16980 = {};
              return obj16980;
            }();
            var seq__16981_16991 = cljs.core.seq.call(null, x);
            var chunk__16982_16992 = null;
            var count__16983_16993 = 0;
            var i__16984_16994 = 0;
            while (true) {
              if (i__16984_16994 < count__16983_16993) {
                var vec__16985_16995 = cljs.core._nth.call(null, chunk__16982_16992, i__16984_16994);
                var k_16996 = cljs.core.nth.call(null, vec__16985_16995, 0, null);
                var v_16997 = cljs.core.nth.call(null, vec__16985_16995, 1, null);
                m[cljs.core.key__GT_js.call(null, k_16996)] = clj__GT_js.call(null, v_16997);
                var G__16998 = seq__16981_16991;
                var G__16999 = chunk__16982_16992;
                var G__17000 = count__16983_16993;
                var G__17001 = i__16984_16994 + 1;
                seq__16981_16991 = G__16998;
                chunk__16982_16992 = G__16999;
                count__16983_16993 = G__17000;
                i__16984_16994 = G__17001;
                continue;
              } else {
                var temp__4126__auto___17002 = cljs.core.seq.call(null, seq__16981_16991);
                if (temp__4126__auto___17002) {
                  var seq__16981_17003__$1 = temp__4126__auto___17002;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__16981_17003__$1)) {
                    var c__4433__auto___17004 = cljs.core.chunk_first.call(null, seq__16981_17003__$1);
                    var G__17005 = cljs.core.chunk_rest.call(null, seq__16981_17003__$1);
                    var G__17006 = c__4433__auto___17004;
                    var G__17007 = cljs.core.count.call(null, c__4433__auto___17004);
                    var G__17008 = 0;
                    seq__16981_16991 = G__17005;
                    chunk__16982_16992 = G__17006;
                    count__16983_16993 = G__17007;
                    i__16984_16994 = G__17008;
                    continue;
                  } else {
                    var vec__16986_17009 = cljs.core.first.call(null, seq__16981_17003__$1);
                    var k_17010 = cljs.core.nth.call(null, vec__16986_17009, 0, null);
                    var v_17011 = cljs.core.nth.call(null, vec__16986_17009, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_17010)] = clj__GT_js.call(null, v_17011);
                    var G__17012 = cljs.core.next.call(null, seq__16981_17003__$1);
                    var G__17013 = null;
                    var G__17014 = 0;
                    var G__17015 = 0;
                    seq__16981_16991 = G__17012;
                    chunk__16982_16992 = G__17013;
                    count__16983_16993 = G__17014;
                    i__16984_16994 = G__17015;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__16987_17016 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__16988_17017 = null;
              var count__16989_17018 = 0;
              var i__16990_17019 = 0;
              while (true) {
                if (i__16990_17019 < count__16989_17018) {
                  var x_17020__$1 = cljs.core._nth.call(null, chunk__16988_17017, i__16990_17019);
                  arr.push(x_17020__$1);
                  var G__17021 = seq__16987_17016;
                  var G__17022 = chunk__16988_17017;
                  var G__17023 = count__16989_17018;
                  var G__17024 = i__16990_17019 + 1;
                  seq__16987_17016 = G__17021;
                  chunk__16988_17017 = G__17022;
                  count__16989_17018 = G__17023;
                  i__16990_17019 = G__17024;
                  continue;
                } else {
                  var temp__4126__auto___17025 = cljs.core.seq.call(null, seq__16987_17016);
                  if (temp__4126__auto___17025) {
                    var seq__16987_17026__$1 = temp__4126__auto___17025;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__16987_17026__$1)) {
                      var c__4433__auto___17027 = cljs.core.chunk_first.call(null, seq__16987_17026__$1);
                      var G__17028 = cljs.core.chunk_rest.call(null, seq__16987_17026__$1);
                      var G__17029 = c__4433__auto___17027;
                      var G__17030 = cljs.core.count.call(null, c__4433__auto___17027);
                      var G__17031 = 0;
                      seq__16987_17016 = G__17028;
                      chunk__16988_17017 = G__17029;
                      count__16989_17018 = G__17030;
                      i__16990_17019 = G__17031;
                      continue;
                    } else {
                      var x_17032__$1 = cljs.core.first.call(null, seq__16987_17026__$1);
                      arr.push(x_17032__$1);
                      var G__17033 = cljs.core.next.call(null, seq__16987_17026__$1);
                      var G__17034 = null;
                      var G__17035 = 0;
                      var G__17036 = 0;
                      seq__16987_17016 = G__17033;
                      chunk__16988_17017 = G__17034;
                      count__16989_17018 = G__17035;
                      i__16990_17019 = G__17036;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj17038 = {};
  return obj17038;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3651__auto__ = x;
    if (and__3651__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4300__auto__ = x == null ? null : x;
    return function() {
      var or__3663__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__17059__delegate = function(x, opts) {
      if (function() {
        var G__17049 = x;
        if (G__17049) {
          var bit__4327__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3663__auto__ = bit__4327__auto__;
            if (cljs.core.truth_(or__3663__auto__)) {
              return or__3663__auto__;
            } else {
              return G__17049.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__17049.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__17049);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__17049);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__17050 = opts;
          var map__17050__$1 = cljs.core.seq_QMARK_.call(null, map__17050) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17050) : map__17050;
          var keywordize_keys = cljs.core.get.call(null, map__17050__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__17050, map__17050__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4402__auto__ = function(map__17050, map__17050__$1, keywordize_keys, keyfn) {
                          return function iter__17055(s__17056) {
                            return new cljs.core.LazySeq(null, function(map__17050, map__17050__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__17056__$1 = s__17056;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__17056__$1);
                                  if (temp__4126__auto__) {
                                    var s__17056__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__17056__$2)) {
                                      var c__4400__auto__ = cljs.core.chunk_first.call(null, s__17056__$2);
                                      var size__4401__auto__ = cljs.core.count.call(null, c__4400__auto__);
                                      var b__17058 = cljs.core.chunk_buffer.call(null, size__4401__auto__);
                                      if (function() {
                                        var i__17057 = 0;
                                        while (true) {
                                          if (i__17057 < size__4401__auto__) {
                                            var k = cljs.core._nth.call(null, c__4400__auto__, i__17057);
                                            cljs.core.chunk_append.call(null, b__17058, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__17060 = i__17057 + 1;
                                            i__17057 = G__17060;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__17058), iter__17055.call(null, cljs.core.chunk_rest.call(null, s__17056__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__17058), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__17056__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__17055.call(null, cljs.core.rest.call(null, s__17056__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__17050, map__17050__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__17050, map__17050__$1, keywordize_keys, keyfn);
                        return iter__4402__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__17050, map__17050__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__17059 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17059__delegate.call(this, x, opts);
    };
    G__17059.cljs$lang$maxFixedArity = 1;
    G__17059.cljs$lang$applyTo = function(arglist__17061) {
      var x = cljs.core.first(arglist__17061);
      var opts = cljs.core.rest(arglist__17061);
      return G__17059__delegate(x, opts);
    };
    G__17059.cljs$core$IFn$_invoke$arity$variadic = G__17059__delegate;
    return G__17059;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__17062__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__17062 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__17062__delegate.call(this, args);
      };
      G__17062.cljs$lang$maxFixedArity = 0;
      G__17062.cljs$lang$applyTo = function(arglist__17063) {
        var args = cljs.core.seq(arglist__17063);
        return G__17062__delegate(args);
      };
      G__17062.cljs$core$IFn$_invoke$arity$variadic = G__17062__delegate;
      return G__17062;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__17064 = ret;
        f = G__17064;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__17065__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__17065 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17065__delegate.call(this, f, args);
    };
    G__17065.cljs$lang$maxFixedArity = 1;
    G__17065.cljs$lang$applyTo = function(arglist__17066) {
      var f = cljs.core.first(arglist__17066);
      var args = cljs.core.rest(arglist__17066);
      return G__17065__delegate(f, args);
    };
    G__17065.cljs$core$IFn$_invoke$arity$variadic = G__17065__delegate;
    return G__17065;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__17067) {
    var f = cljs.core.first(arglist__17067);
    var args = cljs.core.rest(arglist__17067);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3663__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3663__auto__) {
      return or__3663__auto__;
    } else {
      var or__3663__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3663__auto____$1) {
        return or__3663__auto____$1;
      } else {
        var and__3651__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3651__auto__) {
          var and__3651__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3651__auto____$1) {
            var and__3651__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3651__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__17068 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__17069 = i + 1;
                  ret = G__17068;
                  i = G__17069;
                  continue;
                }
                break;
              }
            } else {
              return and__3651__auto____$2;
            }
          } else {
            return and__3651__auto____$1;
          }
        } else {
          return and__3651__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3663__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__17070_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__17070_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__17070_SHARP_), cljs.core.second.call(null, p1__17070_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__17071_SHARP_, p2__17072_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__17071_SHARP_, p2__17072_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3663__auto__ = cljs.core.truth_(function() {
    var and__3651__auto__ = xprefs;
    if (cljs.core.truth_(and__3651__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3651__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3663__auto__)) {
    return or__3663__auto__;
  } else {
    var or__3663__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__17073 = cljs.core.rest.call(null, ps);
          ps = G__17073;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3663__auto____$1)) {
      return or__3663__auto____$1;
    } else {
      var or__3663__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__17074 = cljs.core.rest.call(null, ps);
            ps = G__17074;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3663__auto____$2)) {
        return or__3663__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3663__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3663__auto__)) {
    return or__3663__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__17077) {
    var vec__17078 = p__17077;
    var k = cljs.core.nth.call(null, vec__17078, 0, null);
    var _ = cljs.core.nth.call(null, vec__17078, 1, null);
    var e = vec__17078;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3663__auto__ = be == null;
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj17080 = {};
  return obj17080;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3651__auto__ = mf;
    if (and__3651__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4300__auto__ = mf == null ? null : mf;
    return function() {
      var or__3663__auto__ = cljs.core._reset[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._reset["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3651__auto__ = mf;
    if (and__3651__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4300__auto__ = mf == null ? null : mf;
    return function() {
      var or__3663__auto__ = cljs.core._add_method[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._add_method["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3651__auto__ = mf;
    if (and__3651__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4300__auto__ = mf == null ? null : mf;
    return function() {
      var or__3663__auto__ = cljs.core._remove_method[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._remove_method["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3651__auto__ = mf;
    if (and__3651__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4300__auto__ = mf == null ? null : mf;
    return function() {
      var or__3663__auto__ = cljs.core._prefer_method[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3651__auto__ = mf;
    if (and__3651__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4300__auto__ = mf == null ? null : mf;
    return function() {
      var or__3663__auto__ = cljs.core._get_method[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._get_method["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3651__auto__ = mf;
    if (and__3651__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4300__auto__ = mf == null ? null : mf;
    return function() {
      var or__3663__auto__ = cljs.core._methods[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._methods["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3651__auto__ = mf;
    if (and__3651__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4300__auto__ = mf == null ? null : mf;
    return function() {
      var or__3663__auto__ = cljs.core._prefers[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core._prefers["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__17082 = null;
  var G__17082__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__17082__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__17082__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__17082__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__17082__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__17082__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__17082__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__17082__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__17082__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__17082__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__17082__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__17082__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__17082__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__17082__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__17082__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__17082__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__17082__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__17082__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__17082__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__17082__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__17082__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__17082 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__17082__2.call(this, self__, a);
      case 3:
        return G__17082__3.call(this, self__, a, b);
      case 4:
        return G__17082__4.call(this, self__, a, b, c);
      case 5:
        return G__17082__5.call(this, self__, a, b, c, d);
      case 6:
        return G__17082__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__17082__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__17082__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__17082__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__17082__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__17082__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__17082__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__17082__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__17082__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__17082__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__17082__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__17082__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__17082__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__17082__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__17082__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__17082__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__17082__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17082.cljs$core$IFn$_invoke$arity$2 = G__17082__2;
  G__17082.cljs$core$IFn$_invoke$arity$3 = G__17082__3;
  G__17082.cljs$core$IFn$_invoke$arity$4 = G__17082__4;
  G__17082.cljs$core$IFn$_invoke$arity$5 = G__17082__5;
  G__17082.cljs$core$IFn$_invoke$arity$6 = G__17082__6;
  G__17082.cljs$core$IFn$_invoke$arity$7 = G__17082__7;
  G__17082.cljs$core$IFn$_invoke$arity$8 = G__17082__8;
  G__17082.cljs$core$IFn$_invoke$arity$9 = G__17082__9;
  G__17082.cljs$core$IFn$_invoke$arity$10 = G__17082__10;
  G__17082.cljs$core$IFn$_invoke$arity$11 = G__17082__11;
  G__17082.cljs$core$IFn$_invoke$arity$12 = G__17082__12;
  G__17082.cljs$core$IFn$_invoke$arity$13 = G__17082__13;
  G__17082.cljs$core$IFn$_invoke$arity$14 = G__17082__14;
  G__17082.cljs$core$IFn$_invoke$arity$15 = G__17082__15;
  G__17082.cljs$core$IFn$_invoke$arity$16 = G__17082__16;
  G__17082.cljs$core$IFn$_invoke$arity$17 = G__17082__17;
  G__17082.cljs$core$IFn$_invoke$arity$18 = G__17082__18;
  G__17082.cljs$core$IFn$_invoke$arity$19 = G__17082__19;
  G__17082.cljs$core$IFn$_invoke$arity$20 = G__17082__20;
  G__17082.cljs$core$IFn$_invoke$arity$21 = G__17082__21;
  G__17082.cljs$core$IFn$_invoke$arity$22 = G__17082__22;
  return G__17082;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args17081) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17081)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4243__auto__, writer__4244__auto__, opts__4245__auto__) {
  return cljs.core._write.call(null, writer__4244__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj19054 = {};
  return obj19054;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3651__auto__ = port;
    if (and__3651__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4300__auto__ = port == null ? null : port;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj19056 = {};
  return obj19056;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3651__auto__ = port;
    if (and__3651__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4300__auto__ = port == null ? null : port;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj19058 = {};
  return obj19058;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3651__auto__ = chan;
    if (and__3651__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4300__auto__ = chan == null ? null : chan;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj19060 = {};
  return obj19060;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3651__auto__ = h;
    if (and__3651__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4300__auto__ = h == null ? null : h;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3651__auto__ = h;
    if (and__3651__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4300__auto__ = h == null ? null : h;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj19062 = {};
  return obj19062;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3651__auto__ = b;
    if (and__3651__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4300__auto__ = b == null ? null : b;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3651__auto__ = b;
    if (and__3651__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4300__auto__ = b == null ? null : b;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3651__auto__ = b;
    if (and__3651__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4300__auto__ = b == null ? null : b;
    return function() {
      var or__3663__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__19063 = cnt + 1;
      cnt = G__19063;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4533__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4533__auto__) {
      var v_19064 = this$.pop();
      if (keep_QMARK_.call(null, v_19064)) {
        this$.unshift(v_19064);
      } else {
      }
      var G__19065 = x + 1;
      x = G__19065;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_19066 = 0;
  while (true) {
    var m_19067 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_19067 == null) {
    } else {
      m_19067.call(null);
      if (count_19066 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__19068 = count_19066 + 1;
        count_19066 = G__19068;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3651__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3651__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3651__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t19072 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t19072 = function(val, box, meta19073) {
      this.val = val;
      this.box = box;
      this.meta19073 = meta19073;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t19072.cljs$lang$type = true;
    cljs.core.async.impl.channels.t19072.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t19072";
    cljs.core.async.impl.channels.t19072.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.channels/t19072");
    };
    cljs.core.async.impl.channels.t19072.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t19072.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19074) {
      var self__ = this;
      var _19074__$1 = this;
      return self__.meta19073;
    };
    cljs.core.async.impl.channels.t19072.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19074, meta19073__$1) {
      var self__ = this;
      var _19074__$1 = this;
      return new cljs.core.async.impl.channels.t19072(self__.val, self__.box, meta19073__$1);
    };
    cljs.core.async.impl.channels.__GT_t19072 = function __GT_t19072(val__$1, box__$1, meta19073) {
      return new cljs.core.async.impl.channels.t19072(val__$1, box__$1, meta19073);
    };
  }
  return new cljs.core.async.impl.channels.t19072(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4243__auto__, writer__4244__auto__, opts__4245__auto__) {
  return cljs.core._write.call(null, writer__4244__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_19075 = self__.takes.pop();
      if (taker_19075 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_19075)) {
          var take_cb_19076 = cljs.core.async.impl.protocols.commit.call(null, taker_19075);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_19076, taker_19075, this$__$1) {
            return function() {
              return take_cb_19076.call(null, null);
            };
          }(take_cb_19076, taker_19075, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t19023 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t19023 = function(f, fn_handler, meta19024) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta19024 = meta19024;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t19023.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t19023.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t19023";
    cljs.core.async.impl.ioc_helpers.t19023.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.ioc-helpers/t19023");
    };
    cljs.core.async.impl.ioc_helpers.t19023.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t19023.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t19023.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t19023.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19025) {
      var self__ = this;
      var _19025__$1 = this;
      return self__.meta19024;
    };
    cljs.core.async.impl.ioc_helpers.t19023.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19025, meta19024__$1) {
      var self__ = this;
      var _19025__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t19023(self__.f, self__.fn_handler, meta19024__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t19023 = function __GT_t19023(f__$1, fn_handler__$1, meta19024) {
      return new cljs.core.async.impl.ioc_helpers.t19023(f__$1, fn_handler__$1, meta19024);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t19023(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e19027) {
    if (e19027 instanceof Object) {
      var ex = e19027;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e19027;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_19030_19032 = state;
    statearr_19030_19032[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_19030_19032[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_19031_19033 = state;
    statearr_19031_19033[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19031_19033[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_19036_19038 = state;
    statearr_19036_19038[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_19036_19038[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_19037_19039 = state;
    statearr_19037_19039[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_19037_19039[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__19040) {
    var map__19045 = p__19040;
    var map__19045__$1 = cljs.core.seq_QMARK_.call(null, map__19045) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19045) : map__19045;
    var opts = map__19045__$1;
    var statearr_19046_19049 = state;
    statearr_19046_19049[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__19045, map__19045__$1, opts) {
      return function(val) {
        var statearr_19047_19050 = state;
        statearr_19047_19050[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__19045, map__19045__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_19048_19051 = state;
      statearr_19048_19051[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__19040 = null;
    if (arguments.length > 3) {
      p__19040 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__19040);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__19052) {
    var state = cljs.core.first(arglist__19052);
    arglist__19052 = cljs.core.next(arglist__19052);
    var cont_block = cljs.core.first(arglist__19052);
    arglist__19052 = cljs.core.next(arglist__19052);
    var ports = cljs.core.first(arglist__19052);
    var p__19040 = cljs.core.rest(arglist__19052);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__19040);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__18996 = level + 1;
        level = G__18996;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_18997 = 0;
    while (true) {
      if (i_18997 < arr.length) {
        arr[i_18997] = null;
        var G__18998 = i_18997 + 1;
        i_18997 = G__18998;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__18999 = x_SINGLEQUOTE_;
                x__$1 = G__18999;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__19000 = x__$1;
        var G__19001 = k;
        var G__19002 = level - 1;
        var G__19003 = update;
        x = G__19000;
        k = G__19001;
        level = G__19002;
        update = G__19003;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_19004 = self__.level + 1;
      while (true) {
        if (i_19004 <= new_level + 1) {
          update[i_19004] = self__.header;
          var G__19005 = i_19004 + 1;
          i_19004 = G__19005;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_19006 = 0;
    while (true) {
      if (i_19006 <= self__.level) {
        var links_19007 = update[i_19006].forward;
        if (links_19007[i_19006] === x__$1) {
          links_19007[i_19006] = x__$1.forward[i_19006];
          var G__19008 = i_19006 + 1;
          i_19006 = G__19008;
          continue;
        } else {
          var G__19009 = i_19006 + 1;
          i_19006 = G__19009;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__19010 = x_SINGLEQUOTE_;
              x__$1 = G__19010;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__19011 = nx;
        var G__19012 = level__$1 - 1;
        x = G__19011;
        level__$1 = G__19012;
        continue;
      } else {
        var G__19013 = x;
        var G__19014 = level__$1 - 1;
        x = G__19013;
        level__$1 = G__19014;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__19015 = x_SINGLEQUOTE_;
              x__$1 = G__19015;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__19016 = nx;
        var G__19017 = level__$1 - 1;
        x = G__19016;
        level__$1 = G__19017;
        continue;
      } else {
        var G__19018 = x;
        var G__19019 = level__$1 - 1;
        x = G__19018;
        level__$1 = G__19019;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3663__auto__ = cljs.core.truth_(function() {
    var and__3651__auto__ = me;
    if (cljs.core.truth_(and__3651__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3651__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3663__auto__)) {
    return or__3663__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3663__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3663__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t17086 !== "undefined") {
  } else {
    cljs.core.async.t17086 = function(f, fn_handler, meta17087) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta17087 = meta17087;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17086.cljs$lang$type = true;
    cljs.core.async.t17086.cljs$lang$ctorStr = "cljs.core.async/t17086";
    cljs.core.async.t17086.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17086");
    };
    cljs.core.async.t17086.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17086.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t17086.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t17086.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17088) {
      var self__ = this;
      var _17088__$1 = this;
      return self__.meta17087;
    };
    cljs.core.async.t17086.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17088, meta17087__$1) {
      var self__ = this;
      var _17088__$1 = this;
      return new cljs.core.async.t17086(self__.f, self__.fn_handler, meta17087__$1);
    };
    cljs.core.async.__GT_t17086 = function __GT_t17086(f__$1, fn_handler__$1, meta17087) {
      return new cljs.core.async.t17086(f__$1, fn_handler__$1, meta17087);
    };
  }
  return new cljs.core.async.t17086(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_17089 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_17089);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_17089, ret) {
          return function() {
            return fn1.call(null, val_17089);
          };
        }(val_17089, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3651__auto__ = ret;
      if (cljs.core.truth_(and__3651__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3651__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4533__auto___17090 = n;
  var x_17091 = 0;
  while (true) {
    if (x_17091 < n__4533__auto___17090) {
      a[x_17091] = 0;
      var G__17092 = x_17091 + 1;
      x_17091 = G__17092;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__17093 = i + 1;
      i = G__17093;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t17097 !== "undefined") {
  } else {
    cljs.core.async.t17097 = function(flag, alt_flag, meta17098) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta17098 = meta17098;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17097.cljs$lang$type = true;
    cljs.core.async.t17097.cljs$lang$ctorStr = "cljs.core.async/t17097";
    cljs.core.async.t17097.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
        return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17097");
      };
    }(flag);
    cljs.core.async.t17097.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17097.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t17097.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t17097.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_17099) {
        var self__ = this;
        var _17099__$1 = this;
        return self__.meta17098;
      };
    }(flag);
    cljs.core.async.t17097.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_17099, meta17098__$1) {
        var self__ = this;
        var _17099__$1 = this;
        return new cljs.core.async.t17097(self__.flag, self__.alt_flag, meta17098__$1);
      };
    }(flag);
    cljs.core.async.__GT_t17097 = function(flag) {
      return function __GT_t17097(flag__$1, alt_flag__$1, meta17098) {
        return new cljs.core.async.t17097(flag__$1, alt_flag__$1, meta17098);
      };
    }(flag);
  }
  return new cljs.core.async.t17097(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t17103 !== "undefined") {
  } else {
    cljs.core.async.t17103 = function(cb, flag, alt_handler, meta17104) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta17104 = meta17104;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17103.cljs$lang$type = true;
    cljs.core.async.t17103.cljs$lang$ctorStr = "cljs.core.async/t17103";
    cljs.core.async.t17103.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17103");
    };
    cljs.core.async.t17103.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17103.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t17103.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t17103.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17105) {
      var self__ = this;
      var _17105__$1 = this;
      return self__.meta17104;
    };
    cljs.core.async.t17103.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17105, meta17104__$1) {
      var self__ = this;
      var _17105__$1 = this;
      return new cljs.core.async.t17103(self__.cb, self__.flag, self__.alt_handler, meta17104__$1);
    };
    cljs.core.async.__GT_t17103 = function __GT_t17103(cb__$1, flag__$1, alt_handler__$1, meta17104) {
      return new cljs.core.async.t17103(cb__$1, flag__$1, alt_handler__$1, meta17104);
    };
  }
  return new cljs.core.async.t17103(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__17106_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17106_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3663__auto__ = wport;
            if (cljs.core.truth_(or__3663__auto__)) {
              return or__3663__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__17107 = i + 1;
          i = G__17107;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3663__auto__ = ret;
  if (cljs.core.truth_(or__3663__auto__)) {
    return or__3663__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3651__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3651__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3651__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__17108) {
    var map__17110 = p__17108;
    var map__17110__$1 = cljs.core.seq_QMARK_.call(null, map__17110) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17110) : map__17110;
    var opts = map__17110__$1;
    throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__17108 = null;
    if (arguments.length > 1) {
      p__17108 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__17108);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__17111) {
    var ports = cljs.core.first(arglist__17111);
    var p__17108 = cljs.core.rest(arglist__17111);
    return alts_BANG___delegate(ports, p__17108);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t17119 !== "undefined") {
  } else {
    cljs.core.async.t17119 = function(ch, f, map_LT_, meta17120) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta17120 = meta17120;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17119.cljs$lang$type = true;
    cljs.core.async.t17119.cljs$lang$ctorStr = "cljs.core.async/t17119";
    cljs.core.async.t17119.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17119");
    };
    cljs.core.async.t17119.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17119.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t17119.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17119.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t17122 !== "undefined") {
        } else {
          cljs.core.async.t17122 = function(fn1, _, meta17120, ch, f, map_LT_, meta17123) {
            this.fn1 = fn1;
            this._ = _;
            this.meta17120 = meta17120;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta17123 = meta17123;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t17122.cljs$lang$type = true;
          cljs.core.async.t17122.cljs$lang$ctorStr = "cljs.core.async/t17122";
          cljs.core.async.t17122.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
              return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17122");
            };
          }(___$1);
          cljs.core.async.t17122.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t17122.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17122.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17122.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__17112_SHARP_) {
                  return f1.call(null, p1__17112_SHARP_ == null ? null : self__.f.call(null, p1__17112_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t17122.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_17124) {
              var self__ = this;
              var _17124__$1 = this;
              return self__.meta17123;
            };
          }(___$1);
          cljs.core.async.t17122.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_17124, meta17123__$1) {
              var self__ = this;
              var _17124__$1 = this;
              return new cljs.core.async.t17122(self__.fn1, self__._, self__.meta17120, self__.ch, self__.f, self__.map_LT_, meta17123__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t17122 = function(___$1) {
            return function __GT_t17122(fn1__$1, ___$2, meta17120__$1, ch__$2, f__$2, map_LT___$2, meta17123) {
              return new cljs.core.async.t17122(fn1__$1, ___$2, meta17120__$1, ch__$2, f__$2, map_LT___$2, meta17123);
            };
          }(___$1);
        }
        return new cljs.core.async.t17122(fn1, ___$1, self__.meta17120, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3651__auto__ = ret;
        if (cljs.core.truth_(and__3651__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3651__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t17119.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17119.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17119.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17121) {
      var self__ = this;
      var _17121__$1 = this;
      return self__.meta17120;
    };
    cljs.core.async.t17119.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17121, meta17120__$1) {
      var self__ = this;
      var _17121__$1 = this;
      return new cljs.core.async.t17119(self__.ch, self__.f, self__.map_LT_, meta17120__$1);
    };
    cljs.core.async.__GT_t17119 = function __GT_t17119(ch__$1, f__$1, map_LT___$1, meta17120) {
      return new cljs.core.async.t17119(ch__$1, f__$1, map_LT___$1, meta17120);
    };
  }
  return new cljs.core.async.t17119(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t17128 !== "undefined") {
  } else {
    cljs.core.async.t17128 = function(ch, f, map_GT_, meta17129) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta17129 = meta17129;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17128.cljs$lang$type = true;
    cljs.core.async.t17128.cljs$lang$ctorStr = "cljs.core.async/t17128";
    cljs.core.async.t17128.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17128");
    };
    cljs.core.async.t17128.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17128.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t17128.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17128.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17128.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17128.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17128.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17130) {
      var self__ = this;
      var _17130__$1 = this;
      return self__.meta17129;
    };
    cljs.core.async.t17128.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17130, meta17129__$1) {
      var self__ = this;
      var _17130__$1 = this;
      return new cljs.core.async.t17128(self__.ch, self__.f, self__.map_GT_, meta17129__$1);
    };
    cljs.core.async.__GT_t17128 = function __GT_t17128(ch__$1, f__$1, map_GT___$1, meta17129) {
      return new cljs.core.async.t17128(ch__$1, f__$1, map_GT___$1, meta17129);
    };
  }
  return new cljs.core.async.t17128(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t17134 !== "undefined") {
  } else {
    cljs.core.async.t17134 = function(ch, p, filter_GT_, meta17135) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta17135 = meta17135;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17134.cljs$lang$type = true;
    cljs.core.async.t17134.cljs$lang$ctorStr = "cljs.core.async/t17134";
    cljs.core.async.t17134.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
      return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17134");
    };
    cljs.core.async.t17134.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17134.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t17134.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17134.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17134.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17134.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17134.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17136) {
      var self__ = this;
      var _17136__$1 = this;
      return self__.meta17135;
    };
    cljs.core.async.t17134.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17136, meta17135__$1) {
      var self__ = this;
      var _17136__$1 = this;
      return new cljs.core.async.t17134(self__.ch, self__.p, self__.filter_GT_, meta17135__$1);
    };
    cljs.core.async.__GT_t17134 = function __GT_t17134(ch__$1, p__$1, filter_GT___$1, meta17135) {
      return new cljs.core.async.t17134(ch__$1, p__$1, filter_GT___$1, meta17135);
    };
  }
  return new cljs.core.async.t17134(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6209__auto___17211 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___17211, out) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto___17211, out) {
            return function(state_17194) {
              var state_val_17195 = state_17194[1];
              if (state_val_17195 === 7) {
                var inst_17190 = state_17194[2];
                var state_17194__$1 = state_17194;
                var statearr_17196_17212 = state_17194__$1;
                statearr_17196_17212[2] = inst_17190;
                statearr_17196_17212[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17195 === 1) {
                  var state_17194__$1 = state_17194;
                  var statearr_17197_17213 = state_17194__$1;
                  statearr_17197_17213[2] = null;
                  statearr_17197_17213[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17195 === 4) {
                    var inst_17176 = state_17194[5];
                    var inst_17176__$1 = state_17194[2];
                    var inst_17177 = inst_17176__$1 == null;
                    var state_17194__$1 = function() {
                      var statearr_17198 = state_17194;
                      statearr_17198[5] = inst_17176__$1;
                      return statearr_17198;
                    }();
                    if (cljs.core.truth_(inst_17177)) {
                      var statearr_17199_17214 = state_17194__$1;
                      statearr_17199_17214[1] = 5;
                    } else {
                      var statearr_17200_17215 = state_17194__$1;
                      statearr_17200_17215[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17195 === 6) {
                      var inst_17176 = state_17194[5];
                      var inst_17181 = p.call(null, inst_17176);
                      var state_17194__$1 = state_17194;
                      if (cljs.core.truth_(inst_17181)) {
                        var statearr_17201_17216 = state_17194__$1;
                        statearr_17201_17216[1] = 8;
                      } else {
                        var statearr_17202_17217 = state_17194__$1;
                        statearr_17202_17217[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17195 === 3) {
                        var inst_17192 = state_17194[2];
                        var state_17194__$1 = state_17194;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17194__$1, inst_17192);
                      } else {
                        if (state_val_17195 === 2) {
                          var state_17194__$1 = state_17194;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17194__$1, 4, ch);
                        } else {
                          if (state_val_17195 === 11) {
                            var inst_17184 = state_17194[2];
                            var state_17194__$1 = state_17194;
                            var statearr_17203_17218 = state_17194__$1;
                            statearr_17203_17218[2] = inst_17184;
                            statearr_17203_17218[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17195 === 9) {
                              var state_17194__$1 = state_17194;
                              var statearr_17204_17219 = state_17194__$1;
                              statearr_17204_17219[2] = null;
                              statearr_17204_17219[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17195 === 5) {
                                var inst_17179 = cljs.core.async.close_BANG_.call(null, out);
                                var state_17194__$1 = state_17194;
                                var statearr_17205_17220 = state_17194__$1;
                                statearr_17205_17220[2] = inst_17179;
                                statearr_17205_17220[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17195 === 10) {
                                  var inst_17187 = state_17194[2];
                                  var state_17194__$1 = function() {
                                    var statearr_17206 = state_17194;
                                    statearr_17206[6] = inst_17187;
                                    return statearr_17206;
                                  }();
                                  var statearr_17207_17221 = state_17194__$1;
                                  statearr_17207_17221[2] = null;
                                  statearr_17207_17221[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17195 === 8) {
                                    var inst_17176 = state_17194[5];
                                    var state_17194__$1 = state_17194;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17194__$1, 11, out, inst_17176);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6209__auto___17211, out);
          return function(switch__6196__auto__, c__6209__auto___17211, out) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_17209 = [null, null, null, null, null, null, null];
                statearr_17209[0] = state_machine__6197__auto__;
                statearr_17209[1] = 1;
                return statearr_17209;
              };
              var state_machine__6197__auto____1 = function(state_17194) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_17194);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_17194) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_17194);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto___17211, out);
        }();
        var state__6211__auto__ = function() {
          var statearr_17210 = f__6210__auto__.call(null);
          statearr_17210[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___17211;
          return statearr_17210;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto___17211, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__6209__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto__) {
    return function() {
      var f__6210__auto__ = function() {
        var switch__6196__auto__ = function(c__6209__auto__) {
          return function(state_17369) {
            var state_val_17370 = state_17369[1];
            if (state_val_17370 === 7) {
              var inst_17365 = state_17369[2];
              var state_17369__$1 = state_17369;
              var statearr_17371_17404 = state_17369__$1;
              statearr_17371_17404[2] = inst_17365;
              statearr_17371_17404[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17370 === 20) {
                var inst_17340 = state_17369[5];
                var inst_17351 = state_17369[2];
                var inst_17352 = cljs.core.next.call(null, inst_17340);
                var inst_17326 = inst_17352;
                var inst_17327 = null;
                var inst_17328 = 0;
                var inst_17329 = 0;
                var state_17369__$1 = function() {
                  var statearr_17372 = state_17369;
                  statearr_17372[6] = inst_17329;
                  statearr_17372[7] = inst_17327;
                  statearr_17372[8] = inst_17328;
                  statearr_17372[9] = inst_17326;
                  statearr_17372[10] = inst_17351;
                  return statearr_17372;
                }();
                var statearr_17373_17405 = state_17369__$1;
                statearr_17373_17405[2] = null;
                statearr_17373_17405[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17370 === 1) {
                  var state_17369__$1 = state_17369;
                  var statearr_17374_17406 = state_17369__$1;
                  statearr_17374_17406[2] = null;
                  statearr_17374_17406[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17370 === 4) {
                    var inst_17315 = state_17369[11];
                    var inst_17315__$1 = state_17369[2];
                    var inst_17316 = inst_17315__$1 == null;
                    var state_17369__$1 = function() {
                      var statearr_17378 = state_17369;
                      statearr_17378[11] = inst_17315__$1;
                      return statearr_17378;
                    }();
                    if (cljs.core.truth_(inst_17316)) {
                      var statearr_17379_17407 = state_17369__$1;
                      statearr_17379_17407[1] = 5;
                    } else {
                      var statearr_17380_17408 = state_17369__$1;
                      statearr_17380_17408[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17370 === 15) {
                      var state_17369__$1 = state_17369;
                      var statearr_17381_17409 = state_17369__$1;
                      statearr_17381_17409[2] = null;
                      statearr_17381_17409[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17370 === 13) {
                        var inst_17329 = state_17369[6];
                        var inst_17327 = state_17369[7];
                        var inst_17328 = state_17369[8];
                        var inst_17326 = state_17369[9];
                        var inst_17336 = state_17369[2];
                        var inst_17337 = inst_17329 + 1;
                        var tmp17375 = inst_17327;
                        var tmp17376 = inst_17328;
                        var tmp17377 = inst_17326;
                        var inst_17326__$1 = tmp17377;
                        var inst_17327__$1 = tmp17375;
                        var inst_17328__$1 = tmp17376;
                        var inst_17329__$1 = inst_17337;
                        var state_17369__$1 = function() {
                          var statearr_17382 = state_17369;
                          statearr_17382[6] = inst_17329__$1;
                          statearr_17382[12] = inst_17336;
                          statearr_17382[7] = inst_17327__$1;
                          statearr_17382[8] = inst_17328__$1;
                          statearr_17382[9] = inst_17326__$1;
                          return statearr_17382;
                        }();
                        var statearr_17383_17410 = state_17369__$1;
                        statearr_17383_17410[2] = null;
                        statearr_17383_17410[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17370 === 6) {
                          var inst_17315 = state_17369[11];
                          var inst_17320 = f.call(null, inst_17315);
                          var inst_17325 = cljs.core.seq.call(null, inst_17320);
                          var inst_17326 = inst_17325;
                          var inst_17327 = null;
                          var inst_17328 = 0;
                          var inst_17329 = 0;
                          var state_17369__$1 = function() {
                            var statearr_17384 = state_17369;
                            statearr_17384[6] = inst_17329;
                            statearr_17384[7] = inst_17327;
                            statearr_17384[8] = inst_17328;
                            statearr_17384[9] = inst_17326;
                            return statearr_17384;
                          }();
                          var statearr_17385_17411 = state_17369__$1;
                          statearr_17385_17411[2] = null;
                          statearr_17385_17411[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17370 === 17) {
                            var inst_17340 = state_17369[5];
                            var inst_17344 = cljs.core.chunk_first.call(null, inst_17340);
                            var inst_17345 = cljs.core.chunk_rest.call(null, inst_17340);
                            var inst_17346 = cljs.core.count.call(null, inst_17344);
                            var inst_17326 = inst_17345;
                            var inst_17327 = inst_17344;
                            var inst_17328 = inst_17346;
                            var inst_17329 = 0;
                            var state_17369__$1 = function() {
                              var statearr_17386 = state_17369;
                              statearr_17386[6] = inst_17329;
                              statearr_17386[7] = inst_17327;
                              statearr_17386[8] = inst_17328;
                              statearr_17386[9] = inst_17326;
                              return statearr_17386;
                            }();
                            var statearr_17387_17412 = state_17369__$1;
                            statearr_17387_17412[2] = null;
                            statearr_17387_17412[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17370 === 3) {
                              var inst_17367 = state_17369[2];
                              var state_17369__$1 = state_17369;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17369__$1, inst_17367);
                            } else {
                              if (state_val_17370 === 12) {
                                var inst_17360 = state_17369[2];
                                var state_17369__$1 = state_17369;
                                var statearr_17388_17413 = state_17369__$1;
                                statearr_17388_17413[2] = inst_17360;
                                statearr_17388_17413[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17370 === 2) {
                                  var state_17369__$1 = state_17369;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17369__$1, 4, in$);
                                } else {
                                  if (state_val_17370 === 19) {
                                    var inst_17355 = state_17369[2];
                                    var state_17369__$1 = state_17369;
                                    var statearr_17389_17414 = state_17369__$1;
                                    statearr_17389_17414[2] = inst_17355;
                                    statearr_17389_17414[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17370 === 11) {
                                      var inst_17326 = state_17369[9];
                                      var inst_17340 = state_17369[5];
                                      var inst_17340__$1 = cljs.core.seq.call(null, inst_17326);
                                      var state_17369__$1 = function() {
                                        var statearr_17390 = state_17369;
                                        statearr_17390[5] = inst_17340__$1;
                                        return statearr_17390;
                                      }();
                                      if (inst_17340__$1) {
                                        var statearr_17391_17415 = state_17369__$1;
                                        statearr_17391_17415[1] = 14;
                                      } else {
                                        var statearr_17392_17416 = state_17369__$1;
                                        statearr_17392_17416[1] = 15;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17370 === 9) {
                                        var inst_17362 = state_17369[2];
                                        var state_17369__$1 = function() {
                                          var statearr_17393 = state_17369;
                                          statearr_17393[13] = inst_17362;
                                          return statearr_17393;
                                        }();
                                        var statearr_17394_17417 = state_17369__$1;
                                        statearr_17394_17417[2] = null;
                                        statearr_17394_17417[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17370 === 5) {
                                          var inst_17318 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_17369__$1 = state_17369;
                                          var statearr_17395_17418 = state_17369__$1;
                                          statearr_17395_17418[2] = inst_17318;
                                          statearr_17395_17418[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17370 === 14) {
                                            var inst_17340 = state_17369[5];
                                            var inst_17342 = cljs.core.chunked_seq_QMARK_.call(null, inst_17340);
                                            var state_17369__$1 = state_17369;
                                            if (inst_17342) {
                                              var statearr_17396_17419 = state_17369__$1;
                                              statearr_17396_17419[1] = 17;
                                            } else {
                                              var statearr_17397_17420 = state_17369__$1;
                                              statearr_17397_17420[1] = 18;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17370 === 16) {
                                              var inst_17358 = state_17369[2];
                                              var state_17369__$1 = state_17369;
                                              var statearr_17398_17421 = state_17369__$1;
                                              statearr_17398_17421[2] = inst_17358;
                                              statearr_17398_17421[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_17370 === 10) {
                                                var inst_17329 = state_17369[6];
                                                var inst_17327 = state_17369[7];
                                                var inst_17334 = cljs.core._nth.call(null, inst_17327, inst_17329);
                                                var state_17369__$1 = state_17369;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17369__$1, 13, out, inst_17334);
                                              } else {
                                                if (state_val_17370 === 18) {
                                                  var inst_17340 = state_17369[5];
                                                  var inst_17349 = cljs.core.first.call(null, inst_17340);
                                                  var state_17369__$1 = state_17369;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17369__$1, 20, out, inst_17349);
                                                } else {
                                                  if (state_val_17370 === 8) {
                                                    var inst_17329 = state_17369[6];
                                                    var inst_17328 = state_17369[8];
                                                    var inst_17331 = inst_17329 < inst_17328;
                                                    var inst_17332 = inst_17331;
                                                    var state_17369__$1 = state_17369;
                                                    if (cljs.core.truth_(inst_17332)) {
                                                      var statearr_17399_17422 = state_17369__$1;
                                                      statearr_17399_17422[1] = 10;
                                                    } else {
                                                      var statearr_17400_17423 = state_17369__$1;
                                                      statearr_17400_17423[1] = 11;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6209__auto__);
        return function(switch__6196__auto__, c__6209__auto__) {
          return function() {
            var state_machine__6197__auto__ = null;
            var state_machine__6197__auto____0 = function() {
              var statearr_17402 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17402[0] = state_machine__6197__auto__;
              statearr_17402[1] = 1;
              return statearr_17402;
            };
            var state_machine__6197__auto____1 = function(state_17369) {
              while (true) {
                var result__6198__auto__ = switch__6196__auto__.call(null, state_17369);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6198__auto__;
                }
                break;
              }
            };
            state_machine__6197__auto__ = function(state_17369) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6197__auto____0.call(this);
                case 1:
                  return state_machine__6197__auto____1.call(this, state_17369);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
            return state_machine__6197__auto__;
          }();
        }(switch__6196__auto__, c__6209__auto__);
      }();
      var state__6211__auto__ = function() {
        var statearr_17403 = f__6210__auto__.call(null);
        statearr_17403[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto__;
        return statearr_17403;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
    };
  }(c__6209__auto__));
  return c__6209__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__6209__auto___17496 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___17496) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto___17496) {
            return function(state_17479) {
              var state_val_17480 = state_17479[1];
              if (state_val_17480 === 7) {
                var inst_17475 = state_17479[2];
                var state_17479__$1 = state_17479;
                var statearr_17481_17497 = state_17479__$1;
                statearr_17481_17497[2] = inst_17475;
                statearr_17481_17497[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17480 === 1) {
                  var state_17479__$1 = state_17479;
                  var statearr_17482_17498 = state_17479__$1;
                  statearr_17482_17498[2] = null;
                  statearr_17482_17498[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17480 === 4) {
                    var inst_17462 = state_17479[5];
                    var inst_17462__$1 = state_17479[2];
                    var inst_17463 = inst_17462__$1 == null;
                    var state_17479__$1 = function() {
                      var statearr_17483 = state_17479;
                      statearr_17483[5] = inst_17462__$1;
                      return statearr_17483;
                    }();
                    if (cljs.core.truth_(inst_17463)) {
                      var statearr_17484_17499 = state_17479__$1;
                      statearr_17484_17499[1] = 5;
                    } else {
                      var statearr_17485_17500 = state_17479__$1;
                      statearr_17485_17500[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17480 === 6) {
                      var inst_17462 = state_17479[5];
                      var state_17479__$1 = state_17479;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17479__$1, 11, to, inst_17462);
                    } else {
                      if (state_val_17480 === 3) {
                        var inst_17477 = state_17479[2];
                        var state_17479__$1 = state_17479;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17479__$1, inst_17477);
                      } else {
                        if (state_val_17480 === 2) {
                          var state_17479__$1 = state_17479;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17479__$1, 4, from);
                        } else {
                          if (state_val_17480 === 11) {
                            var inst_17472 = state_17479[2];
                            var state_17479__$1 = function() {
                              var statearr_17486 = state_17479;
                              statearr_17486[6] = inst_17472;
                              return statearr_17486;
                            }();
                            var statearr_17487_17501 = state_17479__$1;
                            statearr_17487_17501[2] = null;
                            statearr_17487_17501[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17480 === 9) {
                              var state_17479__$1 = state_17479;
                              var statearr_17488_17502 = state_17479__$1;
                              statearr_17488_17502[2] = null;
                              statearr_17488_17502[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17480 === 5) {
                                var state_17479__$1 = state_17479;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_17489_17503 = state_17479__$1;
                                  statearr_17489_17503[1] = 8;
                                } else {
                                  var statearr_17490_17504 = state_17479__$1;
                                  statearr_17490_17504[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17480 === 10) {
                                  var inst_17469 = state_17479[2];
                                  var state_17479__$1 = state_17479;
                                  var statearr_17491_17505 = state_17479__$1;
                                  statearr_17491_17505[2] = inst_17469;
                                  statearr_17491_17505[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17480 === 8) {
                                    var inst_17466 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_17479__$1 = state_17479;
                                    var statearr_17492_17506 = state_17479__$1;
                                    statearr_17492_17506[2] = inst_17466;
                                    statearr_17492_17506[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6209__auto___17496);
          return function(switch__6196__auto__, c__6209__auto___17496) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_17494 = [null, null, null, null, null, null, null];
                statearr_17494[0] = state_machine__6197__auto__;
                statearr_17494[1] = 1;
                return statearr_17494;
              };
              var state_machine__6197__auto____1 = function(state_17479) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_17479);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_17479) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_17479);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto___17496);
        }();
        var state__6211__auto__ = function() {
          var statearr_17495 = f__6210__auto__.call(null);
          statearr_17495[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___17496;
          return statearr_17495;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto___17496));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6209__auto___17585 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___17585, tc, fc) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto___17585, tc, fc) {
            return function(state_17567) {
              var state_val_17568 = state_17567[1];
              if (state_val_17568 === 7) {
                var inst_17563 = state_17567[2];
                var state_17567__$1 = state_17567;
                var statearr_17569_17586 = state_17567__$1;
                statearr_17569_17586[2] = inst_17563;
                statearr_17569_17586[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17568 === 1) {
                  var state_17567__$1 = state_17567;
                  var statearr_17570_17587 = state_17567__$1;
                  statearr_17570_17587[2] = null;
                  statearr_17570_17587[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17568 === 4) {
                    var inst_17548 = state_17567[5];
                    var inst_17548__$1 = state_17567[2];
                    var inst_17549 = inst_17548__$1 == null;
                    var state_17567__$1 = function() {
                      var statearr_17571 = state_17567;
                      statearr_17571[5] = inst_17548__$1;
                      return statearr_17571;
                    }();
                    if (cljs.core.truth_(inst_17549)) {
                      var statearr_17572_17588 = state_17567__$1;
                      statearr_17572_17588[1] = 5;
                    } else {
                      var statearr_17573_17589 = state_17567__$1;
                      statearr_17573_17589[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17568 === 6) {
                      var inst_17548 = state_17567[5];
                      var inst_17554 = p.call(null, inst_17548);
                      var state_17567__$1 = state_17567;
                      if (cljs.core.truth_(inst_17554)) {
                        var statearr_17574_17590 = state_17567__$1;
                        statearr_17574_17590[1] = 9;
                      } else {
                        var statearr_17575_17591 = state_17567__$1;
                        statearr_17575_17591[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17568 === 3) {
                        var inst_17565 = state_17567[2];
                        var state_17567__$1 = state_17567;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17567__$1, inst_17565);
                      } else {
                        if (state_val_17568 === 2) {
                          var state_17567__$1 = state_17567;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17567__$1, 4, ch);
                        } else {
                          if (state_val_17568 === 11) {
                            var inst_17548 = state_17567[5];
                            var inst_17558 = state_17567[2];
                            var state_17567__$1 = state_17567;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17567__$1, 8, inst_17558, inst_17548);
                          } else {
                            if (state_val_17568 === 9) {
                              var state_17567__$1 = state_17567;
                              var statearr_17576_17592 = state_17567__$1;
                              statearr_17576_17592[2] = tc;
                              statearr_17576_17592[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17568 === 5) {
                                var inst_17551 = cljs.core.async.close_BANG_.call(null, tc);
                                var inst_17552 = cljs.core.async.close_BANG_.call(null, fc);
                                var state_17567__$1 = function() {
                                  var statearr_17577 = state_17567;
                                  statearr_17577[6] = inst_17551;
                                  return statearr_17577;
                                }();
                                var statearr_17578_17593 = state_17567__$1;
                                statearr_17578_17593[2] = inst_17552;
                                statearr_17578_17593[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17568 === 10) {
                                  var state_17567__$1 = state_17567;
                                  var statearr_17579_17594 = state_17567__$1;
                                  statearr_17579_17594[2] = fc;
                                  statearr_17579_17594[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17568 === 8) {
                                    var inst_17560 = state_17567[2];
                                    var state_17567__$1 = function() {
                                      var statearr_17580 = state_17567;
                                      statearr_17580[7] = inst_17560;
                                      return statearr_17580;
                                    }();
                                    var statearr_17581_17595 = state_17567__$1;
                                    statearr_17581_17595[2] = null;
                                    statearr_17581_17595[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6209__auto___17585, tc, fc);
          return function(switch__6196__auto__, c__6209__auto___17585, tc, fc) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_17583 = [null, null, null, null, null, null, null, null];
                statearr_17583[0] = state_machine__6197__auto__;
                statearr_17583[1] = 1;
                return statearr_17583;
              };
              var state_machine__6197__auto____1 = function(state_17567) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_17567);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_17567) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_17567);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto___17585, tc, fc);
        }();
        var state__6211__auto__ = function() {
          var statearr_17584 = f__6210__auto__.call(null);
          statearr_17584[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___17585;
          return statearr_17584;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto___17585, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__6209__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto__) {
    return function() {
      var f__6210__auto__ = function() {
        var switch__6196__auto__ = function(c__6209__auto__) {
          return function(state_17638) {
            var state_val_17639 = state_17638[1];
            if (state_val_17639 === 7) {
              var inst_17634 = state_17638[2];
              var state_17638__$1 = state_17638;
              var statearr_17640_17652 = state_17638__$1;
              statearr_17640_17652[2] = inst_17634;
              statearr_17640_17652[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17639 === 6) {
                var inst_17624 = state_17638[5];
                var inst_17627 = state_17638[6];
                var inst_17631 = f.call(null, inst_17624, inst_17627);
                var inst_17624__$1 = inst_17631;
                var state_17638__$1 = function() {
                  var statearr_17641 = state_17638;
                  statearr_17641[5] = inst_17624__$1;
                  return statearr_17641;
                }();
                var statearr_17642_17653 = state_17638__$1;
                statearr_17642_17653[2] = null;
                statearr_17642_17653[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17639 === 5) {
                  var inst_17624 = state_17638[5];
                  var state_17638__$1 = state_17638;
                  var statearr_17643_17654 = state_17638__$1;
                  statearr_17643_17654[2] = inst_17624;
                  statearr_17643_17654[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17639 === 4) {
                    var inst_17627 = state_17638[6];
                    var inst_17627__$1 = state_17638[2];
                    var inst_17628 = inst_17627__$1 == null;
                    var state_17638__$1 = function() {
                      var statearr_17644 = state_17638;
                      statearr_17644[6] = inst_17627__$1;
                      return statearr_17644;
                    }();
                    if (cljs.core.truth_(inst_17628)) {
                      var statearr_17645_17655 = state_17638__$1;
                      statearr_17645_17655[1] = 5;
                    } else {
                      var statearr_17646_17656 = state_17638__$1;
                      statearr_17646_17656[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17639 === 3) {
                      var inst_17636 = state_17638[2];
                      var state_17638__$1 = state_17638;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17638__$1, inst_17636);
                    } else {
                      if (state_val_17639 === 2) {
                        var state_17638__$1 = state_17638;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17638__$1, 4, ch);
                      } else {
                        if (state_val_17639 === 1) {
                          var inst_17624 = init;
                          var state_17638__$1 = function() {
                            var statearr_17647 = state_17638;
                            statearr_17647[5] = inst_17624;
                            return statearr_17647;
                          }();
                          var statearr_17648_17657 = state_17638__$1;
                          statearr_17648_17657[2] = null;
                          statearr_17648_17657[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6209__auto__);
        return function(switch__6196__auto__, c__6209__auto__) {
          return function() {
            var state_machine__6197__auto__ = null;
            var state_machine__6197__auto____0 = function() {
              var statearr_17650 = [null, null, null, null, null, null, null];
              statearr_17650[0] = state_machine__6197__auto__;
              statearr_17650[1] = 1;
              return statearr_17650;
            };
            var state_machine__6197__auto____1 = function(state_17638) {
              while (true) {
                var result__6198__auto__ = switch__6196__auto__.call(null, state_17638);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6198__auto__;
                }
                break;
              }
            };
            state_machine__6197__auto__ = function(state_17638) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6197__auto____0.call(this);
                case 1:
                  return state_machine__6197__auto____1.call(this, state_17638);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
            return state_machine__6197__auto__;
          }();
        }(switch__6196__auto__, c__6209__auto__);
      }();
      var state__6211__auto__ = function() {
        var statearr_17651 = f__6210__auto__.call(null);
        statearr_17651[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto__;
        return statearr_17651;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
    };
  }(c__6209__auto__));
  return c__6209__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6209__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto__) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto__) {
            return function(state_17715) {
              var state_val_17716 = state_17715[1];
              if (state_val_17716 === 7) {
                var inst_17696 = state_17715[5];
                var inst_17701 = state_17715[2];
                var inst_17702 = cljs.core.next.call(null, inst_17696);
                var inst_17696__$1 = inst_17702;
                var state_17715__$1 = function() {
                  var statearr_17717 = state_17715;
                  statearr_17717[5] = inst_17696__$1;
                  statearr_17717[6] = inst_17701;
                  return statearr_17717;
                }();
                var statearr_17718_17732 = state_17715__$1;
                statearr_17718_17732[2] = null;
                statearr_17718_17732[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17716 === 1) {
                  var inst_17695 = cljs.core.seq.call(null, coll);
                  var inst_17696 = inst_17695;
                  var state_17715__$1 = function() {
                    var statearr_17719 = state_17715;
                    statearr_17719[5] = inst_17696;
                    return statearr_17719;
                  }();
                  var statearr_17720_17733 = state_17715__$1;
                  statearr_17720_17733[2] = null;
                  statearr_17720_17733[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17716 === 4) {
                    var inst_17696 = state_17715[5];
                    var inst_17699 = cljs.core.first.call(null, inst_17696);
                    var state_17715__$1 = state_17715;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17715__$1, 7, ch, inst_17699);
                  } else {
                    if (state_val_17716 === 6) {
                      var inst_17711 = state_17715[2];
                      var state_17715__$1 = state_17715;
                      var statearr_17721_17734 = state_17715__$1;
                      statearr_17721_17734[2] = inst_17711;
                      statearr_17721_17734[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17716 === 3) {
                        var inst_17713 = state_17715[2];
                        var state_17715__$1 = state_17715;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17715__$1, inst_17713);
                      } else {
                        if (state_val_17716 === 2) {
                          var inst_17696 = state_17715[5];
                          var state_17715__$1 = state_17715;
                          if (cljs.core.truth_(inst_17696)) {
                            var statearr_17722_17735 = state_17715__$1;
                            statearr_17722_17735[1] = 4;
                          } else {
                            var statearr_17723_17736 = state_17715__$1;
                            statearr_17723_17736[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17716 === 9) {
                            var state_17715__$1 = state_17715;
                            var statearr_17724_17737 = state_17715__$1;
                            statearr_17724_17737[2] = null;
                            statearr_17724_17737[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17716 === 5) {
                              var state_17715__$1 = state_17715;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_17725_17738 = state_17715__$1;
                                statearr_17725_17738[1] = 8;
                              } else {
                                var statearr_17726_17739 = state_17715__$1;
                                statearr_17726_17739[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17716 === 10) {
                                var inst_17709 = state_17715[2];
                                var state_17715__$1 = state_17715;
                                var statearr_17727_17740 = state_17715__$1;
                                statearr_17727_17740[2] = inst_17709;
                                statearr_17727_17740[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17716 === 8) {
                                  var inst_17706 = cljs.core.async.close_BANG_.call(null, ch);
                                  var state_17715__$1 = state_17715;
                                  var statearr_17728_17741 = state_17715__$1;
                                  statearr_17728_17741[2] = inst_17706;
                                  statearr_17728_17741[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6209__auto__);
          return function(switch__6196__auto__, c__6209__auto__) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_17730 = [null, null, null, null, null, null, null];
                statearr_17730[0] = state_machine__6197__auto__;
                statearr_17730[1] = 1;
                return statearr_17730;
              };
              var state_machine__6197__auto____1 = function(state_17715) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_17715);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_17715) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_17715);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto__);
        }();
        var state__6211__auto__ = function() {
          var statearr_17731 = f__6210__auto__.call(null);
          statearr_17731[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto__;
          return statearr_17731;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto__));
    return c__6209__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj17743 = {};
  return obj17743;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3651__auto__ = _;
    if (and__3651__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4300__auto__ = _ == null ? null : _;
    return function() {
      var or__3663__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj17745 = {};
  return obj17745;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t17958 !== "undefined") {
    } else {
      cljs.core.async.t17958 = function(cs, ch, mult, meta17959) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta17959 = meta17959;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t17958.cljs$lang$type = true;
      cljs.core.async.t17958.cljs$lang$ctorStr = "cljs.core.async/t17958";
      cljs.core.async.t17958.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
          return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t17958");
        };
      }(cs);
      cljs.core.async.t17958.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t17958.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t17958.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t17958.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t17958.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17958.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t17958.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_17960) {
          var self__ = this;
          var _17960__$1 = this;
          return self__.meta17959;
        };
      }(cs);
      cljs.core.async.t17958.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_17960, meta17959__$1) {
          var self__ = this;
          var _17960__$1 = this;
          return new cljs.core.async.t17958(self__.cs, self__.ch, self__.mult, meta17959__$1);
        };
      }(cs);
      cljs.core.async.__GT_t17958 = function(cs) {
        return function __GT_t17958(cs__$1, ch__$1, mult__$1, meta17959) {
          return new cljs.core.async.t17958(cs__$1, ch__$1, mult__$1, meta17959);
        };
      }(cs);
    }
    return new cljs.core.async.t17958(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6209__auto___18170 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___18170, cs, m, dchan, dctr, done) {
    return function() {
      var f__6210__auto__ = function() {
        var switch__6196__auto__ = function(c__6209__auto___18170, cs, m, dchan, dctr, done) {
          return function(state_18088) {
            var state_val_18089 = state_18088[1];
            if (state_val_18089 === 7) {
              var inst_18084 = state_18088[2];
              var state_18088__$1 = state_18088;
              var statearr_18090_18171 = state_18088__$1;
              statearr_18090_18171[2] = inst_18084;
              statearr_18090_18171[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18089 === 20) {
                var inst_17992 = state_18088[5];
                var inst_18002 = cljs.core.first.call(null, inst_17992);
                var inst_18003 = cljs.core.nth.call(null, inst_18002, 0, null);
                var inst_18004 = cljs.core.nth.call(null, inst_18002, 1, null);
                var state_18088__$1 = function() {
                  var statearr_18091 = state_18088;
                  statearr_18091[6] = inst_18003;
                  return statearr_18091;
                }();
                if (cljs.core.truth_(inst_18004)) {
                  var statearr_18092_18172 = state_18088__$1;
                  statearr_18092_18172[1] = 22;
                } else {
                  var statearr_18093_18173 = state_18088__$1;
                  statearr_18093_18173[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18089 === 27) {
                  var inst_18034 = state_18088[7];
                  var inst_18032 = state_18088[8];
                  var inst_18039 = cljs.core._nth.call(null, inst_18032, inst_18034);
                  var state_18088__$1 = function() {
                    var statearr_18094 = state_18088;
                    statearr_18094[9] = inst_18039;
                    return statearr_18094;
                  }();
                  var statearr_18095_18174 = state_18088__$1;
                  statearr_18095_18174[2] = null;
                  statearr_18095_18174[1] = 32;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18089 === 1) {
                    var state_18088__$1 = state_18088;
                    var statearr_18096_18175 = state_18088__$1;
                    statearr_18096_18175[2] = null;
                    statearr_18096_18175[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18089 === 24) {
                      var inst_17992 = state_18088[5];
                      var inst_18009 = state_18088[2];
                      var inst_18010 = cljs.core.next.call(null, inst_17992);
                      var inst_17972 = inst_18010;
                      var inst_17973 = null;
                      var inst_17974 = 0;
                      var inst_17975 = 0;
                      var state_18088__$1 = function() {
                        var statearr_18097 = state_18088;
                        statearr_18097[10] = inst_17974;
                        statearr_18097[11] = inst_18009;
                        statearr_18097[12] = inst_17973;
                        statearr_18097[13] = inst_17975;
                        statearr_18097[14] = inst_17972;
                        return statearr_18097;
                      }();
                      var statearr_18098_18176 = state_18088__$1;
                      statearr_18098_18176[2] = null;
                      statearr_18098_18176[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18089 === 39) {
                        var inst_18051 = state_18088[15];
                        var inst_18068 = state_18088[2];
                        var inst_18069 = cljs.core.next.call(null, inst_18051);
                        var inst_18031 = inst_18069;
                        var inst_18032 = null;
                        var inst_18033 = 0;
                        var inst_18034 = 0;
                        var state_18088__$1 = function() {
                          var statearr_18102 = state_18088;
                          statearr_18102[16] = inst_18031;
                          statearr_18102[17] = inst_18068;
                          statearr_18102[7] = inst_18034;
                          statearr_18102[18] = inst_18033;
                          statearr_18102[8] = inst_18032;
                          return statearr_18102;
                        }();
                        var statearr_18103_18177 = state_18088__$1;
                        statearr_18103_18177[2] = null;
                        statearr_18103_18177[1] = 25;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18089 === 4) {
                          var inst_17963 = state_18088[19];
                          var inst_17963__$1 = state_18088[2];
                          var inst_17964 = inst_17963__$1 == null;
                          var state_18088__$1 = function() {
                            var statearr_18104 = state_18088;
                            statearr_18104[19] = inst_17963__$1;
                            return statearr_18104;
                          }();
                          if (cljs.core.truth_(inst_17964)) {
                            var statearr_18105_18178 = state_18088__$1;
                            statearr_18105_18178[1] = 5;
                          } else {
                            var statearr_18106_18179 = state_18088__$1;
                            statearr_18106_18179[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18089 === 15) {
                            var inst_17974 = state_18088[10];
                            var inst_17973 = state_18088[12];
                            var inst_17975 = state_18088[13];
                            var inst_17972 = state_18088[14];
                            var inst_17988 = state_18088[2];
                            var inst_17989 = inst_17975 + 1;
                            var tmp18099 = inst_17974;
                            var tmp18100 = inst_17973;
                            var tmp18101 = inst_17972;
                            var inst_17972__$1 = tmp18101;
                            var inst_17973__$1 = tmp18100;
                            var inst_17974__$1 = tmp18099;
                            var inst_17975__$1 = inst_17989;
                            var state_18088__$1 = function() {
                              var statearr_18107 = state_18088;
                              statearr_18107[10] = inst_17974__$1;
                              statearr_18107[12] = inst_17973__$1;
                              statearr_18107[20] = inst_17988;
                              statearr_18107[13] = inst_17975__$1;
                              statearr_18107[14] = inst_17972__$1;
                              return statearr_18107;
                            }();
                            var statearr_18108_18180 = state_18088__$1;
                            statearr_18108_18180[2] = null;
                            statearr_18108_18180[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18089 === 21) {
                              var inst_18013 = state_18088[2];
                              var state_18088__$1 = state_18088;
                              var statearr_18109_18181 = state_18088__$1;
                              statearr_18109_18181[2] = inst_18013;
                              statearr_18109_18181[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18089 === 31) {
                                var inst_18039 = state_18088[9];
                                var inst_18040 = state_18088[2];
                                var inst_18041 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_18042 = cljs.core.async.untap_STAR_.call(null, m, inst_18039);
                                var state_18088__$1 = function() {
                                  var statearr_18110 = state_18088;
                                  statearr_18110[21] = inst_18040;
                                  statearr_18110[22] = inst_18041;
                                  return statearr_18110;
                                }();
                                var statearr_18111_18182 = state_18088__$1;
                                statearr_18111_18182[2] = inst_18042;
                                statearr_18111_18182[1] = 30;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18089 === 32) {
                                  try {
                                    var inst_17963 = state_18088[19];
                                    var inst_18039 = state_18088[9];
                                    var inst_18045 = cljs.core.async.put_BANG_.call(null, inst_18039, inst_17963, done);
                                    var state_18088__$1 = state_18088;
                                    var statearr_18114_18183 = state_18088__$1;
                                    statearr_18114_18183[2] = inst_18045;
                                    statearr_18114_18183[1] = 30;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e18112) {
                                    if (e18112 instanceof Object) {
                                      var ex__6190__auto__ = e18112;
                                      var statearr_18113_18184 = state_18088;
                                      statearr_18113_18184[1] = 31;
                                      statearr_18113_18184[2] = ex__6190__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e18112;
                                    }
                                  }
                                } else {
                                  if (state_val_18089 === 40) {
                                    var inst_18060 = state_18088[23];
                                    var inst_18061 = state_18088[2];
                                    var inst_18062 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_18063 = cljs.core.async.untap_STAR_.call(null, m, inst_18060);
                                    var state_18088__$1 = function() {
                                      var statearr_18115 = state_18088;
                                      statearr_18115[24] = inst_18061;
                                      statearr_18115[25] = inst_18062;
                                      return statearr_18115;
                                    }();
                                    var statearr_18116_18185 = state_18088__$1;
                                    statearr_18116_18185[2] = inst_18063;
                                    statearr_18116_18185[1] = 39;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18089 === 33) {
                                      var inst_18051 = state_18088[15];
                                      var inst_18053 = cljs.core.chunked_seq_QMARK_.call(null, inst_18051);
                                      var state_18088__$1 = state_18088;
                                      if (inst_18053) {
                                        var statearr_18117_18186 = state_18088__$1;
                                        statearr_18117_18186[1] = 36;
                                      } else {
                                        var statearr_18118_18187 = state_18088__$1;
                                        statearr_18118_18187[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18089 === 13) {
                                        var inst_17982 = state_18088[26];
                                        var inst_17985 = cljs.core.async.close_BANG_.call(null, inst_17982);
                                        var state_18088__$1 = state_18088;
                                        var statearr_18119_18188 = state_18088__$1;
                                        statearr_18119_18188[2] = inst_17985;
                                        statearr_18119_18188[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18089 === 22) {
                                          var inst_18003 = state_18088[6];
                                          var inst_18006 = cljs.core.async.close_BANG_.call(null, inst_18003);
                                          var state_18088__$1 = state_18088;
                                          var statearr_18120_18189 = state_18088__$1;
                                          statearr_18120_18189[2] = inst_18006;
                                          statearr_18120_18189[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18089 === 36) {
                                            var inst_18051 = state_18088[15];
                                            var inst_18055 = cljs.core.chunk_first.call(null, inst_18051);
                                            var inst_18056 = cljs.core.chunk_rest.call(null, inst_18051);
                                            var inst_18057 = cljs.core.count.call(null, inst_18055);
                                            var inst_18031 = inst_18056;
                                            var inst_18032 = inst_18055;
                                            var inst_18033 = inst_18057;
                                            var inst_18034 = 0;
                                            var state_18088__$1 = function() {
                                              var statearr_18121 = state_18088;
                                              statearr_18121[16] = inst_18031;
                                              statearr_18121[7] = inst_18034;
                                              statearr_18121[18] = inst_18033;
                                              statearr_18121[8] = inst_18032;
                                              return statearr_18121;
                                            }();
                                            var statearr_18122_18190 = state_18088__$1;
                                            statearr_18122_18190[2] = null;
                                            statearr_18122_18190[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18089 === 41) {
                                              try {
                                                var inst_17963 = state_18088[19];
                                                var inst_18060 = state_18088[23];
                                                var inst_18066 = cljs.core.async.put_BANG_.call(null, inst_18060, inst_17963, done);
                                                var state_18088__$1 = state_18088;
                                                var statearr_18125_18191 = state_18088__$1;
                                                statearr_18125_18191[2] = inst_18066;
                                                statearr_18125_18191[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } catch (e18123) {
                                                if (e18123 instanceof Object) {
                                                  var ex__6190__auto__ = e18123;
                                                  var statearr_18124_18192 = state_18088;
                                                  statearr_18124_18192[1] = 40;
                                                  statearr_18124_18192[2] = ex__6190__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  throw e18123;
                                                }
                                              }
                                            } else {
                                              if (state_val_18089 === 29) {
                                                var inst_18077 = state_18088[2];
                                                var state_18088__$1 = state_18088;
                                                var statearr_18126_18193 = state_18088__$1;
                                                statearr_18126_18193[2] = inst_18077;
                                                statearr_18126_18193[1] = 26;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18089 === 6) {
                                                  var inst_18022 = cljs.core.deref.call(null, cs);
                                                  var inst_18023 = cljs.core.keys.call(null, inst_18022);
                                                  var inst_18024 = cljs.core.count.call(null, inst_18023);
                                                  var inst_18025 = cljs.core.reset_BANG_.call(null, dctr, inst_18024);
                                                  var inst_18030 = cljs.core.seq.call(null, inst_18023);
                                                  var inst_18031 = inst_18030;
                                                  var inst_18032 = null;
                                                  var inst_18033 = 0;
                                                  var inst_18034 = 0;
                                                  var state_18088__$1 = function() {
                                                    var statearr_18127 = state_18088;
                                                    statearr_18127[16] = inst_18031;
                                                    statearr_18127[7] = inst_18034;
                                                    statearr_18127[27] = inst_18025;
                                                    statearr_18127[18] = inst_18033;
                                                    statearr_18127[8] = inst_18032;
                                                    return statearr_18127;
                                                  }();
                                                  var statearr_18128_18194 = state_18088__$1;
                                                  statearr_18128_18194[2] = null;
                                                  statearr_18128_18194[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18089 === 28) {
                                                    var inst_18031 = state_18088[16];
                                                    var inst_18051 = state_18088[15];
                                                    var inst_18051__$1 = cljs.core.seq.call(null, inst_18031);
                                                    var state_18088__$1 = function() {
                                                      var statearr_18129 = state_18088;
                                                      statearr_18129[15] = inst_18051__$1;
                                                      return statearr_18129;
                                                    }();
                                                    if (inst_18051__$1) {
                                                      var statearr_18130_18195 = state_18088__$1;
                                                      statearr_18130_18195[1] = 33;
                                                    } else {
                                                      var statearr_18131_18196 = state_18088__$1;
                                                      statearr_18131_18196[1] = 34;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18089 === 25) {
                                                      var inst_18034 = state_18088[7];
                                                      var inst_18033 = state_18088[18];
                                                      var inst_18036 = inst_18034 < inst_18033;
                                                      var inst_18037 = inst_18036;
                                                      var state_18088__$1 = state_18088;
                                                      if (cljs.core.truth_(inst_18037)) {
                                                        var statearr_18132_18197 = state_18088__$1;
                                                        statearr_18132_18197[1] = 27;
                                                      } else {
                                                        var statearr_18133_18198 = state_18088__$1;
                                                        statearr_18133_18198[1] = 28;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18089 === 34) {
                                                        var state_18088__$1 = state_18088;
                                                        var statearr_18134_18199 = state_18088__$1;
                                                        statearr_18134_18199[2] = null;
                                                        statearr_18134_18199[1] = 35;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18089 === 17) {
                                                          var state_18088__$1 = state_18088;
                                                          var statearr_18135_18200 = state_18088__$1;
                                                          statearr_18135_18200[2] = null;
                                                          statearr_18135_18200[1] = 18;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18089 === 3) {
                                                            var inst_18086 = state_18088[2];
                                                            var state_18088__$1 = state_18088;
                                                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18088__$1, inst_18086);
                                                          } else {
                                                            if (state_val_18089 === 12) {
                                                              var inst_18018 = state_18088[2];
                                                              var state_18088__$1 = state_18088;
                                                              var statearr_18136_18201 = state_18088__$1;
                                                              statearr_18136_18201[2] = inst_18018;
                                                              statearr_18136_18201[1] = 9;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18089 === 2) {
                                                                var state_18088__$1 = state_18088;
                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18088__$1, 4, ch);
                                                              } else {
                                                                if (state_val_18089 === 23) {
                                                                  var state_18088__$1 = state_18088;
                                                                  var statearr_18137_18202 = state_18088__$1;
                                                                  statearr_18137_18202[2] = null;
                                                                  statearr_18137_18202[1] = 24;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_18089 === 35) {
                                                                    var inst_18075 = state_18088[2];
                                                                    var state_18088__$1 = state_18088;
                                                                    var statearr_18138_18203 = state_18088__$1;
                                                                    statearr_18138_18203[2] = inst_18075;
                                                                    statearr_18138_18203[1] = 29;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_18089 === 19) {
                                                                      var inst_17992 = state_18088[5];
                                                                      var inst_17996 = cljs.core.chunk_first.call(null, inst_17992);
                                                                      var inst_17997 = cljs.core.chunk_rest.call(null, inst_17992);
                                                                      var inst_17998 = cljs.core.count.call(null, inst_17996);
                                                                      var inst_17972 = inst_17997;
                                                                      var inst_17973 = inst_17996;
                                                                      var inst_17974 = inst_17998;
                                                                      var inst_17975 = 0;
                                                                      var state_18088__$1 = function() {
                                                                        var statearr_18139 = state_18088;
                                                                        statearr_18139[10] = inst_17974;
                                                                        statearr_18139[12] = inst_17973;
                                                                        statearr_18139[13] = inst_17975;
                                                                        statearr_18139[14] = inst_17972;
                                                                        return statearr_18139;
                                                                      }();
                                                                      var statearr_18140_18204 = state_18088__$1;
                                                                      statearr_18140_18204[2] = null;
                                                                      statearr_18140_18204[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_18089 === 11) {
                                                                        var inst_17992 = state_18088[5];
                                                                        var inst_17972 = state_18088[14];
                                                                        var inst_17992__$1 = cljs.core.seq.call(null, inst_17972);
                                                                        var state_18088__$1 = function() {
                                                                          var statearr_18141 = state_18088;
                                                                          statearr_18141[5] = inst_17992__$1;
                                                                          return statearr_18141;
                                                                        }();
                                                                        if (inst_17992__$1) {
                                                                          var statearr_18142_18205 = state_18088__$1;
                                                                          statearr_18142_18205[1] = 16;
                                                                        } else {
                                                                          var statearr_18143_18206 = state_18088__$1;
                                                                          statearr_18143_18206[1] = 17;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_18089 === 9) {
                                                                          var inst_18020 = state_18088[2];
                                                                          var state_18088__$1 = state_18088;
                                                                          var statearr_18144_18207 = state_18088__$1;
                                                                          statearr_18144_18207[2] = inst_18020;
                                                                          statearr_18144_18207[1] = 7;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_18089 === 5) {
                                                                            var inst_17970 = cljs.core.deref.call(null, cs);
                                                                            var inst_17971 = cljs.core.seq.call(null, inst_17970);
                                                                            var inst_17972 = inst_17971;
                                                                            var inst_17973 = null;
                                                                            var inst_17974 = 0;
                                                                            var inst_17975 = 0;
                                                                            var state_18088__$1 = function() {
                                                                              var statearr_18145 = state_18088;
                                                                              statearr_18145[10] = inst_17974;
                                                                              statearr_18145[12] = inst_17973;
                                                                              statearr_18145[13] = inst_17975;
                                                                              statearr_18145[14] = inst_17972;
                                                                              return statearr_18145;
                                                                            }();
                                                                            var statearr_18146_18208 = state_18088__$1;
                                                                            statearr_18146_18208[2] = null;
                                                                            statearr_18146_18208[1] = 8;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_18089 === 14) {
                                                                              var state_18088__$1 = state_18088;
                                                                              var statearr_18147_18209 = state_18088__$1;
                                                                              statearr_18147_18209[2] = null;
                                                                              statearr_18147_18209[1] = 15;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_18089 === 26) {
                                                                                var inst_18079 = state_18088[2];
                                                                                var state_18088__$1 = function() {
                                                                                  var statearr_18148 = state_18088;
                                                                                  statearr_18148[28] = inst_18079;
                                                                                  return statearr_18148;
                                                                                }();
                                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18088__$1, 42, dchan);
                                                                              } else {
                                                                                if (state_val_18089 === 16) {
                                                                                  var inst_17992 = state_18088[5];
                                                                                  var inst_17994 = cljs.core.chunked_seq_QMARK_.call(null, inst_17992);
                                                                                  var state_18088__$1 = state_18088;
                                                                                  if (inst_17994) {
                                                                                    var statearr_18152_18210 = state_18088__$1;
                                                                                    statearr_18152_18210[1] = 19;
                                                                                  } else {
                                                                                    var statearr_18153_18211 = state_18088__$1;
                                                                                    statearr_18153_18211[1] = 20;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_18089 === 38) {
                                                                                    var inst_18072 = state_18088[2];
                                                                                    var state_18088__$1 = state_18088;
                                                                                    var statearr_18154_18212 = state_18088__$1;
                                                                                    statearr_18154_18212[2] = inst_18072;
                                                                                    statearr_18154_18212[1] = 35;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_18089 === 30) {
                                                                                      var inst_18031 = state_18088[16];
                                                                                      var inst_18034 = state_18088[7];
                                                                                      var inst_18033 = state_18088[18];
                                                                                      var inst_18032 = state_18088[8];
                                                                                      var inst_18047 = state_18088[2];
                                                                                      var inst_18048 = inst_18034 + 1;
                                                                                      var tmp18149 = inst_18031;
                                                                                      var tmp18150 = inst_18033;
                                                                                      var tmp18151 = inst_18032;
                                                                                      var inst_18031__$1 = tmp18149;
                                                                                      var inst_18032__$1 = tmp18151;
                                                                                      var inst_18033__$1 = tmp18150;
                                                                                      var inst_18034__$1 = inst_18048;
                                                                                      var state_18088__$1 = function() {
                                                                                        var statearr_18155 = state_18088;
                                                                                        statearr_18155[29] = inst_18047;
                                                                                        statearr_18155[16] = inst_18031__$1;
                                                                                        statearr_18155[7] = inst_18034__$1;
                                                                                        statearr_18155[18] = inst_18033__$1;
                                                                                        statearr_18155[8] = inst_18032__$1;
                                                                                        return statearr_18155;
                                                                                      }();
                                                                                      var statearr_18156_18213 = state_18088__$1;
                                                                                      statearr_18156_18213[2] = null;
                                                                                      statearr_18156_18213[1] = 25;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_18089 === 10) {
                                                                                        var inst_17973 = state_18088[12];
                                                                                        var inst_17975 = state_18088[13];
                                                                                        var inst_17981 = cljs.core._nth.call(null, inst_17973, inst_17975);
                                                                                        var inst_17982 = cljs.core.nth.call(null, inst_17981, 0, null);
                                                                                        var inst_17983 = cljs.core.nth.call(null, inst_17981, 1, null);
                                                                                        var state_18088__$1 = function() {
                                                                                          var statearr_18157 = state_18088;
                                                                                          statearr_18157[26] = inst_17982;
                                                                                          return statearr_18157;
                                                                                        }();
                                                                                        if (cljs.core.truth_(inst_17983)) {
                                                                                          var statearr_18158_18214 = state_18088__$1;
                                                                                          statearr_18158_18214[1] = 13;
                                                                                        } else {
                                                                                          var statearr_18159_18215 = state_18088__$1;
                                                                                          statearr_18159_18215[1] = 14;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_18089 === 18) {
                                                                                          var inst_18016 = state_18088[2];
                                                                                          var state_18088__$1 = state_18088;
                                                                                          var statearr_18160_18216 = state_18088__$1;
                                                                                          statearr_18160_18216[2] = inst_18016;
                                                                                          statearr_18160_18216[1] = 12;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_18089 === 42) {
                                                                                            var inst_18081 = state_18088[2];
                                                                                            var state_18088__$1 = function() {
                                                                                              var statearr_18161 = state_18088;
                                                                                              statearr_18161[30] = inst_18081;
                                                                                              return statearr_18161;
                                                                                            }();
                                                                                            var statearr_18162_18217 = state_18088__$1;
                                                                                            statearr_18162_18217[2] = null;
                                                                                            statearr_18162_18217[1] = 2;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_18089 === 37) {
                                                                                              var inst_18051 = state_18088[15];
                                                                                              var inst_18060 = cljs.core.first.call(null, inst_18051);
                                                                                              var state_18088__$1 = function() {
                                                                                                var statearr_18163 = state_18088;
                                                                                                statearr_18163[23] = inst_18060;
                                                                                                return statearr_18163;
                                                                                              }();
                                                                                              var statearr_18164_18218 = state_18088__$1;
                                                                                              statearr_18164_18218[2] = null;
                                                                                              statearr_18164_18218[1] = 41;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_18089 === 8) {
                                                                                                var inst_17974 = state_18088[10];
                                                                                                var inst_17975 = state_18088[13];
                                                                                                var inst_17977 = inst_17975 < inst_17974;
                                                                                                var inst_17978 = inst_17977;
                                                                                                var state_18088__$1 = state_18088;
                                                                                                if (cljs.core.truth_(inst_17978)) {
                                                                                                  var statearr_18165_18219 = state_18088__$1;
                                                                                                  statearr_18165_18219[1] = 10;
                                                                                                } else {
                                                                                                  var statearr_18166_18220 = state_18088__$1;
                                                                                                  statearr_18166_18220[1] = 11;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                return null;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6209__auto___18170, cs, m, dchan, dctr, done);
        return function(switch__6196__auto__, c__6209__auto___18170, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__6197__auto__ = null;
            var state_machine__6197__auto____0 = function() {
              var statearr_18168 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18168[0] = state_machine__6197__auto__;
              statearr_18168[1] = 1;
              return statearr_18168;
            };
            var state_machine__6197__auto____1 = function(state_18088) {
              while (true) {
                var result__6198__auto__ = switch__6196__auto__.call(null, state_18088);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6198__auto__;
                }
                break;
              }
            };
            state_machine__6197__auto__ = function(state_18088) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6197__auto____0.call(this);
                case 1:
                  return state_machine__6197__auto____1.call(this, state_18088);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
            return state_machine__6197__auto__;
          }();
        }(switch__6196__auto__, c__6209__auto___18170, cs, m, dchan, dctr, done);
      }();
      var state__6211__auto__ = function() {
        var statearr_18169 = f__6210__auto__.call(null);
        statearr_18169[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___18170;
        return statearr_18169;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
    };
  }(c__6209__auto___18170, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj18222 = {};
  return obj18222;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3651__auto__ = m;
    if (and__3651__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4300__auto__ = m == null ? null : m;
    return function() {
      var or__3663__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t18328 !== "undefined") {
    } else {
      cljs.core.async.t18328 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta18329) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta18329 = meta18329;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18328.cljs$lang$type = true;
      cljs.core.async.t18328.cljs$lang$ctorStr = "cljs.core.async/t18328";
      cljs.core.async.t18328.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
          return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t18328");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t18328.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18328.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18330) {
          var self__ = this;
          var _18330__$1 = this;
          return self__.meta18329;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18328.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18330, meta18329__$1) {
          var self__ = this;
          var _18330__$1 = this;
          return new cljs.core.async.t18328(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta18329__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t18328 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t18328(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18329) {
          return new cljs.core.async.t18328(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18329);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t18328(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__6209__auto___18433 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___18433, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6210__auto__ = function() {
        var switch__6196__auto__ = function(c__6209__auto___18433, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_18395) {
            var state_val_18396 = state_18395[1];
            if (state_val_18396 === 7) {
              var inst_18344 = state_18395[5];
              var inst_18349 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18344);
              var state_18395__$1 = state_18395;
              var statearr_18397_18434 = state_18395__$1;
              statearr_18397_18434[2] = inst_18349;
              statearr_18397_18434[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18396 === 20) {
                var inst_18359 = state_18395[6];
                var state_18395__$1 = state_18395;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18395__$1, 23, out, inst_18359);
              } else {
                if (state_val_18396 === 1) {
                  var inst_18334 = state_18395[7];
                  var inst_18334__$1 = calc_state.call(null);
                  var inst_18335 = cljs.core.seq_QMARK_.call(null, inst_18334__$1);
                  var state_18395__$1 = function() {
                    var statearr_18398 = state_18395;
                    statearr_18398[7] = inst_18334__$1;
                    return statearr_18398;
                  }();
                  if (inst_18335) {
                    var statearr_18399_18435 = state_18395__$1;
                    statearr_18399_18435[1] = 2;
                  } else {
                    var statearr_18400_18436 = state_18395__$1;
                    statearr_18400_18436[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18396 === 4) {
                    var inst_18334 = state_18395[7];
                    var inst_18340 = state_18395[2];
                    var inst_18341 = cljs.core.get.call(null, inst_18340, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                    var inst_18342 = cljs.core.get.call(null, inst_18340, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                    var inst_18343 = cljs.core.get.call(null, inst_18340, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                    var inst_18344 = inst_18334;
                    var state_18395__$1 = function() {
                      var statearr_18401 = state_18395;
                      statearr_18401[8] = inst_18343;
                      statearr_18401[5] = inst_18344;
                      statearr_18401[9] = inst_18342;
                      statearr_18401[10] = inst_18341;
                      return statearr_18401;
                    }();
                    var statearr_18402_18437 = state_18395__$1;
                    statearr_18402_18437[2] = null;
                    statearr_18402_18437[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18396 === 15) {
                      var state_18395__$1 = state_18395;
                      var statearr_18403_18438 = state_18395__$1;
                      statearr_18403_18438[2] = null;
                      statearr_18403_18438[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18396 === 21) {
                        var state_18395__$1 = state_18395;
                        var statearr_18404_18439 = state_18395__$1;
                        statearr_18404_18439[2] = null;
                        statearr_18404_18439[1] = 22;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18396 === 13) {
                          var inst_18391 = state_18395[2];
                          var state_18395__$1 = state_18395;
                          var statearr_18405_18440 = state_18395__$1;
                          statearr_18405_18440[2] = inst_18391;
                          statearr_18405_18440[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18396 === 22) {
                            var inst_18352 = state_18395[11];
                            var inst_18388 = state_18395[2];
                            var inst_18344 = inst_18352;
                            var state_18395__$1 = function() {
                              var statearr_18406 = state_18395;
                              statearr_18406[5] = inst_18344;
                              statearr_18406[12] = inst_18388;
                              return statearr_18406;
                            }();
                            var statearr_18407_18441 = state_18395__$1;
                            statearr_18407_18441[2] = null;
                            statearr_18407_18441[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18396 === 6) {
                              var inst_18393 = state_18395[2];
                              var state_18395__$1 = state_18395;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18395__$1, inst_18393);
                            } else {
                              if (state_val_18396 === 17) {
                                var inst_18374 = state_18395[13];
                                var state_18395__$1 = state_18395;
                                var statearr_18408_18442 = state_18395__$1;
                                statearr_18408_18442[2] = inst_18374;
                                statearr_18408_18442[1] = 19;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18396 === 3) {
                                  var inst_18334 = state_18395[7];
                                  var state_18395__$1 = state_18395;
                                  var statearr_18409_18443 = state_18395__$1;
                                  statearr_18409_18443[2] = inst_18334;
                                  statearr_18409_18443[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18396 === 12) {
                                    var inst_18355 = state_18395[14];
                                    var inst_18360 = state_18395[15];
                                    var inst_18374 = state_18395[13];
                                    var inst_18374__$1 = inst_18355.call(null, inst_18360);
                                    var state_18395__$1 = function() {
                                      var statearr_18410 = state_18395;
                                      statearr_18410[13] = inst_18374__$1;
                                      return statearr_18410;
                                    }();
                                    if (cljs.core.truth_(inst_18374__$1)) {
                                      var statearr_18411_18444 = state_18395__$1;
                                      statearr_18411_18444[1] = 17;
                                    } else {
                                      var statearr_18412_18445 = state_18395__$1;
                                      statearr_18412_18445[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18396 === 2) {
                                      var inst_18334 = state_18395[7];
                                      var inst_18337 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18334);
                                      var state_18395__$1 = state_18395;
                                      var statearr_18413_18446 = state_18395__$1;
                                      statearr_18413_18446[2] = inst_18337;
                                      statearr_18413_18446[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18396 === 23) {
                                        var inst_18385 = state_18395[2];
                                        var state_18395__$1 = state_18395;
                                        var statearr_18414_18447 = state_18395__$1;
                                        statearr_18414_18447[2] = inst_18385;
                                        statearr_18414_18447[1] = 22;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18396 === 19) {
                                          var inst_18382 = state_18395[2];
                                          var state_18395__$1 = state_18395;
                                          if (cljs.core.truth_(inst_18382)) {
                                            var statearr_18415_18448 = state_18395__$1;
                                            statearr_18415_18448[1] = 20;
                                          } else {
                                            var statearr_18416_18449 = state_18395__$1;
                                            statearr_18416_18449[1] = 21;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18396 === 11) {
                                            var inst_18359 = state_18395[6];
                                            var inst_18365 = inst_18359 == null;
                                            var state_18395__$1 = state_18395;
                                            if (cljs.core.truth_(inst_18365)) {
                                              var statearr_18417_18450 = state_18395__$1;
                                              statearr_18417_18450[1] = 14;
                                            } else {
                                              var statearr_18418_18451 = state_18395__$1;
                                              statearr_18418_18451[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18396 === 9) {
                                              var inst_18352 = state_18395[11];
                                              var inst_18352__$1 = state_18395[2];
                                              var inst_18353 = cljs.core.get.call(null, inst_18352__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                              var inst_18354 = cljs.core.get.call(null, inst_18352__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                              var inst_18355 = cljs.core.get.call(null, inst_18352__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                              var state_18395__$1 = function() {
                                                var statearr_18419 = state_18395;
                                                statearr_18419[14] = inst_18355;
                                                statearr_18419[16] = inst_18354;
                                                statearr_18419[11] = inst_18352__$1;
                                                return statearr_18419;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_18395__$1, 10, inst_18353);
                                            } else {
                                              if (state_val_18396 === 5) {
                                                var inst_18344 = state_18395[5];
                                                var inst_18347 = cljs.core.seq_QMARK_.call(null, inst_18344);
                                                var state_18395__$1 = state_18395;
                                                if (inst_18347) {
                                                  var statearr_18420_18452 = state_18395__$1;
                                                  statearr_18420_18452[1] = 7;
                                                } else {
                                                  var statearr_18421_18453 = state_18395__$1;
                                                  statearr_18421_18453[1] = 8;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18396 === 14) {
                                                  var inst_18360 = state_18395[15];
                                                  var inst_18367 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_18360);
                                                  var state_18395__$1 = state_18395;
                                                  var statearr_18422_18454 = state_18395__$1;
                                                  statearr_18422_18454[2] = inst_18367;
                                                  statearr_18422_18454[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18396 === 16) {
                                                    var inst_18370 = state_18395[2];
                                                    var inst_18371 = calc_state.call(null);
                                                    var inst_18344 = inst_18371;
                                                    var state_18395__$1 = function() {
                                                      var statearr_18423 = state_18395;
                                                      statearr_18423[17] = inst_18370;
                                                      statearr_18423[5] = inst_18344;
                                                      return statearr_18423;
                                                    }();
                                                    var statearr_18424_18455 = state_18395__$1;
                                                    statearr_18424_18455[2] = null;
                                                    statearr_18424_18455[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18396 === 10) {
                                                      var inst_18359 = state_18395[6];
                                                      var inst_18360 = state_18395[15];
                                                      var inst_18358 = state_18395[2];
                                                      var inst_18359__$1 = cljs.core.nth.call(null, inst_18358, 0, null);
                                                      var inst_18360__$1 = cljs.core.nth.call(null, inst_18358, 1, null);
                                                      var inst_18361 = inst_18359__$1 == null;
                                                      var inst_18362 = cljs.core._EQ_.call(null, inst_18360__$1, change);
                                                      var inst_18363 = inst_18361 || inst_18362;
                                                      var state_18395__$1 = function() {
                                                        var statearr_18425 = state_18395;
                                                        statearr_18425[6] = inst_18359__$1;
                                                        statearr_18425[15] = inst_18360__$1;
                                                        return statearr_18425;
                                                      }();
                                                      if (cljs.core.truth_(inst_18363)) {
                                                        var statearr_18426_18456 = state_18395__$1;
                                                        statearr_18426_18456[1] = 11;
                                                      } else {
                                                        var statearr_18427_18457 = state_18395__$1;
                                                        statearr_18427_18457[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18396 === 18) {
                                                        var inst_18355 = state_18395[14];
                                                        var inst_18354 = state_18395[16];
                                                        var inst_18360 = state_18395[15];
                                                        var inst_18377 = cljs.core.empty_QMARK_.call(null, inst_18355);
                                                        var inst_18378 = inst_18354.call(null, inst_18360);
                                                        var inst_18379 = cljs.core.not.call(null, inst_18378);
                                                        var inst_18380 = inst_18377 && inst_18379;
                                                        var state_18395__$1 = state_18395;
                                                        var statearr_18428_18458 = state_18395__$1;
                                                        statearr_18428_18458[2] = inst_18380;
                                                        statearr_18428_18458[1] = 19;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18396 === 8) {
                                                          var inst_18344 = state_18395[5];
                                                          var state_18395__$1 = state_18395;
                                                          var statearr_18429_18459 = state_18395__$1;
                                                          statearr_18429_18459[2] = inst_18344;
                                                          statearr_18429_18459[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6209__auto___18433, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6196__auto__, c__6209__auto___18433, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__6197__auto__ = null;
            var state_machine__6197__auto____0 = function() {
              var statearr_18431 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18431[0] = state_machine__6197__auto__;
              statearr_18431[1] = 1;
              return statearr_18431;
            };
            var state_machine__6197__auto____1 = function(state_18395) {
              while (true) {
                var result__6198__auto__ = switch__6196__auto__.call(null, state_18395);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6198__auto__;
                }
                break;
              }
            };
            state_machine__6197__auto__ = function(state_18395) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6197__auto____0.call(this);
                case 1:
                  return state_machine__6197__auto____1.call(this, state_18395);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
            return state_machine__6197__auto__;
          }();
        }(switch__6196__auto__, c__6209__auto___18433, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6211__auto__ = function() {
        var statearr_18432 = f__6210__auto__.call(null);
        statearr_18432[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___18433;
        return statearr_18432;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
    };
  }(c__6209__auto___18433, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj18461 = {};
  return obj18461;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3651__auto__ = p;
    if (and__3651__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4300__auto__ = p == null ? null : p;
    return function() {
      var or__3663__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3651__auto__ = p;
    if (and__3651__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4300__auto__ = p == null ? null : p;
    return function() {
      var or__3663__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3651__auto__ = p;
      if (and__3651__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4300__auto__ = p == null ? null : p;
      return function() {
        var or__3663__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3651__auto__ = p;
      if (and__3651__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3651__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4300__auto__ = p == null ? null : p;
      return function() {
        var or__3663__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4300__auto__)];
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          var or__3663__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3663__auto____$1) {
            return or__3663__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3663__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3663__auto__, mults) {
            return function(p1__18462_SHARP_) {
              if (cljs.core.truth_(p1__18462_SHARP_.call(null, topic))) {
                return p1__18462_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__18462_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3663__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t18586 !== "undefined") {
      } else {
        cljs.core.async.t18586 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta18587) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta18587 = meta18587;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t18586.cljs$lang$type = true;
        cljs.core.async.t18586.cljs$lang$ctorStr = "cljs.core.async/t18586";
        cljs.core.async.t18586.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
            return cljs.core._write.call(null, writer__4241__auto__, "cljs.core.async/t18586");
          };
        }(mults, ensure_mult);
        cljs.core.async.t18586.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t18586.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18586.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t18586.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18586.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18586.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t18586.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18586.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_18588) {
            var self__ = this;
            var _18588__$1 = this;
            return self__.meta18587;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18586.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_18588, meta18587__$1) {
            var self__ = this;
            var _18588__$1 = this;
            return new cljs.core.async.t18586(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta18587__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t18586 = function(mults, ensure_mult) {
          return function __GT_t18586(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18587) {
            return new cljs.core.async.t18586(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18587);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t18586(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__6209__auto___18709 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___18709, mults, ensure_mult, p) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto___18709, mults, ensure_mult, p) {
            return function(state_18661) {
              var state_val_18662 = state_18661[1];
              if (state_val_18662 === 7) {
                var inst_18657 = state_18661[2];
                var state_18661__$1 = state_18661;
                var statearr_18663_18710 = state_18661__$1;
                statearr_18663_18710[2] = inst_18657;
                statearr_18663_18710[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18662 === 20) {
                  var state_18661__$1 = state_18661;
                  var statearr_18664_18711 = state_18661__$1;
                  statearr_18664_18711[2] = null;
                  statearr_18664_18711[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18662 === 1) {
                    var state_18661__$1 = state_18661;
                    var statearr_18665_18712 = state_18661__$1;
                    statearr_18665_18712[2] = null;
                    statearr_18665_18712[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18662 === 24) {
                      try {
                        var inst_18641 = state_18661[5];
                        var inst_18591 = state_18661[6];
                        var inst_18647 = cljs.core.async.muxch_STAR_.call(null, inst_18641);
                        var state_18661__$1 = state_18661;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18661__$1, 25, inst_18647, inst_18591);
                      } catch (e18666) {
                        if (e18666 instanceof Object) {
                          var ex__6190__auto__ = e18666;
                          var statearr_18667_18713 = state_18661;
                          statearr_18667_18713[1] = 23;
                          statearr_18667_18713[2] = ex__6190__auto__;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e18666;
                        }
                      }
                    } else {
                      if (state_val_18662 === 4) {
                        var inst_18591 = state_18661[6];
                        var inst_18591__$1 = state_18661[2];
                        var inst_18592 = inst_18591__$1 == null;
                        var state_18661__$1 = function() {
                          var statearr_18668 = state_18661;
                          statearr_18668[6] = inst_18591__$1;
                          return statearr_18668;
                        }();
                        if (cljs.core.truth_(inst_18592)) {
                          var statearr_18669_18714 = state_18661__$1;
                          statearr_18669_18714[1] = 5;
                        } else {
                          var statearr_18670_18715 = state_18661__$1;
                          statearr_18670_18715[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18662 === 15) {
                          var inst_18633 = state_18661[2];
                          var state_18661__$1 = state_18661;
                          var statearr_18671_18716 = state_18661__$1;
                          statearr_18671_18716[2] = inst_18633;
                          statearr_18671_18716[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18662 === 21) {
                            var inst_18654 = state_18661[2];
                            var state_18661__$1 = function() {
                              var statearr_18672 = state_18661;
                              statearr_18672[7] = inst_18654;
                              return statearr_18672;
                            }();
                            var statearr_18673_18717 = state_18661__$1;
                            statearr_18673_18717[2] = null;
                            statearr_18673_18717[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18662 === 13) {
                              var inst_18615 = state_18661[8];
                              var inst_18617 = cljs.core.chunked_seq_QMARK_.call(null, inst_18615);
                              var state_18661__$1 = state_18661;
                              if (inst_18617) {
                                var statearr_18674_18718 = state_18661__$1;
                                statearr_18674_18718[1] = 16;
                              } else {
                                var statearr_18675_18719 = state_18661__$1;
                                statearr_18675_18719[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18662 === 22) {
                                var inst_18651 = state_18661[2];
                                var state_18661__$1 = state_18661;
                                var statearr_18676_18720 = state_18661__$1;
                                statearr_18676_18720[2] = inst_18651;
                                statearr_18676_18720[1] = 21;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18662 === 6) {
                                  var inst_18641 = state_18661[5];
                                  var inst_18639 = state_18661[9];
                                  var inst_18591 = state_18661[6];
                                  var inst_18639__$1 = topic_fn.call(null, inst_18591);
                                  var inst_18640 = cljs.core.deref.call(null, mults);
                                  var inst_18641__$1 = cljs.core.get.call(null, inst_18640, inst_18639__$1);
                                  var state_18661__$1 = function() {
                                    var statearr_18677 = state_18661;
                                    statearr_18677[5] = inst_18641__$1;
                                    statearr_18677[9] = inst_18639__$1;
                                    return statearr_18677;
                                  }();
                                  if (cljs.core.truth_(inst_18641__$1)) {
                                    var statearr_18678_18721 = state_18661__$1;
                                    statearr_18678_18721[1] = 19;
                                  } else {
                                    var statearr_18679_18722 = state_18661__$1;
                                    statearr_18679_18722[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18662 === 25) {
                                    try {
                                      var inst_18649 = state_18661[2];
                                      var state_18661__$1 = state_18661;
                                      var statearr_18682_18723 = state_18661__$1;
                                      statearr_18682_18723[2] = inst_18649;
                                      statearr_18682_18723[1] = 22;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } catch (e18680) {
                                      if (e18680 instanceof Object) {
                                        var ex__6190__auto__ = e18680;
                                        var statearr_18681_18724 = state_18661;
                                        statearr_18681_18724[1] = 23;
                                        statearr_18681_18724[2] = ex__6190__auto__;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        throw e18680;
                                      }
                                    }
                                  } else {
                                    if (state_val_18662 === 17) {
                                      var inst_18615 = state_18661[8];
                                      var inst_18624 = cljs.core.first.call(null, inst_18615);
                                      var inst_18625 = cljs.core.async.muxch_STAR_.call(null, inst_18624);
                                      var inst_18626 = cljs.core.async.close_BANG_.call(null, inst_18625);
                                      var inst_18627 = cljs.core.next.call(null, inst_18615);
                                      var inst_18601 = inst_18627;
                                      var inst_18602 = null;
                                      var inst_18603 = 0;
                                      var inst_18604 = 0;
                                      var state_18661__$1 = function() {
                                        var statearr_18683 = state_18661;
                                        statearr_18683[10] = inst_18602;
                                        statearr_18683[11] = inst_18601;
                                        statearr_18683[12] = inst_18626;
                                        statearr_18683[13] = inst_18604;
                                        statearr_18683[14] = inst_18603;
                                        return statearr_18683;
                                      }();
                                      var statearr_18684_18725 = state_18661__$1;
                                      statearr_18684_18725[2] = null;
                                      statearr_18684_18725[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18662 === 3) {
                                        var inst_18659 = state_18661[2];
                                        var state_18661__$1 = state_18661;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18661__$1, inst_18659);
                                      } else {
                                        if (state_val_18662 === 12) {
                                          var inst_18635 = state_18661[2];
                                          var state_18661__$1 = state_18661;
                                          var statearr_18685_18726 = state_18661__$1;
                                          statearr_18685_18726[2] = inst_18635;
                                          statearr_18685_18726[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18662 === 2) {
                                            var state_18661__$1 = state_18661;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18661__$1, 4, ch);
                                          } else {
                                            if (state_val_18662 === 23) {
                                              var inst_18639 = state_18661[9];
                                              var inst_18643 = state_18661[2];
                                              var inst_18644 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_18639);
                                              var state_18661__$1 = function() {
                                                var statearr_18686 = state_18661;
                                                statearr_18686[15] = inst_18643;
                                                return statearr_18686;
                                              }();
                                              var statearr_18687_18727 = state_18661__$1;
                                              statearr_18687_18727[2] = inst_18644;
                                              statearr_18687_18727[1] = 22;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18662 === 19) {
                                                var state_18661__$1 = state_18661;
                                                var statearr_18688_18728 = state_18661__$1;
                                                statearr_18688_18728[2] = null;
                                                statearr_18688_18728[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18662 === 11) {
                                                  var inst_18615 = state_18661[8];
                                                  var inst_18601 = state_18661[11];
                                                  var inst_18615__$1 = cljs.core.seq.call(null, inst_18601);
                                                  var state_18661__$1 = function() {
                                                    var statearr_18689 = state_18661;
                                                    statearr_18689[8] = inst_18615__$1;
                                                    return statearr_18689;
                                                  }();
                                                  if (inst_18615__$1) {
                                                    var statearr_18690_18729 = state_18661__$1;
                                                    statearr_18690_18729[1] = 13;
                                                  } else {
                                                    var statearr_18691_18730 = state_18661__$1;
                                                    statearr_18691_18730[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18662 === 9) {
                                                    var inst_18637 = state_18661[2];
                                                    var state_18661__$1 = state_18661;
                                                    var statearr_18692_18731 = state_18661__$1;
                                                    statearr_18692_18731[2] = inst_18637;
                                                    statearr_18692_18731[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18662 === 5) {
                                                      var inst_18598 = cljs.core.deref.call(null, mults);
                                                      var inst_18599 = cljs.core.vals.call(null, inst_18598);
                                                      var inst_18600 = cljs.core.seq.call(null, inst_18599);
                                                      var inst_18601 = inst_18600;
                                                      var inst_18602 = null;
                                                      var inst_18603 = 0;
                                                      var inst_18604 = 0;
                                                      var state_18661__$1 = function() {
                                                        var statearr_18693 = state_18661;
                                                        statearr_18693[10] = inst_18602;
                                                        statearr_18693[11] = inst_18601;
                                                        statearr_18693[13] = inst_18604;
                                                        statearr_18693[14] = inst_18603;
                                                        return statearr_18693;
                                                      }();
                                                      var statearr_18694_18732 = state_18661__$1;
                                                      statearr_18694_18732[2] = null;
                                                      statearr_18694_18732[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18662 === 14) {
                                                        var state_18661__$1 = state_18661;
                                                        var statearr_18698_18733 = state_18661__$1;
                                                        statearr_18698_18733[2] = null;
                                                        statearr_18698_18733[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18662 === 16) {
                                                          var inst_18615 = state_18661[8];
                                                          var inst_18619 = cljs.core.chunk_first.call(null, inst_18615);
                                                          var inst_18620 = cljs.core.chunk_rest.call(null, inst_18615);
                                                          var inst_18621 = cljs.core.count.call(null, inst_18619);
                                                          var inst_18601 = inst_18620;
                                                          var inst_18602 = inst_18619;
                                                          var inst_18603 = inst_18621;
                                                          var inst_18604 = 0;
                                                          var state_18661__$1 = function() {
                                                            var statearr_18699 = state_18661;
                                                            statearr_18699[10] = inst_18602;
                                                            statearr_18699[11] = inst_18601;
                                                            statearr_18699[13] = inst_18604;
                                                            statearr_18699[14] = inst_18603;
                                                            return statearr_18699;
                                                          }();
                                                          var statearr_18700_18734 = state_18661__$1;
                                                          statearr_18700_18734[2] = null;
                                                          statearr_18700_18734[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18662 === 10) {
                                                            var inst_18602 = state_18661[10];
                                                            var inst_18601 = state_18661[11];
                                                            var inst_18604 = state_18661[13];
                                                            var inst_18603 = state_18661[14];
                                                            var inst_18609 = cljs.core._nth.call(null, inst_18602, inst_18604);
                                                            var inst_18610 = cljs.core.async.muxch_STAR_.call(null, inst_18609);
                                                            var inst_18611 = cljs.core.async.close_BANG_.call(null, inst_18610);
                                                            var inst_18612 = inst_18604 + 1;
                                                            var tmp18695 = inst_18602;
                                                            var tmp18696 = inst_18601;
                                                            var tmp18697 = inst_18603;
                                                            var inst_18601__$1 = tmp18696;
                                                            var inst_18602__$1 = tmp18695;
                                                            var inst_18603__$1 = tmp18697;
                                                            var inst_18604__$1 = inst_18612;
                                                            var state_18661__$1 = function() {
                                                              var statearr_18701 = state_18661;
                                                              statearr_18701[10] = inst_18602__$1;
                                                              statearr_18701[11] = inst_18601__$1;
                                                              statearr_18701[16] = inst_18611;
                                                              statearr_18701[13] = inst_18604__$1;
                                                              statearr_18701[14] = inst_18603__$1;
                                                              return statearr_18701;
                                                            }();
                                                            var statearr_18702_18735 = state_18661__$1;
                                                            statearr_18702_18735[2] = null;
                                                            statearr_18702_18735[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18662 === 18) {
                                                              var inst_18630 = state_18661[2];
                                                              var state_18661__$1 = state_18661;
                                                              var statearr_18703_18736 = state_18661__$1;
                                                              statearr_18703_18736[2] = inst_18630;
                                                              statearr_18703_18736[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18662 === 8) {
                                                                var inst_18604 = state_18661[13];
                                                                var inst_18603 = state_18661[14];
                                                                var inst_18606 = inst_18604 < inst_18603;
                                                                var inst_18607 = inst_18606;
                                                                var state_18661__$1 = state_18661;
                                                                if (cljs.core.truth_(inst_18607)) {
                                                                  var statearr_18704_18737 = state_18661__$1;
                                                                  statearr_18704_18737[1] = 10;
                                                                } else {
                                                                  var statearr_18705_18738 = state_18661__$1;
                                                                  statearr_18705_18738[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6209__auto___18709, mults, ensure_mult, p);
          return function(switch__6196__auto__, c__6209__auto___18709, mults, ensure_mult, p) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_18707 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18707[0] = state_machine__6197__auto__;
                statearr_18707[1] = 1;
                return statearr_18707;
              };
              var state_machine__6197__auto____1 = function(state_18661) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_18661);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_18661) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_18661);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto___18709, mults, ensure_mult, p);
        }();
        var state__6211__auto__ = function() {
          var statearr_18708 = f__6210__auto__.call(null);
          statearr_18708[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___18709;
          return statearr_18708;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto___18709, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6209__auto___18869 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___18869, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto___18869, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_18841) {
              var state_val_18842 = state_18841[1];
              if (state_val_18842 === 7) {
                var state_18841__$1 = state_18841;
                var statearr_18843_18870 = state_18841__$1;
                statearr_18843_18870[2] = null;
                statearr_18843_18870[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18842 === 1) {
                  var state_18841__$1 = state_18841;
                  var statearr_18844_18871 = state_18841__$1;
                  statearr_18844_18871[2] = null;
                  statearr_18844_18871[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18842 === 4) {
                    var inst_18806 = state_18841[5];
                    var inst_18808 = inst_18806 < cnt;
                    var state_18841__$1 = state_18841;
                    if (cljs.core.truth_(inst_18808)) {
                      var statearr_18845_18872 = state_18841__$1;
                      statearr_18845_18872[1] = 6;
                    } else {
                      var statearr_18846_18873 = state_18841__$1;
                      statearr_18846_18873[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18842 === 15) {
                      var inst_18837 = state_18841[2];
                      var state_18841__$1 = state_18841;
                      var statearr_18847_18874 = state_18841__$1;
                      statearr_18847_18874[2] = inst_18837;
                      statearr_18847_18874[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18842 === 13) {
                        var inst_18830 = cljs.core.async.close_BANG_.call(null, out);
                        var state_18841__$1 = state_18841;
                        var statearr_18848_18875 = state_18841__$1;
                        statearr_18848_18875[2] = inst_18830;
                        statearr_18848_18875[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18842 === 6) {
                          var state_18841__$1 = state_18841;
                          var statearr_18849_18876 = state_18841__$1;
                          statearr_18849_18876[2] = null;
                          statearr_18849_18876[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18842 === 3) {
                            var inst_18839 = state_18841[2];
                            var state_18841__$1 = state_18841;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18841__$1, inst_18839);
                          } else {
                            if (state_val_18842 === 12) {
                              var inst_18827 = state_18841[6];
                              var inst_18827__$1 = state_18841[2];
                              var inst_18828 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_18827__$1);
                              var state_18841__$1 = function() {
                                var statearr_18850 = state_18841;
                                statearr_18850[6] = inst_18827__$1;
                                return statearr_18850;
                              }();
                              if (cljs.core.truth_(inst_18828)) {
                                var statearr_18851_18877 = state_18841__$1;
                                statearr_18851_18877[1] = 13;
                              } else {
                                var statearr_18852_18878 = state_18841__$1;
                                statearr_18852_18878[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18842 === 2) {
                                var inst_18805 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_18806 = 0;
                                var state_18841__$1 = function() {
                                  var statearr_18853 = state_18841;
                                  statearr_18853[7] = inst_18805;
                                  statearr_18853[5] = inst_18806;
                                  return statearr_18853;
                                }();
                                var statearr_18854_18879 = state_18841__$1;
                                statearr_18854_18879[2] = null;
                                statearr_18854_18879[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18842 === 11) {
                                  try {
                                    var inst_18806 = state_18841[5];
                                    var inst_18814 = chs__$1.call(null, inst_18806);
                                    var inst_18815 = done.call(null, inst_18806);
                                    var inst_18816 = cljs.core.async.take_BANG_.call(null, inst_18814, inst_18815);
                                    var state_18841__$1 = state_18841;
                                    var statearr_18857_18880 = state_18841__$1;
                                    statearr_18857_18880[2] = inst_18816;
                                    statearr_18857_18880[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e18855) {
                                    if (e18855 instanceof Object) {
                                      var ex__6190__auto__ = e18855;
                                      var statearr_18856_18881 = state_18841;
                                      statearr_18856_18881[1] = 10;
                                      statearr_18856_18881[2] = ex__6190__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e18855;
                                    }
                                  }
                                } else {
                                  if (state_val_18842 === 9) {
                                    var inst_18806 = state_18841[5];
                                    var inst_18818 = state_18841[2];
                                    var inst_18819 = inst_18806 + 1;
                                    var inst_18806__$1 = inst_18819;
                                    var state_18841__$1 = function() {
                                      var statearr_18858 = state_18841;
                                      statearr_18858[5] = inst_18806__$1;
                                      statearr_18858[8] = inst_18818;
                                      return statearr_18858;
                                    }();
                                    var statearr_18859_18882 = state_18841__$1;
                                    statearr_18859_18882[2] = null;
                                    statearr_18859_18882[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18842 === 5) {
                                      var inst_18825 = state_18841[2];
                                      var state_18841__$1 = function() {
                                        var statearr_18860 = state_18841;
                                        statearr_18860[9] = inst_18825;
                                        return statearr_18860;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18841__$1, 12, dchan);
                                    } else {
                                      if (state_val_18842 === 14) {
                                        var inst_18827 = state_18841[6];
                                        var inst_18832 = cljs.core.apply.call(null, f, inst_18827);
                                        var state_18841__$1 = state_18841;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18841__$1, 16, out, inst_18832);
                                      } else {
                                        if (state_val_18842 === 16) {
                                          var inst_18834 = state_18841[2];
                                          var state_18841__$1 = function() {
                                            var statearr_18861 = state_18841;
                                            statearr_18861[10] = inst_18834;
                                            return statearr_18861;
                                          }();
                                          var statearr_18862_18883 = state_18841__$1;
                                          statearr_18862_18883[2] = null;
                                          statearr_18862_18883[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18842 === 10) {
                                            var inst_18810 = state_18841[2];
                                            var inst_18811 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_18841__$1 = function() {
                                              var statearr_18863 = state_18841;
                                              statearr_18863[11] = inst_18810;
                                              return statearr_18863;
                                            }();
                                            var statearr_18864_18884 = state_18841__$1;
                                            statearr_18864_18884[2] = inst_18811;
                                            statearr_18864_18884[1] = 9;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18842 === 8) {
                                              var inst_18823 = state_18841[2];
                                              var state_18841__$1 = state_18841;
                                              var statearr_18865_18885 = state_18841__$1;
                                              statearr_18865_18885[2] = inst_18823;
                                              statearr_18865_18885[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6209__auto___18869, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__6196__auto__, c__6209__auto___18869, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_18867 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18867[0] = state_machine__6197__auto__;
                statearr_18867[1] = 1;
                return statearr_18867;
              };
              var state_machine__6197__auto____1 = function(state_18841) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_18841);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_18841) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_18841);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto___18869, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__6211__auto__ = function() {
          var statearr_18868 = f__6210__auto__.call(null);
          statearr_18868[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___18869;
          return statearr_18868;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto___18869, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6209__auto___18985 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___18985, out) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto___18985, out) {
            return function(state_18965) {
              var state_val_18966 = state_18965[1];
              if (state_val_18966 === 7) {
                var inst_18944 = state_18965[5];
                var inst_18945 = state_18965[6];
                var inst_18944__$1 = state_18965[2];
                var inst_18945__$1 = cljs.core.nth.call(null, inst_18944__$1, 0, null);
                var inst_18946 = cljs.core.nth.call(null, inst_18944__$1, 1, null);
                var inst_18947 = inst_18945__$1 == null;
                var state_18965__$1 = function() {
                  var statearr_18967 = state_18965;
                  statearr_18967[7] = inst_18946;
                  statearr_18967[5] = inst_18944__$1;
                  statearr_18967[6] = inst_18945__$1;
                  return statearr_18967;
                }();
                if (cljs.core.truth_(inst_18947)) {
                  var statearr_18968_18986 = state_18965__$1;
                  statearr_18968_18986[1] = 8;
                } else {
                  var statearr_18969_18987 = state_18965__$1;
                  statearr_18969_18987[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18966 === 1) {
                  var inst_18936 = cljs.core.vec.call(null, chs);
                  var inst_18937 = inst_18936;
                  var state_18965__$1 = function() {
                    var statearr_18970 = state_18965;
                    statearr_18970[8] = inst_18937;
                    return statearr_18970;
                  }();
                  var statearr_18971_18988 = state_18965__$1;
                  statearr_18971_18988[2] = null;
                  statearr_18971_18988[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18966 === 4) {
                    var inst_18937 = state_18965[8];
                    var state_18965__$1 = state_18965;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_18965__$1, 7, inst_18937);
                  } else {
                    if (state_val_18966 === 6) {
                      var inst_18961 = state_18965[2];
                      var state_18965__$1 = state_18965;
                      var statearr_18972_18989 = state_18965__$1;
                      statearr_18972_18989[2] = inst_18961;
                      statearr_18972_18989[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18966 === 3) {
                        var inst_18963 = state_18965[2];
                        var state_18965__$1 = state_18965;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18965__$1, inst_18963);
                      } else {
                        if (state_val_18966 === 2) {
                          var inst_18937 = state_18965[8];
                          var inst_18939 = cljs.core.count.call(null, inst_18937);
                          var inst_18940 = inst_18939 > 0;
                          var state_18965__$1 = state_18965;
                          if (cljs.core.truth_(inst_18940)) {
                            var statearr_18974_18990 = state_18965__$1;
                            statearr_18974_18990[1] = 4;
                          } else {
                            var statearr_18975_18991 = state_18965__$1;
                            statearr_18975_18991[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18966 === 11) {
                            var inst_18937 = state_18965[8];
                            var inst_18954 = state_18965[2];
                            var tmp18973 = inst_18937;
                            var inst_18937__$1 = tmp18973;
                            var state_18965__$1 = function() {
                              var statearr_18976 = state_18965;
                              statearr_18976[8] = inst_18937__$1;
                              statearr_18976[9] = inst_18954;
                              return statearr_18976;
                            }();
                            var statearr_18977_18992 = state_18965__$1;
                            statearr_18977_18992[2] = null;
                            statearr_18977_18992[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18966 === 9) {
                              var inst_18945 = state_18965[6];
                              var state_18965__$1 = state_18965;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18965__$1, 11, out, inst_18945);
                            } else {
                              if (state_val_18966 === 5) {
                                var inst_18959 = cljs.core.async.close_BANG_.call(null, out);
                                var state_18965__$1 = state_18965;
                                var statearr_18978_18993 = state_18965__$1;
                                statearr_18978_18993[2] = inst_18959;
                                statearr_18978_18993[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18966 === 10) {
                                  var inst_18957 = state_18965[2];
                                  var state_18965__$1 = state_18965;
                                  var statearr_18979_18994 = state_18965__$1;
                                  statearr_18979_18994[2] = inst_18957;
                                  statearr_18979_18994[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18966 === 8) {
                                    var inst_18946 = state_18965[7];
                                    var inst_18937 = state_18965[8];
                                    var inst_18944 = state_18965[5];
                                    var inst_18945 = state_18965[6];
                                    var inst_18949 = function() {
                                      var c = inst_18946;
                                      var v = inst_18945;
                                      var vec__18942 = inst_18944;
                                      var cs = inst_18937;
                                      return function(c, v, vec__18942, cs, inst_18946, inst_18937, inst_18944, inst_18945, state_val_18966, c__6209__auto___18985, out) {
                                        return function(p1__18886_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__18886_SHARP_);
                                        };
                                      }(c, v, vec__18942, cs, inst_18946, inst_18937, inst_18944, inst_18945, state_val_18966, c__6209__auto___18985, out);
                                    }();
                                    var inst_18950 = cljs.core.filterv.call(null, inst_18949, inst_18937);
                                    var inst_18937__$1 = inst_18950;
                                    var state_18965__$1 = function() {
                                      var statearr_18980 = state_18965;
                                      statearr_18980[8] = inst_18937__$1;
                                      return statearr_18980;
                                    }();
                                    var statearr_18981_18995 = state_18965__$1;
                                    statearr_18981_18995[2] = null;
                                    statearr_18981_18995[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6209__auto___18985, out);
          return function(switch__6196__auto__, c__6209__auto___18985, out) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_18983 = [null, null, null, null, null, null, null, null, null, null];
                statearr_18983[0] = state_machine__6197__auto__;
                statearr_18983[1] = 1;
                return statearr_18983;
              };
              var state_machine__6197__auto____1 = function(state_18965) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_18965);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_18965) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_18965);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto___18985, out);
        }();
        var state__6211__auto__ = function() {
          var statearr_18984 = f__6210__auto__.call(null);
          statearr_18984[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___18985;
          return statearr_18984;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto___18985, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("logger");
goog.require("cljs.core");
cljs.core.enable_console_print_BANG_.call(null);
logger.tagsOn = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "all", "all", 892129742), new cljs.core.Keyword(null, "inv", "inv", 1526077438), new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), new cljs.core.Keyword(null, 
"makeBlock", "makeBlock", -1854081426), new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), new cljs.core.Keyword(null, "dbput", "dbput", 890434907), new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312)], null);
logger.tags = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630)], null);
logger.og = function og(type, format, data) {
  if (cljs.core.truth_(function() {
    var or__3673__auto__ = cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([type], true), logger.tagsOn);
    if (cljs.core.truth_(or__3673__auto__)) {
      return or__3673__auto__;
    } else {
      return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), logger.tagsOn);
    }
  }())) {
    console.log(type + " " + format, data);
  } else {
  }
  return data;
};
goog.provide("pubsub");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("logger");
goog.require("cljs.core.async");
pubsub.proxychan = cljs.core.async.chan.call(null);
pubsub.proxychan2 = cljs.core.async.chan.call(null, 1);
pubsub.sendReceiveCh = cljs.core.async.chan.call(null, 1E3);
pubsub.receiveCH = cljs.core.async.chan.call(null, 1E3);
pubsub.get = function get() {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_8995) {
            var state_val_8996 = state_8995[1];
            if (state_val_8996 === 3) {
              var inst_8992 = state_8995[2];
              var inst_8993 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
              var state_8995__$1 = function() {
                var statearr_8997 = state_8995;
                statearr_8997[5] = inst_8993;
                statearr_8997[6] = inst_8992;
                return statearr_8997;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8995__$1, pubsub.a);
            } else {
              if (state_val_8996 === 2) {
                var inst_8988 = state_8995[2];
                var inst_8989 = pubsub.a = inst_8988;
                var inst_8990 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
                var state_8995__$1 = function() {
                  var statearr_8998 = state_8995;
                  statearr_8998[7] = inst_8990;
                  statearr_8998[8] = inst_8989;
                  return statearr_8998;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8995__$1, 3, pubsub.proxychan2, pubsub.a);
              } else {
                if (state_val_8996 === 1) {
                  var state_8995__$1 = state_8995;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8995__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9000 = [null, null, null, null, null, null, null, null, null];
              statearr_9000[0] = state_machine__6220__auto__;
              statearr_9000[1] = 1;
              return statearr_9000;
            };
            var state_machine__6220__auto____1 = function(state_8995) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_8995);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_8995) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_8995);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9001 = f__6233__auto__.call(null);
        statearr_9001[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9001;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.init = function init(what) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9016) {
            var state_val_9017 = state_9016[1];
            if (state_val_9017 === 2) {
              var inst_9014 = state_9016[2];
              var state_9016__$1 = state_9016;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9016__$1, inst_9014);
            } else {
              if (state_val_9017 === 1) {
                var inst_9012 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "peerjs", what);
                var state_9016__$1 = function() {
                  var statearr_9018 = state_9016;
                  statearr_9018[5] = inst_9012;
                  return statearr_9018;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9016__$1, 2, pubsub.proxychan2, what);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9020 = [null, null, null, null, null, null];
              statearr_9020[0] = state_machine__6220__auto__;
              statearr_9020[1] = 1;
              return statearr_9020;
            };
            var state_machine__6220__auto____1 = function(state_9016) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9016);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9016) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9016);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9021 = f__6233__auto__.call(null);
        statearr_9021[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9021;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.set = function set(what) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9038) {
            var state_val_9039 = state_9038[1];
            if (state_val_9039 === 3) {
              var inst_9036 = state_9038[2];
              var state_9038__$1 = state_9038;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9038__$1, inst_9036);
            } else {
              if (state_val_9039 === 2) {
                var inst_9034 = state_9038[2];
                var state_9038__$1 = function() {
                  var statearr_9040 = state_9038;
                  statearr_9040[5] = inst_9034;
                  return statearr_9040;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9038__$1, 3, pubsub.proxychan2, what);
              } else {
                if (state_val_9039 === 1) {
                  var state_9038__$1 = state_9038;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9038__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9042 = [null, null, null, null, null, null];
              statearr_9042[0] = state_machine__6220__auto__;
              statearr_9042[1] = 1;
              return statearr_9042;
            };
            var state_machine__6220__auto____1 = function(state_9038) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9038);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9038) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9038);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9043 = f__6233__auto__.call(null);
        statearr_9043[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9043;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.subs = function() {
  var obj9045 = {};
  return obj9045;
}();
pubsub.sub = function sub(typ, fun) {
  return pubsub.subs[typ] = fun;
};
pubsub.pub = function pub(typ, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "pub", "pub", -1189143908), "pubing ", typ + " " + msg);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9063) {
            var state_val_9064 = state_9063[1];
            if (state_val_9064 === 2) {
              var inst_9061 = state_9063[2];
              var state_9063__$1 = state_9063;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9063__$1, inst_9061);
            } else {
              if (state_val_9064 === 1) {
                var inst_9059 = {"typ":typ, "msg":msg};
                var state_9063__$1 = state_9063;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9063__$1, 2, pubsub.proxychan, inst_9059);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9066 = [null, null, null, null, null];
              statearr_9066[0] = state_machine__6220__auto__;
              statearr_9066[1] = 1;
              return statearr_9066;
            };
            var state_machine__6220__auto____1 = function(state_9063) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9063);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9063) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9063);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9067 = f__6233__auto__.call(null);
        statearr_9067[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9067;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.makeMsg = function makeMsg(typ, m, pchannel) {
  var obj9071 = {"typ":typ, "msg":m};
  return obj9071;
};
pubsub.initpubsub = function initpubsub() {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9079) {
            var state_val_9080 = state_9079[1];
            if (state_val_9080 === 1) {
              var state_9079__$1 = state_9079;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9079__$1, null);
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9082 = [null, null, null, null, null];
              statearr_9082[0] = state_machine__6220__auto__;
              statearr_9082[1] = 1;
              return statearr_9082;
            };
            var state_machine__6220__auto____1 = function(state_9079) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9079);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9079) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9079);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9083 = f__6233__auto__.call(null);
        statearr_9083[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9083;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.r = function r(typ) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9161) {
            var state_val_9162 = state_9161[1];
            if (state_val_9162 === 7) {
              var inst_9149 = pubsub.mtemp["typ"];
              var inst_9150 = inst_9149 === 0;
              var state_9161__$1 = state_9161;
              if (cljs.core.truth_(inst_9150)) {
                var statearr_9163_9180 = state_9161__$1;
                statearr_9163_9180[1] = 9;
              } else {
                var statearr_9164_9181 = state_9161__$1;
                statearr_9164_9181[1] = 10;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9162 === 1) {
                var inst_9132 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve %s", typ);
                var inst_9135 = {"typ":0};
                var state_9161__$1 = function() {
                  var statearr_9165 = state_9161;
                  statearr_9165[5] = inst_9132;
                  return statearr_9165;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9161__$1, 2, pubsub.sendReceiveCh, inst_9135);
              } else {
                if (state_val_9162 === 4) {
                  var inst_9159 = state_9161[2];
                  var state_9161__$1 = state_9161;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9161__$1, inst_9159);
                } else {
                  if (state_val_9162 === 6) {
                    var inst_9147 = pubsub.mtemp["msg"];
                    var state_9161__$1 = state_9161;
                    var statearr_9166_9182 = state_9161__$1;
                    statearr_9166_9182[2] = inst_9147;
                    statearr_9166_9182[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9162 === 3) {
                      var inst_9139 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                      var state_9161__$1 = function() {
                        var statearr_9167 = state_9161;
                        statearr_9167[6] = inst_9139;
                        return statearr_9167;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9161__$1, 5, pubsub.sendReceiveCh);
                    } else {
                      if (state_val_9162 === 2) {
                        var inst_9137 = state_9161[2];
                        var state_9161__$1 = function() {
                          var statearr_9168 = state_9161;
                          statearr_9168[7] = inst_9137;
                          return statearr_9168;
                        }();
                        var statearr_9169_9183 = state_9161__$1;
                        statearr_9169_9183[2] = null;
                        statearr_9169_9183[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_9162 === 11) {
                          var inst_9155 = state_9161[2];
                          var state_9161__$1 = state_9161;
                          var statearr_9170_9184 = state_9161__$1;
                          statearr_9170_9184[2] = inst_9155;
                          statearr_9170_9184[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9162 === 9) {
                            var state_9161__$1 = state_9161;
                            var statearr_9171_9185 = state_9161__$1;
                            statearr_9171_9185[2] = 0;
                            statearr_9171_9185[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9162 === 5) {
                              var inst_9141 = state_9161[2];
                              var inst_9142 = pubsub.mtemp = inst_9141;
                              var inst_9143 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                              var inst_9144 = pubsub.mtemp["typ"];
                              var inst_9145 = inst_9144 === typ;
                              var state_9161__$1 = function() {
                                var statearr_9172 = state_9161;
                                statearr_9172[8] = inst_9143;
                                statearr_9172[9] = inst_9142;
                                return statearr_9172;
                              }();
                              if (cljs.core.truth_(inst_9145)) {
                                var statearr_9173_9186 = state_9161__$1;
                                statearr_9173_9186[1] = 6;
                              } else {
                                var statearr_9174_9187 = state_9161__$1;
                                statearr_9174_9187[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9162 === 10) {
                                var state_9161__$1 = state_9161;
                                var statearr_9175_9188 = state_9161__$1;
                                statearr_9175_9188[2] = null;
                                statearr_9175_9188[1] = 3;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9162 === 8) {
                                  var inst_9157 = state_9161[2];
                                  var state_9161__$1 = state_9161;
                                  var statearr_9176_9189 = state_9161__$1;
                                  statearr_9176_9189[2] = inst_9157;
                                  statearr_9176_9189[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9178 = [null, null, null, null, null, null, null, null, null, null];
              statearr_9178[0] = state_machine__6220__auto__;
              statearr_9178[1] = 1;
              return statearr_9178;
            };
            var state_machine__6220__auto____1 = function(state_9161) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9161);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9161) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9161);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9179 = f__6233__auto__.call(null);
        statearr_9179[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9179;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.rr = function() {
  var rr__delegate = function(typ) {
    var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
      return function() {
        var f__6233__auto__ = function() {
          var switch__6219__auto__ = function(c__6232__auto__) {
            return function(state_9334) {
              var state_val_9335 = state_9334[1];
              if (state_val_9335 === 7) {
                var inst_9296 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                var inst_9297 = 0;
                var state_9334__$1 = function() {
                  var statearr_9336 = state_9334;
                  statearr_9336[5] = inst_9297;
                  statearr_9336[6] = inst_9296;
                  return statearr_9336;
                }();
                var statearr_9337_9364 = state_9334__$1;
                statearr_9337_9364[2] = null;
                statearr_9337_9364[1] = 9;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9335 === 1) {
                  var inst_9277 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_9278 = cljs.core.count.call(null, typ);
                  var inst_9279 = inst_9278 / 2;
                  var inst_9280 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_9279);
                  var inst_9283 = {"typ":0};
                  var state_9334__$1 = function() {
                    var statearr_9338 = state_9334;
                    statearr_9338[7] = inst_9277;
                    statearr_9338[8] = inst_9280;
                    return statearr_9338;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9334__$1, 2, pubsub.sendReceiveCh, inst_9283);
                } else {
                  if (state_val_9335 === 4) {
                    var inst_9332 = state_9334[2];
                    var state_9334__$1 = state_9334;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9334__$1, inst_9332);
                  } else {
                    if (state_val_9335 === 15) {
                      var inst_9297 = state_9334[5];
                      var inst_9319 = inst_9297 + 2;
                      var inst_9297__$1 = inst_9319;
                      var state_9334__$1 = function() {
                        var statearr_9339 = state_9334;
                        statearr_9339[5] = inst_9297__$1;
                        return statearr_9339;
                      }();
                      var statearr_9340_9365 = state_9334__$1;
                      statearr_9340_9365[2] = null;
                      statearr_9340_9365[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9335 === 13) {
                        var inst_9325 = state_9334[2];
                        var state_9334__$1 = state_9334;
                        var statearr_9341_9366 = state_9334__$1;
                        statearr_9341_9366[2] = inst_9325;
                        statearr_9341_9366[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_9335 === 6) {
                          var inst_9294 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                          var state_9334__$1 = function() {
                            var statearr_9342 = state_9334;
                            statearr_9342[9] = inst_9294;
                            return statearr_9342;
                          }();
                          var statearr_9343_9367 = state_9334__$1;
                          statearr_9343_9367[2] = 0;
                          statearr_9343_9367[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9335 === 17) {
                            var inst_9317 = state_9334[2];
                            var state_9334__$1 = state_9334;
                            var statearr_9344_9368 = state_9334__$1;
                            statearr_9344_9368[2] = inst_9317;
                            statearr_9344_9368[1] = 16;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9335 === 3) {
                              var inst_9287 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                              var state_9334__$1 = function() {
                                var statearr_9345 = state_9334;
                                statearr_9345[10] = inst_9287;
                                return statearr_9345;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9334__$1, 5, pubsub.sendReceiveCh);
                            } else {
                              if (state_val_9335 === 12) {
                                var state_9334__$1 = state_9334;
                                var statearr_9346_9369 = state_9334__$1;
                                statearr_9346_9369[2] = null;
                                statearr_9346_9369[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9335 === 2) {
                                  var inst_9285 = state_9334[2];
                                  var state_9334__$1 = function() {
                                    var statearr_9347 = state_9334;
                                    statearr_9347[11] = inst_9285;
                                    return statearr_9347;
                                  }();
                                  var statearr_9348_9370 = state_9334__$1;
                                  statearr_9348_9370[2] = null;
                                  statearr_9348_9370[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9335 === 11) {
                                    var inst_9297 = state_9334[5];
                                    var inst_9302 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_9297);
                                    var inst_9303 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                    var inst_9304 = cljs.core.nth.call(null, typ, inst_9297);
                                    var inst_9305 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_9304);
                                    var inst_9306 = pubsub.mtemp["typ"];
                                    var inst_9307 = cljs.core.nth.call(null, typ, inst_9297);
                                    var inst_9308 = inst_9306 === inst_9307;
                                    var state_9334__$1 = function() {
                                      var statearr_9349 = state_9334;
                                      statearr_9349[12] = inst_9305;
                                      statearr_9349[13] = inst_9303;
                                      statearr_9349[14] = inst_9302;
                                      return statearr_9349;
                                    }();
                                    if (cljs.core.truth_(inst_9308)) {
                                      var statearr_9350_9371 = state_9334__$1;
                                      statearr_9350_9371[1] = 14;
                                    } else {
                                      var statearr_9351_9372 = state_9334__$1;
                                      statearr_9351_9372[1] = 15;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9335 === 9) {
                                      var inst_9297 = state_9334[5];
                                      var inst_9299 = cljs.core.count.call(null, typ);
                                      var inst_9300 = inst_9297 < inst_9299;
                                      var state_9334__$1 = state_9334;
                                      if (cljs.core.truth_(inst_9300)) {
                                        var statearr_9352_9373 = state_9334__$1;
                                        statearr_9352_9373[1] = 11;
                                      } else {
                                        var statearr_9353_9374 = state_9334__$1;
                                        statearr_9353_9374[1] = 12;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9335 === 5) {
                                        var inst_9289 = state_9334[2];
                                        var inst_9290 = pubsub.mtemp = inst_9289;
                                        var inst_9291 = pubsub.mtemp["typ"];
                                        var inst_9292 = inst_9291 === 0;
                                        var state_9334__$1 = function() {
                                          var statearr_9354 = state_9334;
                                          statearr_9354[15] = inst_9290;
                                          return statearr_9354;
                                        }();
                                        if (cljs.core.truth_(inst_9292)) {
                                          var statearr_9355_9375 = state_9334__$1;
                                          statearr_9355_9375[1] = 6;
                                        } else {
                                          var statearr_9356_9376 = state_9334__$1;
                                          statearr_9356_9376[1] = 7;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_9335 === 14) {
                                          var inst_9297 = state_9334[5];
                                          var inst_9310 = cljs.core.nth.call(null, typ, inst_9297);
                                          var inst_9311 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_9310);
                                          var inst_9312 = inst_9297 + 1;
                                          var inst_9313 = cljs.core.nth.call(null, typ, inst_9312);
                                          var inst_9314 = pubsub.mtemp["msg"];
                                          var inst_9315 = inst_9313.call(null, inst_9314);
                                          var state_9334__$1 = function() {
                                            var statearr_9357 = state_9334;
                                            statearr_9357[16] = inst_9311;
                                            return statearr_9357;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9334__$1, 17, inst_9315);
                                        } else {
                                          if (state_val_9335 === 16) {
                                            var inst_9322 = state_9334[2];
                                            var state_9334__$1 = state_9334;
                                            var statearr_9358_9377 = state_9334__$1;
                                            statearr_9358_9377[2] = inst_9322;
                                            statearr_9358_9377[1] = 13;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_9335 === 10) {
                                              var inst_9327 = state_9334[2];
                                              var inst_9328 = pubsub.result = inst_9327;
                                              var state_9334__$1 = state_9334;
                                              var statearr_9359_9378 = state_9334__$1;
                                              statearr_9359_9378[2] = inst_9328;
                                              statearr_9359_9378[1] = 8;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_9335 === 8) {
                                                var inst_9330 = state_9334[2];
                                                var state_9334__$1 = state_9334;
                                                var statearr_9360_9379 = state_9334__$1;
                                                statearr_9360_9379[2] = inst_9330;
                                                statearr_9360_9379[1] = 4;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6232__auto__);
          return function(switch__6219__auto__, c__6232__auto__) {
            return function() {
              var state_machine__6220__auto__ = null;
              var state_machine__6220__auto____0 = function() {
                var statearr_9362 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_9362[0] = state_machine__6220__auto__;
                statearr_9362[1] = 1;
                return statearr_9362;
              };
              var state_machine__6220__auto____1 = function(state_9334) {
                while (true) {
                  var result__6221__auto__ = switch__6219__auto__.call(null, state_9334);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6221__auto__;
                  }
                  break;
                }
              };
              state_machine__6220__auto__ = function(state_9334) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6220__auto____0.call(this);
                  case 1:
                    return state_machine__6220__auto____1.call(this, state_9334);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
              return state_machine__6220__auto__;
            }();
          }(switch__6219__auto__, c__6232__auto__);
        }();
        var state__6234__auto__ = function() {
          var statearr_9363 = f__6233__auto__.call(null);
          statearr_9363[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
          return statearr_9363;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
      };
    }(c__6232__auto__));
    return c__6232__auto__;
  };
  var rr = function(var_args) {
    var typ = null;
    if (arguments.length > 0) {
      typ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rr__delegate.call(this, typ);
  };
  rr.cljs$lang$maxFixedArity = 0;
  rr.cljs$lang$applyTo = function(arglist__9380) {
    var typ = cljs.core.seq(arglist__9380);
    return rr__delegate(typ);
  };
  rr.cljs$core$IFn$_invoke$arity$variadic = rr__delegate;
  return rr;
}();
pubsub.rrs = function() {
  var rrs__delegate = function(typ) {
    var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
      return function() {
        var f__6233__auto__ = function() {
          var switch__6219__auto__ = function(c__6232__auto__) {
            return function(state_9521) {
              var state_val_9522 = state_9521[1];
              if (state_val_9522 === 7) {
                var inst_9516 = state_9521[2];
                var state_9521__$1 = function() {
                  var statearr_9523 = state_9521;
                  statearr_9523[5] = inst_9516;
                  return statearr_9523;
                }();
                var statearr_9524_9551 = state_9521__$1;
                statearr_9524_9551[2] = null;
                statearr_9524_9551[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9522 === 1) {
                  var inst_9466 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_9467 = cljs.core.count.call(null, typ);
                  var inst_9468 = inst_9467 / 2;
                  var inst_9469 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_9468);
                  var state_9521__$1 = function() {
                    var statearr_9525 = state_9521;
                    statearr_9525[6] = inst_9469;
                    statearr_9525[7] = inst_9466;
                    return statearr_9525;
                  }();
                  var statearr_9526_9552 = state_9521__$1;
                  statearr_9526_9552[2] = null;
                  statearr_9526_9552[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9522 === 4) {
                    var inst_9473 = state_9521[2];
                    var inst_9474 = pubsub.mtemp = inst_9473;
                    var inst_9475 = pubsub.mtemp["typ"];
                    var inst_9476 = inst_9475 === 0;
                    var state_9521__$1 = function() {
                      var statearr_9527 = state_9521;
                      statearr_9527[8] = inst_9474;
                      return statearr_9527;
                    }();
                    if (cljs.core.truth_(inst_9476)) {
                      var statearr_9528_9553 = state_9521__$1;
                      statearr_9528_9553[1] = 5;
                    } else {
                      var statearr_9529_9554 = state_9521__$1;
                      statearr_9529_9554[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9522 === 15) {
                      var inst_9508 = state_9521[2];
                      var state_9521__$1 = state_9521;
                      var statearr_9530_9555 = state_9521__$1;
                      statearr_9530_9555[2] = inst_9508;
                      statearr_9530_9555[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9522 === 13) {
                        var inst_9481 = state_9521[9];
                        var inst_9494 = cljs.core.nth.call(null, typ, inst_9481);
                        var inst_9495 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_9494);
                        var inst_9496 = inst_9481 + 1;
                        var inst_9497 = cljs.core.nth.call(null, typ, inst_9496);
                        var inst_9498 = pubsub.mtemp["msg"];
                        var inst_9499 = inst_9497.call(null, inst_9498);
                        var inst_9500 = pubsub.ret = inst_9499;
                        var inst_9501 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "return ", pubsub.ret);
                        var state_9521__$1 = function() {
                          var statearr_9531 = state_9521;
                          statearr_9531[10] = inst_9501;
                          statearr_9531[11] = inst_9500;
                          statearr_9531[12] = inst_9495;
                          return statearr_9531;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9521__$1, 16, pubsub.receiveCH, pubsub.ret);
                      } else {
                        if (state_val_9522 === 6) {
                          var inst_9480 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                          var inst_9481 = 0;
                          var state_9521__$1 = function() {
                            var statearr_9532 = state_9521;
                            statearr_9532[9] = inst_9481;
                            statearr_9532[13] = inst_9480;
                            return statearr_9532;
                          }();
                          var statearr_9533_9556 = state_9521__$1;
                          statearr_9533_9556[2] = null;
                          statearr_9533_9556[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9522 === 3) {
                            var inst_9519 = state_9521[2];
                            var state_9521__$1 = state_9521;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9521__$1, inst_9519);
                          } else {
                            if (state_val_9522 === 12) {
                              var inst_9511 = state_9521[2];
                              var state_9521__$1 = state_9521;
                              var statearr_9534_9557 = state_9521__$1;
                              statearr_9534_9557[2] = inst_9511;
                              statearr_9534_9557[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9522 === 2) {
                                var inst_9471 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                var state_9521__$1 = function() {
                                  var statearr_9535 = state_9521;
                                  statearr_9535[14] = inst_9471;
                                  return statearr_9535;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9521__$1, 4, pubsub.sendReceiveCh);
                              } else {
                                if (state_val_9522 === 11) {
                                  var state_9521__$1 = state_9521;
                                  var statearr_9536_9558 = state_9521__$1;
                                  statearr_9536_9558[2] = null;
                                  statearr_9536_9558[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9522 === 9) {
                                    var inst_9513 = state_9521[2];
                                    var inst_9514 = pubsub.result = inst_9513;
                                    var state_9521__$1 = state_9521;
                                    var statearr_9537_9559 = state_9521__$1;
                                    statearr_9537_9559[2] = inst_9514;
                                    statearr_9537_9559[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9522 === 5) {
                                      var inst_9478 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                      var state_9521__$1 = function() {
                                        var statearr_9538 = state_9521;
                                        statearr_9538[15] = inst_9478;
                                        return statearr_9538;
                                      }();
                                      var statearr_9539_9560 = state_9521__$1;
                                      statearr_9539_9560[2] = 0;
                                      statearr_9539_9560[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9522 === 14) {
                                        var inst_9481 = state_9521[9];
                                        var inst_9505 = inst_9481 + 2;
                                        var inst_9481__$1 = inst_9505;
                                        var state_9521__$1 = function() {
                                          var statearr_9540 = state_9521;
                                          statearr_9540[9] = inst_9481__$1;
                                          return statearr_9540;
                                        }();
                                        var statearr_9541_9561 = state_9521__$1;
                                        statearr_9541_9561[2] = null;
                                        statearr_9541_9561[1] = 8;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_9522 === 16) {
                                          var inst_9503 = state_9521[2];
                                          var state_9521__$1 = state_9521;
                                          var statearr_9542_9562 = state_9521__$1;
                                          statearr_9542_9562[2] = inst_9503;
                                          statearr_9542_9562[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_9522 === 10) {
                                            var inst_9481 = state_9521[9];
                                            var inst_9486 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_9481);
                                            var inst_9487 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                            var inst_9488 = cljs.core.nth.call(null, typ, inst_9481);
                                            var inst_9489 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_9488);
                                            var inst_9490 = pubsub.mtemp["typ"];
                                            var inst_9491 = cljs.core.nth.call(null, typ, inst_9481);
                                            var inst_9492 = inst_9490 === inst_9491;
                                            var state_9521__$1 = function() {
                                              var statearr_9543 = state_9521;
                                              statearr_9543[16] = inst_9486;
                                              statearr_9543[17] = inst_9489;
                                              statearr_9543[18] = inst_9487;
                                              return statearr_9543;
                                            }();
                                            if (cljs.core.truth_(inst_9492)) {
                                              var statearr_9544_9563 = state_9521__$1;
                                              statearr_9544_9563[1] = 13;
                                            } else {
                                              var statearr_9545_9564 = state_9521__$1;
                                              statearr_9545_9564[1] = 14;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_9522 === 8) {
                                              var inst_9481 = state_9521[9];
                                              var inst_9483 = cljs.core.count.call(null, typ);
                                              var inst_9484 = inst_9481 < inst_9483;
                                              var state_9521__$1 = state_9521;
                                              if (cljs.core.truth_(inst_9484)) {
                                                var statearr_9546_9565 = state_9521__$1;
                                                statearr_9546_9565[1] = 10;
                                              } else {
                                                var statearr_9547_9566 = state_9521__$1;
                                                statearr_9547_9566[1] = 11;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6232__auto__);
          return function(switch__6219__auto__, c__6232__auto__) {
            return function() {
              var state_machine__6220__auto__ = null;
              var state_machine__6220__auto____0 = function() {
                var statearr_9549 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_9549[0] = state_machine__6220__auto__;
                statearr_9549[1] = 1;
                return statearr_9549;
              };
              var state_machine__6220__auto____1 = function(state_9521) {
                while (true) {
                  var result__6221__auto__ = switch__6219__auto__.call(null, state_9521);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6221__auto__;
                  }
                  break;
                }
              };
              state_machine__6220__auto__ = function(state_9521) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6220__auto____0.call(this);
                  case 1:
                    return state_machine__6220__auto____1.call(this, state_9521);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
              return state_machine__6220__auto__;
            }();
          }(switch__6219__auto__, c__6232__auto__);
        }();
        var state__6234__auto__ = function() {
          var statearr_9550 = f__6233__auto__.call(null);
          statearr_9550[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
          return statearr_9550;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
      };
    }(c__6232__auto__));
    return c__6232__auto__;
  };
  var rrs = function(var_args) {
    var typ = null;
    if (arguments.length > 0) {
      typ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rrs__delegate.call(this, typ);
  };
  rrs.cljs$lang$maxFixedArity = 0;
  rrs.cljs$lang$applyTo = function(arglist__9567) {
    var typ = cljs.core.seq(arglist__9567);
    return rrs__delegate(typ);
  };
  rrs.cljs$core$IFn$_invoke$arity$variadic = rrs__delegate;
  return rrs;
}();
pubsub.rrsa = function() {
  var rrsa__delegate = function(ch, typ) {
    var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
      return function() {
        var f__6233__auto__ = function() {
          var switch__6219__auto__ = function(c__6232__auto__) {
            return function(state_9713) {
              var state_val_9714 = state_9713[1];
              if (state_val_9714 === 7) {
                var inst_9708 = state_9713[2];
                var state_9713__$1 = function() {
                  var statearr_9715 = state_9713;
                  statearr_9715[5] = inst_9708;
                  return statearr_9715;
                }();
                var statearr_9716_9744 = state_9713__$1;
                statearr_9716_9744[2] = null;
                statearr_9716_9744[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9714 === 1) {
                  var inst_9656 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_9657 = cljs.core.count.call(null, typ);
                  var inst_9658 = inst_9657 / 2;
                  var inst_9659 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_9658);
                  var state_9713__$1 = function() {
                    var statearr_9717 = state_9713;
                    statearr_9717[6] = inst_9656;
                    statearr_9717[7] = inst_9659;
                    return statearr_9717;
                  }();
                  var statearr_9718_9745 = state_9713__$1;
                  statearr_9718_9745[2] = null;
                  statearr_9718_9745[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9714 === 4) {
                    var inst_9663 = state_9713[2];
                    var inst_9664 = pubsub.mtemp = inst_9663;
                    var inst_9665 = pubsub.mtemp["typ"];
                    var inst_9666 = inst_9665 === 0;
                    var state_9713__$1 = function() {
                      var statearr_9719 = state_9713;
                      statearr_9719[8] = inst_9664;
                      return statearr_9719;
                    }();
                    if (cljs.core.truth_(inst_9666)) {
                      var statearr_9720_9746 = state_9713__$1;
                      statearr_9720_9746[1] = 5;
                    } else {
                      var statearr_9721_9747 = state_9713__$1;
                      statearr_9721_9747[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9714 === 15) {
                      var inst_9700 = state_9713[2];
                      var state_9713__$1 = state_9713;
                      var statearr_9722_9748 = state_9713__$1;
                      statearr_9722_9748[2] = inst_9700;
                      statearr_9722_9748[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9714 === 13) {
                        var inst_9671 = state_9713[9];
                        var inst_9684 = cljs.core.nth.call(null, typ, inst_9671);
                        var inst_9685 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_9684);
                        var inst_9686 = inst_9671 + 1;
                        var inst_9687 = cljs.core.nth.call(null, typ, inst_9686);
                        var inst_9688 = pubsub.mtemp["msg"];
                        var inst_9689 = cljs.core.apply.call(null, inst_9687, inst_9688);
                        var state_9713__$1 = function() {
                          var statearr_9723 = state_9713;
                          statearr_9723[10] = inst_9685;
                          return statearr_9723;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9713__$1, 16, inst_9689);
                      } else {
                        if (state_val_9714 === 6) {
                          var inst_9670 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                          var inst_9671 = 0;
                          var state_9713__$1 = function() {
                            var statearr_9724 = state_9713;
                            statearr_9724[9] = inst_9671;
                            statearr_9724[11] = inst_9670;
                            return statearr_9724;
                          }();
                          var statearr_9725_9749 = state_9713__$1;
                          statearr_9725_9749[2] = null;
                          statearr_9725_9749[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_9714 === 17) {
                            var inst_9695 = state_9713[2];
                            var state_9713__$1 = state_9713;
                            var statearr_9726_9750 = state_9713__$1;
                            statearr_9726_9750[2] = inst_9695;
                            statearr_9726_9750[1] = 15;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9714 === 3) {
                              var inst_9711 = state_9713[2];
                              var state_9713__$1 = state_9713;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9713__$1, inst_9711);
                            } else {
                              if (state_val_9714 === 12) {
                                var inst_9703 = state_9713[2];
                                var state_9713__$1 = state_9713;
                                var statearr_9727_9751 = state_9713__$1;
                                statearr_9727_9751[2] = inst_9703;
                                statearr_9727_9751[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9714 === 2) {
                                  var inst_9661 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                  var state_9713__$1 = function() {
                                    var statearr_9728 = state_9713;
                                    statearr_9728[12] = inst_9661;
                                    return statearr_9728;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9713__$1, 4, pubsub.sendReceiveCh);
                                } else {
                                  if (state_val_9714 === 11) {
                                    var state_9713__$1 = state_9713;
                                    var statearr_9729_9752 = state_9713__$1;
                                    statearr_9729_9752[2] = null;
                                    statearr_9729_9752[1] = 12;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9714 === 9) {
                                      var inst_9705 = state_9713[2];
                                      var inst_9706 = pubsub.result = inst_9705;
                                      var state_9713__$1 = state_9713;
                                      var statearr_9730_9753 = state_9713__$1;
                                      statearr_9730_9753[2] = inst_9706;
                                      statearr_9730_9753[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9714 === 5) {
                                        var inst_9668 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                        var state_9713__$1 = function() {
                                          var statearr_9731 = state_9713;
                                          statearr_9731[13] = inst_9668;
                                          return statearr_9731;
                                        }();
                                        var statearr_9732_9754 = state_9713__$1;
                                        statearr_9732_9754[2] = 0;
                                        statearr_9732_9754[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_9714 === 14) {
                                          var inst_9671 = state_9713[9];
                                          var inst_9697 = inst_9671 + 2;
                                          var inst_9671__$1 = inst_9697;
                                          var state_9713__$1 = function() {
                                            var statearr_9733 = state_9713;
                                            statearr_9733[9] = inst_9671__$1;
                                            return statearr_9733;
                                          }();
                                          var statearr_9734_9755 = state_9713__$1;
                                          statearr_9734_9755[2] = null;
                                          statearr_9734_9755[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_9714 === 16) {
                                            var inst_9691 = state_9713[2];
                                            var inst_9692 = pubsub.ret = inst_9691;
                                            var inst_9693 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "return ", pubsub.ret);
                                            var state_9713__$1 = function() {
                                              var statearr_9735 = state_9713;
                                              statearr_9735[14] = inst_9693;
                                              statearr_9735[15] = inst_9692;
                                              return statearr_9735;
                                            }();
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9713__$1, 17, ch, pubsub.ret);
                                          } else {
                                            if (state_val_9714 === 10) {
                                              var inst_9671 = state_9713[9];
                                              var inst_9676 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_9671);
                                              var inst_9677 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                              var inst_9678 = cljs.core.nth.call(null, typ, inst_9671);
                                              var inst_9679 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_9678);
                                              var inst_9680 = pubsub.mtemp["typ"];
                                              var inst_9681 = cljs.core.nth.call(null, typ, inst_9671);
                                              var inst_9682 = inst_9680 === inst_9681;
                                              var state_9713__$1 = function() {
                                                var statearr_9736 = state_9713;
                                                statearr_9736[16] = inst_9679;
                                                statearr_9736[17] = inst_9676;
                                                statearr_9736[18] = inst_9677;
                                                return statearr_9736;
                                              }();
                                              if (cljs.core.truth_(inst_9682)) {
                                                var statearr_9737_9756 = state_9713__$1;
                                                statearr_9737_9756[1] = 13;
                                              } else {
                                                var statearr_9738_9757 = state_9713__$1;
                                                statearr_9738_9757[1] = 14;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_9714 === 8) {
                                                var inst_9671 = state_9713[9];
                                                var inst_9673 = cljs.core.count.call(null, typ);
                                                var inst_9674 = inst_9671 < inst_9673;
                                                var state_9713__$1 = state_9713;
                                                if (cljs.core.truth_(inst_9674)) {
                                                  var statearr_9739_9758 = state_9713__$1;
                                                  statearr_9739_9758[1] = 10;
                                                } else {
                                                  var statearr_9740_9759 = state_9713__$1;
                                                  statearr_9740_9759[1] = 11;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6232__auto__);
          return function(switch__6219__auto__, c__6232__auto__) {
            return function() {
              var state_machine__6220__auto__ = null;
              var state_machine__6220__auto____0 = function() {
                var statearr_9742 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_9742[0] = state_machine__6220__auto__;
                statearr_9742[1] = 1;
                return statearr_9742;
              };
              var state_machine__6220__auto____1 = function(state_9713) {
                while (true) {
                  var result__6221__auto__ = switch__6219__auto__.call(null, state_9713);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6221__auto__;
                  }
                  break;
                }
              };
              state_machine__6220__auto__ = function(state_9713) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6220__auto____0.call(this);
                  case 1:
                    return state_machine__6220__auto____1.call(this, state_9713);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
              return state_machine__6220__auto__;
            }();
          }(switch__6219__auto__, c__6232__auto__);
        }();
        var state__6234__auto__ = function() {
          var statearr_9743 = f__6233__auto__.call(null);
          statearr_9743[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
          return statearr_9743;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
      };
    }(c__6232__auto__));
    return c__6232__auto__;
  };
  var rrsa = function(ch, var_args) {
    var typ = null;
    if (arguments.length > 1) {
      typ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rrsa__delegate.call(this, ch, typ);
  };
  rrsa.cljs$lang$maxFixedArity = 1;
  rrsa.cljs$lang$applyTo = function(arglist__9760) {
    var ch = cljs.core.first(arglist__9760);
    var typ = cljs.core.rest(arglist__9760);
    return rrsa__delegate(ch, typ);
  };
  rrsa.cljs$core$IFn$_invoke$arity$variadic = rrsa__delegate;
  return rrsa;
}();
pubsub.s = function s(typ, m) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9777) {
            var state_val_9778 = state_9777[1];
            if (state_val_9778 === 2) {
              var inst_9775 = state_9777[2];
              var state_9777__$1 = state_9777;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9777__$1, inst_9775);
            } else {
              if (state_val_9778 === 1) {
                var inst_9772 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), typ, m);
                var inst_9773 = pubsub.makeMsg.call(null, typ, m);
                var state_9777__$1 = function() {
                  var statearr_9779 = state_9777;
                  statearr_9779[5] = inst_9772;
                  return statearr_9779;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9777__$1, 2, pubsub.sendReceiveCh, inst_9773);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9781 = [null, null, null, null, null, null];
              statearr_9781[0] = state_machine__6220__auto__;
              statearr_9781[1] = 1;
              return statearr_9781;
            };
            var state_machine__6220__auto____1 = function(state_9777) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9777);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9777) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9777);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9782 = f__6233__auto__.call(null);
        statearr_9782[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9782;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.si = function si(typ, m) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9813) {
            var state_val_9814 = state_9813[1];
            if (state_val_9814 === 3) {
              var inst_9809 = state_9813[2];
              var inst_9810 = pubsub.n = inst_9809;
              var inst_9811 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "recieved", pubsub.n);
              var state_9813__$1 = function() {
                var statearr_9815 = state_9813;
                statearr_9815[5] = inst_9810;
                return statearr_9815;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9813__$1, inst_9811);
            } else {
              if (state_val_9814 === 2) {
                var inst_9807 = state_9813[2];
                var state_9813__$1 = function() {
                  var statearr_9816 = state_9813;
                  statearr_9816[6] = inst_9807;
                  return statearr_9816;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9813__$1, 3, pubsub.pchannel);
              } else {
                if (state_val_9814 === 1) {
                  var inst_9802 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), typ, m);
                  var inst_9803 = cljs.core.async.chan.call(null);
                  var inst_9804 = pubsub.pchannel = inst_9803;
                  var inst_9805 = pubsub.makeMsg.call(null, typ, m, pubsub.pchannel);
                  var state_9813__$1 = function() {
                    var statearr_9817 = state_9813;
                    statearr_9817[7] = inst_9802;
                    statearr_9817[8] = inst_9804;
                    return statearr_9817;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9813__$1, 2, pubsub.sendReceiveCh, inst_9805);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9819 = [null, null, null, null, null, null, null, null, null];
              statearr_9819[0] = state_machine__6220__auto__;
              statearr_9819[1] = 1;
              return statearr_9819;
            };
            var state_machine__6220__auto____1 = function(state_9813) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9813);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9813) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9813);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9820 = f__6233__auto__.call(null);
        statearr_9820[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9820;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
pubsub.sia = function sia(typ, _AMPERSAND_m) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9853) {
            var state_val_9854 = state_9853[1];
            if (state_val_9854 === 3) {
              var inst_9849 = state_9853[2];
              var inst_9850 = pubsub.n = inst_9849;
              var inst_9851 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "recieved", pubsub.n);
              var state_9853__$1 = function() {
                var statearr_9855 = state_9853;
                statearr_9855[5] = inst_9850;
                return statearr_9855;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9853__$1, inst_9851);
            } else {
              if (state_val_9854 === 2) {
                var inst_9846 = state_9853[2];
                var inst_9847 = routing.routea.call(null, pubsub.pchannel);
                var state_9853__$1 = function() {
                  var statearr_9856 = state_9853;
                  statearr_9856[6] = inst_9847;
                  statearr_9856[7] = inst_9846;
                  return statearr_9856;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9853__$1, 3, pubsub.pchannel);
              } else {
                if (state_val_9854 === 1) {
                  var inst_9841 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), typ, pubsub.m);
                  var inst_9842 = cljs.core.async.chan.call(null);
                  var inst_9843 = pubsub.pchannel = inst_9842;
                  var inst_9844 = pubsub.makeMsg.call(null, typ, pubsub.m);
                  var state_9853__$1 = function() {
                    var statearr_9857 = state_9853;
                    statearr_9857[8] = inst_9841;
                    statearr_9857[9] = inst_9843;
                    return statearr_9857;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9853__$1, 2, pubsub.sendReceiveCh, inst_9844);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9859 = [null, null, null, null, null, null, null, null, null, null];
              statearr_9859[0] = state_machine__6220__auto__;
              statearr_9859[1] = 1;
              return statearr_9859;
            };
            var state_machine__6220__auto____1 = function(state_9853) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9853);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9853) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9853);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9860 = f__6233__auto__.call(null);
        statearr_9860[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9860;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
goog.provide("intercom");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("logger");
cljs.core.enable_console_print_BANG_.call(null);
intercom.intercomState = "start";
intercom.state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
intercom.inputch = cljs.core.async.chan.call(null);
intercom.outputch = cljs.core.async.chan.call(null);
intercom.statech = cljs.core.async.chan.call(null);
intercom.onMessage = function onMessage(wch, type, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), type + " message in intercom", data);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_8644) {
            var state_val_8645 = state_8644[1];
            if (state_val_8645 === 2) {
              var inst_8642 = state_8644[2];
              var state_8644__$1 = state_8644;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8644__$1, inst_8642);
            } else {
              if (state_val_8645 === 1) {
                var inst_8640 = {"type":type, "data":data, "peer":wch};
                var state_8644__$1 = state_8644;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8644__$1, 2, intercom.inputch, inst_8640);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_8647 = [null, null, null, null, null];
              statearr_8647[0] = state_machine__6220__auto__;
              statearr_8647[1] = 1;
              return statearr_8647;
            };
            var state_machine__6220__auto____1 = function(state_8644) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_8644);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_8644) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_8644);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_8648 = f__6233__auto__.call(null);
        statearr_8648[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_8648;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
intercom.setIntercomState = function setIntercomState(conn, state) {
  return conn.intercomstate = state;
};
intercom.getIntercomState = function getIntercomState(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "getIntercomState", "getIntercomState", -1128989799), "intercom state", conn);
  return conn["intercomstate"];
};
intercom.tostateu = function tostateu(conn, statename) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "changing state to: ", statename);
  return conn["intercomstate"] = statename;
};
intercom.typeof_QMARK_ = function typeof_QMARK_(message, type) {
  return message.type === type;
};
intercom.is_QMARK_ = function is_QMARK_(state, qstate) {
  return state === qstate;
};
intercom.intercomstatemachine = function intercomstatemachine(conn, message) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_8878) {
            var state_val_8879 = state_8878[1];
            if (state_val_8879 === 7) {
              var inst_8821 = intercom.is_QMARK_.call(null, intercom.state, "grind");
              var state_8878__$1 = state_8878;
              if (inst_8821) {
                var statearr_8880_8929 = state_8878__$1;
                statearr_8880_8929[1] = 13;
              } else {
                var statearr_8881_8930 = state_8878__$1;
                statearr_8881_8930[1] = 14;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_8879 === 20) {
                var inst_8833 = intercom.typeof_QMARK_.call(null, message, "getdata");
                var state_8878__$1 = state_8878;
                if (inst_8833) {
                  var statearr_8882_8931 = state_8878__$1;
                  statearr_8882_8931[1] = 22;
                } else {
                  var statearr_8883_8932 = state_8878__$1;
                  statearr_8883_8932[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_8879 === 27) {
                  var inst_8863 = state_8878[2];
                  var state_8878__$1 = state_8878;
                  var statearr_8884_8933 = state_8878__$1;
                  statearr_8884_8933[2] = inst_8863;
                  statearr_8884_8933[1] = 24;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_8879 === 1) {
                    var inst_8789 = cljs.core.partial.call(null, intercom.tostateu, conn);
                    var inst_8790 = intercom.tostate = inst_8789;
                    var inst_8791 = intercom.getIntercomState.call(null, conn);
                    var inst_8792 = intercom.state = inst_8791;
                    var inst_8793 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "starting loop in intercom");
                    var inst_8794 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state in intercom ", intercom.state);
                    var inst_8795 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message in intercom ", message);
                    var inst_8796 = message.data;
                    var inst_8797 = intercom.v = inst_8796;
                    var inst_8798 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state ", intercom.state);
                    var inst_8799 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message ", message);
                    var inst_8800 = intercom.is_QMARK_.call(null, intercom.state, "start");
                    var state_8878__$1 = function() {
                      var statearr_8885 = state_8878;
                      statearr_8885[5] = inst_8798;
                      statearr_8885[6] = inst_8790;
                      statearr_8885[7] = inst_8792;
                      statearr_8885[8] = inst_8793;
                      statearr_8885[9] = inst_8794;
                      statearr_8885[10] = inst_8797;
                      statearr_8885[11] = inst_8795;
                      statearr_8885[12] = inst_8799;
                      return statearr_8885;
                    }();
                    if (inst_8800) {
                      var statearr_8886_8934 = state_8878__$1;
                      statearr_8886_8934[1] = 2;
                    } else {
                      var statearr_8887_8935 = state_8878__$1;
                      statearr_8887_8935[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_8879 === 24) {
                      var inst_8865 = state_8878[2];
                      var state_8878__$1 = state_8878;
                      var statearr_8888_8936 = state_8878__$1;
                      statearr_8888_8936[2] = inst_8865;
                      statearr_8888_8936[1] = 21;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_8879 === 4) {
                        var inst_8876 = state_8878[2];
                        var state_8878__$1 = state_8878;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8878__$1, inst_8876);
                      } else {
                        if (state_val_8879 === 15) {
                          var inst_8872 = state_8878[2];
                          var state_8878__$1 = state_8878;
                          var statearr_8889_8937 = state_8878__$1;
                          statearr_8889_8937[2] = inst_8872;
                          statearr_8889_8937[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_8879 === 21) {
                            var inst_8867 = state_8878[2];
                            var state_8878__$1 = state_8878;
                            var statearr_8890_8938 = state_8878__$1;
                            statearr_8890_8938[2] = inst_8867;
                            statearr_8890_8938[1] = 18;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_8879 === 31) {
                              var inst_8850 = it.takeData.call(null, message);
                              var inst_8851 = intercom.tostate.call(null, inst_8850);
                              var state_8878__$1 = state_8878;
                              var statearr_8891_8939 = state_8878__$1;
                              statearr_8891_8939[2] = inst_8851;
                              statearr_8891_8939[1] = 33;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_8879 === 32) {
                                var state_8878__$1 = state_8878;
                                var statearr_8892_8940 = state_8878__$1;
                                statearr_8892_8940[1] = 34;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_8879 === 33) {
                                  var inst_8859 = state_8878[2];
                                  var state_8878__$1 = state_8878;
                                  var statearr_8894_8941 = state_8878__$1;
                                  statearr_8894_8941[2] = inst_8859;
                                  statearr_8894_8941[1] = 30;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_8879 === 13) {
                                    var inst_8823 = intercom.typeof_QMARK_.call(null, message, "conn");
                                    var state_8878__$1 = state_8878;
                                    if (inst_8823) {
                                      var statearr_8895_8942 = state_8878__$1;
                                      statearr_8895_8942[1] = 16;
                                    } else {
                                      var statearr_8896_8943 = state_8878__$1;
                                      statearr_8896_8943[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_8879 === 22) {
                                      var inst_8835 = it.takeGetData.call(null, message);
                                      var inst_8836 = intercom.tostate.call(null, inst_8835);
                                      var state_8878__$1 = state_8878;
                                      var statearr_8897_8944 = state_8878__$1;
                                      statearr_8897_8944[2] = inst_8836;
                                      statearr_8897_8944[1] = 24;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_8879 === 36) {
                                        var inst_8857 = state_8878[2];
                                        var state_8878__$1 = state_8878;
                                        var statearr_8898_8945 = state_8878__$1;
                                        statearr_8898_8945[2] = inst_8857;
                                        statearr_8898_8945[1] = 33;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_8879 === 29) {
                                          var inst_8848 = intercom.typeof_QMARK_.call(null, message, "data");
                                          var state_8878__$1 = state_8878;
                                          if (inst_8848) {
                                            var statearr_8899_8946 = state_8878__$1;
                                            statearr_8899_8946[1] = 31;
                                          } else {
                                            var statearr_8900_8947 = state_8878__$1;
                                            statearr_8900_8947[1] = 32;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_8879 === 6) {
                                            var inst_8811 = intercom.typeof_QMARK_.call(null, message, "version");
                                            var state_8878__$1 = state_8878;
                                            if (inst_8811) {
                                              var statearr_8901_8948 = state_8878__$1;
                                              statearr_8901_8948[1] = 9;
                                            } else {
                                              var statearr_8902_8949 = state_8878__$1;
                                              statearr_8902_8949[1] = 10;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_8879 === 28) {
                                              var inst_8845 = it.takeTx.call(null, message);
                                              var inst_8846 = intercom.tostate.call(null, inst_8845);
                                              var state_8878__$1 = state_8878;
                                              var statearr_8903_8950 = state_8878__$1;
                                              statearr_8903_8950[2] = inst_8846;
                                              statearr_8903_8950[1] = 30;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_8879 === 25) {
                                                var inst_8840 = it.takeGetTx.call(null, message);
                                                var inst_8841 = intercom.tostate.call(null, inst_8840);
                                                var state_8878__$1 = state_8878;
                                                var statearr_8904_8951 = state_8878__$1;
                                                statearr_8904_8951[2] = inst_8841;
                                                statearr_8904_8951[1] = 27;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_8879 === 34) {
                                                  var inst_8854 = intercom.tostate.call(null, "grind");
                                                  var state_8878__$1 = state_8878;
                                                  var statearr_8905_8952 = state_8878__$1;
                                                  statearr_8905_8952[2] = inst_8854;
                                                  statearr_8905_8952[1] = 36;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_8879 === 17) {
                                                    var inst_8828 = intercom.typeof_QMARK_.call(null, message, "inv");
                                                    var state_8878__$1 = state_8878;
                                                    if (inst_8828) {
                                                      var statearr_8906_8953 = state_8878__$1;
                                                      statearr_8906_8953[1] = 19;
                                                    } else {
                                                      var statearr_8907_8954 = state_8878__$1;
                                                      statearr_8907_8954[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_8879 === 3) {
                                                      var inst_8809 = intercom.is_QMARK_.call(null, intercom.state, "version");
                                                      var state_8878__$1 = state_8878;
                                                      if (inst_8809) {
                                                        var statearr_8908_8955 = state_8878__$1;
                                                        statearr_8908_8955[1] = 6;
                                                      } else {
                                                        var statearr_8909_8956 = state_8878__$1;
                                                        statearr_8909_8956[1] = 7;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_8879 === 12) {
                                                        var inst_8815 = state_8878[2];
                                                        var inst_8816 = intercom.tostate.call(null, inst_8815);
                                                        var state_8878__$1 = state_8878;
                                                        var statearr_8910_8957 = state_8878__$1;
                                                        statearr_8910_8957[2] = inst_8816;
                                                        statearr_8910_8957[1] = 11;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_8879 === 2) {
                                                          var inst_8802 = it.takeConn.call(null, message);
                                                          var state_8878__$1 = state_8878;
                                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8878__$1, 5, inst_8802);
                                                        } else {
                                                          if (state_val_8879 === 23) {
                                                            var inst_8838 = intercom.typeof_QMARK_.call(null, message, "gettx");
                                                            var state_8878__$1 = state_8878;
                                                            if (inst_8838) {
                                                              var statearr_8911_8958 = state_8878__$1;
                                                              statearr_8911_8958[1] = 25;
                                                            } else {
                                                              var statearr_8912_8959 = state_8878__$1;
                                                              statearr_8912_8959[1] = 26;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_8879 === 35) {
                                                              var state_8878__$1 = state_8878;
                                                              var statearr_8913_8960 = state_8878__$1;
                                                              statearr_8913_8960[2] = null;
                                                              statearr_8913_8960[1] = 36;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_8879 === 19) {
                                                                var inst_8830 = it.takeInv.call(null, message);
                                                                var inst_8831 = intercom.tostate.call(null, inst_8830);
                                                                var state_8878__$1 = state_8878;
                                                                var statearr_8914_8961 = state_8878__$1;
                                                                statearr_8914_8961[2] = inst_8831;
                                                                statearr_8914_8961[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_8879 === 11) {
                                                                  var inst_8819 = state_8878[2];
                                                                  var state_8878__$1 = state_8878;
                                                                  var statearr_8915_8962 = state_8878__$1;
                                                                  statearr_8915_8962[2] = inst_8819;
                                                                  statearr_8915_8962[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_8879 === 9) {
                                                                    var inst_8813 = it.takeVersion.call(null, message);
                                                                    var state_8878__$1 = state_8878;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8878__$1, 12, inst_8813);
                                                                  } else {
                                                                    if (state_val_8879 === 5) {
                                                                      var inst_8804 = state_8878[2];
                                                                      var inst_8805 = intercom.newstate = inst_8804;
                                                                      var inst_8806 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "start -\x3e ", intercom.newstate);
                                                                      var inst_8807 = intercom.tostate.call(null, intercom.newstate);
                                                                      var state_8878__$1 = function() {
                                                                        var statearr_8916 = state_8878;
                                                                        statearr_8916[13] = inst_8806;
                                                                        statearr_8916[14] = inst_8805;
                                                                        return statearr_8916;
                                                                      }();
                                                                      var statearr_8917_8963 = state_8878__$1;
                                                                      statearr_8917_8963[2] = inst_8807;
                                                                      statearr_8917_8963[1] = 4;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_8879 === 14) {
                                                                        var state_8878__$1 = state_8878;
                                                                        var statearr_8918_8964 = state_8878__$1;
                                                                        statearr_8918_8964[2] = null;
                                                                        statearr_8918_8964[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_8879 === 26) {
                                                                          var inst_8843 = intercom.typeof_QMARK_.call(null, message, "tx");
                                                                          var state_8878__$1 = state_8878;
                                                                          if (inst_8843) {
                                                                            var statearr_8919_8965 = state_8878__$1;
                                                                            statearr_8919_8965[1] = 28;
                                                                          } else {
                                                                            var statearr_8920_8966 = state_8878__$1;
                                                                            statearr_8920_8966[1] = 29;
                                                                          }
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_8879 === 16) {
                                                                            var inst_8825 = it.takeConn.call(null, message);
                                                                            var inst_8826 = intercom.tostate.call(null, inst_8825);
                                                                            var state_8878__$1 = state_8878;
                                                                            var statearr_8921_8967 = state_8878__$1;
                                                                            statearr_8921_8967[2] = inst_8826;
                                                                            statearr_8921_8967[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_8879 === 30) {
                                                                              var inst_8861 = state_8878[2];
                                                                              var state_8878__$1 = state_8878;
                                                                              var statearr_8922_8968 = state_8878__$1;
                                                                              statearr_8922_8968[2] = inst_8861;
                                                                              statearr_8922_8968[1] = 27;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_8879 === 10) {
                                                                                var state_8878__$1 = state_8878;
                                                                                var statearr_8923_8969 = state_8878__$1;
                                                                                statearr_8923_8969[2] = null;
                                                                                statearr_8923_8969[1] = 11;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_8879 === 18) {
                                                                                  var inst_8869 = state_8878[2];
                                                                                  var state_8878__$1 = state_8878;
                                                                                  var statearr_8924_8970 = state_8878__$1;
                                                                                  statearr_8924_8970[2] = inst_8869;
                                                                                  statearr_8924_8970[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_8879 === 8) {
                                                                                    var inst_8874 = state_8878[2];
                                                                                    var state_8878__$1 = state_8878;
                                                                                    var statearr_8925_8971 = state_8878__$1;
                                                                                    statearr_8925_8971[2] = inst_8874;
                                                                                    statearr_8925_8971[1] = 4;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    return null;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_8927 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_8927[0] = state_machine__6220__auto__;
              statearr_8927[1] = 1;
              return statearr_8927;
            };
            var state_machine__6220__auto____1 = function(state_8878) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_8878);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_8878) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_8878);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_8928 = f__6233__auto__.call(null);
        statearr_8928[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_8928;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
goog.provide("crypt0");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("logger");
crypt0.arraybtostring = function arraybtostring(buff) {
  return arrayBToString(buff);
};
crypt0.encode = function encode(x) {
  return(new TextEncoder("utf-8")).encode(x);
};
crypt0.shaC = cljs.core.async.chan.call(null);
crypt0.resultToCh = function resultToCh(chan, digest) {
  crypt0.m = crypt0.arraybtostring.call(null, digest);
  logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "to channel: %s", crypt0.m);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10527) {
            var state_val_10528 = state_10527[1];
            if (state_val_10528 === 2) {
              var inst_10525 = state_10527[2];
              var state_10527__$1 = state_10527;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10527__$1, inst_10525);
            } else {
              if (state_val_10528 === 1) {
                var state_10527__$1 = state_10527;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10527__$1, 2, chan, crypt0.m);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10530 = [null, null, null, null, null];
              statearr_10530[0] = state_machine__6220__auto__;
              statearr_10530[1] = 1;
              return statearr_10530;
            };
            var state_machine__6220__auto____1 = function(state_10527) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10527);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10527) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10527);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10531 = f__6233__auto__.call(null);
        statearr_10531[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10531;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
crypt0.shaCallb = function shaCallb(digest) {
  logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "%s", "about to do hash2");
  crypt0.h = crypt0.arraybtostring.call(null, digest);
  logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "", crypt0.h);
  return ps.pub.call(null, "crypto", crypt0.h);
};
crypt0.sha256 = function sha256(x) {
  logger.og.call(null, new cljs.core.Keyword(null, "sha256", "sha256", 1890611800), "sha256 %s", x);
  return crypto.subtle.digest(function() {
    var obj10535 = {"name":"SHA-256"};
    return obj10535;
  }(), crypt0.encode.call(null, x)).then(crypt0.shaCallb);
};
crypt0.sha256c = function sha256c(c, x) {
  return crypto.subtle.digest(function() {
    var obj10539 = {"name":"SHA-256"};
    return obj10539;
  }(), crypt0.encode.call(null, x)).then(c);
};
crypt0.s256 = function s256(k) {
  logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "about to sha256 ", k);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10578) {
            var state_val_10579 = state_10578[1];
            if (state_val_10579 === 2) {
              var inst_10572 = state_10578[2];
              var inst_10573 = crypt0.arraybtostring.call(null, inst_10572);
              var inst_10574 = crypt0.r = inst_10573;
              var inst_10575 = "got from sha256 " + k;
              var inst_10576 = logger.og.call(null, new cljs.core.Keyword(null, "s256", "s256", -1445609188), inst_10575, crypt0.r);
              var state_10578__$1 = function() {
                var statearr_10580 = state_10578;
                statearr_10580[5] = inst_10574;
                statearr_10580[6] = inst_10576;
                return statearr_10580;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10578__$1, crypt0.r);
            } else {
              if (state_val_10579 === 1) {
                var inst_10563 = cljs.core.async.chan.call(null);
                var inst_10566 = {"name":"SHA-256"};
                var inst_10567 = crypt0.encode.call(null, k);
                var inst_10568 = crypto.subtle.digest(inst_10566, inst_10567);
                var inst_10569 = function() {
                  var c = inst_10563;
                  return function(c, inst_10563, inst_10566, inst_10567, inst_10568, state_val_10579, c__6232__auto__) {
                    return function(p1__10540_SHARP_) {
                      return cljs.core.async.put_BANG_.call(null, c, p1__10540_SHARP_);
                    };
                  }(c, inst_10563, inst_10566, inst_10567, inst_10568, state_val_10579, c__6232__auto__);
                }();
                var inst_10570 = inst_10568.then(inst_10569);
                var state_10578__$1 = function() {
                  var statearr_10581 = state_10578;
                  statearr_10581[7] = inst_10570;
                  return statearr_10581;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10578__$1, 2, inst_10563);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10583 = [null, null, null, null, null, null, null, null];
              statearr_10583[0] = state_machine__6220__auto__;
              statearr_10583[1] = 1;
              return statearr_10583;
            };
            var state_machine__6220__auto____1 = function(state_10578) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10578);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10578) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10578);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10584 = f__6233__auto__.call(null);
        statearr_10584[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10584;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
crypt0.bHash = function bHash(blockHeader) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10608) {
            var state_val_10609 = state_10608[1];
            if (state_val_10609 === 2) {
              var inst_10605 = state_10608[2];
              var inst_10606 = crypt0.blockHash = inst_10605;
              var state_10608__$1 = function() {
                var statearr_10610 = state_10608;
                statearr_10610[5] = inst_10606;
                return statearr_10610;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10608__$1, crypt0.blockHash);
            } else {
              if (state_val_10609 === 1) {
                var inst_10600 = JSON.stringify(blockHeader);
                var inst_10601 = crypt0.stringified = inst_10600;
                var inst_10602 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "stringified", crypt0.stringified);
                var inst_10603 = crypt0.s256.call(null, crypt0.stringified);
                var state_10608__$1 = function() {
                  var statearr_10611 = state_10608;
                  statearr_10611[6] = inst_10601;
                  statearr_10611[7] = inst_10602;
                  return statearr_10611;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10608__$1, 2, inst_10603);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10613 = [null, null, null, null, null, null, null, null];
              statearr_10613[0] = state_machine__6220__auto__;
              statearr_10613[1] = 1;
              return statearr_10613;
            };
            var state_machine__6220__auto____1 = function(state_10608) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10608);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10608) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10608);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10614 = f__6233__auto__.call(null);
        statearr_10614[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10614;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
crypt0.merkleRoot = function merkleRoot(transactions) {
  logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions ", transactions);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10756) {
            var state_val_10757 = state_10756[1];
            if (state_val_10757 === 9) {
              var inst_10748 = state_10756[2];
              var inst_10749 = crypt0.fromC = inst_10748;
              var inst_10750 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "from ch ", crypt0.fromC);
              var inst_10751 = crypt0.fromC.type = "fmr";
              var inst_10754 = {"value":crypt0.fromC, "type":"fmr"};
              var state_10756__$1 = function() {
                var statearr_10759 = state_10756;
                statearr_10759[5] = inst_10749;
                statearr_10759[6] = inst_10751;
                statearr_10759[7] = inst_10750;
                return statearr_10759;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10756__$1, inst_10754);
            } else {
              if (state_val_10757 === 8) {
                var inst_10744 = state_10756[2];
                var state_10756__$1 = state_10756;
                var statearr_10760_10779 = state_10756__$1;
                statearr_10760_10779[2] = inst_10744;
                statearr_10760_10779[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10757 === 7) {
                  var inst_10722 = state_10756[8];
                  var inst_10740 = inst_10722.shift();
                  var inst_10741 = inst_10722.length;
                  var tmp10758 = inst_10722;
                  var inst_10720 = inst_10740;
                  var inst_10721 = inst_10741;
                  var inst_10722__$1 = tmp10758;
                  var state_10756__$1 = function() {
                    var statearr_10761 = state_10756;
                    statearr_10761[9] = inst_10720;
                    statearr_10761[10] = inst_10721;
                    statearr_10761[8] = inst_10722__$1;
                    return statearr_10761;
                  }();
                  var statearr_10762_10780 = state_10756__$1;
                  statearr_10762_10780[2] = null;
                  statearr_10762_10780[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10757 === 6) {
                    var inst_10720 = state_10756[9];
                    var inst_10721 = state_10756[10];
                    var inst_10722 = state_10756[8];
                    var inst_10736 = cljs.core.async.chan.call(null, 1);
                    var inst_10737 = function() {
                      var c__6232__auto____$1 = inst_10736;
                      var next = inst_10720;
                      var cnt = inst_10721;
                      var txs = inst_10722;
                      return function(c__6232__auto____$1, next, cnt, txs, inst_10720, inst_10721, inst_10722, inst_10736, state_val_10757, c__6232__auto__) {
                        return function() {
                          var f__6233__auto__ = function() {
                            var switch__6219__auto__ = function(c__6232__auto____$1, next, cnt, txs, inst_10720, inst_10721, inst_10722, inst_10736, state_val_10757, c__6232__auto__) {
                              return function(state_10734) {
                                var state_val_10735 = state_10734[1];
                                if (state_val_10735 === 1) {
                                  var state_10734__$1 = state_10734;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10734__$1, null);
                                } else {
                                  return null;
                                }
                              };
                            }(c__6232__auto____$1, next, cnt, txs, inst_10720, inst_10721, inst_10722, inst_10736, state_val_10757, c__6232__auto__);
                            return function(switch__6219__auto__, c__6232__auto____$1, next, cnt, txs, inst_10720, inst_10721, inst_10722, inst_10736, state_val_10757, c__6232__auto__) {
                              return function() {
                                var state_machine__6220__auto__ = null;
                                var state_machine__6220__auto____0 = function() {
                                  var statearr_10764 = [null, null, null, null, null];
                                  statearr_10764[0] = state_machine__6220__auto__;
                                  statearr_10764[1] = 1;
                                  return statearr_10764;
                                };
                                var state_machine__6220__auto____1 = function(state_10734) {
                                  while (true) {
                                    var result__6221__auto__ = switch__6219__auto__.call(null, state_10734);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__6221__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__6220__auto__ = function(state_10734) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__6220__auto____0.call(this);
                                    case 1:
                                      return state_machine__6220__auto____1.call(this, state_10734);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
                                state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
                                return state_machine__6220__auto__;
                              }();
                            }(switch__6219__auto__, c__6232__auto____$1, next, cnt, txs, inst_10720, inst_10721, inst_10722, inst_10736, state_val_10757, c__6232__auto__);
                          }();
                          var state__6234__auto__ = function() {
                            var statearr_10765 = f__6233__auto__.call(null);
                            statearr_10765[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto____$1;
                            return statearr_10765;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
                        };
                      }(c__6232__auto____$1, next, cnt, txs, inst_10720, inst_10721, inst_10722, inst_10736, state_val_10757, c__6232__auto__);
                    }();
                    var inst_10738 = cljs.core.async.impl.dispatch.run.call(null, inst_10737);
                    var state_10756__$1 = function() {
                      var statearr_10766 = state_10756;
                      statearr_10766[11] = inst_10738;
                      return statearr_10766;
                    }();
                    var statearr_10767_10781 = state_10756__$1;
                    statearr_10767_10781[2] = inst_10736;
                    statearr_10767_10781[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10757 === 5) {
                      var inst_10720 = state_10756[9];
                      var inst_10721 = state_10756[10];
                      var inst_10726 = state_10756[2];
                      var inst_10727 = crypt0.tx = inst_10726;
                      var inst_10728 = cljs.core.partial.call(null, crypt0.resultToCh, crypt0.shaC);
                      var inst_10729 = crypt0.tx + inst_10720;
                      var inst_10730 = crypt0.sha256c.call(null, inst_10728, inst_10729);
                      var inst_10731 = 0 === inst_10721;
                      var state_10756__$1 = function() {
                        var statearr_10768 = state_10756;
                        statearr_10768[12] = inst_10727;
                        statearr_10768[13] = inst_10730;
                        return statearr_10768;
                      }();
                      if (cljs.core.truth_(inst_10731)) {
                        var statearr_10769_10782 = state_10756__$1;
                        statearr_10769_10782[1] = 6;
                      } else {
                        var statearr_10770_10783 = state_10756__$1;
                        statearr_10770_10783[1] = 7;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10757 === 4) {
                        var inst_10746 = state_10756[2];
                        var state_10756__$1 = function() {
                          var statearr_10771 = state_10756;
                          statearr_10771[14] = inst_10746;
                          return statearr_10771;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10756__$1, 9, crypt0.shaC);
                      } else {
                        if (state_val_10757 === 3) {
                          var inst_10721 = state_10756[10];
                          var inst_10724 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "count  %s", inst_10721);
                          var state_10756__$1 = function() {
                            var statearr_10772 = state_10756;
                            statearr_10772[15] = inst_10724;
                            return statearr_10772;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10756__$1, 5, crypt0.shaC);
                        } else {
                          if (state_val_10757 === 2) {
                            var inst_10705 = state_10756[2];
                            var inst_10706 = cljs.core.async.chan.call(null);
                            var inst_10707 = crypt0.shaC = inst_10706;
                            var inst_10708 = transactions.length;
                            var inst_10709 = crypt0.originl = inst_10708;
                            var inst_10710 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions length ", crypt0.originl);
                            var inst_10711 = transactions.shift();
                            var inst_10712 = crypt0.tx = inst_10711;
                            var inst_10713 = transactions.shift();
                            var inst_10714 = crypt0.next = inst_10713;
                            var inst_10715 = cljs.core.partial.call(null, crypt0.resultToCh, crypt0.shaC);
                            var inst_10716 = crypt0.tx + cljs.core.next;
                            var inst_10717 = crypt0.sha256c.call(null, inst_10715, inst_10716);
                            var inst_10718 = transactions.shift();
                            var inst_10719 = transactions.length;
                            var inst_10720 = inst_10718;
                            var inst_10721 = inst_10719;
                            var inst_10722 = transactions;
                            var state_10756__$1 = function() {
                              var statearr_10773 = state_10756;
                              statearr_10773[16] = inst_10710;
                              statearr_10773[9] = inst_10720;
                              statearr_10773[17] = inst_10707;
                              statearr_10773[18] = inst_10717;
                              statearr_10773[19] = inst_10705;
                              statearr_10773[20] = inst_10709;
                              statearr_10773[10] = inst_10721;
                              statearr_10773[8] = inst_10722;
                              statearr_10773[21] = inst_10712;
                              statearr_10773[22] = inst_10714;
                              return statearr_10773;
                            }();
                            var statearr_10774_10784 = state_10756__$1;
                            statearr_10774_10784[2] = null;
                            statearr_10774_10784[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10757 === 1) {
                              var inst_10697 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions2 ", transactions);
                              var inst_10698 = crypt0.tr = transactions;
                              var inst_10699 = function() {
                                return function(inst_10697, inst_10698, state_val_10757, c__6232__auto__) {
                                  return function(x) {
                                    console.log("OLD : ", x);
                                    console.log("NEW : ", crypt0.tr);
                                    return crypt0.tr;
                                  };
                                }(inst_10697, inst_10698, state_val_10757, c__6232__auto__);
                              }();
                              var inst_10700 = crypt0.a = inst_10699;
                              var inst_10701 = function() {
                                return function(inst_10697, inst_10698, inst_10699, inst_10700, state_val_10757, c__6232__auto__) {
                                  return function() {
                                    return db.update.call(null, "txs", crypt0.a);
                                  };
                                }(inst_10697, inst_10698, inst_10699, inst_10700, state_val_10757, c__6232__auto__);
                              }();
                              var inst_10702 = crypt0.utx = inst_10701;
                              var inst_10703 = db.update.call(null, "txs", crypt0.a);
                              var state_10756__$1 = function() {
                                var statearr_10775 = state_10756;
                                statearr_10775[23] = inst_10698;
                                statearr_10775[24] = inst_10697;
                                statearr_10775[25] = inst_10702;
                                statearr_10775[26] = inst_10700;
                                return statearr_10775;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10756__$1, 2, inst_10703);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10777 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10777[0] = state_machine__6220__auto__;
              statearr_10777[1] = 1;
              return statearr_10777;
            };
            var state_machine__6220__auto____1 = function(state_10756) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10756);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10756) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10756);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10778 = f__6233__auto__.call(null);
        statearr_10778[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10778;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
goog.provide("mockdatabase");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
mockdatabase.mdbase = function() {
  var obj8018 = {};
  return obj8018;
}();
mockdatabase.g = function g(kie) {
  return mockdatabase.mdbase[kie];
};
mockdatabase.p = function p(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.ps = function ps(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.update = function update(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
goog.provide("mockdatabasew");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("crypt0");
goog.require("crypt0");
goog.require("mockdatabase");
goog.require("mockdatabase");
goog.require("logger");
goog.require("logger");
mockdatabasew.cleandb = function cleandb() {
  logger.og.call(null, new cljs.core.Keyword(null, "cleandb", "cleandb", -510162900), "cleandb ", mockdatabase.mdbase);
  return mockdatabase.mdbase = function() {
    var obj12107 = {};
    return obj12107;
  }();
};
mockdatabasew.dumpdb = function dumpdb() {
  return logger.og.call(null, new cljs.core.Keyword(null, "dumpdb", "dumpdb", 1809492694), "dbase ", mockdatabase.mdbase);
};
mockdatabasew.g = function g(k) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_12117) {
            var state_val_12118 = state_12117[1];
            if (state_val_12118 === 1) {
              var inst_12115 = mockdatabase.g.call(null, k);
              var state_12117__$1 = state_12117;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12117__$1, inst_12115);
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12120 = [null, null, null, null, null];
              statearr_12120[0] = state_machine__6220__auto__;
              statearr_12120[1] = 1;
              return statearr_12120;
            };
            var state_machine__6220__auto____1 = function(state_12117) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12117);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12117) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12117);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_12121 = f__6233__auto__.call(null);
        statearr_12121[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_12121;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
mockdatabasew.update = function update(k, v) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_12131) {
            var state_val_12132 = state_12131[1];
            if (state_val_12132 === 1) {
              var inst_12129 = mockdatabase.update.call(null, k, v);
              var state_12131__$1 = state_12131;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12131__$1, inst_12129);
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12134 = [null, null, null, null, null];
              statearr_12134[0] = state_machine__6220__auto__;
              statearr_12134[1] = 1;
              return statearr_12134;
            };
            var state_machine__6220__auto____1 = function(state_12131) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12131);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12131) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12131);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_12135 = f__6233__auto__.call(null);
        statearr_12135[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_12135;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
mockdatabasew.p = function p(k, v) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_12145) {
            var state_val_12146 = state_12145[1];
            if (state_val_12146 === 1) {
              var inst_12143 = mockdatabase.p.call(null, k, v);
              var state_12145__$1 = state_12145;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12145__$1, inst_12143);
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12148 = [null, null, null, null, null];
              statearr_12148[0] = state_machine__6220__auto__;
              statearr_12148[1] = 1;
              return statearr_12148;
            };
            var state_machine__6220__auto____1 = function(state_12145) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12145);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12145) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12145);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_12149 = f__6233__auto__.call(null);
        statearr_12149[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_12149;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
mockdatabasew.ps = function ps(k, v) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_12159) {
            var state_val_12160 = state_12159[1];
            if (state_val_12160 === 1) {
              var inst_12157 = mockdatabase.ps.call(null, k, v);
              var state_12159__$1 = state_12159;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12159__$1, inst_12157);
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12162 = [null, null, null, null, null];
              statearr_12162[0] = state_machine__6220__auto__;
              statearr_12162[1] = 1;
              return statearr_12162;
            };
            var state_machine__6220__auto____1 = function(state_12159) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12159);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12159) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12159);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_12163 = f__6233__auto__.call(null);
        statearr_12163[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_12163;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
mockdatabasew.initDBase = function initDBase(x) {
  logger.og.call(null, new cljs.core.Keyword(null, "initdbwraper2", "initdbwraper2", 161886543), "wrapper", x);
  mockdatabasew.dbase = mockdatabase.mdbase;
  var c = cljs.core.async.chan.call(null);
  var c__6232__auto___12270 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto___12270, c) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto___12270, c) {
          return function(state_12255) {
            var state_val_12256 = state_12255[1];
            if (state_val_12256 === 7) {
              var inst_12234 = state_12255[2];
              var inst_12235 = cljs.core.PersistentVector.EMPTY;
              var inst_12236 = {"header":0, "hash":inst_12234, "transactions":inst_12235};
              var inst_12237 = mockdatabasew.blck = inst_12236;
              var inst_12238 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "saving ", mockdatabasew.blck);
              var inst_12239 = mockdatabasew.blck.header;
              var inst_12240 = inst_12239.heightFromRoot = 0;
              var inst_12241 = mockdatabasew.ps.call(null, "last", mockdatabasew.blck);
              var state_12255__$1 = function() {
                var statearr_12257 = state_12255;
                statearr_12257[5] = inst_12240;
                statearr_12257[6] = inst_12238;
                statearr_12257[7] = inst_12237;
                return statearr_12257;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12255__$1, 8, inst_12241);
            } else {
              if (state_val_12256 === 1) {
                var inst_12217 = mockdatabasew.g.call(null, "last");
                var state_12255__$1 = state_12255;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12255__$1, 2, inst_12217);
              } else {
                if (state_val_12256 === 4) {
                  var inst_12226 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "nothing in database");
                  var inst_12227 = mockdatabase.ps.call(null, "height", 0);
                  var state_12255__$1 = function() {
                    var statearr_12258 = state_12255;
                    statearr_12258[8] = inst_12226;
                    return statearr_12258;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12255__$1, 6, inst_12227);
                } else {
                  if (state_val_12256 === 6) {
                    var inst_12229 = state_12255[2];
                    var inst_12232 = crypt0.bHash.call(null, 0);
                    var state_12255__$1 = function() {
                      var statearr_12259 = state_12255;
                      statearr_12259[9] = inst_12229;
                      return statearr_12259;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12255__$1, 7, inst_12232);
                  } else {
                    if (state_val_12256 === 3) {
                      var inst_12224 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database is ", mockdatabasew.lastone);
                      var state_12255__$1 = state_12255;
                      var statearr_12260_12271 = state_12255__$1;
                      statearr_12260_12271[2] = inst_12224;
                      statearr_12260_12271[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12256 === 2) {
                        var inst_12219 = state_12255[2];
                        var inst_12220 = mockdatabasew.lastone = inst_12219;
                        var inst_12221 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "about to init");
                        var inst_12222 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database ", mockdatabasew.lastone);
                        var state_12255__$1 = function() {
                          var statearr_12261 = state_12255;
                          statearr_12261[10] = inst_12220;
                          statearr_12261[11] = inst_12222;
                          statearr_12261[12] = inst_12221;
                          return statearr_12261;
                        }();
                        if (cljs.core.truth_(mockdatabasew.lastone)) {
                          var statearr_12262_12272 = state_12255__$1;
                          statearr_12262_12272[1] = 3;
                        } else {
                          var statearr_12263_12273 = state_12255__$1;
                          statearr_12263_12273[1] = 4;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12256 === 9) {
                          var inst_12247 = state_12255[2];
                          var inst_12248 = "b" + 0;
                          var inst_12249 = mockdatabase.ps.call(null, inst_12248, mockdatabasew.blck);
                          var state_12255__$1 = function() {
                            var statearr_12264 = state_12255;
                            statearr_12264[13] = inst_12247;
                            return statearr_12264;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12255__$1, 10, inst_12249);
                        } else {
                          if (state_val_12256 === 5) {
                            var inst_12253 = state_12255[2];
                            var state_12255__$1 = state_12255;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12255__$1, inst_12253);
                          } else {
                            if (state_val_12256 === 10) {
                              var inst_12251 = state_12255[2];
                              var state_12255__$1 = state_12255;
                              var statearr_12265_12274 = state_12255__$1;
                              statearr_12265_12274[2] = inst_12251;
                              statearr_12265_12274[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12256 === 8) {
                                var inst_12243 = state_12255[2];
                                var inst_12244 = mockdatabasew.blck.hash;
                                var inst_12245 = mockdatabase.ps.call(null, inst_12244, mockdatabasew.blck);
                                var state_12255__$1 = function() {
                                  var statearr_12266 = state_12255;
                                  statearr_12266[14] = inst_12243;
                                  return statearr_12266;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12255__$1, 9, inst_12245);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto___12270, c);
        return function(switch__6219__auto__, c__6232__auto___12270, c) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12268 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12268[0] = state_machine__6220__auto__;
              statearr_12268[1] = 1;
              return statearr_12268;
            };
            var state_machine__6220__auto____1 = function(state_12255) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12255);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12255) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12255);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto___12270, c);
      }();
      var state__6234__auto__ = function() {
        var statearr_12269 = f__6233__auto__.call(null);
        statearr_12269[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto___12270;
        return statearr_12269;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto___12270, c));
  return 1;
};
goog.provide("database");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("logger");
goog.require("mockdatabasew");
goog.require("mockdatabasew");
goog.require("pubsub");
goog.require("pubsub");
database.cleandb = function cleandb() {
  return mockdatabasew.cleandb.call(null);
};
database.dumpdb = function dumpdb() {
  return mockdatabasew.dumpdb.call(null);
};
database.onDatabaseChange = cljs.core.async.chan.call(null);
database.onDatabaseChange.type = "databaseChange";
database.update = function update(k, f) {
  return logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "getting from db ", k);
};
database.g = function g(k) {
  return database.go.call(null, database._LT__BANG_.call(null, mockdatabasew.g.call(null, k)));
};
database.update = function update(k, v) {
  return database.go.call(null, database._LT__BANG_.call(null, mockdatabasew.update.call(null, k, v)));
};
database.p = function p(k, v) {
  return database.go.call(null, database._LT__BANG_.call(null, mockdatabasew.p.call(null, k, v)));
};
database.ps = function ps(k, v) {
  return database.go.call(null, database._LT__BANG_.call(null, mockdatabasew.p.call(null, k, v)));
};
database.initDBase = function initDBase(x) {
  logger.og.call(null, new cljs.core.Keyword(null, "initdbwraper", "initdbwraper", 631490056), "wrapper", x);
  return mockdatabasew.initDBase.call(null, x);
};
database.connectTo = function connectTo(ev, id) {
  return database.go.call(null, logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), "", cljs.core.first.call(null, id)), logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), "", database._LT__BANG_.call(null, cljs.core.get.call(null))), logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), "", database._LT__BANG_.call(null, cljs.core.get.call(null))), function() {
    var conn = database._LT__BANG_.call(null, cljs.core.get.call(null)).connect(id);
    return conn.on("open", cljs.core.partial.call(null, comm.onOpen, conn));
  }());
};
goog.provide("blockchain");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("database");
goog.require("database");
goog.require("logger");
goog.require("logger");
cljs.core.enable_console_print_BANG_.call(null);
blockchain.memPool = [];
blockchain.blockhainInfo = function() {
  var obj11494 = {};
  return obj11494;
}();
blockchain.blockhainInfo.dificulty = 5;
blockchain.addTransactionToMemPool = function addTransactionToMemPool(x) {
  blockchain.memPool.push(x);
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after adding ", blockchain.memPool);
};
blockchain.removeTransactionFromMemPool = function removeTransactionFromMemPool(x) {
  blockchain.memPool.splice(blockchain.memPool.indexOf(x));
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after remove ", blockchain.memPool);
};
blockchain.makeBlockHeader = function makeBlockHeader(version, previous, fmroot, timestamp, bits, nonce, txcount) {
  var obj11498 = {"version":1, "heightFromRoot":0, "previous":previous, "merkleRoot":fmroot, "timestamp":timestamp, "bits":bits, "nonce":nonce, "txcount":txcount};
  return obj11498;
};
blockchain.makeTransaction = function makeTransaction() {
  var obj11502 = {"":1};
  return obj11502;
};
blockchain.addTransactionToBlock = function addTransactionToBlock() {
  var obj11506 = {"":1};
  return obj11506;
};
blockchain.prevblk = function prevblk(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), "about to get prev blk ", blockk);
  return blockk.header.previous;
};
blockchain.blockKnown_QMARK_ = function blockKnown_QMARK_(blockk) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11584) {
            var state_val_11585 = state_11584[1];
            if (state_val_11585 === 7) {
              var inst_11578 = state_11584[2];
              var inst_11579 = blockchain.res = inst_11578;
              var state_11584__$1 = function() {
                var statearr_11586 = state_11584;
                statearr_11586[5] = inst_11579;
                return statearr_11586;
              }();
              var statearr_11587_11607 = state_11584__$1;
              statearr_11587_11607[2] = blockchain.res;
              statearr_11587_11607[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11585 === 1) {
                var state_11584__$1 = state_11584;
                if (cljs.core.truth_(blockk)) {
                  var statearr_11588_11608 = state_11584__$1;
                  statearr_11588_11608[1] = 2;
                } else {
                  var statearr_11589_11609 = state_11584__$1;
                  statearr_11589_11609[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11585 === 4) {
                  var inst_11582 = state_11584[2];
                  var state_11584__$1 = state_11584;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11584__$1, inst_11582);
                } else {
                  if (state_val_11585 === 15) {
                    var inst_11576 = state_11584[2];
                    var state_11584__$1 = state_11584;
                    var statearr_11590_11610 = state_11584__$1;
                    statearr_11590_11610[2] = inst_11576;
                    statearr_11590_11610[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11585 === 13) {
                      var state_11584__$1 = state_11584;
                      var statearr_11591_11611 = state_11584__$1;
                      statearr_11591_11611[2] = true;
                      statearr_11591_11611[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11585 === 6) {
                        var inst_11570 = database.g.call(null, blockk);
                        var state_11584__$1 = state_11584;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11584__$1, 12, inst_11570);
                      } else {
                        if (state_val_11585 === 3) {
                          var state_11584__$1 = state_11584;
                          var statearr_11592_11612 = state_11584__$1;
                          statearr_11592_11612[2] = false;
                          statearr_11592_11612[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11585 === 12) {
                            var inst_11572 = state_11584[2];
                            var state_11584__$1 = state_11584;
                            if (cljs.core.truth_(inst_11572)) {
                              var statearr_11593_11613 = state_11584__$1;
                              statearr_11593_11613[1] = 13;
                            } else {
                              var statearr_11594_11614 = state_11584__$1;
                              statearr_11594_11614[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11585 === 2) {
                              var inst_11558 = logger.og.call(null, new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), "block known? ", blockk);
                              var inst_11559 = blockk.hash;
                              var state_11584__$1 = function() {
                                var statearr_11595 = state_11584;
                                statearr_11595[6] = inst_11558;
                                return statearr_11595;
                              }();
                              if (cljs.core.truth_(inst_11559)) {
                                var statearr_11596_11615 = state_11584__$1;
                                statearr_11596_11615[1] = 5;
                              } else {
                                var statearr_11597_11616 = state_11584__$1;
                                statearr_11597_11616[1] = 6;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11585 === 11) {
                                var inst_11568 = state_11584[2];
                                var state_11584__$1 = state_11584;
                                var statearr_11598_11617 = state_11584__$1;
                                statearr_11598_11617[2] = inst_11568;
                                statearr_11598_11617[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11585 === 9) {
                                  var state_11584__$1 = state_11584;
                                  var statearr_11599_11618 = state_11584__$1;
                                  statearr_11599_11618[2] = true;
                                  statearr_11599_11618[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11585 === 5) {
                                    var inst_11561 = blockk.hash;
                                    var inst_11562 = database.g.call(null, inst_11561);
                                    var state_11584__$1 = state_11584;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11584__$1, 8, inst_11562);
                                  } else {
                                    if (state_val_11585 === 14) {
                                      var state_11584__$1 = state_11584;
                                      var statearr_11600_11619 = state_11584__$1;
                                      statearr_11600_11619[2] = false;
                                      statearr_11600_11619[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11585 === 10) {
                                        var state_11584__$1 = state_11584;
                                        var statearr_11601_11620 = state_11584__$1;
                                        statearr_11601_11620[2] = false;
                                        statearr_11601_11620[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11585 === 8) {
                                          var inst_11564 = state_11584[2];
                                          var state_11584__$1 = state_11584;
                                          if (cljs.core.truth_(inst_11564)) {
                                            var statearr_11602_11621 = state_11584__$1;
                                            statearr_11602_11621[1] = 9;
                                          } else {
                                            var statearr_11603_11622 = state_11584__$1;
                                            statearr_11603_11622[1] = 10;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11605 = [null, null, null, null, null, null, null];
              statearr_11605[0] = state_machine__6220__auto__;
              statearr_11605[1] = 1;
              return statearr_11605;
            };
            var state_machine__6220__auto____1 = function(state_11584) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11584);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11584) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11584);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11606 = f__6233__auto__.call(null);
        statearr_11606[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11606;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
blockchain.last_QMARK_ = function last_QMARK_(blockk) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11709) {
            var state_val_11710 = state_11709[1];
            if (state_val_11710 === 7) {
              var state_11709__$1 = state_11709;
              var statearr_11711_11729 = state_11709__$1;
              statearr_11711_11729[2] = true;
              statearr_11711_11729[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11710 === 1) {
                var inst_11676 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "block known? ", blockk);
                var inst_11677 = database.g.call(null, "last");
                var state_11709__$1 = function() {
                  var statearr_11712 = state_11709;
                  statearr_11712[5] = inst_11676;
                  return statearr_11712;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11709__$1, 2, inst_11677);
              } else {
                if (state_val_11710 === 4) {
                  var inst_11695 = database.g.call(null, blockk);
                  var state_11709__$1 = state_11709;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11709__$1, 10, inst_11695);
                } else {
                  if (state_val_11710 === 13) {
                    var inst_11704 = state_11709[2];
                    var state_11709__$1 = state_11709;
                    var statearr_11713_11730 = state_11709__$1;
                    statearr_11713_11730[2] = inst_11704;
                    statearr_11713_11730[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11710 === 6) {
                      var inst_11686 = state_11709[2];
                      var inst_11687 = inst_11686.hash;
                      var inst_11688 = blockk.hash;
                      var inst_11689 = inst_11687 === inst_11688;
                      var state_11709__$1 = state_11709;
                      if (cljs.core.truth_(inst_11689)) {
                        var statearr_11714_11731 = state_11709__$1;
                        statearr_11714_11731[1] = 7;
                      } else {
                        var statearr_11715_11732 = state_11709__$1;
                        statearr_11715_11732[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11710 === 3) {
                        var inst_11683 = blockk.hash;
                        var inst_11684 = database.g.call(null, inst_11683);
                        var state_11709__$1 = state_11709;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11709__$1, 6, inst_11684);
                      } else {
                        if (state_val_11710 === 12) {
                          var state_11709__$1 = state_11709;
                          var statearr_11716_11733 = state_11709__$1;
                          statearr_11716_11733[2] = false;
                          statearr_11716_11733[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11710 === 2) {
                            var inst_11679 = state_11709[2];
                            var inst_11680 = blockchain.lastt = inst_11679;
                            var inst_11681 = blockk.hash;
                            var state_11709__$1 = function() {
                              var statearr_11717 = state_11709;
                              statearr_11717[6] = inst_11680;
                              return statearr_11717;
                            }();
                            if (cljs.core.truth_(inst_11681)) {
                              var statearr_11718_11734 = state_11709__$1;
                              statearr_11718_11734[1] = 3;
                            } else {
                              var statearr_11719_11735 = state_11709__$1;
                              statearr_11719_11735[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11710 === 11) {
                              var state_11709__$1 = state_11709;
                              var statearr_11720_11736 = state_11709__$1;
                              statearr_11720_11736[2] = true;
                              statearr_11720_11736[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11710 === 9) {
                                var inst_11693 = state_11709[2];
                                var state_11709__$1 = state_11709;
                                var statearr_11721_11737 = state_11709__$1;
                                statearr_11721_11737[2] = inst_11693;
                                statearr_11721_11737[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11710 === 5) {
                                  var inst_11706 = state_11709[2];
                                  var inst_11707 = blockchain.res = inst_11706;
                                  var state_11709__$1 = function() {
                                    var statearr_11722 = state_11709;
                                    statearr_11722[7] = inst_11707;
                                    return statearr_11722;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11709__$1, blockchain.res);
                                } else {
                                  if (state_val_11710 === 10) {
                                    var inst_11697 = state_11709[2];
                                    var inst_11698 = inst_11697.hash;
                                    var inst_11699 = blockk.hash;
                                    var inst_11700 = inst_11698 === inst_11699;
                                    var state_11709__$1 = state_11709;
                                    if (cljs.core.truth_(inst_11700)) {
                                      var statearr_11723_11738 = state_11709__$1;
                                      statearr_11723_11738[1] = 11;
                                    } else {
                                      var statearr_11724_11739 = state_11709__$1;
                                      statearr_11724_11739[1] = 12;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11710 === 8) {
                                      var state_11709__$1 = state_11709;
                                      var statearr_11725_11740 = state_11709__$1;
                                      statearr_11725_11740[2] = false;
                                      statearr_11725_11740[1] = 9;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11727 = [null, null, null, null, null, null, null, null];
              statearr_11727[0] = state_machine__6220__auto__;
              statearr_11727[1] = 1;
              return statearr_11727;
            };
            var state_machine__6220__auto____1 = function(state_11709) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11709);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11709) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11709);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11728 = f__6233__auto__.call(null);
        statearr_11728[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11728;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
blockchain.heightFromBlock = function heightFromBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), "getting height from block ", blockk);
  return blockk.header.heightFromRoot;
};
blockchain.makeBlock = function makeBlock(work) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "about to make block ", work);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11811) {
            var state_val_11812 = state_11811[1];
            if (state_val_11812 === 4) {
              var inst_11806 = state_11811[2];
              var inst_11807 = {"header":blockchain.blockHeader, "hash":inst_11806, "transactions":blockchain.transactions};
              var inst_11808 = blockchain.blockk = inst_11807;
              var inst_11809 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "newly made block ", blockchain.blockk);
              var state_11811__$1 = function() {
                var statearr_11813 = state_11811;
                statearr_11813[5] = inst_11809;
                statearr_11813[6] = inst_11808;
                return statearr_11813;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11811__$1, blockchain.blockk);
            } else {
              if (state_val_11812 === 3) {
                var inst_11787 = state_11811[2];
                var inst_11788 = blockchain.transactions = inst_11787;
                var inst_11789 = blockchain.lastv = blockchain.lastt2;
                var inst_11790 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", blockchain.lastv);
                var inst_11791 = blockchain.lastv.hash;
                var inst_11792 = work.root;
                var inst_11793 = new Date;
                var inst_11794 = inst_11793.getTime();
                var inst_11795 = blockchain.blockhainInfo.dificulty;
                var inst_11796 = work.nonce;
                var inst_11797 = blockchain.transactions.lenght;
                var inst_11798 = blockchain.makeBlockHeader.call(null, "0", inst_11791, inst_11792, inst_11794, inst_11795, inst_11796, inst_11797);
                var inst_11799 = blockchain.blockHeader = inst_11798;
                var inst_11800 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "block header ", blockchain.blockHeader);
                var inst_11801 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "transactions when saving block ", blockchain.transactions);
                var inst_11804 = crypto.bHash.call(null, blockchain.blockHeader);
                var state_11811__$1 = function() {
                  var statearr_11814 = state_11811;
                  statearr_11814[7] = inst_11788;
                  statearr_11814[8] = inst_11801;
                  statearr_11814[9] = inst_11799;
                  statearr_11814[10] = inst_11800;
                  statearr_11814[11] = inst_11789;
                  statearr_11814[12] = inst_11790;
                  return statearr_11814;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11811__$1, 4, inst_11804);
              } else {
                if (state_val_11812 === 2) {
                  var inst_11782 = state_11811[2];
                  var inst_11783 = blockchain.lastt2 = inst_11782;
                  var inst_11784 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", blockchain.lastt2);
                  var inst_11785 = database.g.call(null, "txs");
                  var state_11811__$1 = function() {
                    var statearr_11815 = state_11811;
                    statearr_11815[13] = inst_11784;
                    statearr_11815[14] = inst_11783;
                    return statearr_11815;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11811__$1, 3, inst_11785);
                } else {
                  if (state_val_11812 === 1) {
                    var inst_11780 = database.g.call(null, "last");
                    var state_11811__$1 = state_11811;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11811__$1, 2, inst_11780);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11817 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11817[0] = state_machine__6220__auto__;
              statearr_11817[1] = 1;
              return statearr_11817;
            };
            var state_machine__6220__auto____1 = function(state_11811) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11811);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11811) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11811);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11818 = f__6233__auto__.call(null);
        statearr_11818[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11818;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
blockchain.saveBlock = function saveBlock(dbase, blockR) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11865) {
            var state_val_11866 = state_11865[1];
            if (state_val_11866 === 4) {
              var inst_11863 = state_11865[2];
              var state_11865__$1 = state_11865;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11865__$1, inst_11863);
            } else {
              if (state_val_11866 === 3) {
                var inst_11859 = state_11865[2];
                var inst_11860 = "b" + blockchain.heightForBlock;
                var inst_11861 = database.ps.call(null, inst_11860, blockR);
                var state_11865__$1 = function() {
                  var statearr_11867 = state_11865;
                  statearr_11867[5] = inst_11859;
                  return statearr_11867;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11865__$1, 4, inst_11861);
              } else {
                if (state_val_11866 === 2) {
                  var inst_11849 = state_11865[2];
                  var inst_11850 = blockchain.heightForBlock = inst_11849;
                  var inst_11851 = blockR.header;
                  var inst_11852 = inst_11851.heightFromRoot = blockchain.heightForBlock;
                  var inst_11853 = function() {
                    return function(inst_11849, inst_11850, inst_11851, inst_11852, state_val_11866, c__6232__auto__) {
                      return function() {
                        return blockR;
                      };
                    }(inst_11849, inst_11850, inst_11851, inst_11852, state_val_11866, c__6232__auto__);
                  }();
                  var inst_11854 = blockchain.a = inst_11853;
                  var inst_11855 = database.update.call(null, "last", blockchain.a);
                  var inst_11856 = blockR.hash;
                  var inst_11857 = database.ps.call(null, inst_11856, blockR);
                  var state_11865__$1 = function() {
                    var statearr_11868 = state_11865;
                    statearr_11868[6] = inst_11850;
                    statearr_11868[7] = inst_11855;
                    statearr_11868[8] = inst_11852;
                    statearr_11868[9] = inst_11854;
                    return statearr_11868;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11865__$1, 3, inst_11857);
                } else {
                  if (state_val_11866 === 1) {
                    var inst_11846 = logger.og.call(null, new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), "saving ", blockR);
                    var inst_11847 = blockchain.blockchainHeight.call(null, 1);
                    var state_11865__$1 = function() {
                      var statearr_11869 = state_11865;
                      statearr_11869[10] = inst_11846;
                      return statearr_11869;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11865__$1, 2, inst_11847);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11871 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11871[0] = state_machine__6220__auto__;
              statearr_11871[1] = 1;
              return statearr_11871;
            };
            var state_machine__6220__auto____1 = function(state_11865) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11865);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11865) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11865);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11872 = f__6233__auto__.call(null);
        statearr_11872[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11872;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
blockchain.addToChain = function addToChain(schain) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11952) {
            var state_val_11953 = state_11952[1];
            if (state_val_11953 === 7) {
              var inst_11924 = state_11952[5];
              var inst_11938 = state_11952[2];
              var inst_11939 = schain.length;
              var inst_11940 = inst_11924 < inst_11939;
              var state_11952__$1 = function() {
                var statearr_11954 = state_11952;
                statearr_11954[6] = inst_11938;
                return statearr_11954;
              }();
              if (cljs.core.truth_(inst_11940)) {
                var statearr_11955_11973 = state_11952__$1;
                statearr_11955_11973[1] = 8;
              } else {
                var statearr_11956_11974 = state_11952__$1;
                statearr_11956_11974[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11953 === 1) {
                var inst_11923 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to add to chain");
                var inst_11924 = 0;
                var state_11952__$1 = function() {
                  var statearr_11957 = state_11952;
                  statearr_11957[7] = inst_11923;
                  statearr_11957[5] = inst_11924;
                  return statearr_11957;
                }();
                var statearr_11958_11975 = state_11952__$1;
                statearr_11958_11975[2] = null;
                statearr_11958_11975[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11953 === 4) {
                  var inst_11931 = state_11952[2];
                  var state_11952__$1 = state_11952;
                  if (cljs.core.truth_(inst_11931)) {
                    var statearr_11959_11976 = state_11952__$1;
                    statearr_11959_11976[1] = 5;
                  } else {
                    var statearr_11960_11977 = state_11952__$1;
                    statearr_11960_11977[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11953 === 6) {
                    var inst_11924 = state_11952[5];
                    var inst_11935 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is not known ", inst_11924);
                    var inst_11936 = blockchain.saveBlock.call(null, inst_11924);
                    var state_11952__$1 = function() {
                      var statearr_11961 = state_11952;
                      statearr_11961[8] = inst_11935;
                      return statearr_11961;
                    }();
                    var statearr_11962_11978 = state_11952__$1;
                    statearr_11962_11978[2] = inst_11936;
                    statearr_11962_11978[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11953 === 3) {
                      var inst_11948 = state_11952[2];
                      var inst_11949 = cljs.core.last.call(null, schain);
                      var inst_11950 = database.update.call(null, "last", inst_11949);
                      var state_11952__$1 = function() {
                        var statearr_11963 = state_11952;
                        statearr_11963[9] = inst_11948;
                        return statearr_11963;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11952__$1, inst_11950);
                    } else {
                      if (state_val_11953 === 2) {
                        var inst_11924 = state_11952[5];
                        var inst_11926 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "itterating current step ", inst_11924);
                        var inst_11927 = schain[inst_11924];
                        var inst_11928 = blockchain.prevblk.call(null, inst_11927);
                        var inst_11929 = blockchain.blockKnown_QMARK_.call(null, inst_11928);
                        var state_11952__$1 = function() {
                          var statearr_11964 = state_11952;
                          statearr_11964[10] = inst_11926;
                          return statearr_11964;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11952__$1, 4, inst_11929);
                      } else {
                        if (state_val_11953 === 9) {
                          var state_11952__$1 = state_11952;
                          var statearr_11965_11979 = state_11952__$1;
                          statearr_11965_11979[2] = null;
                          statearr_11965_11979[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11953 === 5) {
                            var inst_11924 = state_11952[5];
                            var inst_11933 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ", inst_11924);
                            var state_11952__$1 = state_11952;
                            var statearr_11966_11980 = state_11952__$1;
                            statearr_11966_11980[2] = inst_11933;
                            statearr_11966_11980[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11953 === 10) {
                              var inst_11946 = state_11952[2];
                              var state_11952__$1 = state_11952;
                              var statearr_11967_11981 = state_11952__$1;
                              statearr_11967_11981[2] = inst_11946;
                              statearr_11967_11981[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11953 === 8) {
                                var inst_11924 = state_11952[5];
                                var inst_11942 = inst_11924 + 1;
                                var inst_11924__$1 = inst_11942;
                                var state_11952__$1 = function() {
                                  var statearr_11968 = state_11952;
                                  statearr_11968[5] = inst_11924__$1;
                                  return statearr_11968;
                                }();
                                var statearr_11969_11982 = state_11952__$1;
                                statearr_11969_11982[2] = null;
                                statearr_11969_11982[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11971 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11971[0] = state_machine__6220__auto__;
              statearr_11971[1] = 1;
              return statearr_11971;
            };
            var state_machine__6220__auto____1 = function(state_11952) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11952);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11952) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11952);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11972 = f__6233__auto__.call(null);
        statearr_11972[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11972;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
blockchain.blockchainHeight = function blockchainHeight(x) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_12021) {
            var state_val_12022 = state_12021[1];
            if (state_val_12022 === 6) {
              var inst_12016 = state_12021[2];
              var state_12021__$1 = state_12021;
              var statearr_12023_12031 = state_12021__$1;
              statearr_12023_12031[2] = inst_12016;
              statearr_12023_12031[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12022 === 5) {
                var inst_12019 = state_12021[2];
                var state_12021__$1 = state_12021;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12021__$1, inst_12019);
              } else {
                if (state_val_12022 === 4) {
                  var state_12021__$1 = state_12021;
                  var statearr_12024_12032 = state_12021__$1;
                  statearr_12024_12032[2] = blockchain.hght;
                  statearr_12024_12032[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12022 === 3) {
                    var inst_12013 = function() {
                      return function(state_val_12022, c__6232__auto__) {
                        return function(v) {
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "prev height ", v);
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "to add  ", x);
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "after addition  ", v + x);
                          return v + x;
                        };
                      }(state_val_12022, c__6232__auto__);
                    }();
                    var inst_12014 = database.update.call(null, "height", inst_12013);
                    var state_12021__$1 = state_12021;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12021__$1, 6, inst_12014);
                  } else {
                    if (state_val_12022 === 2) {
                      var inst_12009 = state_12021[2];
                      var inst_12010 = blockchain.hght = inst_12009;
                      var inst_12011 = logger.og.call(null, new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), "blockchain height ", blockchain.hght);
                      var state_12021__$1 = function() {
                        var statearr_12025 = state_12021;
                        statearr_12025[5] = inst_12011;
                        statearr_12025[6] = inst_12010;
                        return statearr_12025;
                      }();
                      if (cljs.core.truth_(x)) {
                        var statearr_12026_12033 = state_12021__$1;
                        statearr_12026_12033[1] = 3;
                      } else {
                        var statearr_12027_12034 = state_12021__$1;
                        statearr_12027_12034[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12022 === 1) {
                        var inst_12007 = database.g.call(null, "height");
                        var state_12021__$1 = state_12021;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12021__$1, 2, inst_12007);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12029 = [null, null, null, null, null, null, null];
              statearr_12029[0] = state_machine__6220__auto__;
              statearr_12029[1] = 1;
              return statearr_12029;
            };
            var state_machine__6220__auto____1 = function(state_12021) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12021);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12021) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12021);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_12030 = f__6233__auto__.call(null);
        statearr_12030[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_12030;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
blockchain.popA = function popA(a) {
  return a.splice(0, 1);
};
blockchain.log2 = function log2(n) {
  return Math.log.call(null, n) / Math.log.call(null, 2);
};
goog.provide("reagent.interop");
goog.require("cljs.core");
reagent.interop.fvars = {};
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__19638 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__19638;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__19642 = cljs.core._EQ_;
    var expr__19643 = limit;
    if (cljs.core.truth_(pred__19642.call(null, 1, expr__19643))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__19642.call(null, 2, expr__19643))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__19645 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__19646 = limit__$1 - 1;
            var G__19647 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__19645;
            limit__$1 = G__19646;
            parts = G__19647;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__19648 = index - 1;
        index = G__19648;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___19649 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___19649)) {
        var replacement_19650 = temp__4124__auto___19649;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_19650));
      } else {
        buffer.append(ch);
      }
      var G__19651 = index + 1;
      index = G__19651;
      continue;
    }
    break;
  }
};
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, s, 1));
  }
};
reagent.impl.util.dash_to_camel = function dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__19779 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__19779, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__19779, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__19781__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__3663__auto___19782 = self__.p;
    if (cljs.core.truth_(or__3663__auto___19782)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__19781 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      a = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__19781__delegate.call(this, self__, a);
  };
  G__19781.cljs$lang$maxFixedArity = 1;
  G__19781.cljs$lang$applyTo = function(arglist__19783) {
    var self__ = cljs.core.first(arglist__19783);
    var a = cljs.core.rest(arglist__19783);
    return G__19781__delegate(self__, a);
  };
  G__19781.cljs$core$IFn$_invoke$arity$variadic = G__19781__delegate;
  return G__19781;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args19780) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args19780)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__19784__delegate = function(a) {
    var _ = this;
    var or__3663__auto___19785 = self__.p;
    if (cljs.core.truth_(or__3663__auto___19785)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__19784 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      a = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__19784__delegate.call(this, a);
  };
  G__19784.cljs$lang$maxFixedArity = 0;
  G__19784.cljs$lang$applyTo = function(arglist__19786) {
    var a = cljs.core.seq(arglist__19786);
    return G__19784__delegate(a);
  };
  G__19784.cljs$core$IFn$_invoke$arity$variadic = G__19784__delegate;
  return G__19784;
}();
reagent.impl.util.__GT_partial_ifn = function __GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(c1) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(c2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null)))));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e19788) {
    if (e19788 instanceof Object) {
      var e = e19788;
      if (typeof console !== "undefined") {
        console.log("Error unmounting:");
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e19788;
    }
  }
};
reagent.impl.util.render_component = function render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_19793 = reagent.impl.util._STAR_always_update_STAR_;
    try {
      reagent.impl.util._STAR_always_update_STAR_ = true;
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_19793) {
        return function() {
          var _STAR_always_update_STAR_19794 = reagent.impl.util._STAR_always_update_STAR_;
          try {
            reagent.impl.util._STAR_always_update_STAR_ = false;
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_19794;
          }
        };
      }(_STAR_always_update_STAR_19793));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_19793;
    }
  } catch (e19792) {
    if (e19792 instanceof Object) {
      var e = e19792;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e19792;
    }
  }
};
reagent.impl.util.re_render_component = function re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function force_update_all() {
  var seq__19799_19803 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__19800_19804 = null;
  var count__19801_19805 = 0;
  var i__19802_19806 = 0;
  while (true) {
    if (i__19802_19806 < count__19801_19805) {
      var v_19807 = cljs.core._nth.call(null, chunk__19800_19804, i__19802_19806);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_19807);
      var G__19808 = seq__19799_19803;
      var G__19809 = chunk__19800_19804;
      var G__19810 = count__19801_19805;
      var G__19811 = i__19802_19806 + 1;
      seq__19799_19803 = G__19808;
      chunk__19800_19804 = G__19809;
      count__19801_19805 = G__19810;
      i__19802_19806 = G__19811;
      continue;
    } else {
      var temp__4126__auto___19812 = cljs.core.seq.call(null, seq__19799_19803);
      if (temp__4126__auto___19812) {
        var seq__19799_19813__$1 = temp__4126__auto___19812;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19799_19813__$1)) {
          var c__4433__auto___19814 = cljs.core.chunk_first.call(null, seq__19799_19813__$1);
          var G__19815 = cljs.core.chunk_rest.call(null, seq__19799_19813__$1);
          var G__19816 = c__4433__auto___19814;
          var G__19817 = cljs.core.count.call(null, c__4433__auto___19814);
          var G__19818 = 0;
          seq__19799_19803 = G__19815;
          chunk__19800_19804 = G__19816;
          count__19801_19805 = G__19817;
          i__19802_19806 = G__19818;
          continue;
        } else {
          var v_19819 = cljs.core.first.call(null, seq__19799_19813__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_19819);
          var G__19820 = cljs.core.next.call(null, seq__19799_19813__$1);
          var G__19821 = null;
          var G__19822 = 0;
          var G__19823 = 0;
          seq__19799_19803 = G__19820;
          chunk__19800_19804 = G__19821;
          count__19801_19805 = G__19822;
          i__19802_19806 = G__19823;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
reagent.impl.util.Wrapper = function(state, callback, changed) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114688;
};
reagent.impl.util.Wrapper.cljs$lang$type = true;
reagent.impl.util.Wrapper.cljs$lang$ctorStr = "reagent.impl.util/Wrapper";
reagent.impl.util.Wrapper.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "reagent.impl.util/Wrapper");
};
reagent.impl.util.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.impl.util.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.impl.util.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.impl.util.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  self__.changed = true;
  self__.state = newval;
  self__.callback.call(null, newval);
  return self__.state;
};
reagent.impl.util.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.state;
};
reagent.impl.util.__GT_Wrapper = function __GT_Wrapper(state, callback, changed) {
  return new reagent.impl.util.Wrapper(state, callback, changed);
};
reagent.impl.util.make_wrapper = function make_wrapper(value, callback_fn, args) {
  return new reagent.impl.util.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false);
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_19684 = reagent.ratom._STAR_ratom_context_STAR_;
  try {
    reagent.ratom._STAR_ratom_context_STAR_ = obj;
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_19684;
  }
};
reagent.ratom.captured = function captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.__GT_RAtom = function __GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__19688__delegate = function(x, p__19685) {
      var map__19687 = p__19685;
      var map__19687__$1 = cljs.core.seq_QMARK_.call(null, map__19687) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19687) : map__19687;
      var validator = cljs.core.get.call(null, map__19687__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__19687__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__19688 = function(x, var_args) {
      var p__19685 = null;
      if (arguments.length > 1) {
        p__19685 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__19688__delegate.call(this, x, p__19685);
    };
    G__19688.cljs$lang$maxFixedArity = 1;
    G__19688.cljs$lang$applyTo = function(arglist__19689) {
      var x = cljs.core.first(arglist__19689);
      var p__19685 = cljs.core.rest(arglist__19689);
      return G__19688__delegate(x, p__19685);
    };
    G__19688.cljs$core$IFn$_invoke$arity$variadic = G__19688__delegate;
    return G__19688;
  }();
  atom = function(x, var_args) {
    var p__19685 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.ratom.peek_at = function peek_at(a, path) {
  var _STAR_ratom_context_STAR_19691 = reagent.ratom._STAR_ratom_context_STAR_;
  try {
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, a), path);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_19691;
  }
};
reagent.ratom.RCursor = function(path, ratom, setf, reaction) {
  this.path = path;
  this.ratom = ratom;
  this.setf = setf;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path, self__.setf], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, self__.ratom, oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, self__.ratom, key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, self__.ratom, key);
};
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cCursor: ");
  cljs.core.pr_writer.call(null, self__.path, writer, opts);
  cljs.core._write.call(null, writer, " ");
  cljs.core.pr_writer.call(null, self__.ratom, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path)));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y, more));
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.setf == null) {
    return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, new_value);
  } else {
    return self__.setf.call(null, new_value);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
  } else {
    if (self__.reaction == null) {
      self__.reaction = reagent.ratom.make_reaction.call(null, function(this$__$1) {
        return function() {
          return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
        };
      }(this$__$1));
    } else {
    }
    return cljs.core.deref.call(null, self__.reaction);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom) && cljs.core._EQ_.call(null, self__.setf, other.setf);
};
reagent.ratom.__GT_RCursor = function __GT_RCursor(path, ratom, setf, reaction) {
  return new reagent.ratom.RCursor(path, ratom, setf, reaction);
};
reagent.ratom.cursor = function() {
  var cursor = null;
  var cursor__2 = function(path, ra) {
    return new reagent.ratom.RCursor(path, ra, null, null);
  };
  var cursor__4 = function(path, ra, setf, args) {
    return new reagent.ratom.RCursor(path, ra, new reagent.impl.util.partial_ifn(setf, args, null), null);
  };
  cursor = function(path, ra, setf, args) {
    switch(arguments.length) {
      case 2:
        return cursor__2.call(this, path, ra);
      case 4:
        return cursor__4.call(this, path, ra, setf, args);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$4 = cursor__4;
  return cursor;
}();
reagent.ratom.IDisposable = function() {
  var obj19693 = {};
  return obj19693;
}();
reagent.ratom.dispose_BANG_ = function dispose_BANG_(this$) {
  if (function() {
    var and__3651__auto__ = this$;
    if (and__3651__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4300__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3663__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj19695 = {};
  return obj19695;
}();
reagent.ratom.run = function run(this$) {
  if (function() {
    var and__3651__auto__ = this$;
    if (and__3651__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4300__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3663__auto__ = reagent.ratom.run[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = reagent.ratom.run["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj19697 = {};
  return obj19697;
}();
reagent.ratom._update_watching = function _update_watching(this$, derefed) {
  if (function() {
    var and__3651__auto__ = this$;
    if (and__3651__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4300__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3663__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function _handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__3651__auto__ = k;
    if (and__3651__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4300__auto__ = k == null ? null : k;
    return function() {
      var or__3663__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom.call_watches = function call_watches(obs, watches, oldval, newval) {
  return cljs.core.reduce_kv.call(null, function(_, key, f) {
    f.call(null, key, obs, oldval, newval);
    return null;
  }, null, watches);
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3651__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__3651__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__3651__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__3663__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__19698_19710 = cljs.core.seq.call(null, derefed);
  var chunk__19699_19711 = null;
  var count__19700_19712 = 0;
  var i__19701_19713 = 0;
  while (true) {
    if (i__19701_19713 < count__19700_19712) {
      var w_19714 = cljs.core._nth.call(null, chunk__19699_19711, i__19701_19713);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_19714)) {
      } else {
        cljs.core.add_watch.call(null, w_19714, this$__$1, reagent.ratom._handle_change);
      }
      var G__19715 = seq__19698_19710;
      var G__19716 = chunk__19699_19711;
      var G__19717 = count__19700_19712;
      var G__19718 = i__19701_19713 + 1;
      seq__19698_19710 = G__19715;
      chunk__19699_19711 = G__19716;
      count__19700_19712 = G__19717;
      i__19701_19713 = G__19718;
      continue;
    } else {
      var temp__4126__auto___19719 = cljs.core.seq.call(null, seq__19698_19710);
      if (temp__4126__auto___19719) {
        var seq__19698_19720__$1 = temp__4126__auto___19719;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19698_19720__$1)) {
          var c__4433__auto___19721 = cljs.core.chunk_first.call(null, seq__19698_19720__$1);
          var G__19722 = cljs.core.chunk_rest.call(null, seq__19698_19720__$1);
          var G__19723 = c__4433__auto___19721;
          var G__19724 = cljs.core.count.call(null, c__4433__auto___19721);
          var G__19725 = 0;
          seq__19698_19710 = G__19722;
          chunk__19699_19711 = G__19723;
          count__19700_19712 = G__19724;
          i__19701_19713 = G__19725;
          continue;
        } else {
          var w_19726 = cljs.core.first.call(null, seq__19698_19720__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_19726)) {
          } else {
            cljs.core.add_watch.call(null, w_19726, this$__$1, reagent.ratom._handle_change);
          }
          var G__19727 = cljs.core.next.call(null, seq__19698_19720__$1);
          var G__19728 = null;
          var G__19729 = 0;
          var G__19730 = 0;
          seq__19698_19710 = G__19727;
          chunk__19699_19711 = G__19728;
          count__19700_19712 = G__19729;
          i__19701_19713 = G__19730;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__19702_19731 = cljs.core.seq.call(null, self__.watching);
  var chunk__19703_19732 = null;
  var count__19704_19733 = 0;
  var i__19705_19734 = 0;
  while (true) {
    if (i__19705_19734 < count__19704_19733) {
      var w_19735 = cljs.core._nth.call(null, chunk__19703_19732, i__19705_19734);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_19735)) {
      } else {
        cljs.core.remove_watch.call(null, w_19735, this$__$1);
      }
      var G__19736 = seq__19702_19731;
      var G__19737 = chunk__19703_19732;
      var G__19738 = count__19704_19733;
      var G__19739 = i__19705_19734 + 1;
      seq__19702_19731 = G__19736;
      chunk__19703_19732 = G__19737;
      count__19704_19733 = G__19738;
      i__19705_19734 = G__19739;
      continue;
    } else {
      var temp__4126__auto___19740 = cljs.core.seq.call(null, seq__19702_19731);
      if (temp__4126__auto___19740) {
        var seq__19702_19741__$1 = temp__4126__auto___19740;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19702_19741__$1)) {
          var c__4433__auto___19742 = cljs.core.chunk_first.call(null, seq__19702_19741__$1);
          var G__19743 = cljs.core.chunk_rest.call(null, seq__19702_19741__$1);
          var G__19744 = c__4433__auto___19742;
          var G__19745 = cljs.core.count.call(null, c__4433__auto___19742);
          var G__19746 = 0;
          seq__19702_19731 = G__19743;
          chunk__19703_19732 = G__19744;
          count__19704_19733 = G__19745;
          i__19705_19734 = G__19746;
          continue;
        } else {
          var w_19747 = cljs.core.first.call(null, seq__19702_19741__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_19747)) {
          } else {
            cljs.core.remove_watch.call(null, w_19747, this$__$1);
          }
          var G__19748 = cljs.core.next.call(null, seq__19702_19741__$1);
          var G__19749 = null;
          var G__19750 = 0;
          var G__19751 = 0;
          seq__19702_19731 = G__19748;
          chunk__19703_19732 = G__19749;
          count__19704_19733 = G__19750;
          i__19705_19734 = G__19751;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cReaction " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.hash.call(null, this$__$1)) + ": ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__19706_19752 = cljs.core.seq.call(null, self__.watching);
  var chunk__19707_19753 = null;
  var count__19708_19754 = 0;
  var i__19709_19755 = 0;
  while (true) {
    if (i__19709_19755 < count__19708_19754) {
      var w_19756 = cljs.core._nth.call(null, chunk__19707_19753, i__19709_19755);
      cljs.core.remove_watch.call(null, w_19756, this$__$1);
      var G__19757 = seq__19706_19752;
      var G__19758 = chunk__19707_19753;
      var G__19759 = count__19708_19754;
      var G__19760 = i__19709_19755 + 1;
      seq__19706_19752 = G__19757;
      chunk__19707_19753 = G__19758;
      count__19708_19754 = G__19759;
      i__19709_19755 = G__19760;
      continue;
    } else {
      var temp__4126__auto___19761 = cljs.core.seq.call(null, seq__19706_19752);
      if (temp__4126__auto___19761) {
        var seq__19706_19762__$1 = temp__4126__auto___19761;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19706_19762__$1)) {
          var c__4433__auto___19763 = cljs.core.chunk_first.call(null, seq__19706_19762__$1);
          var G__19764 = cljs.core.chunk_rest.call(null, seq__19706_19762__$1);
          var G__19765 = c__4433__auto___19763;
          var G__19766 = cljs.core.count.call(null, c__4433__auto___19763);
          var G__19767 = 0;
          seq__19706_19752 = G__19764;
          chunk__19707_19753 = G__19765;
          count__19708_19754 = G__19766;
          i__19709_19755 = G__19767;
          continue;
        } else {
          var w_19768 = cljs.core.first.call(null, seq__19706_19762__$1);
          cljs.core.remove_watch.call(null, w_19768, this$__$1);
          var G__19769 = cljs.core.next.call(null, seq__19706_19762__$1);
          var G__19770 = null;
          var G__19771 = 0;
          var G__19772 = 0;
          seq__19706_19752 = G__19769;
          chunk__19707_19753 = G__19770;
          count__19708_19754 = G__19771;
          i__19709_19755 = G__19772;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = cljs.core.PersistentHashSet.EMPTY;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  var old_value = self__.state;
  self__.state = new_value;
  cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  return new_value;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, self__.state, x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(self__.on_set)) {
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  return reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldval, newval);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, function() {
    var or__3663__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
    var x__14782__auto___19773 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.auto_run, reagent.ratom._STAR_ratom_context_STAR_], null);
    if (typeof console !== "undefined") {
      console.log("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1("dbg reagent.ratom:" + 249 + ": [auto-run *ratom-context*]: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, x__14782__auto___19773))));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(function() {
    var or__3663__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
  } else {
    throw new Error("Assert failed: Reaction derefed outside auto-running context\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), new cljs.core.Symbol(null, "auto-run", "auto-run", -696035332, null), new cljs.core.Symbol(null, "*ratom-context*", "*ratom-context*", -1557728360, null)))));
  }
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  if (cljs.core.truth_(self__.dirty_QMARK_)) {
    return reagent.ratom.run.call(null, this$__$1);
  } else {
    return self__.state;
  }
};
reagent.ratom.__GT_Reaction = function __GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var make_reaction__delegate = function(f, p__19774) {
    var map__19776 = p__19774;
    var map__19776__$1 = cljs.core.seq_QMARK_.call(null, map__19776) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19776) : map__19776;
    var derefed = cljs.core.get.call(null, map__19776__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__19776__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__19776__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__19776__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, cljs.core.PersistentArrayMap.EMPTY, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var make_reaction = function(f, var_args) {
    var p__19774 = null;
    if (arguments.length > 1) {
      p__19774 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return make_reaction__delegate.call(this, f, p__19774);
  };
  make_reaction.cljs$lang$maxFixedArity = 1;
  make_reaction.cljs$lang$applyTo = function(arglist__19777) {
    var f = cljs.core.first(arglist__19777);
    var p__19774 = cljs.core.rest(arglist__19777);
    return make_reaction__delegate(f, p__19774);
  };
  make_reaction.cljs$core$IFn$_invoke$arity$variadic = make_reaction__delegate;
  return make_reaction;
}();
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__3663__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__3663__auto__)) {
    return or__3663__auto__;
  } else {
    var or__3663__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__3663__auto____$1)) {
      return or__3663__auto____$1;
    } else {
      var or__3663__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__3663__auto____$2)) {
        return or__3663__auto____$2;
      } else {
        var or__3663__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__3663__auto____$3)) {
          return or__3663__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__4533__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4533__auto__) {
      var c_19629 = a[i];
      if (cljs.core.truth_(c_19629["cljsIsDirty"])) {
        c_19629["forceUpdate"]();
      } else {
      }
      var G__19630 = i + 1;
      i = G__19630;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function run_funs(a) {
  var n__4533__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4533__auto__) {
      a[i].call(null);
      var G__19631 = i + 1;
      i = G__19631;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.__GT_RenderQueue = function __GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function is_reagent_component(c) {
  var G__19633 = c;
  var G__19633__$1 = G__19633 == null ? null : G__19633["props"];
  var G__19633__$2 = G__19633__$1 == null ? null : G__19633__$1["argv"];
  return G__19633__$2;
};
reagent.impl.batching.run_reactively = function run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null)))));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function dispose(c) {
  var G__19635_19636 = c["cljsRatom"];
  var G__19635_19637__$1 = G__19635_19636 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__19635_19636);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.state = function state(this$) {
  return cljs.core.deref.call(null, reagent.impl.component.state_atom.call(null, this$));
};
reagent.impl.component.replace_state = function replace_state(this$, new_state) {
  return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), new_state);
};
reagent.impl.component.set_state = function set_state(this$, new_state) {
  return cljs.core.swap_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.impl.component.as_element = function as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function do_render(c) {
  var _STAR_current_component_STAR_19615 = reagent.impl.component._STAR_current_component_STAR_;
  try {
    reagent.impl.component._STAR_current_component_STAR_ = c;
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
    }();
    var p = c["props"];
    var res = c["componentFunction"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__19616 = n;
      switch(G__19616) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_19615;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function custom_wrapper(key, f) {
  var G__19619 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__19619) {
    case "componentWillUnmount":
      return function(G__19619) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__19619);
      break;
    case "componentWillMount":
      return function(G__19619) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__19619);
      break;
    case "componentDidUpdate":
      return function(G__19619) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__19619);
      break;
    case "componentWillUpdate":
      return function(G__19619) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__19619);
      break;
    case "shouldComponentUpdate":
      return function(G__19619) {
        return function(nextprops, nextstate) {
          var or__3663__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__3663__auto__)) {
            return or__3663__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__19619);
      break;
    case "componentWillReceiveProps":
      return function(G__19619) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__19619);
      break;
    case "getInitialState":
      return function(G__19619) {
        return function() {
          var c = this;
          return reagent.impl.component.set_state.call(null, c, f.call(null, c));
        };
      }(G__19619);
      break;
    case "getDefaultProps":
      throw new Error("Assert failed: getDefaultProps not supported yet\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__19621__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__19621 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__19621__delegate.call(this, args);
      };
      G__19621.cljs$lang$maxFixedArity = 0;
      G__19621.cljs$lang$applyTo = function(arglist__19622) {
        var args = cljs.core.seq(arglist__19622);
        return G__19621__delegate(args);
      };
      G__19621.cljs$core$IFn$_invoke$arity$variadic = G__19621__delegate;
      return G__19621;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104), null], null), null);
reagent.impl.component.dont_bind = function dont_bind(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    var G__19624 = f;
    G__19624["__reactDontBind"] = true;
    return G__19624;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__3651__auto__ = wrap;
      if (cljs.core.truth_(and__3651__auto__)) {
        return f;
      } else {
        return and__3651__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Expected function in " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(key) + " but got " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(f)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
      }
    } else {
    }
    var or__3663__auto__ = wrap;
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function add_render(fun_map, render_f) {
  return cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
};
reagent.impl.component.wrap_funs = function wrap_funs(fun_map) {
  var render_fun = function() {
    var or__3663__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Render must be a function, not " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, render_fun))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null)))));
  }();
  var name = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
    var or__3663__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      var or__3663__auto____$1 = render_fun["displayName"];
      if (cljs.core.truth_(or__3663__auto____$1)) {
        return or__3663__auto____$1;
      } else {
        var or__3663__auto____$2 = render_fun["name"];
        if (cljs.core.truth_(or__3663__auto____$2)) {
          return or__3663__auto____$2;
        } else {
          return "";
        }
      }
    }
  }());
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.gensym.call(null, "reagent")) : name;
  var fmap = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun);
  return cljs.core.reduce_kv.call(null, function(render_fun, _, name, name_SINGLEQUOTE_, fmap) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(render_fun, _, name, name_SINGLEQUOTE_, fmap), cljs.core.PersistentArrayMap.EMPTY, fmap);
};
reagent.impl.component.map_to_js = function map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__19626 = o;
    G__19626[cljs.core.name.call(null, k)] = v;
    return G__19626;
  }, {}, m);
};
reagent.impl.component.cljsify = function cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null)))));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__19627__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__19627 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__19627__delegate.call(this, args);
      };
      G__19627.cljs$lang$maxFixedArity = 0;
      G__19627.cljs$lang$applyTo = function(arglist__19628) {
        var args = cljs.core.seq(arglist__19628);
        return G__19627__delegate(args);
      };
      G__19627.cljs$core$IFn$_invoke$arity$variadic = G__19627__delegate;
      return G__19627;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.component");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("clojure.string");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
goog.require("clojure.string");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.attr_aliases = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "className", new cljs.core.Keyword(null, "for", "for", -1323786319), "htmlFor", new cljs.core.Keyword(null, "charset", "charset", -1063822193), "charSet"], null);
reagent.impl.template.hiccup_tag_QMARK_ = function hiccup_tag_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || cljs.core.ifn_QMARK_.call(null, x);
};
reagent.impl.template.to_js_val = function to_js_val(v) {
  if (typeof v === "string" || typeof v === "number") {
    return v;
  } else {
    if (function() {
      var G__19653 = v;
      if (G__19653) {
        var bit__4320__auto__ = G__19653.cljs$lang$protocol_mask$partition1$ & 4096;
        if (bit__4320__auto__ || G__19653.cljs$core$INamed$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.name.call(null, v);
    } else {
      if (cljs.core.coll_QMARK_.call(null, v)) {
        return cljs.core.clj__GT_js.call(null, v);
      } else {
        if (cljs.core.ifn_QMARK_.call(null, v)) {
          return function() {
            var G__19654__delegate = function(args) {
              return cljs.core.apply.call(null, v, args);
            };
            var G__19654 = function(var_args) {
              var args = null;
              if (arguments.length > 0) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
              }
              return G__19654__delegate.call(this, args);
            };
            G__19654.cljs$lang$maxFixedArity = 0;
            G__19654.cljs$lang$applyTo = function(arglist__19655) {
              var args = cljs.core.seq(arglist__19655);
              return G__19654__delegate(args);
            };
            G__19654.cljs$core$IFn$_invoke$arity$variadic = G__19654__delegate;
            return G__19654;
          }();
        } else {
          return v;
        }
      }
    }
  }
};
reagent.impl.template.undash_prop_name = function undash_prop_name(n) {
  var or__3663__auto__ = reagent.impl.template.attr_aliases.call(null, n);
  if (cljs.core.truth_(or__3663__auto__)) {
    return or__3663__auto__;
  } else {
    return reagent.impl.util.dash_to_camel.call(null, n);
  }
};
reagent.impl.template.cached_prop_name = reagent.impl.util.memoize_1.call(null, reagent.impl.template.undash_prop_name);
reagent.impl.template.convert_prop_value = function convert_prop_value(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (typeof x === "number") {
      return x;
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__19657 = o;
          G__19657[reagent.impl.template.cached_prop_name.call(null, k)] = reagent.impl.template.to_js_val.call(null, v);
          return G__19657;
        }, {}, x);
      } else {
        return reagent.impl.template.to_js_val.call(null, x);
      }
    }
  }
};
reagent.impl.template.set_id_class = function set_id_class(props, p__19658) {
  var vec__19660 = p__19658;
  var id = cljs.core.nth.call(null, vec__19660, 0, null);
  var class$ = cljs.core.nth.call(null, vec__19660, 1, null);
  var pid = props["id"];
  props["id"] = cljs.core.some_QMARK_.call(null, pid) ? pid : id;
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old = props["className"];
    return props["className"] = cljs.core.some_QMARK_.call(null, old) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(old) : class$;
  } else {
    return null;
  }
};
reagent.impl.template.convert_props = function convert_props(props, id_class) {
  if (cljs.core.empty_QMARK_.call(null, props) && id_class == null) {
    return null;
  } else {
    var objprops = cljs.core.reduce_kv.call(null, function(o, k, v) {
      var pname_19661 = reagent.impl.template.cached_prop_name.call(null, k);
      o[pname_19661] = reagent.impl.template.convert_prop_value.call(null, v);
      return o;
    }, {}, props);
    if (cljs.core.some_QMARK_.call(null, id_class)) {
      reagent.impl.template.set_id_class.call(null, objprops, id_class);
    } else {
    }
    return objprops;
  }
};
reagent.impl.template.input_unmount = function input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__3651__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__3651__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__3651__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__19664 = jsprops;
    G__19664["defaultValue"] = value;
    G__19664["onChange"] = function(G__19664, v, value, on_change) {
      return function(p1__19662_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__19662_SHARP_);
      };
    }(G__19664, v, value, on_change);
    return G__19664;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function parse_tag(hiccup_tag) {
  var vec__19666 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__19666, 0, null);
  var id = cljs.core.nth.call(null, vec__19666, 1, null);
  var class$ = cljs.core.nth.call(null, vec__19666, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unknown tag: '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccup_tag) + "'") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null))));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, cljs.core.truth_(function() {
    var or__3663__auto__ = id;
    if (cljs.core.truth_(or__3663__auto__)) {
      return or__3663__auto__;
    } else {
      return class_SINGLEQUOTE_;
    }
  }()) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, class_SINGLEQUOTE_], null) : null], null);
};
reagent.impl.template.fn_to_class = function fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Expected a function, not " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, f))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null)))));
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.reag_element = function reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var key_19671 = function() {
    var temp__4128__auto__ = function() {
      var G__19669 = cljs.core.meta.call(null, v);
      var G__19669__$1 = G__19669 == null ? null : reagent.impl.template.get_key.call(null, G__19669);
      return G__19669__$1;
    }();
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
    } else {
      var k = temp__4128__auto__;
      return k;
    }
  }();
  var G__19670_19672 = key_19671;
  var G__19670_19673__$1 = G__19670_19672 == null ? null : jsprops["key"] = G__19670_19672;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.cached_parse = reagent.impl.util.memoize_1.call(null, reagent.impl.template.parse_tag);
reagent.impl.template.native_element = function native_element(tag, argv) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, tag)) {
    var vec__19677 = reagent.impl.template.cached_parse.call(null, tag);
    var comp = cljs.core.nth.call(null, vec__19677, 0, null);
    var id_class = cljs.core.nth.call(null, vec__19677, 1, null);
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, id_class);
    var first_child = hasprops ? 2 : 1;
    if (reagent.impl.template.input_component_QMARK_.call(null, comp)) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__19678 = cljs.core.meta.call(null, argv);
          var G__19678__$1 = G__19678 == null ? null : reagent.impl.template.get_key.call(null, G__19678);
          return G__19678__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__19679 = jsprops == null ? {} : jsprops;
          G__19679["key"] = key;
          return G__19679;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error("Assert failed: Hiccup form should not be empty\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null))))));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (reagent.impl.template.valid_tag_QMARK_.call(null, tag)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid Hiccup form: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, v))) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.seq_ctx = {};
reagent.impl.template.warn_on_deref = function warn_on_deref(x) {
  if (cljs.core.truth_(reagent.impl.template.seq_ctx["warned"])) {
    return null;
  } else {
    if (typeof console !== "undefined") {
      console.log("Warning: Reactive deref not supported in seq in ", cljs.core.pr_str.call(null, x));
    } else {
    }
    return reagent.impl.template.seq_ctx["warned"] = true;
  }
};
reagent.impl.template.as_element = function as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
          return reagent.impl.template.expand_seq.call(null, x);
        } else {
          var s = reagent.ratom.capture_derefed.call(null, function() {
            return reagent.impl.template.expand_seq.call(null, x);
          }, reagent.impl.template.seq_ctx);
          if (cljs.core.truth_(reagent.ratom.captured.call(null, reagent.impl.template.seq_ctx))) {
            reagent.impl.template.warn_on_deref.call(null, x);
          } else {
          }
          return s;
        }
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__4533__auto___19680 = a.length;
  var i_19681 = 0;
  while (true) {
    if (i_19681 < n__4533__auto___19680) {
      a[i_19681] = reagent.impl.template.as_element.call(null, a[i_19681]);
      var G__19682 = i_19681 + 1;
      i_19681 = G__19682;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.make_element = function make_element(argv, comp, jsprops, first_child) {
  if (cljs.core.count.call(null, argv) === first_child + 1) {
    return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
  } else {
    return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(a, k, v) {
      if (k >= first_child) {
        a.push(reagent.impl.template.as_element.call(null, v));
      } else {
      }
      return a;
    }, [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.component");
goog.require("reagent.impl.util");
goog.require("reagent.impl.template");
goog.require("reagent.ratom");
goog.require("reagent.debug");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function() {
  var create_element = null;
  var create_element__1 = function(type) {
    return create_element.call(null, type, null);
  };
  var create_element__2 = function(type, props) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null))))));
    }
    return React.createElement(type, props);
  };
  var create_element__3 = function(type, props, child) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null))))));
    }
    return React.createElement(type, props, child);
  };
  var create_element__4 = function() {
    var G__19597__delegate = function(type, props, child, children) {
      if (!cljs.core.map_QMARK_.call(null, props)) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null))))));
      }
      return cljs.core.apply.call(null, React.createElement, type, props, child, children);
    };
    var G__19597 = function(type, props, child, var_args) {
      var children = null;
      if (arguments.length > 3) {
        children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__19597__delegate.call(this, type, props, child, children);
    };
    G__19597.cljs$lang$maxFixedArity = 3;
    G__19597.cljs$lang$applyTo = function(arglist__19598) {
      var type = cljs.core.first(arglist__19598);
      arglist__19598 = cljs.core.next(arglist__19598);
      var props = cljs.core.first(arglist__19598);
      arglist__19598 = cljs.core.next(arglist__19598);
      var child = cljs.core.first(arglist__19598);
      var children = cljs.core.rest(arglist__19598);
      return G__19597__delegate(type, props, child, children);
    };
    G__19597.cljs$core$IFn$_invoke$arity$variadic = G__19597__delegate;
    return G__19597;
  }();
  create_element = function(type, props, child, var_args) {
    var children = var_args;
    switch(arguments.length) {
      case 1:
        return create_element__1.call(this, type);
      case 2:
        return create_element__2.call(this, type, props);
      case 3:
        return create_element__3.call(this, type, props, child);
      default:
        return create_element__4.cljs$core$IFn$_invoke$arity$variadic(type, props, child, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_element.cljs$lang$maxFixedArity = 3;
  create_element.cljs$lang$applyTo = create_element__4.cljs$lang$applyTo;
  create_element.cljs$core$IFn$_invoke$arity$1 = create_element__1;
  create_element.cljs$core$IFn$_invoke$arity$2 = create_element__2;
  create_element.cljs$core$IFn$_invoke$arity$3 = create_element__3;
  create_element.cljs$core$IFn$_invoke$arity$variadic = create_element__4.cljs$core$IFn$_invoke$arity$variadic;
  return create_element;
}();
reagent.core.as_element = function as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.render = function() {
  var render = null;
  var render__2 = function(comp, container) {
    return render.call(null, comp, container, null);
  };
  var render__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  render = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return render__2.call(this, comp, container);
      case 3:
        return render__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render.cljs$core$IFn$_invoke$arity$2 = render__2;
  render.cljs$core$IFn$_invoke$arity$3 = render__3;
  return render;
}();
reagent.core.unmount_component_at_node = function unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function render_to_string(component) {
  var _STAR_non_reactive_STAR_19600 = reagent.impl.component._STAR_non_reactive_STAR_;
  try {
    reagent.impl.component._STAR_non_reactive_STAR_ = true;
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_19600;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_19602 = reagent.impl.component._STAR_non_reactive_STAR_;
  try {
    reagent.impl.component._STAR_non_reactive_STAR_ = true;
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_19602;
  }
};
reagent.core.force_update_all = function force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state = function state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.component.state.call(null, this$);
};
reagent.core.replace_state = function replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null))))));
  }
  return reagent.impl.component.replace_state.call(null, this$, new_state);
};
reagent.core.set_state = function set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null))))));
  }
  return reagent.impl.component.set_state.call(null, this$, new_state);
};
reagent.core.props = function props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var atom__2 = function() {
    var G__19603__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__19603 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        rest = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__19603__delegate.call(this, x, rest);
    };
    G__19603.cljs$lang$maxFixedArity = 1;
    G__19603.cljs$lang$applyTo = function(arglist__19604) {
      var x = cljs.core.first(arglist__19604);
      var rest = cljs.core.rest(arglist__19604);
      return G__19603__delegate(x, rest);
    };
    G__19603.cljs$core$IFn$_invoke$arity$variadic = G__19603__delegate;
    return G__19603;
  }();
  atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.core.wrap = function() {
  var wrap__delegate = function(value, reset_fn, args) {
    if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null)))));
    }
    return reagent.impl.util.make_wrapper.call(null, value, reset_fn, args);
  };
  var wrap = function(value, reset_fn, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return wrap__delegate.call(this, value, reset_fn, args);
  };
  wrap.cljs$lang$maxFixedArity = 2;
  wrap.cljs$lang$applyTo = function(arglist__19605) {
    var value = cljs.core.first(arglist__19605);
    arglist__19605 = cljs.core.next(arglist__19605);
    var reset_fn = cljs.core.first(arglist__19605);
    var args = cljs.core.rest(arglist__19605);
    return wrap__delegate(value, reset_fn, args);
  };
  wrap.cljs$core$IFn$_invoke$arity$variadic = wrap__delegate;
  return wrap;
}();
reagent.core.cursor = function() {
  var cursor = null;
  var cursor__1 = function(path) {
    return function(ra) {
      return cursor.call(null, path, ra);
    };
  };
  var cursor__2 = function(path, ra) {
    if (function() {
      var G__19608 = ra;
      if (G__19608) {
        var bit__4327__auto__ = G__19608.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4327__auto__ || G__19608.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__19608.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__19608);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__19608);
      }
    }()) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null)))));
    }
    return reagent.ratom.cursor.call(null, path, ra);
  };
  var cursor__4 = function() {
    var G__19610__delegate = function(path, ra, reset_fn, args) {
      if (function() {
        var G__19609 = ra;
        if (G__19609) {
          var bit__4327__auto__ = G__19609.cljs$lang$protocol_mask$partition0$ & 32768;
          if (bit__4327__auto__ || G__19609.cljs$core$IDeref$) {
            return true;
          } else {
            if (!G__19609.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__19609);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__19609);
        }
      }()) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null)))));
      }
      if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null)))));
      }
      return reagent.ratom.cursor.call(null, path, ra, reset_fn, args);
    };
    var G__19610 = function(path, ra, reset_fn, var_args) {
      var args = null;
      if (arguments.length > 3) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__19610__delegate.call(this, path, ra, reset_fn, args);
    };
    G__19610.cljs$lang$maxFixedArity = 3;
    G__19610.cljs$lang$applyTo = function(arglist__19611) {
      var path = cljs.core.first(arglist__19611);
      arglist__19611 = cljs.core.next(arglist__19611);
      var ra = cljs.core.first(arglist__19611);
      arglist__19611 = cljs.core.next(arglist__19611);
      var reset_fn = cljs.core.first(arglist__19611);
      var args = cljs.core.rest(arglist__19611);
      return G__19610__delegate(path, ra, reset_fn, args);
    };
    G__19610.cljs$core$IFn$_invoke$arity$variadic = G__19610__delegate;
    return G__19610;
  }();
  cursor = function(path, ra, reset_fn, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cursor__1.call(this, path);
      case 2:
        return cursor__2.call(this, path, ra);
      default:
        return cursor__4.cljs$core$IFn$_invoke$arity$variadic(path, ra, reset_fn, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$lang$maxFixedArity = 3;
  cursor.cljs$lang$applyTo = cursor__4.cljs$lang$applyTo;
  cursor.cljs$core$IFn$_invoke$arity$1 = cursor__1;
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$variadic = cursor__4.cljs$core$IFn$_invoke$arity$variadic;
  return cursor;
}();
reagent.core.next_tick = function next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return partial__delegate.call(this, f, args);
  };
  partial.cljs$lang$maxFixedArity = 1;
  partial.cljs$lang$applyTo = function(arglist__19612) {
    var f = cljs.core.first(arglist__19612);
    var args = cljs.core.rest(arglist__19612);
    return partial__delegate(f, args);
  };
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__delegate;
  return partial;
}();
goog.provide("html");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagent.core");
goog.require("reagent.core");
html.timer = reagent.core.atom.call(null, new Date);
html.time_color = reagent.core.atom.call(null, "#f34");
html.update_time = function update_time(time) {
  return setTimeout(function() {
    return cljs.core.reset_BANG_.call(null, time, new Date);
  }, 100);
};
html.greeting = function greeting(message) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), message], null);
};
html.proFile = function proFile(name, desc, pic, extra) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "width", "width", -384071477), "200px"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", 
  "ul.unstyled", -1948620308), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.list-item", "a.list-item", -1757304900), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.pull-left", "div.pull-left", 727555294), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.circle", "div.circle", 2134211799), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", -1651076051), pic, new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "width", "width", 
  -384071477), "40px", new cljs.core.Keyword(null, "height", "height", 1025178622), "40px"], null)], null)], null)], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.text", "div.text", 645060726), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), desc, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.small", "span.small", 1761756015), name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.text-grey", "span.text-grey", 391584589), extra], null)], null)], null)], null)], null)], null)], null)], null);
};
html.clock = function clock() {
  html.update_time.call(null, html.timer);
  var time_str = cljs.core.first.call(null, clojure.string.split.call(null, cljs.core.deref.call(null, html.timer).toTimeString(), " "));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.example-clock", "div.example-clock", 1559289088), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), cljs.core.deref.call(null, html.time_color)], null)], null), time_str], null);
};
html.color_input = function color_input() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-input", "div.color-input", -879914246), "Time color: ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, 
  html.time_color), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__11492_SHARP_) {
    return cljs.core.reset_BANG_.call(null, html.time_color, p1__11492_SHARP_.target.value);
  }], null)], null)], null);
};
html.simple_example = function simple_example(name, desc, pic, extra) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [html.proFile, name, desc, pic, extra], null);
};
html.run = function run(name, desc, pic, extra) {
  return reagent.core.render_component.call(null, function() {
    return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [html.proFile, name, desc, pic, extra], null);
  }, document.body);
};
goog.provide("peerjs");
goog.require("cljs.core");
peerjs.peerParams = function() {
  var obj8211 = {"host":"localhost", "port":8E3, "key":"peerjs", "debug":false};
  return obj8211;
}();
goog.provide("intercomMake");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("pubsub");
goog.require("database");
goog.require("database");
goog.require("logger");
goog.require("logger");
intercomMake.makeInv = function makeInv(typ, message) {
  var obj8061 = {"type":"json", "data":JSON.stringify(function() {
    var obj8063 = {"type":"inv", "data":function() {
      var obj8065 = {"type":typ, "vector":message};
      return obj8065;
    }()};
    return obj8063;
  }())};
  return obj8061;
};
intercomMake.makeData = function makeData(typ, message) {
  return null;
};
intercomMake.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
intercomMake.makeVersion = function makeVersion(message) {
  var obj8069 = {"type":"version", "data":message};
  return obj8069;
};
intercomMake.makeConn = function makeConn(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj8073 = {"type":"conn", "data":conn};
  return obj8073;
};
intercomMake.makeGetBlock = function makeGetBlock(hash) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_8179) {
            var state_val_8180 = state_8179[1];
            if (state_val_8180 === 7) {
              var state_8179__$1 = state_8179;
              var statearr_8181_8200 = state_8179__$1;
              statearr_8181_8200[2] = null;
              statearr_8181_8200[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_8180 === 1) {
                var inst_8139 = [];
                var inst_8140 = {"count":0, "blocks":inst_8139};
                var inst_8141 = inst_8140[intercomMake.hash_stop] = 0;
                var inst_8142 = intercomMake.gtBlock = inst_8140;
                var inst_8143 = app.blockchain.blockchainHeight.call(null, 1);
                var state_8179__$1 = function() {
                  var statearr_8182 = state_8179;
                  statearr_8182[5] = inst_8141;
                  statearr_8182[6] = inst_8142;
                  return statearr_8182;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8179__$1, 2, inst_8143);
              } else {
                if (state_val_8180 === 4) {
                  var inst_8177 = state_8179[2];
                  var state_8179__$1 = function() {
                    var statearr_8183 = state_8179;
                    statearr_8183[7] = inst_8177;
                    return statearr_8183;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8179__$1, intercomMake.gtBlock);
                } else {
                  if (state_val_8180 === 6) {
                    var inst_8148 = state_8179[8];
                    var inst_8164 = inst_8148 < 10;
                    var state_8179__$1 = state_8179;
                    if (cljs.core.truth_(inst_8164)) {
                      var statearr_8184_8201 = state_8179__$1;
                      statearr_8184_8201[1] = 9;
                    } else {
                      var statearr_8185_8202 = state_8179__$1;
                      statearr_8185_8202[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_8180 === 3) {
                      var inst_8148 = state_8179[8];
                      var inst_8147 = state_8179[9];
                      var inst_8150 = "new loop " + inst_8147;
                      var inst_8151 = inst_8150 + " ";
                      var inst_8152 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_8151, inst_8148);
                      var inst_8153 = "b" + inst_8147;
                      var inst_8154 = database.g.call(null, inst_8153);
                      var state_8179__$1 = function() {
                        var statearr_8186 = state_8179;
                        statearr_8186[10] = inst_8152;
                        return statearr_8186;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8179__$1, 5, inst_8154);
                    } else {
                      if (state_val_8180 === 2) {
                        var inst_8145 = state_8179[2];
                        var inst_8146 = intercomMake.heightForBlock = inst_8145;
                        var inst_8147 = intercomMake.heightForBlock;
                        var inst_8148 = 0;
                        var state_8179__$1 = function() {
                          var statearr_8187 = state_8179;
                          statearr_8187[8] = inst_8148;
                          statearr_8187[11] = inst_8146;
                          statearr_8187[9] = inst_8147;
                          return statearr_8187;
                        }();
                        var statearr_8188_8203 = state_8179__$1;
                        statearr_8188_8203[2] = null;
                        statearr_8188_8203[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_8180 === 11) {
                          var inst_8148 = state_8179[8];
                          var inst_8170 = state_8179[2];
                          var inst_8171 = inst_8148 + 1;
                          var inst_8147 = inst_8170;
                          var inst_8148__$1 = inst_8171;
                          var state_8179__$1 = function() {
                            var statearr_8189 = state_8179;
                            statearr_8189[8] = inst_8148__$1;
                            statearr_8189[9] = inst_8147;
                            return statearr_8189;
                          }();
                          var statearr_8190_8204 = state_8179__$1;
                          statearr_8190_8204[2] = null;
                          statearr_8190_8204[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_8180 === 9) {
                            var inst_8147 = state_8179[9];
                            var inst_8166 = inst_8147 - 1;
                            var state_8179__$1 = state_8179;
                            var statearr_8191_8205 = state_8179__$1;
                            statearr_8191_8205[2] = inst_8166;
                            statearr_8191_8205[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_8180 === 5) {
                              var inst_8147 = state_8179[9];
                              var inst_8156 = state_8179[2];
                              var inst_8157 = intercomMake.blockg = inst_8156;
                              var inst_8158 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_8159 = intercomMake.gtBlock.count = inst_8147;
                              var inst_8160 = intercomMake.gtBlock.blocks;
                              var inst_8161 = inst_8160.push(intercomMake.blockg);
                              var inst_8162 = 0 < inst_8147;
                              var state_8179__$1 = function() {
                                var statearr_8192 = state_8179;
                                statearr_8192[12] = inst_8159;
                                statearr_8192[13] = inst_8161;
                                statearr_8192[14] = inst_8158;
                                statearr_8192[15] = inst_8157;
                                return statearr_8192;
                              }();
                              if (cljs.core.truth_(inst_8162)) {
                                var statearr_8193_8206 = state_8179__$1;
                                statearr_8193_8206[1] = 6;
                              } else {
                                var statearr_8194_8207 = state_8179__$1;
                                statearr_8194_8207[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_8180 === 10) {
                                var inst_8147 = state_8179[9];
                                var inst_8168 = cljs.core.quot.call(null, inst_8147, 2);
                                var state_8179__$1 = state_8179;
                                var statearr_8195_8208 = state_8179__$1;
                                statearr_8195_8208[2] = inst_8168;
                                statearr_8195_8208[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_8180 === 8) {
                                  var inst_8175 = state_8179[2];
                                  var state_8179__$1 = state_8179;
                                  var statearr_8196_8209 = state_8179__$1;
                                  statearr_8196_8209[2] = inst_8175;
                                  statearr_8196_8209[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_8198 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_8198[0] = state_machine__6220__auto__;
              statearr_8198[1] = 1;
              return statearr_8198;
            };
            var state_machine__6220__auto____1 = function(state_8179) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_8179);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_8179) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_8179);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_8199 = f__6233__auto__.call(null);
        statearr_8199[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_8199;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj19087 = {};
  return obj19087;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3651__auto__ = reader;
    if (and__3651__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4300__auto__ = reader == null ? null : reader;
    return function() {
      var or__3663__auto__ = cljs.reader.read_char[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.reader.read_char["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3651__auto__ = reader;
    if (and__3651__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3651__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4300__auto__ = reader == null ? null : reader;
    return function() {
      var or__3663__auto__ = cljs.reader.unread[goog.typeOf(x__4300__auto__)];
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.reader.unread["_"];
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4240__auto__, writer__4241__auto__, opt__4242__auto__) {
  return cljs.core._write.call(null, writer__4241__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3663__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3663__auto__)) {
    return or__3663__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__19088) {
    var rdr = cljs.core.first(arglist__19088);
    var msg = cljs.core.rest(arglist__19088);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3651__auto__ = !(ch === "#");
  if (and__3651__auto__) {
    var and__3651__auto____$1 = !(ch === "'");
    if (and__3651__auto____$1) {
      var and__3651__auto____$2 = !(ch === ":");
      if (and__3651__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3651__auto____$2;
      }
    } else {
      return and__3651__auto____$1;
    }
  } else {
    return and__3651__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__19089 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__19090 = cljs.reader.read_char.call(null, rdr);
      sb = G__19089;
      ch = G__19090;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__19091 = cljs.reader.read_char.call(null, rdr);
      ch = G__19091;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__19092 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__19092;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__19093 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__19093;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3663__auto__ = ch == null;
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        var or__3663__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3663__auto____$1) {
          return or__3663__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3663__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__19094 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__19095 = cljs.reader.read_char.call(null, reader);
      buffer = G__19094;
      ch = G__19095;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__19096 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__19097 = cljs.reader.read_char.call(null, reader);
        buffer = G__19096;
        ch = G__19097;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__19098 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__19099 = cljs.reader.read_char.call(null, reader);
          buffer = G__19098;
          ch = G__19099;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__19104 = function() {
            var G__19102 = buffer;
            G__19102.append(nch);
            return G__19102;
          }();
          var G__19105 = cljs.reader.read_char.call(null, reader);
          buffer = G__19104;
          ch = G__19105;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__19106 = function() {
            var G__19103 = buffer;
            G__19103.append(ch);
            return G__19103;
          }();
          var G__19107 = cljs.reader.read_char.call(null, reader);
          buffer = G__19106;
          ch = G__19107;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__19109 = o;
    if (G__19109) {
      var bit__4327__auto__ = G__19109.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4327__auto__ || G__19109.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__19109.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__19109);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__19109);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__19110 = reader;
        var G__19111 = eof_is_error;
        var G__19112 = sentinel;
        var G__19113 = is_recursive;
        reader = G__19110;
        eof_is_error = G__19111;
        sentinel = G__19112;
        is_recursive = G__19113;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__19114 = cljs.reader.read_comment.call(null, reader, ch);
          var G__19115 = eof_is_error;
          var G__19116 = sentinel;
          var G__19117 = is_recursive;
          reader = G__19114;
          eof_is_error = G__19115;
          sentinel = G__19116;
          is_recursive = G__19117;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__19118 = reader;
            var G__19119 = eof_is_error;
            var G__19120 = sentinel;
            var G__19121 = is_recursive;
            reader = G__19118;
            eof_is_error = G__19119;
            sentinel = G__19120;
            is_recursive = G__19121;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__19122 = b.append("0");
          b = G__19122;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__19124 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__19124, 0, null);
  var years = cljs.core.nth.call(null, vec__19124, 1, null);
  var months = cljs.core.nth.call(null, vec__19124, 2, null);
  var days = cljs.core.nth.call(null, vec__19124, 3, null);
  var hours = cljs.core.nth.call(null, vec__19124, 4, null);
  var minutes = cljs.core.nth.call(null, vec__19124, 5, null);
  var seconds = cljs.core.nth.call(null, vec__19124, 6, null);
  var fraction = cljs.core.nth.call(null, vec__19124, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__19124, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__19124, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__19124, 10, null);
  var v = vec__19124;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3663__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__19126 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__19126, 0, null);
    var months = cljs.core.nth.call(null, vec__19126, 1, null);
    var days = cljs.core.nth.call(null, vec__19126, 2, null);
    var hours = cljs.core.nth.call(null, vec__19126, 3, null);
    var minutes = cljs.core.nth.call(null, vec__19126, 4, null);
    var seconds = cljs.core.nth.call(null, vec__19126, 5, null);
    var ms = cljs.core.nth.call(null, vec__19126, 6, null);
    var offset = cljs.core.nth.call(null, vec__19126, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__19139_19151 = cljs.core.seq.call(null, form);
    var chunk__19140_19152 = null;
    var count__19141_19153 = 0;
    var i__19142_19154 = 0;
    while (true) {
      if (i__19142_19154 < count__19141_19153) {
        var x_19155 = cljs.core._nth.call(null, chunk__19140_19152, i__19142_19154);
        arr.push(x_19155);
        var G__19156 = seq__19139_19151;
        var G__19157 = chunk__19140_19152;
        var G__19158 = count__19141_19153;
        var G__19159 = i__19142_19154 + 1;
        seq__19139_19151 = G__19156;
        chunk__19140_19152 = G__19157;
        count__19141_19153 = G__19158;
        i__19142_19154 = G__19159;
        continue;
      } else {
        var temp__4126__auto___19160 = cljs.core.seq.call(null, seq__19139_19151);
        if (temp__4126__auto___19160) {
          var seq__19139_19161__$1 = temp__4126__auto___19160;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19139_19161__$1)) {
            var c__4433__auto___19162 = cljs.core.chunk_first.call(null, seq__19139_19161__$1);
            var G__19163 = cljs.core.chunk_rest.call(null, seq__19139_19161__$1);
            var G__19164 = c__4433__auto___19162;
            var G__19165 = cljs.core.count.call(null, c__4433__auto___19162);
            var G__19166 = 0;
            seq__19139_19151 = G__19163;
            chunk__19140_19152 = G__19164;
            count__19141_19153 = G__19165;
            i__19142_19154 = G__19166;
            continue;
          } else {
            var x_19167 = cljs.core.first.call(null, seq__19139_19161__$1);
            arr.push(x_19167);
            var G__19168 = cljs.core.next.call(null, seq__19139_19161__$1);
            var G__19169 = null;
            var G__19170 = 0;
            var G__19171 = 0;
            seq__19139_19151 = G__19168;
            chunk__19140_19152 = G__19169;
            count__19141_19153 = G__19170;
            i__19142_19154 = G__19171;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj19144 = {};
        return obj19144;
      }();
      var seq__19145_19172 = cljs.core.seq.call(null, form);
      var chunk__19146_19173 = null;
      var count__19147_19174 = 0;
      var i__19148_19175 = 0;
      while (true) {
        if (i__19148_19175 < count__19147_19174) {
          var vec__19149_19176 = cljs.core._nth.call(null, chunk__19146_19173, i__19148_19175);
          var k_19177 = cljs.core.nth.call(null, vec__19149_19176, 0, null);
          var v_19178 = cljs.core.nth.call(null, vec__19149_19176, 1, null);
          obj[cljs.core.name.call(null, k_19177)] = v_19178;
          var G__19179 = seq__19145_19172;
          var G__19180 = chunk__19146_19173;
          var G__19181 = count__19147_19174;
          var G__19182 = i__19148_19175 + 1;
          seq__19145_19172 = G__19179;
          chunk__19146_19173 = G__19180;
          count__19147_19174 = G__19181;
          i__19148_19175 = G__19182;
          continue;
        } else {
          var temp__4126__auto___19183 = cljs.core.seq.call(null, seq__19145_19172);
          if (temp__4126__auto___19183) {
            var seq__19145_19184__$1 = temp__4126__auto___19183;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19145_19184__$1)) {
              var c__4433__auto___19185 = cljs.core.chunk_first.call(null, seq__19145_19184__$1);
              var G__19186 = cljs.core.chunk_rest.call(null, seq__19145_19184__$1);
              var G__19187 = c__4433__auto___19185;
              var G__19188 = cljs.core.count.call(null, c__4433__auto___19185);
              var G__19189 = 0;
              seq__19145_19172 = G__19186;
              chunk__19146_19173 = G__19187;
              count__19147_19174 = G__19188;
              i__19148_19175 = G__19189;
              continue;
            } else {
              var vec__19150_19190 = cljs.core.first.call(null, seq__19145_19184__$1);
              var k_19191 = cljs.core.nth.call(null, vec__19150_19190, 0, null);
              var v_19192 = cljs.core.nth.call(null, vec__19150_19190, 1, null);
              obj[cljs.core.name.call(null, k_19191)] = v_19192;
              var G__19193 = cljs.core.next.call(null, seq__19145_19184__$1);
              var G__19194 = null;
              var G__19195 = 0;
              var G__19196 = 0;
              seq__19145_19172 = G__19193;
              chunk__19146_19173 = G__19194;
              count__19147_19174 = G__19195;
              i__19148_19175 = G__19196;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("servant.worker");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
servant.worker.worker_fn_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
servant.worker.register_servant_fn = function register_servant_fn(fn_name, f) {
  return cljs.core.swap_BANG_.call(null, servant.worker.worker_fn_map, cljs.core.assoc, cljs.core.keyword.call(null, fn_name), f);
};
servant.worker.run_function_name = function run_function_name(message_data) {
  var fn_key = cljs.reader.read_string.call(null, message_data["fn"]);
  var f = cljs.core.get.call(null, cljs.core.deref.call(null, servant.worker.worker_fn_map), fn_key);
  var args = message_data["args"];
  return cljs.core.apply.call(null, f, args);
};
servant.worker.post_array_buffer = function post_array_buffer(p__19077) {
  var vec__19079 = p__19077;
  var result = cljs.core.nth.call(null, vec__19079, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__19079, 1, null);
  return self.postMessage(result, cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.worker.decode_message = function decode_message(event) {
  var pred__19083 = cljs.core._EQ_;
  var expr__19084 = event.data["command"];
  if (cljs.core.truth_(pred__19083.call(null, "channel", expr__19084))) {
    return self.postMessage(servant.worker.run_function_name.call(null, event.data));
  } else {
    if (cljs.core.truth_(pred__19083.call(null, "channel-arraybuffer", expr__19084))) {
      return servant.worker.post_array_buffer.call(null, servant.worker.run_function_name.call(null, event.data));
    } else {
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__19084));
    }
  }
};
servant.worker.bootstrap = function bootstrap() {
  return self.onmessage = servant.worker.decode_message;
};
goog.provide("servant.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("cljs.core.async");
servant.core.webworker_QMARK_ = function webworker_QMARK_() {
  return void 0 === self.document;
};
servant.core.not_webworker_QMARK_ = cljs.core.complement.call(null, servant.core.webworker_QMARK_);
servant.core.spawn_servants = function spawn_servants(worker_count, worker_script) {
  var servant_channel = cljs.core.async.chan.call(null, worker_count);
  var c__6209__auto___19347 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___19347, servant_channel) {
    return function() {
      var f__6210__auto__ = function() {
        var switch__6196__auto__ = function(c__6209__auto___19347, servant_channel) {
          return function(state_19318) {
            var state_val_19319 = state_19318[1];
            if (state_val_19319 === 7) {
              var inst_19279 = state_19318[5];
              var inst_19280 = state_19318[6];
              var inst_19278 = state_19318[7];
              var inst_19281 = state_19318[8];
              var inst_19289 = state_19318[2];
              var inst_19290 = inst_19281 + 1;
              var tmp19320 = inst_19279;
              var tmp19321 = inst_19280;
              var tmp19322 = inst_19278;
              var inst_19278__$1 = tmp19322;
              var inst_19279__$1 = tmp19320;
              var inst_19280__$1 = tmp19321;
              var inst_19281__$1 = inst_19290;
              var state_19318__$1 = function() {
                var statearr_19323 = state_19318;
                statearr_19323[5] = inst_19279__$1;
                statearr_19323[9] = inst_19289;
                statearr_19323[6] = inst_19280__$1;
                statearr_19323[7] = inst_19278__$1;
                statearr_19323[8] = inst_19281__$1;
                return statearr_19323;
              }();
              var statearr_19324_19348 = state_19318__$1;
              statearr_19324_19348[2] = null;
              statearr_19324_19348[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19319 === 1) {
                var inst_19276 = cljs.core.range.call(null, worker_count);
                var inst_19277 = cljs.core.seq.call(null, inst_19276);
                var inst_19278 = inst_19277;
                var inst_19279 = null;
                var inst_19280 = 0;
                var inst_19281 = 0;
                var state_19318__$1 = function() {
                  var statearr_19325 = state_19318;
                  statearr_19325[5] = inst_19279;
                  statearr_19325[6] = inst_19280;
                  statearr_19325[7] = inst_19278;
                  statearr_19325[8] = inst_19281;
                  return statearr_19325;
                }();
                var statearr_19326_19349 = state_19318__$1;
                statearr_19326_19349[2] = null;
                statearr_19326_19349[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19319 === 4) {
                  var inst_19279 = state_19318[5];
                  var inst_19281 = state_19318[8];
                  var inst_19286 = cljs.core._nth.call(null, inst_19279, inst_19281);
                  var inst_19287 = new Worker(worker_script);
                  var state_19318__$1 = function() {
                    var statearr_19327 = state_19318;
                    statearr_19327[10] = inst_19286;
                    return statearr_19327;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19318__$1, 7, servant_channel, inst_19287);
                } else {
                  if (state_val_19319 === 13) {
                    var inst_19309 = state_19318[2];
                    var state_19318__$1 = state_19318;
                    var statearr_19328_19350 = state_19318__$1;
                    statearr_19328_19350[2] = inst_19309;
                    statearr_19328_19350[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19319 === 6) {
                      var inst_19314 = state_19318[2];
                      var state_19318__$1 = state_19318;
                      var statearr_19329_19351 = state_19318__$1;
                      statearr_19329_19351[2] = inst_19314;
                      statearr_19329_19351[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19319 === 3) {
                        var inst_19316 = state_19318[2];
                        var state_19318__$1 = state_19318;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19318__$1, inst_19316);
                      } else {
                        if (state_val_19319 === 12) {
                          var inst_19293 = state_19318[11];
                          var inst_19302 = cljs.core.first.call(null, inst_19293);
                          var inst_19303 = new Worker(worker_script);
                          var state_19318__$1 = function() {
                            var statearr_19330 = state_19318;
                            statearr_19330[12] = inst_19302;
                            return statearr_19330;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19318__$1, 14, servant_channel, inst_19303);
                        } else {
                          if (state_val_19319 === 2) {
                            var inst_19280 = state_19318[6];
                            var inst_19281 = state_19318[8];
                            var inst_19283 = inst_19281 < inst_19280;
                            var inst_19284 = inst_19283;
                            var state_19318__$1 = state_19318;
                            if (cljs.core.truth_(inst_19284)) {
                              var statearr_19331_19352 = state_19318__$1;
                              statearr_19331_19352[1] = 4;
                            } else {
                              var statearr_19332_19353 = state_19318__$1;
                              statearr_19332_19353[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19319 === 11) {
                              var inst_19293 = state_19318[11];
                              var inst_19297 = cljs.core.chunk_first.call(null, inst_19293);
                              var inst_19298 = cljs.core.chunk_rest.call(null, inst_19293);
                              var inst_19299 = cljs.core.count.call(null, inst_19297);
                              var inst_19278 = inst_19298;
                              var inst_19279 = inst_19297;
                              var inst_19280 = inst_19299;
                              var inst_19281 = 0;
                              var state_19318__$1 = function() {
                                var statearr_19333 = state_19318;
                                statearr_19333[5] = inst_19279;
                                statearr_19333[6] = inst_19280;
                                statearr_19333[7] = inst_19278;
                                statearr_19333[8] = inst_19281;
                                return statearr_19333;
                              }();
                              var statearr_19334_19354 = state_19318__$1;
                              statearr_19334_19354[2] = null;
                              statearr_19334_19354[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19319 === 9) {
                                var state_19318__$1 = state_19318;
                                var statearr_19335_19355 = state_19318__$1;
                                statearr_19335_19355[2] = null;
                                statearr_19335_19355[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19319 === 5) {
                                  var inst_19293 = state_19318[11];
                                  var inst_19278 = state_19318[7];
                                  var inst_19293__$1 = cljs.core.seq.call(null, inst_19278);
                                  var state_19318__$1 = function() {
                                    var statearr_19336 = state_19318;
                                    statearr_19336[11] = inst_19293__$1;
                                    return statearr_19336;
                                  }();
                                  if (inst_19293__$1) {
                                    var statearr_19337_19356 = state_19318__$1;
                                    statearr_19337_19356[1] = 8;
                                  } else {
                                    var statearr_19338_19357 = state_19318__$1;
                                    statearr_19338_19357[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19319 === 14) {
                                    var inst_19293 = state_19318[11];
                                    var inst_19305 = state_19318[2];
                                    var inst_19306 = cljs.core.next.call(null, inst_19293);
                                    var inst_19278 = inst_19306;
                                    var inst_19279 = null;
                                    var inst_19280 = 0;
                                    var inst_19281 = 0;
                                    var state_19318__$1 = function() {
                                      var statearr_19339 = state_19318;
                                      statearr_19339[13] = inst_19305;
                                      statearr_19339[5] = inst_19279;
                                      statearr_19339[6] = inst_19280;
                                      statearr_19339[7] = inst_19278;
                                      statearr_19339[8] = inst_19281;
                                      return statearr_19339;
                                    }();
                                    var statearr_19340_19358 = state_19318__$1;
                                    statearr_19340_19358[2] = null;
                                    statearr_19340_19358[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19319 === 10) {
                                      var inst_19312 = state_19318[2];
                                      var state_19318__$1 = state_19318;
                                      var statearr_19341_19359 = state_19318__$1;
                                      statearr_19341_19359[2] = inst_19312;
                                      statearr_19341_19359[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19319 === 8) {
                                        var inst_19293 = state_19318[11];
                                        var inst_19295 = cljs.core.chunked_seq_QMARK_.call(null, inst_19293);
                                        var state_19318__$1 = state_19318;
                                        if (inst_19295) {
                                          var statearr_19342_19360 = state_19318__$1;
                                          statearr_19342_19360[1] = 11;
                                        } else {
                                          var statearr_19343_19361 = state_19318__$1;
                                          statearr_19343_19361[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6209__auto___19347, servant_channel);
        return function(switch__6196__auto__, c__6209__auto___19347, servant_channel) {
          return function() {
            var state_machine__6197__auto__ = null;
            var state_machine__6197__auto____0 = function() {
              var statearr_19345 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_19345[0] = state_machine__6197__auto__;
              statearr_19345[1] = 1;
              return statearr_19345;
            };
            var state_machine__6197__auto____1 = function(state_19318) {
              while (true) {
                var result__6198__auto__ = switch__6196__auto__.call(null, state_19318);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6198__auto__;
                }
                break;
              }
            };
            state_machine__6197__auto__ = function(state_19318) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6197__auto____0.call(this);
                case 1:
                  return state_machine__6197__auto____1.call(this, state_19318);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
            return state_machine__6197__auto__;
          }();
        }(switch__6196__auto__, c__6209__auto___19347, servant_channel);
      }();
      var state__6211__auto__ = function() {
        var statearr_19346 = f__6210__auto__.call(null);
        statearr_19346[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___19347;
        return statearr_19346;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
    };
  }(c__6209__auto___19347, servant_channel));
  return servant_channel;
};
servant.core.kill_servants = function kill_servants(servant_channel, worker_count) {
  var c__6209__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto__) {
    return function() {
      var f__6210__auto__ = function() {
        var switch__6196__auto__ = function(c__6209__auto__) {
          return function(state_19483) {
            var state_val_19484 = state_19483[1];
            if (state_val_19484 === 7) {
              var inst_19444 = state_19483[5];
              var inst_19446 = state_19483[6];
              var inst_19445 = state_19483[7];
              var inst_19443 = state_19483[8];
              var inst_19453 = state_19483[2];
              var inst_19454 = inst_19453.terminate();
              var inst_19455 = inst_19446 + 1;
              var tmp19485 = inst_19444;
              var tmp19486 = inst_19445;
              var tmp19487 = inst_19443;
              var inst_19443__$1 = tmp19487;
              var inst_19444__$1 = tmp19485;
              var inst_19445__$1 = tmp19486;
              var inst_19446__$1 = inst_19455;
              var state_19483__$1 = function() {
                var statearr_19488 = state_19483;
                statearr_19488[5] = inst_19444__$1;
                statearr_19488[6] = inst_19446__$1;
                statearr_19488[9] = inst_19454;
                statearr_19488[7] = inst_19445__$1;
                statearr_19488[8] = inst_19443__$1;
                return statearr_19488;
              }();
              var statearr_19489_19512 = state_19483__$1;
              statearr_19489_19512[2] = null;
              statearr_19489_19512[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19484 === 1) {
                var inst_19441 = cljs.core.range.call(null, worker_count);
                var inst_19442 = cljs.core.seq.call(null, inst_19441);
                var inst_19443 = inst_19442;
                var inst_19444 = null;
                var inst_19445 = 0;
                var inst_19446 = 0;
                var state_19483__$1 = function() {
                  var statearr_19490 = state_19483;
                  statearr_19490[5] = inst_19444;
                  statearr_19490[6] = inst_19446;
                  statearr_19490[7] = inst_19445;
                  statearr_19490[8] = inst_19443;
                  return statearr_19490;
                }();
                var statearr_19491_19513 = state_19483__$1;
                statearr_19491_19513[2] = null;
                statearr_19491_19513[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19484 === 4) {
                  var inst_19444 = state_19483[5];
                  var inst_19446 = state_19483[6];
                  var inst_19451 = cljs.core._nth.call(null, inst_19444, inst_19446);
                  var state_19483__$1 = function() {
                    var statearr_19492 = state_19483;
                    statearr_19492[10] = inst_19451;
                    return statearr_19492;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19483__$1, 7, servant_channel);
                } else {
                  if (state_val_19484 === 13) {
                    var inst_19474 = state_19483[2];
                    var state_19483__$1 = state_19483;
                    var statearr_19493_19514 = state_19483__$1;
                    statearr_19493_19514[2] = inst_19474;
                    statearr_19493_19514[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19484 === 6) {
                      var inst_19479 = state_19483[2];
                      var state_19483__$1 = state_19483;
                      var statearr_19494_19515 = state_19483__$1;
                      statearr_19494_19515[2] = inst_19479;
                      statearr_19494_19515[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19484 === 3) {
                        var inst_19481 = state_19483[2];
                        var state_19483__$1 = state_19483;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19483__$1, inst_19481);
                      } else {
                        if (state_val_19484 === 12) {
                          var inst_19458 = state_19483[11];
                          var inst_19467 = cljs.core.first.call(null, inst_19458);
                          var state_19483__$1 = function() {
                            var statearr_19495 = state_19483;
                            statearr_19495[12] = inst_19467;
                            return statearr_19495;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19483__$1, 14, servant_channel);
                        } else {
                          if (state_val_19484 === 2) {
                            var inst_19446 = state_19483[6];
                            var inst_19445 = state_19483[7];
                            var inst_19448 = inst_19446 < inst_19445;
                            var inst_19449 = inst_19448;
                            var state_19483__$1 = state_19483;
                            if (cljs.core.truth_(inst_19449)) {
                              var statearr_19496_19516 = state_19483__$1;
                              statearr_19496_19516[1] = 4;
                            } else {
                              var statearr_19497_19517 = state_19483__$1;
                              statearr_19497_19517[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19484 === 11) {
                              var inst_19458 = state_19483[11];
                              var inst_19462 = cljs.core.chunk_first.call(null, inst_19458);
                              var inst_19463 = cljs.core.chunk_rest.call(null, inst_19458);
                              var inst_19464 = cljs.core.count.call(null, inst_19462);
                              var inst_19443 = inst_19463;
                              var inst_19444 = inst_19462;
                              var inst_19445 = inst_19464;
                              var inst_19446 = 0;
                              var state_19483__$1 = function() {
                                var statearr_19498 = state_19483;
                                statearr_19498[5] = inst_19444;
                                statearr_19498[6] = inst_19446;
                                statearr_19498[7] = inst_19445;
                                statearr_19498[8] = inst_19443;
                                return statearr_19498;
                              }();
                              var statearr_19499_19518 = state_19483__$1;
                              statearr_19499_19518[2] = null;
                              statearr_19499_19518[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19484 === 9) {
                                var state_19483__$1 = state_19483;
                                var statearr_19500_19519 = state_19483__$1;
                                statearr_19500_19519[2] = null;
                                statearr_19500_19519[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19484 === 5) {
                                  var inst_19458 = state_19483[11];
                                  var inst_19443 = state_19483[8];
                                  var inst_19458__$1 = cljs.core.seq.call(null, inst_19443);
                                  var state_19483__$1 = function() {
                                    var statearr_19501 = state_19483;
                                    statearr_19501[11] = inst_19458__$1;
                                    return statearr_19501;
                                  }();
                                  if (inst_19458__$1) {
                                    var statearr_19502_19520 = state_19483__$1;
                                    statearr_19502_19520[1] = 8;
                                  } else {
                                    var statearr_19503_19521 = state_19483__$1;
                                    statearr_19503_19521[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19484 === 14) {
                                    var inst_19458 = state_19483[11];
                                    var inst_19469 = state_19483[2];
                                    var inst_19470 = inst_19469.terminate();
                                    var inst_19471 = cljs.core.next.call(null, inst_19458);
                                    var inst_19443 = inst_19471;
                                    var inst_19444 = null;
                                    var inst_19445 = 0;
                                    var inst_19446 = 0;
                                    var state_19483__$1 = function() {
                                      var statearr_19504 = state_19483;
                                      statearr_19504[5] = inst_19444;
                                      statearr_19504[6] = inst_19446;
                                      statearr_19504[7] = inst_19445;
                                      statearr_19504[13] = inst_19470;
                                      statearr_19504[8] = inst_19443;
                                      return statearr_19504;
                                    }();
                                    var statearr_19505_19522 = state_19483__$1;
                                    statearr_19505_19522[2] = null;
                                    statearr_19505_19522[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19484 === 10) {
                                      var inst_19477 = state_19483[2];
                                      var state_19483__$1 = state_19483;
                                      var statearr_19506_19523 = state_19483__$1;
                                      statearr_19506_19523[2] = inst_19477;
                                      statearr_19506_19523[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19484 === 8) {
                                        var inst_19458 = state_19483[11];
                                        var inst_19460 = cljs.core.chunked_seq_QMARK_.call(null, inst_19458);
                                        var state_19483__$1 = state_19483;
                                        if (inst_19460) {
                                          var statearr_19507_19524 = state_19483__$1;
                                          statearr_19507_19524[1] = 11;
                                        } else {
                                          var statearr_19508_19525 = state_19483__$1;
                                          statearr_19508_19525[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6209__auto__);
        return function(switch__6196__auto__, c__6209__auto__) {
          return function() {
            var state_machine__6197__auto__ = null;
            var state_machine__6197__auto____0 = function() {
              var statearr_19510 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_19510[0] = state_machine__6197__auto__;
              statearr_19510[1] = 1;
              return statearr_19510;
            };
            var state_machine__6197__auto____1 = function(state_19483) {
              while (true) {
                var result__6198__auto__ = switch__6196__auto__.call(null, state_19483);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6198__auto__;
                }
                break;
              }
            };
            state_machine__6197__auto__ = function(state_19483) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6197__auto____0.call(this);
                case 1:
                  return state_machine__6197__auto____1.call(this, state_19483);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
            state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
            return state_machine__6197__auto__;
          }();
        }(switch__6196__auto__, c__6209__auto__);
      }();
      var state__6211__auto__ = function() {
        var statearr_19511 = f__6210__auto__.call(null);
        statearr_19511[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto__;
        return statearr_19511;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
    };
  }(c__6209__auto__));
  return c__6209__auto__;
};
servant.core.f__GT_key = function f__GT_key(f) {
  return cljs.core.ffirst.call(null, cljs.core.filter.call(null, function(p1__19526_SHARP_) {
    return cljs.core._EQ_.call(null, f, cljs.core.second.call(null, p1__19526_SHARP_));
  }, cljs.core.deref.call(null, servant.worker.worker_fn_map)));
};
servant.core.standard_message = function standard_message(worker, fn_key, args) {
  return worker.postMessage(function() {
    var obj19530 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args)};
    return obj19530;
  }());
};
servant.core.array_buffer_message = function array_buffer_message(worker, fn_key, args) {
  var vec__19534 = args;
  var args__$1 = cljs.core.nth.call(null, vec__19534, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__19534, 1, null);
  return worker.postMessage(function() {
    var obj19536 = {"command":"channel-arraybuffer", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj19536;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.array_buffer_message_standard_reply = function array_buffer_message_standard_reply(worker, fn_key, args) {
  var vec__19540 = args;
  var args__$1 = cljs.core.nth.call(null, vec__19540, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__19540, 1, null);
  return worker.postMessage(function() {
    var obj19542 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj19542;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.servant_thread_with_key = function() {
  var servant_thread_with_key__delegate = function(servant_channel, post_message_fn, fn_key, args) {
    var out_channel = cljs.core.async.chan.call(null, 1);
    var c__6209__auto___19594 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto___19594, out_channel) {
      return function() {
        var f__6210__auto__ = function() {
          var switch__6196__auto__ = function(c__6209__auto___19594, out_channel) {
            return function(state_19576) {
              var state_val_19577 = state_19576[1];
              if (state_val_19577 === 2) {
                var inst_19570 = state_19576[2];
                var inst_19571 = cljs.core.pr_str.call(null, fn_key);
                var inst_19572 = post_message_fn.call(null, inst_19570, inst_19571, args);
                var inst_19573 = function() {
                  var worker = inst_19570;
                  return function(worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel) {
                    return function(p1__19543_SHARP_) {
                      var c__6209__auto____$1 = cljs.core.async.chan.call(null, 1);
                      cljs.core.async.impl.dispatch.run.call(null, function(c__6209__auto____$1, worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel) {
                        return function() {
                          var f__6210__auto__ = function() {
                            var switch__6196__auto__ = function(c__6209__auto____$1, worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel) {
                              return function(state_19584) {
                                var state_val_19585 = state_19584[1];
                                if (state_val_19585 === 3) {
                                  var inst_19582 = state_19584[2];
                                  var state_19584__$1 = state_19584;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19584__$1, inst_19582);
                                } else {
                                  if (state_val_19585 === 2) {
                                    var inst_19580 = state_19584[2];
                                    var state_19584__$1 = function() {
                                      var statearr_19586 = state_19584;
                                      statearr_19586[5] = inst_19580;
                                      return statearr_19586;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19584__$1, 3, servant_channel, worker);
                                  } else {
                                    if (state_val_19585 === 1) {
                                      var inst_19578 = p1__19543_SHARP_.data;
                                      var state_19584__$1 = state_19584;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19584__$1, 2, out_channel, inst_19578);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              };
                            }(c__6209__auto____$1, worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel);
                            return function(switch__6196__auto__, c__6209__auto____$1, worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel) {
                              return function() {
                                var state_machine__6197__auto__ = null;
                                var state_machine__6197__auto____0 = function() {
                                  var statearr_19588 = [null, null, null, null, null, null];
                                  statearr_19588[0] = state_machine__6197__auto__;
                                  statearr_19588[1] = 1;
                                  return statearr_19588;
                                };
                                var state_machine__6197__auto____1 = function(state_19584) {
                                  while (true) {
                                    var result__6198__auto__ = switch__6196__auto__.call(null, state_19584);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__6198__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__6197__auto__ = function(state_19584) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__6197__auto____0.call(this);
                                    case 1:
                                      return state_machine__6197__auto____1.call(this, state_19584);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
                                state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
                                return state_machine__6197__auto__;
                              }();
                            }(switch__6196__auto__, c__6209__auto____$1, worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel);
                          }();
                          var state__6211__auto__ = function() {
                            var statearr_19589 = f__6210__auto__.call(null);
                            statearr_19589[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto____$1;
                            return statearr_19589;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
                        };
                      }(c__6209__auto____$1, worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel));
                      return c__6209__auto____$1;
                    };
                  }(worker, inst_19570, inst_19571, inst_19572, state_val_19577, c__6209__auto___19594, out_channel);
                }();
                var inst_19574 = inst_19570.addEventListener("message", inst_19573);
                var state_19576__$1 = function() {
                  var statearr_19590 = state_19576;
                  statearr_19590[5] = inst_19572;
                  return statearr_19590;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19576__$1, inst_19574);
              } else {
                if (state_val_19577 === 1) {
                  var state_19576__$1 = state_19576;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19576__$1, 2, servant_channel);
                } else {
                  return null;
                }
              }
            };
          }(c__6209__auto___19594, out_channel);
          return function(switch__6196__auto__, c__6209__auto___19594, out_channel) {
            return function() {
              var state_machine__6197__auto__ = null;
              var state_machine__6197__auto____0 = function() {
                var statearr_19592 = [null, null, null, null, null, null];
                statearr_19592[0] = state_machine__6197__auto__;
                statearr_19592[1] = 1;
                return statearr_19592;
              };
              var state_machine__6197__auto____1 = function(state_19576) {
                while (true) {
                  var result__6198__auto__ = switch__6196__auto__.call(null, state_19576);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6198__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6198__auto__;
                  }
                  break;
                }
              };
              state_machine__6197__auto__ = function(state_19576) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6197__auto____0.call(this);
                  case 1:
                    return state_machine__6197__auto____1.call(this, state_19576);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6197__auto____0;
              state_machine__6197__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6197__auto____1;
              return state_machine__6197__auto__;
            }();
          }(switch__6196__auto__, c__6209__auto___19594, out_channel);
        }();
        var state__6211__auto__ = function() {
          var statearr_19593 = f__6210__auto__.call(null);
          statearr_19593[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6209__auto___19594;
          return statearr_19593;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6211__auto__);
      };
    }(c__6209__auto___19594, out_channel));
    return out_channel;
  };
  var servant_thread_with_key = function(servant_channel, post_message_fn, fn_key, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread_with_key__delegate.call(this, servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$lang$maxFixedArity = 3;
  servant_thread_with_key.cljs$lang$applyTo = function(arglist__19595) {
    var servant_channel = cljs.core.first(arglist__19595);
    arglist__19595 = cljs.core.next(arglist__19595);
    var post_message_fn = cljs.core.first(arglist__19595);
    arglist__19595 = cljs.core.next(arglist__19595);
    var fn_key = cljs.core.first(arglist__19595);
    var args = cljs.core.rest(arglist__19595);
    return servant_thread_with_key__delegate(servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$core$IFn$_invoke$arity$variadic = servant_thread_with_key__delegate;
  return servant_thread_with_key;
}();
servant.core.servant_thread = function() {
  var servant_thread__delegate = function(servant_channel, post_message_fn, f, args) {
    return cljs.core.apply.call(null, servant.core.servant_thread_with_key, servant_channel, post_message_fn, servant.core.f__GT_key.call(null, f), args);
  };
  var servant_thread = function(servant_channel, post_message_fn, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread__delegate.call(this, servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$lang$maxFixedArity = 3;
  servant_thread.cljs$lang$applyTo = function(arglist__19596) {
    var servant_channel = cljs.core.first(arglist__19596);
    arglist__19596 = cljs.core.next(arglist__19596);
    var post_message_fn = cljs.core.first(arglist__19596);
    arglist__19596 = cljs.core.next(arglist__19596);
    var f = cljs.core.first(arglist__19596);
    var args = cljs.core.rest(arglist__19596);
    return servant_thread__delegate(servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$core$IFn$_invoke$arity$variadic = servant_thread__delegate;
  return servant_thread;
}();
goog.provide("mining");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("servant.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("logger");
mining.hashmine = cljs.core.async.chan.call(null);
mining.hashmine.type = "workerch";
console.log("this runs in the browser");
mining.worker_count = 2;
mining.worker_script = "wrkr.js";
mining.servant_channel = servant.core.spawn_servants.call(null, mining.worker_count, mining.worker_script);
mining.mine = function mine(rootHash) {
  logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to mine %s ", rootHash);
  mining.chann = servant.core.servant_thread.call(null, mining.servant_channel, servant.core.standard_message, "none", "newjob", rootHash);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_12097) {
            var state_val_12098 = state_12097[1];
            if (state_val_12098 === 2) {
              var inst_12091 = state_12097[2];
              var inst_12092 = mining.v = inst_12091;
              var inst_12093 = logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "recieved from mining", mining.v);
              var inst_12094 = JSON.parse(mining.v);
              var inst_12095 = pubsub.pub.call(null, "blockMined", inst_12094);
              var state_12097__$1 = function() {
                var statearr_12099 = state_12097;
                statearr_12099[5] = inst_12093;
                statearr_12099[6] = inst_12092;
                return statearr_12099;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12097__$1, inst_12095);
            } else {
              if (state_val_12098 === 1) {
                var inst_12089 = logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to wait for mining to end ");
                var state_12097__$1 = function() {
                  var statearr_12100 = state_12097;
                  statearr_12100[7] = inst_12089;
                  return statearr_12100;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12097__$1, 2, mining.chann);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12102 = [null, null, null, null, null, null, null, null];
              statearr_12102[0] = state_machine__6220__auto__;
              statearr_12102[1] = 1;
              return statearr_12102;
            };
            var state_machine__6220__auto____1 = function(state_12097) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12097);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12097) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12097);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_12103 = f__6233__auto__.call(null);
        statearr_12103[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_12103;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
goog.provide("communications");
goog.require("cljs.core");
goog.require("crypto");
goog.require("mining");
goog.require("peerjs");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("intercom");
goog.require("intercomMake");
goog.require("intercom");
goog.require("intercomMake");
goog.require("pubsub");
goog.require("blockchain");
goog.require("peerjs");
goog.require("cljs.core.async");
goog.require("database");
goog.require("logger");
goog.require("mining");
goog.require("logger");
goog.require("blockchain");
goog.require("database");
goog.require("crypto");
communications.intercomMeta = function() {
  var obj9862 = {"id":1, "knownPeers":cljs.core.PersistentVector.EMPTY, "knownPeersChannels":cljs.core.PersistentVector.EMPTY, "p2pchans":cljs.core.PersistentVector.EMPTY};
  return obj9862;
}();
communications.peers = cljs.core.PersistentVector.EMPTY;
communications.transactionch = cljs.core.async.chan.call(null);
communications.transactionch.type = "transactionch";
communications.cryptoCh = cljs.core.async.chan.call(null);
communications.cryptoCh.type = "cryptoch";
communications.setID = function setID(ev, id) {
  cljs.core.println.call(null, id);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9890) {
            var state_val_9891 = state_9890[1];
            if (state_val_9891 === 2) {
              var inst_9883 = state_9890[2];
              var inst_9884 = console.log(inst_9883);
              var inst_9885 = new Peer(id, peerjs.peerParams);
              var inst_9886 = peerjs.peerjs = inst_9885;
              var inst_9887 = communications.init.call(null, peerjs.peerjs);
              var inst_9888 = peerjs.peerjs.on("connection", comm.onConnection);
              var state_9890__$1 = function() {
                var statearr_9892 = state_9890;
                statearr_9892[5] = inst_9884;
                statearr_9892[6] = inst_9887;
                statearr_9892[7] = inst_9886;
                return statearr_9892;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9890__$1, inst_9888);
            } else {
              if (state_val_9891 === 1) {
                var inst_9880 = communications.p.call(null, "lid", id);
                var inst_9881 = communications.g.call(null, "lid");
                var state_9890__$1 = function() {
                  var statearr_9893 = state_9890;
                  statearr_9893[8] = inst_9880;
                  return statearr_9893;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9890__$1, 2, inst_9881);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9895 = [null, null, null, null, null, null, null, null, null];
              statearr_9895[0] = state_machine__6220__auto__;
              statearr_9895[1] = 1;
              return statearr_9895;
            };
            var state_machine__6220__auto____1 = function(state_9890) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9890);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9890) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9890);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9896 = f__6233__auto__.call(null);
        statearr_9896[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9896;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.start = cljs.core.async.chan.call(null);
communications.initial = function initial() {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_9957) {
            var state_val_9958 = state_9957[1];
            if (state_val_9958 === 6) {
              var inst_9949 = state_9957[2];
              var state_9957__$1 = state_9957;
              var statearr_9959_9969 = state_9957__$1;
              statearr_9959_9969[2] = inst_9949;
              statearr_9959_9969[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9958 === 5) {
                var inst_9951 = state_9957[2];
                var inst_9952 = pubsub.initpubsub.call(null);
                var inst_9953 = comm.setupComm.call(null);
                var inst_9954 = comm.startP2PCommLoop.call(null);
                var inst_9955 = ht.run.call(null, "Taras Bulba", "zaparozie r0x", "i4c32d4308e1fe.jpg", "- zaparozie");
                var state_9957__$1 = function() {
                  var statearr_9960 = state_9957;
                  statearr_9960[5] = inst_9953;
                  statearr_9960[6] = inst_9954;
                  statearr_9960[7] = inst_9952;
                  statearr_9960[8] = inst_9951;
                  return statearr_9960;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9957__$1, inst_9955);
              } else {
                if (state_val_9958 === 4) {
                  var inst_9947 = communications.initDBase.call(null);
                  var state_9957__$1 = state_9957;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9957__$1, 6, inst_9947);
                } else {
                  if (state_val_9958 === 3) {
                    var inst_9939 = console.log(communications.id);
                    var inst_9940 = $("#id");
                    var inst_9941 = inst_9940.val(communications.id);
                    var inst_9942 = new Peer(communications.id, peerjs.peerParams);
                    var inst_9943 = peerjs.peerjs = inst_9942;
                    var inst_9944 = communications.init.call(null, peerjs.peerjs);
                    var inst_9945 = peerjs.peerjs.on("connection", comm.onConnection);
                    var state_9957__$1 = function() {
                      var statearr_9961 = state_9957;
                      statearr_9961[9] = inst_9944;
                      statearr_9961[10] = inst_9941;
                      statearr_9961[11] = inst_9943;
                      statearr_9961[12] = inst_9939;
                      return statearr_9961;
                    }();
                    var statearr_9962_9970 = state_9957__$1;
                    statearr_9962_9970[2] = inst_9945;
                    statearr_9962_9970[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9958 === 2) {
                      var inst_9935 = state_9957[2];
                      var inst_9936 = communications.id = inst_9935;
                      var inst_9937 = logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", communications.id);
                      var state_9957__$1 = function() {
                        var statearr_9963 = state_9957;
                        statearr_9963[13] = inst_9937;
                        statearr_9963[14] = inst_9936;
                        return statearr_9963;
                      }();
                      if (cljs.core.truth_(communications.id)) {
                        var statearr_9964_9971 = state_9957__$1;
                        statearr_9964_9971[1] = 3;
                      } else {
                        var statearr_9965_9972 = state_9957__$1;
                        statearr_9965_9972[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9958 === 1) {
                        var inst_9933 = communications.g.call(null, "lid");
                        var state_9957__$1 = state_9957;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9957__$1, 2, inst_9933);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_9967 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_9967[0] = state_machine__6220__auto__;
              statearr_9967[1] = 1;
              return statearr_9967;
            };
            var state_machine__6220__auto____1 = function(state_9957) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_9957);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_9957) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_9957);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_9968 = f__6233__auto__.call(null);
        statearr_9968[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_9968;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.connectionch = cljs.core.async.chan.call(null);
communications.broadcastNewBlock = function broadcastNewBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block", blockk);
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block to ", communications.intercomMeta.knownPeersChannels);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10118) {
            var state_val_10119 = state_10118[1];
            if (state_val_10119 === 7) {
              var inst_10069 = state_10118[5];
              var inst_10068 = state_10118[6];
              var inst_10066 = state_10118[7];
              var inst_10067 = state_10118[8];
              var inst_10083 = state_10118[2];
              var inst_10084 = inst_10069 + 1;
              var tmp10120 = inst_10068;
              var tmp10121 = inst_10066;
              var tmp10122 = inst_10067;
              var inst_10066__$1 = tmp10121;
              var inst_10067__$1 = tmp10122;
              var inst_10068__$1 = tmp10120;
              var inst_10069__$1 = inst_10084;
              var state_10118__$1 = function() {
                var statearr_10123 = state_10118;
                statearr_10123[5] = inst_10069__$1;
                statearr_10123[9] = inst_10083;
                statearr_10123[6] = inst_10068__$1;
                statearr_10123[7] = inst_10066__$1;
                statearr_10123[8] = inst_10067__$1;
                return statearr_10123;
              }();
              var statearr_10124_10147 = state_10118__$1;
              statearr_10124_10147[2] = null;
              statearr_10124_10147[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10119 === 1) {
                var inst_10064 = communications.intercomMeta.knownPeersChannels;
                var inst_10065 = cljs.core.seq.call(null, inst_10064);
                var inst_10066 = inst_10065;
                var inst_10067 = null;
                var inst_10068 = 0;
                var inst_10069 = 0;
                var state_10118__$1 = function() {
                  var statearr_10125 = state_10118;
                  statearr_10125[5] = inst_10069;
                  statearr_10125[6] = inst_10068;
                  statearr_10125[7] = inst_10066;
                  statearr_10125[8] = inst_10067;
                  return statearr_10125;
                }();
                var statearr_10126_10148 = state_10118__$1;
                statearr_10126_10148[2] = null;
                statearr_10126_10148[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10119 === 4) {
                  var inst_10069 = state_10118[5];
                  var inst_10067 = state_10118[8];
                  var inst_10074 = cljs.core._nth.call(null, inst_10067, inst_10069);
                  var inst_10075 = "broadsacting new block to peer " + inst_10074;
                  var inst_10076 = inst_10075 + " ";
                  var inst_10077 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_10076, blockk);
                  var inst_10078 = [];
                  var inst_10079 = communications.vectoR = inst_10078;
                  var inst_10080 = communications.vectoR.push(blockk);
                  var inst_10081 = intercomMake.makeInv.call(null, "block", communications.vectoR);
                  var state_10118__$1 = function() {
                    var statearr_10127 = state_10118;
                    statearr_10127[10] = inst_10077;
                    statearr_10127[11] = inst_10080;
                    statearr_10127[12] = inst_10079;
                    return statearr_10127;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10118__$1, 7, inst_10074, inst_10081);
                } else {
                  if (state_val_10119 === 13) {
                    var inst_10109 = state_10118[2];
                    var state_10118__$1 = state_10118;
                    var statearr_10128_10149 = state_10118__$1;
                    statearr_10128_10149[2] = inst_10109;
                    statearr_10128_10149[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10119 === 6) {
                      var inst_10114 = state_10118[2];
                      var state_10118__$1 = state_10118;
                      var statearr_10129_10150 = state_10118__$1;
                      statearr_10129_10150[2] = inst_10114;
                      statearr_10129_10150[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10119 === 3) {
                        var inst_10116 = state_10118[2];
                        var state_10118__$1 = state_10118;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10118__$1, inst_10116);
                      } else {
                        if (state_val_10119 === 12) {
                          var inst_10087 = state_10118[13];
                          var inst_10096 = cljs.core.first.call(null, inst_10087);
                          var inst_10097 = "broadsacting new block to peer " + inst_10096;
                          var inst_10098 = inst_10097 + " ";
                          var inst_10099 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_10098, blockk);
                          var inst_10100 = [];
                          var inst_10101 = communications.vectoR = inst_10100;
                          var inst_10102 = communications.vectoR.push(blockk);
                          var inst_10103 = intercomMake.makeInv.call(null, "block", communications.vectoR);
                          var state_10118__$1 = function() {
                            var statearr_10130 = state_10118;
                            statearr_10130[14] = inst_10102;
                            statearr_10130[15] = inst_10099;
                            statearr_10130[16] = inst_10101;
                            return statearr_10130;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10118__$1, 14, inst_10096, inst_10103);
                        } else {
                          if (state_val_10119 === 2) {
                            var inst_10069 = state_10118[5];
                            var inst_10068 = state_10118[6];
                            var inst_10071 = inst_10069 < inst_10068;
                            var inst_10072 = inst_10071;
                            var state_10118__$1 = state_10118;
                            if (cljs.core.truth_(inst_10072)) {
                              var statearr_10131_10151 = state_10118__$1;
                              statearr_10131_10151[1] = 4;
                            } else {
                              var statearr_10132_10152 = state_10118__$1;
                              statearr_10132_10152[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10119 === 11) {
                              var inst_10087 = state_10118[13];
                              var inst_10091 = cljs.core.chunk_first.call(null, inst_10087);
                              var inst_10092 = cljs.core.chunk_rest.call(null, inst_10087);
                              var inst_10093 = cljs.core.count.call(null, inst_10091);
                              var inst_10066 = inst_10092;
                              var inst_10067 = inst_10091;
                              var inst_10068 = inst_10093;
                              var inst_10069 = 0;
                              var state_10118__$1 = function() {
                                var statearr_10133 = state_10118;
                                statearr_10133[5] = inst_10069;
                                statearr_10133[6] = inst_10068;
                                statearr_10133[7] = inst_10066;
                                statearr_10133[8] = inst_10067;
                                return statearr_10133;
                              }();
                              var statearr_10134_10153 = state_10118__$1;
                              statearr_10134_10153[2] = null;
                              statearr_10134_10153[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10119 === 9) {
                                var state_10118__$1 = state_10118;
                                var statearr_10135_10154 = state_10118__$1;
                                statearr_10135_10154[2] = null;
                                statearr_10135_10154[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10119 === 5) {
                                  var inst_10066 = state_10118[7];
                                  var inst_10087 = state_10118[13];
                                  var inst_10087__$1 = cljs.core.seq.call(null, inst_10066);
                                  var state_10118__$1 = function() {
                                    var statearr_10136 = state_10118;
                                    statearr_10136[13] = inst_10087__$1;
                                    return statearr_10136;
                                  }();
                                  if (inst_10087__$1) {
                                    var statearr_10137_10155 = state_10118__$1;
                                    statearr_10137_10155[1] = 8;
                                  } else {
                                    var statearr_10138_10156 = state_10118__$1;
                                    statearr_10138_10156[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10119 === 14) {
                                    var inst_10087 = state_10118[13];
                                    var inst_10105 = state_10118[2];
                                    var inst_10106 = cljs.core.next.call(null, inst_10087);
                                    var inst_10066 = inst_10106;
                                    var inst_10067 = null;
                                    var inst_10068 = 0;
                                    var inst_10069 = 0;
                                    var state_10118__$1 = function() {
                                      var statearr_10139 = state_10118;
                                      statearr_10139[5] = inst_10069;
                                      statearr_10139[17] = inst_10105;
                                      statearr_10139[6] = inst_10068;
                                      statearr_10139[7] = inst_10066;
                                      statearr_10139[8] = inst_10067;
                                      return statearr_10139;
                                    }();
                                    var statearr_10140_10157 = state_10118__$1;
                                    statearr_10140_10157[2] = null;
                                    statearr_10140_10157[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10119 === 10) {
                                      var inst_10112 = state_10118[2];
                                      var state_10118__$1 = state_10118;
                                      var statearr_10141_10158 = state_10118__$1;
                                      statearr_10141_10158[2] = inst_10112;
                                      statearr_10141_10158[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10119 === 8) {
                                        var inst_10087 = state_10118[13];
                                        var inst_10089 = cljs.core.chunked_seq_QMARK_.call(null, inst_10087);
                                        var state_10118__$1 = state_10118;
                                        if (inst_10089) {
                                          var statearr_10142_10159 = state_10118__$1;
                                          statearr_10142_10159[1] = 11;
                                        } else {
                                          var statearr_10143_10160 = state_10118__$1;
                                          statearr_10143_10160[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10145 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10145[0] = state_machine__6220__auto__;
              statearr_10145[1] = 1;
              return statearr_10145;
            };
            var state_machine__6220__auto____1 = function(state_10118) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10118);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10118) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10118);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10146 = f__6233__auto__.call(null);
        statearr_10146[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10146;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.sendmsg = function sendmsg(peer, type, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "sending " + type, msg);
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "peer ", peer);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10178) {
            var state_val_10179 = state_10178[1];
            if (state_val_10179 === 2) {
              var inst_10176 = state_10178[2];
              var state_10178__$1 = state_10178;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10178__$1, inst_10176);
            } else {
              if (state_val_10179 === 1) {
                var inst_10174 = {"type":type, "msg":msg};
                var state_10178__$1 = state_10178;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10178__$1, 2, peer, inst_10174);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10181 = [null, null, null, null, null];
              statearr_10181[0] = state_machine__6220__auto__;
              statearr_10181[1] = 1;
              return statearr_10181;
            };
            var state_machine__6220__auto____1 = function(state_10178) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10178);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10178) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10178);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10182 = f__6233__auto__.call(null);
        statearr_10182[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10182;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.onOpen = function onOpen(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection opened trying to send data trough");
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), conn);
  conn.connType = "saltan";
  var c__6232__auto___10199 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto___10199) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto___10199) {
          return function(state_10194) {
            var state_val_10195 = state_10194[1];
            if (state_val_10195 === 2) {
              var inst_10192 = state_10194[2];
              var state_10194__$1 = state_10194;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10194__$1, inst_10192);
            } else {
              if (state_val_10195 === 1) {
                var state_10194__$1 = state_10194;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10194__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto___10199);
        return function(switch__6219__auto__, c__6232__auto___10199) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10197 = [null, null, null, null, null];
              statearr_10197[0] = state_machine__6220__auto__;
              statearr_10197[1] = 1;
              return statearr_10197;
            };
            var state_machine__6220__auto____1 = function(state_10194) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10194);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10194) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10194);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto___10199);
      }();
      var state__6234__auto__ = function() {
        var statearr_10198 = f__6233__auto__.call(null);
        statearr_10198[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto___10199;
        return statearr_10198;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto___10199));
  return logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "conn: ", conn);
};
communications.onConnection = function onConnection(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection is opened now try to send something");
  conn.connType = "tsaritsa";
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10211) {
            var state_val_10212 = state_10211[1];
            if (state_val_10212 === 2) {
              var inst_10209 = state_10211[2];
              var state_10211__$1 = state_10211;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10211__$1, inst_10209);
            } else {
              if (state_val_10212 === 1) {
                var state_10211__$1 = state_10211;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10211__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10214 = [null, null, null, null, null];
              statearr_10214[0] = state_machine__6220__auto__;
              statearr_10214[1] = 1;
              return statearr_10214;
            };
            var state_machine__6220__auto____1 = function(state_10211) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10211);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10211) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10211);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10215 = f__6233__auto__.call(null);
        statearr_10215[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10215;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.onData = function onData(read, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "data recieved", data);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10227) {
            var state_val_10228 = state_10227[1];
            if (state_val_10228 === 2) {
              var inst_10225 = state_10227[2];
              var state_10227__$1 = state_10227;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10227__$1, inst_10225);
            } else {
              if (state_val_10228 === 1) {
                var state_10227__$1 = state_10227;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10227__$1, 2, read, data);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10230 = [null, null, null, null, null];
              statearr_10230[0] = state_machine__6220__auto__;
              statearr_10230[1] = 1;
              return statearr_10230;
            };
            var state_machine__6220__auto____1 = function(state_10227) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10227);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10227) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10227);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10231 = f__6233__auto__.call(null);
        statearr_10231[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10231;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.channelsFromConnection = function channelsFromConnection(conn) {
  communications.readc = cljs.core.async.chan.call(null, 10);
  communications.writec = cljs.core.async.chan.call(null, 10);
  communications.readc.writec = communications.writec;
  communications.readc.type = "readch";
  communications.writec.type = "writech";
  conn.writec = communications.writec;
  conn.readc = communications.readc;
  communications.readc.conn = conn;
  communications.writec.conn = conn;
  conn.on("data", cljs.core.partial.call(null, communications.onData, communications.readc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.readc, communications.writec], null);
};
communications.startP2PCommLoop = function startP2PCommLoop() {
  communications.stated = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.connectionch], null);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10386) {
            var state_val_10387 = state_10386[1];
            if (state_val_10387 === 7) {
              var inst_10381 = state_10386[2];
              var state_10386__$1 = function() {
                var statearr_10388 = state_10386;
                statearr_10388[5] = inst_10381;
                return statearr_10388;
              }();
              var statearr_10389_10416 = state_10386__$1;
              statearr_10389_10416[2] = null;
              statearr_10389_10416[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10387 === 1) {
                var state_10386__$1 = state_10386;
                var statearr_10390_10417 = state_10386__$1;
                statearr_10390_10417[2] = null;
                statearr_10390_10417[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10387 === 4) {
                  var inst_10328 = state_10386[2];
                  var inst_10329 = communications.v = inst_10328;
                  var inst_10330 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got from state", communications.v);
                  var inst_10331 = cljs.core.nth.call(null, communications.v, 0);
                  var inst_10332 = communications.vrecieved = inst_10331;
                  var inst_10333 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_10334 = communications.ch2 = inst_10333;
                  var inst_10335 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_10336 = inst_10335 === communications.connectionch;
                  var state_10386__$1 = function() {
                    var statearr_10391 = state_10386;
                    statearr_10391[6] = inst_10329;
                    statearr_10391[7] = inst_10332;
                    statearr_10391[8] = inst_10334;
                    statearr_10391[9] = inst_10330;
                    return statearr_10391;
                  }();
                  if (cljs.core.truth_(inst_10336)) {
                    var statearr_10392_10418 = state_10386__$1;
                    statearr_10392_10418[1] = 5;
                  } else {
                    var statearr_10393_10419 = state_10386__$1;
                    statearr_10393_10419[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10387 === 15) {
                    var state_10386__$1 = state_10386;
                    var statearr_10394_10420 = state_10386__$1;
                    statearr_10394_10420[2] = null;
                    statearr_10394_10420[1] = 16;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10387 === 13) {
                      var inst_10361 = state_10386[2];
                      var inst_10362 = communications.ch2.writec;
                      var inst_10363 = communications.vrecieved.peer = inst_10362;
                      var inst_10364 = communications.ch2.conn;
                      var inst_10365 = intercom.intercomstatemachine.call(null, inst_10364, communications.vrecieved);
                      var state_10386__$1 = function() {
                        var statearr_10395 = state_10386;
                        statearr_10395[10] = inst_10361;
                        statearr_10395[11] = inst_10363;
                        return statearr_10395;
                      }();
                      var statearr_10396_10421 = state_10386__$1;
                      statearr_10396_10421[2] = inst_10365;
                      statearr_10396_10421[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10387 === 6) {
                        var inst_10349 = communications.ch2.type;
                        var inst_10350 = inst_10349 === "readch";
                        var state_10386__$1 = state_10386;
                        if (cljs.core.truth_(inst_10350)) {
                          var statearr_10397_10422 = state_10386__$1;
                          statearr_10397_10422[1] = 8;
                        } else {
                          var statearr_10398_10423 = state_10386__$1;
                          statearr_10398_10423[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10387 === 3) {
                          var inst_10384 = state_10386[2];
                          var state_10386__$1 = state_10386;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10386__$1, inst_10384);
                        } else {
                          if (state_val_10387 === 12) {
                            var state_10386__$1 = state_10386;
                            var statearr_10399_10424 = state_10386__$1;
                            statearr_10399_10424[2] = null;
                            statearr_10399_10424[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10387 === 2) {
                              var inst_10325 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "new iteration with state");
                              var inst_10326 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "state ", communications.stated);
                              var state_10386__$1 = function() {
                                var statearr_10400 = state_10386;
                                statearr_10400[12] = inst_10326;
                                statearr_10400[13] = inst_10325;
                                return statearr_10400;
                              }();
                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_10386__$1, 4, communications.stated);
                            } else {
                              if (state_val_10387 === 11) {
                                var inst_10356 = communications.vrecieved.data;
                                var inst_10357 = JSON.parse(inst_10356);
                                var inst_10358 = communications.vrecieved = inst_10357;
                                var state_10386__$1 = state_10386;
                                var statearr_10401_10425 = state_10386__$1;
                                statearr_10401_10425[2] = inst_10358;
                                statearr_10401_10425[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10387 === 9) {
                                  var inst_10367 = communications.ch2.type;
                                  var inst_10368 = inst_10367 === "writech";
                                  var state_10386__$1 = state_10386;
                                  if (cljs.core.truth_(inst_10368)) {
                                    var statearr_10402_10426 = state_10386__$1;
                                    statearr_10402_10426[1] = 14;
                                  } else {
                                    var statearr_10403_10427 = state_10386__$1;
                                    statearr_10403_10427[1] = 15;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10387 === 5) {
                                    var inst_10338 = cljs.core.PersistentVector.EMPTY;
                                    var inst_10339 = communications.onNewConnection.call(null, communications.vrecieved);
                                    var inst_10340 = cljs.core.concat.call(null, communications.stated, inst_10339);
                                    var inst_10341 = cljs.core.into.call(null, inst_10338, inst_10340);
                                    var inst_10342 = communications.stated = inst_10341;
                                    var inst_10343 = intercom.getIntercomState.call(null, communications.vrecieved);
                                    var inst_10344 = communications.stat = inst_10343;
                                    var inst_10345 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "intercom state", communications.stat);
                                    var inst_10346 = intercomMake.makeConn.call(null, communications.vrecieved);
                                    var inst_10347 = intercom.intercomstatemachine.call(null, communications.vrecieved, inst_10346);
                                    var state_10386__$1 = function() {
                                      var statearr_10404 = state_10386;
                                      statearr_10404[14] = inst_10345;
                                      statearr_10404[15] = inst_10342;
                                      statearr_10404[16] = inst_10344;
                                      return statearr_10404;
                                    }();
                                    var statearr_10405_10428 = state_10386__$1;
                                    statearr_10405_10428[2] = inst_10347;
                                    statearr_10405_10428[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10387 === 14) {
                                      var inst_10370 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "sending to peer ", communications.vrecieved);
                                      var inst_10371 = communications.ch2.conn;
                                      var inst_10372 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "connection being sent to ", inst_10371);
                                      var inst_10373 = communications.ch2.conn;
                                      var inst_10374 = inst_10373.send(communications.vrecieved);
                                      var state_10386__$1 = function() {
                                        var statearr_10406 = state_10386;
                                        statearr_10406[17] = inst_10370;
                                        statearr_10406[18] = inst_10372;
                                        return statearr_10406;
                                      }();
                                      var statearr_10407_10429 = state_10386__$1;
                                      statearr_10407_10429[2] = inst_10374;
                                      statearr_10407_10429[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10387 === 16) {
                                        var inst_10377 = state_10386[2];
                                        var state_10386__$1 = state_10386;
                                        var statearr_10408_10430 = state_10386__$1;
                                        statearr_10408_10430[2] = inst_10377;
                                        statearr_10408_10430[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10387 === 10) {
                                          var inst_10379 = state_10386[2];
                                          var state_10386__$1 = state_10386;
                                          var statearr_10409_10431 = state_10386__$1;
                                          statearr_10409_10431[2] = inst_10379;
                                          statearr_10409_10431[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10387 === 8) {
                                            var inst_10352 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "recieved from peer ", communications.vrecieved);
                                            var inst_10353 = communications.vrecieved.type;
                                            var inst_10354 = inst_10353 === "json";
                                            var state_10386__$1 = function() {
                                              var statearr_10410 = state_10386;
                                              statearr_10410[19] = inst_10352;
                                              return statearr_10410;
                                            }();
                                            if (cljs.core.truth_(inst_10354)) {
                                              var statearr_10411_10432 = state_10386__$1;
                                              statearr_10411_10432[1] = 11;
                                            } else {
                                              var statearr_10412_10433 = state_10386__$1;
                                              statearr_10412_10433[1] = 12;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10414 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10414[0] = state_machine__6220__auto__;
              statearr_10414[1] = 1;
              return statearr_10414;
            };
            var state_machine__6220__auto____1 = function(state_10386) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10386);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10386) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10386);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10415 = f__6233__auto__.call(null);
        statearr_10415[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10415;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.onNewConnection = function onNewConnection(message) {
  communications.gconn = message;
  intercom.setIntercomState.call(null, message, "start");
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "got new connection", message);
  communications.peerChannels = communications.channelsFromConnection.call(null, message);
  communications.intercomMeta.knownPeers = cljs.core.conj.call(null, communications.intercomMeta.knownPeers, message.peer);
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "adding w channel to kpeers ", cljs.core.nth.call(null, communications.peerChannels, 1));
  communications.intercomMeta.p2pchans = cljs.core.concat.call(null, communications.intercomMeta.p2pchans, communications.peerChannels);
  communications.intercomMeta.knownPeersChannels = cljs.core.conj.call(null, communications.intercomMeta.knownPeersChannels, cljs.core.nth.call(null, communications.peerChannels, 1));
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "new state");
  return communications.peerChannels;
};
communications.onBlockMined = function onBlockMined(message) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10481) {
            var state_val_10482 = state_10481[1];
            if (state_val_10482 === 4) {
              var inst_10476 = state_10481[2];
              var inst_10477 = communications.gotFromHash = inst_10476;
              var inst_10478 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got from hash ", communications.gotFromHash);
              var inst_10479 = communications.broadcastNewBlock.call(null, communications.gotFromHash);
              var state_10481__$1 = function() {
                var statearr_10483 = state_10481;
                statearr_10483[5] = inst_10477;
                statearr_10483[6] = inst_10478;
                return statearr_10483;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10481__$1, inst_10479);
            } else {
              if (state_val_10482 === 3) {
                var inst_10472 = state_10481[2];
                var inst_10473 = communications.blockk.hash;
                var inst_10474 = database.g.call(null, inst_10473);
                var state_10481__$1 = function() {
                  var statearr_10484 = state_10481;
                  statearr_10484[7] = inst_10472;
                  return statearr_10484;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10481__$1, 4, inst_10474);
              } else {
                if (state_val_10482 === 2) {
                  var inst_10465 = state_10481[2];
                  var inst_10466 = communications.blockk = inst_10465;
                  var inst_10467 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "just made new block ", communications.blockk);
                  var inst_10468 = communications.blockk.hash;
                  var inst_10469 = logger.og.call(null, new cljs.core.Keyword(null, "message", "message", -406056002), "hash to get ", inst_10468);
                  var inst_10470 = blockchain.saveBlock.call(null, app.pouchDB.dbase, communications.blockk);
                  var state_10481__$1 = function() {
                    var statearr_10485 = state_10481;
                    statearr_10485[8] = inst_10469;
                    statearr_10485[9] = inst_10466;
                    statearr_10485[10] = inst_10467;
                    return statearr_10485;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10481__$1, 3, inst_10470);
                } else {
                  if (state_val_10482 === 1) {
                    var inst_10462 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "recieved from worker ", message);
                    var inst_10463 = blockchain.makeBlock.call(null, message);
                    var state_10481__$1 = function() {
                      var statearr_10486 = state_10481;
                      statearr_10486[11] = inst_10462;
                      return statearr_10486;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10481__$1, 2, inst_10463);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10488 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10488[0] = state_machine__6220__auto__;
              statearr_10488[1] = 1;
              return statearr_10488;
            };
            var state_machine__6220__auto____1 = function(state_10481) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10481);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10481) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10481);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10489 = f__6233__auto__.call(null);
        statearr_10489[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10489;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
communications.onTransaction = function onTransaction(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onTransaction", "onTransaction", 1991881135), "recieved new transaction ", message);
  return crypto.sha256.call(null, message);
};
communications.onCrypto = function onCrypto(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "recieved from crypto ", message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "mempoll \x3d ", blockchain.memPool);
  blockchain.addTransactionToMemPool.call(null, message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), message["type"]);
  if (message["type"] === "fmr") {
    logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "merkle root ", message);
    mining.mine.call(null, message["value"]);
  } else {
  }
  if (cljs.core.count.call(null, blockchain.memPool) > 3) {
    var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
      return function() {
        var f__6233__auto__ = function() {
          var switch__6219__auto__ = function(c__6232__auto__) {
            return function(state_10510) {
              var state_val_10511 = state_10510[1];
              if (state_val_10511 === 2) {
                var inst_10505 = state_10510[2];
                var inst_10506 = communications.fmroot = inst_10505;
                var inst_10507 = logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "calculating hash of transactions %s", communications.fmroot);
                var inst_10508 = mining.mine.call(null, communications.fmroot);
                var state_10510__$1 = function() {
                  var statearr_10512 = state_10510;
                  statearr_10512[5] = inst_10506;
                  statearr_10512[6] = inst_10507;
                  return statearr_10512;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10510__$1, inst_10508);
              } else {
                if (state_val_10511 === 1) {
                  var inst_10503 = crypto.merkleRoot.call(null, blockchain.memPool);
                  var state_10510__$1 = state_10510;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10510__$1, 2, inst_10503);
                } else {
                  return null;
                }
              }
            };
          }(c__6232__auto__);
          return function(switch__6219__auto__, c__6232__auto__) {
            return function() {
              var state_machine__6220__auto__ = null;
              var state_machine__6220__auto____0 = function() {
                var statearr_10514 = [null, null, null, null, null, null, null];
                statearr_10514[0] = state_machine__6220__auto__;
                statearr_10514[1] = 1;
                return statearr_10514;
              };
              var state_machine__6220__auto____1 = function(state_10510) {
                while (true) {
                  var result__6221__auto__ = switch__6219__auto__.call(null, state_10510);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6221__auto__;
                  }
                  break;
                }
              };
              state_machine__6220__auto__ = function(state_10510) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6220__auto____0.call(this);
                  case 1:
                    return state_machine__6220__auto____1.call(this, state_10510);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
              state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
              return state_machine__6220__auto__;
            }();
          }(switch__6219__auto__, c__6232__auto__);
        }();
        var state__6234__auto__ = function() {
          var statearr_10515 = f__6233__auto__.call(null);
          statearr_10515[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
          return statearr_10515;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
      };
    }(c__6232__auto__));
    return c__6232__auto__;
  } else {
    return null;
  }
};
communications.setupComm = function setupComm() {
  pubsub.sub.call(null, "blockMined", communications.onBlockMined);
  pubsub.sub.call(null, "crypto", communications.onCrypto);
  pubsub.sub.call(null, "transaction", communications.onTransaction);
  return pubsub.sub.call(null, "newConnection", communications.onNewConnection);
};
goog.provide("cemerick.cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
cemerick.cljs.test._STAR_test_print_fn_STAR_ = null;
cemerick.cljs.test._STAR_entry_point_STAR_ = true;
cemerick.cljs.test._STAR_test_ctx_STAR_ = null;
cemerick.cljs.test.init_test_environment_STAR_ = function init_test_environment_STAR_(aux_data) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, cljs.core.assoc.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), cljs.core.truth_(cemerick.cljs.test._STAR_test_print_fn_STAR_) ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143), cemerick.cljs.test._STAR_test_print_fn_STAR_], null) : null), new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128), cljs.core.List.EMPTY), aux_data));
};
cemerick.cljs.test.init_test_environment = function init_test_environment() {
  var G__19825 = cemerick.cljs.test.init_test_environment_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786), cljs.core.List.EMPTY], null));
  cljs.core.swap_BANG_.call(null, G__19825, cljs.core.assoc, new cljs.core.Keyword(null, "async", "async", 1050769601), cemerick.cljs.test.init_test_environment_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY));
  return G__19825;
};
cemerick.cljs.test.registered_tests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_test_hooks = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_fixtures = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.register_test_BANG_ = function register_test_BANG_(ns, name, fn) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_tests, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns], null), cljs.core.assoc, name, fn);
};
cemerick.cljs.test.register_test_ns_hook_BANG_ = function register_test_ns_hook_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_test_hooks, cljs.core.assoc, ns, name);
};
cemerick.cljs.test.TestContext = function(test_env, test_name, __meta, __extmap) {
  this.test_env = test_env;
  this.test_name = test_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4259__auto__, k__4260__auto__) {
  var self__ = this;
  var this__4259__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4259__auto____$1, k__4260__auto__, null);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4261__auto__, k19827, else__4262__auto__) {
  var self__ = this;
  var this__4261__auto____$1 = this;
  var G__19829 = k19827 instanceof cljs.core.Keyword ? k19827.fqn : null;
  switch(G__19829) {
    case "test-name":
      return self__.test_name;
      break;
    case "test-env":
      return self__.test_env;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k19827, else__4262__auto__);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4273__auto__, writer__4274__auto__, opts__4275__auto__) {
  var self__ = this;
  var this__4273__auto____$1 = this;
  var pr_pair__4276__auto__ = function(this__4273__auto____$1) {
    return function(keyval__4277__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4274__auto__, cljs.core.pr_writer, "", " ", "", opts__4275__auto__, keyval__4277__auto__);
    };
  }(this__4273__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4274__auto__, pr_pair__4276__auto__, "#cemerick.cljs.test.TestContext{", ", ", "}", opts__4275__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4257__auto__) {
  var self__ = this;
  var this__4257__auto____$1 = this;
  return self__.__meta;
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4253__auto__) {
  var self__ = this;
  var this__4253__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4263__auto__) {
  var self__ = this;
  var this__4263__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4254__auto__) {
  var self__ = this;
  var this__4254__auto____$1 = this;
  var h__4074__auto__ = self__.__hash;
  if (!(h__4074__auto__ == null)) {
    return h__4074__auto__;
  } else {
    var h__4074__auto____$1 = cljs.core.hash_imap.call(null, this__4254__auto____$1);
    self__.__hash = h__4074__auto____$1;
    return h__4074__auto____$1;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4255__auto__, other__4256__auto__) {
  var self__ = this;
  var this__4255__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3651__auto__ = other__4256__auto__;
    if (cljs.core.truth_(and__3651__auto__)) {
      return this__4255__auto____$1.constructor === other__4256__auto__.constructor && cljs.core.equiv_map.call(null, this__4255__auto____$1, other__4256__auto__);
    } else {
      return and__3651__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4268__auto__, k__4269__auto__) {
  var self__ = this;
  var this__4268__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), null], null), null), k__4269__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4268__auto____$1), self__.__meta), k__4269__auto__);
  } else {
    return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4269__auto__)), null);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4266__auto__, k__4267__auto__, G__19826) {
  var self__ = this;
  var this__4266__auto____$1 = this;
  var pred__19830 = cljs.core.keyword_identical_QMARK_;
  var expr__19831 = k__4267__auto__;
  if (cljs.core.truth_(pred__19830.call(null, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), expr__19831))) {
    return new cemerick.cljs.test.TestContext(G__19826, self__.test_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19830.call(null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), expr__19831))) {
      return new cemerick.cljs.test.TestContext(self__.test_env, G__19826, self__.__meta, self__.__extmap, null);
    } else {
      return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4267__auto__, G__19826), null);
    }
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4271__auto__) {
  var self__ = this;
  var this__4271__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), 
  self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4258__auto__, G__19826) {
  var self__ = this;
  var this__4258__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, G__19826, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4264__auto__, entry__4265__auto__) {
  var self__ = this;
  var this__4264__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4265__auto__)) {
    return cljs.core._assoc.call(null, this__4264__auto____$1, cljs.core._nth.call(null, entry__4265__auto__, 0), cljs.core._nth.call(null, entry__4265__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4264__auto____$1, entry__4265__auto__);
  }
};
cemerick.cljs.test.TestContext.cljs$lang$type = true;
cemerick.cljs.test.TestContext.cljs$lang$ctorPrSeq = function(this__4293__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.TestContext.cljs$lang$ctorPrWriter = function(this__4293__auto__, writer__4294__auto__) {
  return cljs.core._write.call(null, writer__4294__auto__, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.__GT_TestContext = function __GT_TestContext(test_env, test_name) {
  return new cemerick.cljs.test.TestContext(test_env, test_name);
};
cemerick.cljs.test.map__GT_TestContext = function map__GT_TestContext(G__19828) {
  return new cemerick.cljs.test.TestContext((new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(G__19828), (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(G__19828), null, cljs.core.dissoc.call(null, G__19828, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), new cljs.core.Keyword(null, "test-name", "test-name", -675595913)));
};
cemerick.cljs.test.maybe_deref = function maybe_deref(x) {
  if (function() {
    var G__19835 = x;
    if (G__19835) {
      var bit__4327__auto__ = G__19835.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4327__auto__ || G__19835.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__19835.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__19835);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__19835);
    }
  }()) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cemerick.cljs.test.testing_complete_QMARK_ = function testing_complete_QMARK_(test_env) {
  var map__19837 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__19837__$1 = cljs.core.seq_QMARK_.call(null, map__19837) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19837) : map__19837;
  var remaining = cljs.core.get.call(null, map__19837__$1, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312));
  var running = cljs.core.get.call(null, map__19837__$1, new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558));
  var async = cljs.core.get.call(null, map__19837__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var and__3651__auto__ = cljs.core.empty_QMARK_.call(null, remaining);
  if (and__3651__auto__) {
    var and__3651__auto____$1 = cljs.core.empty_QMARK_.call(null, running);
    if (and__3651__auto____$1) {
      var or__3663__auto__ = async == null;
      if (or__3663__auto__) {
        return or__3663__auto__;
      } else {
        return testing_complete_QMARK_.call(null, async);
      }
    } else {
      return and__3651__auto____$1;
    }
  } else {
    return and__3651__auto__;
  }
};
cemerick.cljs.test.on_async_progress = function on_async_progress(test_env, callback) {
  if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env))) {
    setTimeout(function() {
      return callback.call(null, test_env);
    }, 1);
  } else {
    cljs.core.add_watch.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cemerick.cljs.test.maybe_deref.call(null, test_env)), cljs.core.gensym.call(null, "on-progress"), function(key, ref, old, new$) {
      var vec__19840 = cljs.core.map.call(null, function(p1__19838_SHARP_) {
        return cljs.core.select_keys.call(null, p1__19838_SHARP_, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test", "test", 577538877), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "error", "error", -978969032)], null));
      }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old, new$], null));
      var oldv = cljs.core.nth.call(null, vec__19840, 0, null);
      var newv = cljs.core.nth.call(null, vec__19840, 1, null);
      var complete_QMARK_ = cemerick.cljs.test.testing_complete_QMARK_.call(null, new$);
      if (cljs.core.truth_(function() {
        var or__3663__auto__ = complete_QMARK_;
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, oldv, newv);
        }
      }())) {
        callback.call(null, cemerick.cljs.test.maybe_deref.call(null, test_env));
      } else {
      }
      if (cljs.core.truth_(complete_QMARK_)) {
        return cljs.core.remove_watch.call(null, ref, key);
      } else {
        return null;
      }
    });
  }
  return test_env;
};
goog.exportSymbol("cemerick.cljs.test.on_async_progress", cemerick.cljs.test.on_async_progress);
cemerick.cljs.test.on_testing_complete = function on_testing_complete(test_env, callback) {
  return cemerick.cljs.test.on_async_progress.call(null, test_env, function(test_env__$1) {
    if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env__$1))) {
      return callback.call(null, test_env__$1);
    } else {
      return null;
    }
  });
};
goog.exportSymbol("cemerick.cljs.test.on_testing_complete", cemerick.cljs.test.on_testing_complete);
cemerick.cljs.test.testing_vars_str = function testing_vars_str(p__19841) {
  var map__19843 = p__19841;
  var map__19843__$1 = cljs.core.seq_QMARK_.call(null, map__19843) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19843) : map__19843;
  var m = map__19843__$1;
  var test_name = cljs.core.get.call(null, map__19843__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
  var test_env = cljs.core.get.call(null, map__19843__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var line = cljs.core.get.call(null, map__19843__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var file = cljs.core.get.call(null, map__19843__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, function() {
    var or__3663__auto__ = cljs.core.seq.call(null, cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env))));
    if (or__3663__auto__) {
      return or__3663__auto__;
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, test_name);
    }
  }())) + " (" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(file) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(line) + ")";
};
cemerick.cljs.test.testing_contexts_str = function testing_contexts_str(test_env) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))));
};
cemerick.cljs.test.inc_report_counter = function inc_report_counter(test_env, name) {
  return cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
};
cemerick.cljs.test.report = function() {
  var method_table__4543__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4544__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4545__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4546__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4547__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("report", new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4547__auto__, method_table__4543__auto__, prefer_table__4544__auto__, method_cache__4545__auto__, cached_hierarchy__4546__auto__);
}();
cemerick.cljs.test.file_and_line = function file_and_line(error) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), error.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), error.lineNumber], null);
};
cemerick.cljs.test.do_report = function() {
  var do_report = null;
  var do_report__1 = function(m) {
    return cemerick.cljs.test.report.call(null, function() {
      var G__19848 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
      switch(G__19848) {
        case "error":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)), m);
          break;
        case "fail":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, Error()), m);
          break;
        default:
          return m;
      }
    }());
  };
  var do_report__2 = function(p__19844, m) {
    var map__19847 = p__19844;
    var map__19847__$1 = cljs.core.seq_QMARK_.call(null, map__19847) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19847) : map__19847;
    var test_ctx = map__19847__$1;
    var test_name = cljs.core.get.call(null, map__19847__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__19847__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    return do_report.call(null, cljs.core.merge.call(null, m, test_ctx));
  };
  do_report = function(p__19844, m) {
    switch(arguments.length) {
      case 1:
        return do_report__1.call(this, p__19844);
      case 2:
        return do_report__2.call(this, p__19844, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  do_report.cljs$core$IFn$_invoke$arity$1 = do_report__1;
  do_report.cljs$core$IFn$_invoke$arity$2 = do_report__2;
  return do_report;
}();
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__19850) {
  var map__19851 = p__19850;
  var map__19851__$1 = cljs.core.seq_QMARK_.call(null, map__19851) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19851) : map__19851;
  var m = map__19851__$1;
  var test_env = cljs.core.get.call(null, map__19851__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_19852 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3663__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.prn.call(null, m);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_19852;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "pass", "pass", 1574159993), function(p__19853) {
  var map__19854 = p__19853;
  var map__19854__$1 = cljs.core.seq_QMARK_.call(null, map__19854) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19854) : map__19854;
  var m = map__19854__$1;
  var test_env = cljs.core.get.call(null, map__19854__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_19855 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3663__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_19855;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "fail", "fail", 1706214930), function(p__19856) {
  var map__19857 = p__19856;
  var map__19857__$1 = cljs.core.seq_QMARK_.call(null, map__19857) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19857) : map__19857;
  var m = map__19857__$1;
  var test_env = cljs.core.get.call(null, map__19857__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_19858 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3663__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
    cljs.core.println.call(null, "\nFAIL in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___19859 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___19859)) {
      var message_19860 = temp__4126__auto___19859;
      cljs.core.println.call(null, message_19860);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_19858;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "error", "error", -978969032), function(p__19861) {
  var map__19862 = p__19861;
  var map__19862__$1 = cljs.core.seq_QMARK_.call(null, map__19862) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19862) : map__19862;
  var m = map__19862__$1;
  var test_env = cljs.core.get.call(null, map__19862__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_19863 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3663__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "error", "error", -978969032));
    cljs.core.println.call(null, "\nERROR in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___19864 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___19864)) {
      var message_19865 = temp__4126__auto___19864;
      cljs.core.println.call(null, message_19865);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    cljs.core.print.call(null, "  actual: ");
    var actual = (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m);
    if (actual instanceof Error) {
      return cljs.core.println.call(null, actual.stack);
    } else {
      return cljs.core.prn.call(null, actual);
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_19863;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), function(p__19866) {
  var map__19867 = p__19866;
  var map__19867__$1 = cljs.core.seq_QMARK_.call(null, map__19867) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19867) : map__19867;
  var m = map__19867__$1;
  var test_env = cljs.core.get.call(null, map__19867__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_19868 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3663__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709));
    cljs.core.println.call(null, "\nWARNING in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var message = temp__4126__auto__;
      return cljs.core.println.call(null, message);
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_19868;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "summary", "summary", 380847952), function(p__19869) {
  var map__19870 = p__19869;
  var map__19870__$1 = cljs.core.seq_QMARK_.call(null, map__19870) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19870) : map__19870;
  var test_env = map__19870__$1;
  var error = cljs.core.get.call(null, map__19870__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__19870__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var pass = cljs.core.get.call(null, map__19870__$1, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  var test = cljs.core.get.call(null, map__19870__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var _STAR_print_fn_STAR_19871 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3663__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cljs.core.println.call(null, "\nRan", test, "tests containing", pass + fail + error, "assertions.");
    var temp__4124__auto__ = function() {
      var and__3651__auto__ = cljs.core.not.call(null, cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env));
      if (and__3651__auto__) {
        return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, cljs.core.juxt.call(null, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312), new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env)))));
      } else {
        return and__3651__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var pending_count = temp__4124__auto__;
      return cljs.core.println.call(null, "Waiting on", pending_count, "asynchronous test" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pending_count > 1 ? "s" : null) + " to complete.");
    } else {
      return cljs.core.println.call(null, "Testing complete:", fail, "failures,", error, "errors.");
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_19871;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), function(p__19872) {
  var map__19873 = p__19872;
  var map__19873__$1 = cljs.core.seq_QMARK_.call(null, map__19873) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19873) : map__19873;
  var m = map__19873__$1;
  var async = cljs.core.get.call(null, map__19873__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var test_env = cljs.core.get.call(null, map__19873__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var ns = cljs.core.get.call(null, map__19873__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var _STAR_print_fn_STAR_19874 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3663__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.println.call(null, "\nTesting", ns, cljs.core.truth_(async) ? "(async)" : "");
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_19874;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), function(p__19875) {
  var map__19876 = p__19875;
  var map__19876__$1 = cljs.core.seq_QMARK_.call(null, map__19876) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19876) : map__19876;
  var m = map__19876__$1;
  var test_env = cljs.core.get.call(null, map__19876__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), function(p__19877) {
  var map__19878 = p__19877;
  var map__19878__$1 = cljs.core.seq_QMARK_.call(null, map__19878) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19878) : map__19878;
  var m = map__19878__$1;
  var test_env = cljs.core.get.call(null, map__19878__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), function(p__19879) {
  var map__19880 = p__19879;
  var map__19880__$1 = cljs.core.seq_QMARK_.call(null, map__19880) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19880) : map__19880;
  var m = map__19880__$1;
  var test_env = cljs.core.get.call(null, map__19880__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cemerick.cljs.test.register_fixtures_BANG_ = function() {
  var register_fixtures_BANG___delegate = function(ns_sym, fixture_type, fixture_fns) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_fixtures, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns_sym, fixture_type], null), cljs.core.constantly.call(null, fixture_fns));
  };
  var register_fixtures_BANG_ = function(ns_sym, fixture_type, var_args) {
    var fixture_fns = null;
    if (arguments.length > 2) {
      fixture_fns = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return register_fixtures_BANG___delegate.call(this, ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$lang$maxFixedArity = 2;
  register_fixtures_BANG_.cljs$lang$applyTo = function(arglist__19881) {
    var ns_sym = cljs.core.first(arglist__19881);
    arglist__19881 = cljs.core.next(arglist__19881);
    var fixture_type = cljs.core.first(arglist__19881);
    var fixture_fns = cljs.core.rest(arglist__19881);
    return register_fixtures_BANG___delegate(ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$core$IFn$_invoke$arity$variadic = register_fixtures_BANG___delegate;
  return register_fixtures_BANG_;
}();
cemerick.cljs.test.default_fixture = function default_fixture(f) {
  return f.call(null);
};
cemerick.cljs.test.compose_fixtures = function compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cemerick.cljs.test.join_fixtures = function join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cemerick.cljs.test.compose_fixtures, cemerick.cljs.test.default_fixture, fixtures);
};
cemerick.cljs.test.async_test_QMARK_ = function async_test_QMARK_(test_fn) {
  return cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, test_fn)));
};
cemerick.cljs.test.test_async_fn = function test_async_fn(async_test_env, test_name, test_fn) {
  cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), test_fn, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name], null));
  cemerick.cljs.test.inc_report_counter.call(null, async_test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
  return test_fn.call(null, new cemerick.cljs.test.TestContext(async_test_env, test_name));
};
cemerick.cljs.test.start_next_async_test = function start_next_async_test(async_test_env) {
  var next_test = cljs.core.atom.call(null, function() {
    return null;
  });
  cljs.core.swap_BANG_.call(null, async_test_env, function(next_test) {
    return function(env) {
      var temp__4124__auto__ = function() {
        var and__3651__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "stop", "stop", -2140911342)).cljs$core$IFn$_invoke$arity$1(env));
        if (and__3651__auto__) {
          return cljs.core.first.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(env));
        } else {
          return and__3651__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__19883 = temp__4124__auto__;
        var name = cljs.core.nth.call(null, vec__19883, 0, null);
        var testfn = cljs.core.nth.call(null, vec__19883, 1, null);
        cljs.core.reset_BANG_.call(null, next_test, testfn);
        var ns_19884 = cljs.core.namespace.call(null, name);
        if (cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, async_test_env)), ns_19884)) {
        } else {
          cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_19884, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "async", "async", 1050769601), true], null));
          cljs.core.alter_meta_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), ns_19884);
        }
        return cljs.core.update_in.call(null, cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.dissoc, name), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.assoc, 
        name, new Date);
      } else {
        return env;
      }
    };
  }(next_test));
  setTimeout(function(next_test) {
    return function() {
      return cljs.core.deref.call(null, next_test).call(null);
    };
  }(next_test), 1);
  return async_test_env;
};
cemerick.cljs.test.squelch_internals = function squelch_internals(test_env) {
  var G__19889 = test_env;
  cljs.core.swap_BANG_.call(null, G__19889, function(G__19889) {
    return function(p1__19885_SHARP_) {
      return cljs.core.reduce.call(null, function(G__19889) {
        return function(env, p__19890) {
          var vec__19891 = p__19890;
          var k = cljs.core.nth.call(null, vec__19891, 0, null);
          var v = cljs.core.nth.call(null, vec__19891, 1, null);
          if (cljs.core._EQ_.call(null, cljs.core.namespace.call(null, k), cljs.core.namespace.call(null, new cljs.core.Keyword("cemerick.cljs.test", "foo", "cemerick.cljs.test/foo", -1669146357)))) {
            return env;
          } else {
            return cljs.core.assoc.call(null, env, k, v);
          }
        };
      }(G__19889), cljs.core.PersistentArrayMap.EMPTY, p1__19885_SHARP_);
    };
  }(G__19889));
  return G__19889;
};
cemerick.cljs.test.finish_test_entry_point = function finish_test_entry_point(entry_point_QMARK_, test_env) {
  if (cljs.core.truth_(entry_point_QMARK_)) {
    if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))))) {
      cljs.core.swap_BANG_.call(null, test_env, cljs.core.dissoc, new cljs.core.Keyword(null, "async", "async", 1050769601));
    } else {
      cemerick.cljs.test.start_next_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)));
    }
    return cljs.core.deref.call(null, cemerick.cljs.test.squelch_internals.call(null, test_env));
  } else {
    return test_env;
  }
};
cemerick.cljs.test.schedule_async_test = function schedule_async_test(async_test_env, test_name, test_fn) {
  cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.fnil.call(null, cljs.core.assoc, cljs.core.sorted_map.call(null)), test_name, cljs.core.with_meta.call(null, function() {
    return cemerick.cljs.test.test_async_fn.call(null, async_test_env, test_name, test_fn);
  }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), test_name], null)));
  return async_test_env;
};
cemerick.cljs.test.done_STAR_ = function() {
  var done_STAR_ = null;
  var done_STAR___1 = function(p__19893) {
    var map__19897 = p__19893;
    var map__19897__$1 = cljs.core.seq_QMARK_.call(null, map__19897) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19897) : map__19897;
    var test_ctx = map__19897__$1;
    var test_name = cljs.core.get.call(null, map__19897__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var async_test_env = cljs.core.get.call(null, map__19897__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    var first_call_QMARK_ = cljs.core.atom.call(null, false);
    cljs.core.swap_BANG_.call(null, async_test_env, function(first_call_QMARK_, map__19897, map__19897__$1, test_ctx, test_name, async_test_env) {
      return function(env) {
        cljs.core.reset_BANG_.call(null, first_call_QMARK_, cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).cljs$core$IFn$_invoke$arity$1(env), test_name));
        return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.dissoc, test_name);
      };
    }(first_call_QMARK_, map__19897, map__19897__$1, test_ctx, test_name, async_test_env));
    if (cljs.core.truth_(cljs.core.deref.call(null, first_call_QMARK_))) {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), test_name], null), test_ctx));
      if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, async_test_env))) {
        cemerick.cljs.test.squelch_internals.call(null, async_test_env);
      } else {
        cemerick.cljs.test.start_next_async_test.call(null, async_test_env);
      }
    } else {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), new cljs.core.Keyword(null, "message", "message", -406056002), "`(done)` called multiple times to signal end-of-test"], null), test_ctx));
    }
    return async_test_env;
  };
  var done_STAR___2 = function(p__19892, error) {
    var map__19896 = p__19892;
    var map__19896__$1 = cljs.core.seq_QMARK_.call(null, map__19896) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19896) : map__19896;
    var test_ctx = map__19896__$1;
    var test_name = cljs.core.get.call(null, map__19896__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__19896__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    cemerick.cljs.test.do_report.call(null, cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), 
    error], null), test_ctx)));
    return done_STAR_.call(null, test_ctx);
  };
  done_STAR_ = function(p__19892, error) {
    switch(arguments.length) {
      case 1:
        return done_STAR___1.call(this, p__19892);
      case 2:
        return done_STAR___2.call(this, p__19892, error);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  done_STAR_.cljs$core$IFn$_invoke$arity$1 = done_STAR___1;
  done_STAR_.cljs$core$IFn$_invoke$arity$2 = done_STAR___2;
  return done_STAR_;
}();
cemerick.cljs.test.stop = function stop(async_test_env) {
  return cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.assoc, new cljs.core.Keyword(null, "stop", "stop", -2140911342), true);
};
cemerick.cljs.test.test_function = function() {
  var test_function = null;
  var test_function__1 = function(v) {
    return test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), v);
  };
  var test_function__2 = function(test_env, v) {
    var entry_point_QMARK___15639__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_19901 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      if (cljs.core.fn_QMARK_.call(null, v)) {
      } else {
        throw new Error("Assert failed: test-var must be passed the function to be tested (not a symbol naming it)\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)))));
      }
      var map__19902_19904 = cljs.core.meta.call(null, v);
      var map__19902_19905__$1 = cljs.core.seq_QMARK_.call(null, map__19902_19904) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19902_19904) : map__19902_19904;
      var t_19906 = cljs.core.get.call(null, map__19902_19905__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
      var test_name_19907 = cljs.core.get.call(null, map__19902_19905__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var async_QMARK__19908 = cljs.core.get.call(null, map__19902_19905__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
      if (cljs.core.truth_(t_19906)) {
        if (cljs.core.truth_(async_QMARK__19908)) {
          cemerick.cljs.test.schedule_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), test_name_19907, t_19906);
        } else {
          try {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.conj, function() {
              var or__3663__auto__ = test_name_19907;
              if (cljs.core.truth_(or__3663__auto__)) {
                return or__3663__auto__;
              } else {
                return v;
              }
            }());
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_19907], null));
            cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
            try {
              t_19906.call(null, new cemerick.cljs.test.TestContext(test_env, test_name_19907));
            } catch (e19903) {
              if (e19903 instanceof Error) {
                var e_19909 = e19903;
                cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_19907, new cljs.core.Keyword(null, 
                "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e_19909], null));
              } else {
                throw e19903;
              }
            }
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_19907], null));
          } finally {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.pop);
          }
        }
      } else {
      }
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15639__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_19901;
    }
  };
  test_function = function(test_env, v) {
    switch(arguments.length) {
      case 1:
        return test_function__1.call(this, test_env);
      case 2:
        return test_function__2.call(this, test_env, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_function.cljs$core$IFn$_invoke$arity$1 = test_function__1;
  test_function.cljs$core$IFn$_invoke$arity$2 = test_function__2;
  return test_function;
}();
cemerick.cljs.test.test_all_vars = function() {
  var test_all_vars = null;
  var test_all_vars__1 = function(ns_sym) {
    return test_all_vars.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_all_vars__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___15639__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_19918 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var tests_19923 = cljs.core.filter.call(null, function(_STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__) {
        return function(p1__19910_SHARP_) {
          return(new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__19910_SHARP_));
        };
      }(_STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__), cljs.core.vals.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests), ns_sym)));
      var once_fixture_fn_19924 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "once", "once", -262568523)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      var each_fixture_fn_19925 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "each", "each", 940016129)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      once_fixture_fn_19924.call(null, function(once_fixture_fn_19924, each_fixture_fn_19925, tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__) {
        return function() {
          var seq__19919 = cljs.core.seq.call(null, cljs.core.remove.call(null, cemerick.cljs.test.async_test_QMARK_, tests_19923));
          var chunk__19920 = null;
          var count__19921 = 0;
          var i__19922 = 0;
          while (true) {
            if (i__19922 < count__19921) {
              var v = cljs.core._nth.call(null, chunk__19920, i__19922);
              each_fixture_fn_19925.call(null, function(seq__19919, chunk__19920, count__19921, i__19922, v, once_fixture_fn_19924, each_fixture_fn_19925, tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__) {
                return function() {
                  return cemerick.cljs.test.test_function.call(null, test_env, v);
                };
              }(seq__19919, chunk__19920, count__19921, i__19922, v, once_fixture_fn_19924, each_fixture_fn_19925, tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__));
              var G__19926 = seq__19919;
              var G__19927 = chunk__19920;
              var G__19928 = count__19921;
              var G__19929 = i__19922 + 1;
              seq__19919 = G__19926;
              chunk__19920 = G__19927;
              count__19921 = G__19928;
              i__19922 = G__19929;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__19919);
              if (temp__4126__auto__) {
                var seq__19919__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__19919__$1)) {
                  var c__4433__auto__ = cljs.core.chunk_first.call(null, seq__19919__$1);
                  var G__19930 = cljs.core.chunk_rest.call(null, seq__19919__$1);
                  var G__19931 = c__4433__auto__;
                  var G__19932 = cljs.core.count.call(null, c__4433__auto__);
                  var G__19933 = 0;
                  seq__19919 = G__19930;
                  chunk__19920 = G__19931;
                  count__19921 = G__19932;
                  i__19922 = G__19933;
                  continue;
                } else {
                  var v = cljs.core.first.call(null, seq__19919__$1);
                  each_fixture_fn_19925.call(null, function(seq__19919, chunk__19920, count__19921, i__19922, v, seq__19919__$1, temp__4126__auto__, once_fixture_fn_19924, each_fixture_fn_19925, tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__) {
                    return function() {
                      return cemerick.cljs.test.test_function.call(null, test_env, v);
                    };
                  }(seq__19919, chunk__19920, count__19921, i__19922, v, seq__19919__$1, temp__4126__auto__, once_fixture_fn_19924, each_fixture_fn_19925, tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__));
                  var G__19934 = cljs.core.next.call(null, seq__19919__$1);
                  var G__19935 = null;
                  var G__19936 = 0;
                  var G__19937 = 0;
                  seq__19919 = G__19934;
                  chunk__19920 = G__19935;
                  count__19921 = G__19936;
                  i__19922 = G__19937;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(once_fixture_fn_19924, each_fixture_fn_19925, tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__));
      cljs.core.reduce.call(null, function(tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__) {
        return function(p1__19911_SHARP_, p2__19912_SHARP_) {
          return cljs.core.apply.call(null, cemerick.cljs.test.schedule_async_test, p1__19911_SHARP_, p2__19912_SHARP_);
        };
      }(tests_19923, _STAR_entry_point_STAR_19918, entry_point_QMARK___15639__auto__), (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.juxt.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "test", "test", 577538877)), cljs.core.meta), cljs.core.filter.call(null, cemerick.cljs.test.async_test_QMARK_, tests_19923)));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15639__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_19918;
    }
  };
  test_all_vars = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_all_vars__1.call(this, test_env);
      case 2:
        return test_all_vars__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_all_vars.cljs$core$IFn$_invoke$arity$1 = test_all_vars__1;
  test_all_vars.cljs$core$IFn$_invoke$arity$2 = test_all_vars__2;
  return test_all_vars;
}();
cemerick.cljs.test.test_ns = function() {
  var test_ns = null;
  var test_ns__1 = function(ns_sym) {
    return test_ns.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_ns__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___15639__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_19939 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      var temp__4124__auto___19940 = cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_test_hooks), ns_sym);
      if (cljs.core.truth_(temp__4124__auto___19940)) {
        var test_hook_19941 = temp__4124__auto___19940;
        test_hook_19941.call(null, test_env);
      } else {
        cemerick.cljs.test.test_all_vars.call(null, test_env, ns_sym);
      }
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15639__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_19939;
    }
  };
  test_ns = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_ns__1.call(this, test_env);
      case 2:
        return test_ns__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_ns.cljs$core$IFn$_invoke$arity$1 = test_ns__1;
  test_ns.cljs$core$IFn$_invoke$arity$2 = test_ns__2;
  return test_ns;
}();
cemerick.cljs.test.test_summary = function test_summary(test_env) {
  var test_env__$1 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  return cemerick.cljs.test.do_report.call(null, cljs.core.assoc.call(null, cljs.core.merge_with.call(null, cljs.core._PLUS_, test_env__$1, cemerick.cljs.test.maybe_deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env__$1))), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952)));
};
cemerick.cljs.test.run_tests_STAR_ = function() {
  var run_tests_STAR___delegate = function(namespaces) {
    var vec__19948 = cljs.core.first.call(null, namespaces) instanceof cljs.core.Atom ? namespaces : cljs.core.cons.call(null, cemerick.cljs.test.init_test_environment.call(null), namespaces);
    var test_env = cljs.core.nth.call(null, vec__19948, 0, null);
    var namespaces__$1 = cljs.core.nthnext.call(null, vec__19948, 1);
    var entry_point_QMARK___15639__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_19949 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var seq__19950_19954 = cljs.core.seq.call(null, cljs.core.distinct.call(null, namespaces__$1));
      var chunk__19951_19955 = null;
      var count__19952_19956 = 0;
      var i__19953_19957 = 0;
      while (true) {
        if (i__19953_19957 < count__19952_19956) {
          var ns_19958 = cljs.core._nth.call(null, chunk__19951_19955, i__19953_19957);
          cemerick.cljs.test.test_ns.call(null, test_env, ns_19958);
          var G__19959 = seq__19950_19954;
          var G__19960 = chunk__19951_19955;
          var G__19961 = count__19952_19956;
          var G__19962 = i__19953_19957 + 1;
          seq__19950_19954 = G__19959;
          chunk__19951_19955 = G__19960;
          count__19952_19956 = G__19961;
          i__19953_19957 = G__19962;
          continue;
        } else {
          var temp__4126__auto___19963 = cljs.core.seq.call(null, seq__19950_19954);
          if (temp__4126__auto___19963) {
            var seq__19950_19964__$1 = temp__4126__auto___19963;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19950_19964__$1)) {
              var c__4433__auto___19965 = cljs.core.chunk_first.call(null, seq__19950_19964__$1);
              var G__19966 = cljs.core.chunk_rest.call(null, seq__19950_19964__$1);
              var G__19967 = c__4433__auto___19965;
              var G__19968 = cljs.core.count.call(null, c__4433__auto___19965);
              var G__19969 = 0;
              seq__19950_19954 = G__19966;
              chunk__19951_19955 = G__19967;
              count__19952_19956 = G__19968;
              i__19953_19957 = G__19969;
              continue;
            } else {
              var ns_19970 = cljs.core.first.call(null, seq__19950_19964__$1);
              cemerick.cljs.test.test_ns.call(null, test_env, ns_19970);
              var G__19971 = cljs.core.next.call(null, seq__19950_19964__$1);
              var G__19972 = null;
              var G__19973 = 0;
              var G__19974 = 0;
              seq__19950_19954 = G__19971;
              chunk__19951_19955 = G__19972;
              count__19952_19956 = G__19973;
              i__19953_19957 = G__19974;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cemerick.cljs.test.on_testing_complete.call(null, test_env, cemerick.cljs.test.test_summary);
      cemerick.cljs.test.test_summary.call(null, test_env);
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15639__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_19949;
    }
  };
  var run_tests_STAR_ = function(var_args) {
    var namespaces = null;
    if (arguments.length > 0) {
      namespaces = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return run_tests_STAR___delegate.call(this, namespaces);
  };
  run_tests_STAR_.cljs$lang$maxFixedArity = 0;
  run_tests_STAR_.cljs$lang$applyTo = function(arglist__19975) {
    var namespaces = cljs.core.seq(arglist__19975);
    return run_tests_STAR___delegate(namespaces);
  };
  run_tests_STAR_.cljs$core$IFn$_invoke$arity$variadic = run_tests_STAR___delegate;
  return run_tests_STAR_;
}();
goog.exportSymbol("cemerick.cljs.test.run_tests_STAR_", cemerick.cljs.test.run_tests_STAR_);
cemerick.cljs.test.run_all_tests = function() {
  var run_all_tests = null;
  var run_all_tests__0 = function() {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests)));
  };
  var run_all_tests__1 = function(re) {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.filter.call(null, function(p1__19976_SHARP_) {
      return cljs.core.re_matches.call(null, re, cljs.core.name.call(null, p1__19976_SHARP_));
    }, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests))));
  };
  run_all_tests = function(re) {
    switch(arguments.length) {
      case 0:
        return run_all_tests__0.call(this);
      case 1:
        return run_all_tests__1.call(this, re);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run_all_tests.cljs$core$IFn$_invoke$arity$0 = run_all_tests__0;
  run_all_tests.cljs$core$IFn$_invoke$arity$1 = run_all_tests__1;
  return run_all_tests;
}();
goog.exportSymbol("cemerick.cljs.test.run_all_tests", cemerick.cljs.test.run_all_tests);
cemerick.cljs.test.successful_QMARK_ = function successful_QMARK_(test_env) {
  var map__19978 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__19978__$1 = cljs.core.seq_QMARK_.call(null, map__19978) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19978) : map__19978;
  var async = cljs.core.get.call(null, map__19978__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var error = cljs.core.get.call(null, map__19978__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__19978__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var and__3651__auto__ = cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env);
  if (cljs.core.truth_(and__3651__auto__)) {
    var and__3651__auto____$1 = function() {
      var or__3663__auto__ = fail;
      if (cljs.core.truth_(or__3663__auto__)) {
        return or__3663__auto__;
      } else {
        return 0;
      }
    }() === 0;
    if (and__3651__auto____$1) {
      var and__3651__auto____$2 = function() {
        var or__3663__auto__ = error;
        if (cljs.core.truth_(or__3663__auto__)) {
          return or__3663__auto__;
        } else {
          return 0;
        }
      }() === 0;
      if (and__3651__auto____$2) {
        var or__3663__auto__ = async == null;
        if (or__3663__auto__) {
          return or__3663__auto__;
        } else {
          return successful_QMARK_.call(null, async);
        }
      } else {
        return and__3651__auto____$2;
      }
    } else {
      return and__3651__auto____$1;
    }
  } else {
    return and__3651__auto__;
  }
};
goog.exportSymbol("cemerick.cljs.test.successful_QMARK_", cemerick.cljs.test.successful_QMARK_);
cemerick.cljs.test.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
goog.exportSymbol("cemerick.cljs.test.set_print_fn_BANG_", cemerick.cljs.test.set_print_fn_BANG_);
goog.provide("testt");
goog.require("cljs.core");
goog.require("peerjs");
goog.require("blockchain");
goog.require("database");
goog.require("reagent.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("cemerick.cljs.test");
goog.require("reagent.core");
goog.require("intercom");
goog.require("intercom");
goog.require("pubsub");
goog.require("blockchain");
goog.require("html");
goog.require("reagent.core");
goog.require("peerjs");
goog.require("cljs.core.async");
goog.require("database");
goog.require("communications");
goog.require("communications");
goog.require("crypt0");
goog.require("crypt0");
goog.require("logger");
goog.require("cemerick.cljs.test");
goog.require("html");
goog.require("logger");
goog.require("database");
testt.initdbase = function initdbase() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.initdbase);
};
testt.initdbase = cljs.core.with_meta.call(null, testt.initdbase, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 22, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 22, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "initdbase", "testt/initdbase", 991259270, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 22, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", 
"line", 212345235), 22, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function initdbase_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12379 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      database.cleandb.call(null);
      database.initDBase.call(null, 1);
      return database.dumpdb.call(null);
    } catch (e12380) {
      if (e12380 instanceof Error) {
        var e__10804__auto__ = e12380;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12380;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12379;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "initdbase", "testt/initdbase", 991259270, null), testt.initdbase);
blockchain.makeBlockHeader = function makeBlockHeader() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.makeBlockHeader);
};
blockchain.makeBlockHeader = cljs.core.with_meta.call(null, blockchain.makeBlockHeader, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 26, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 32, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 32, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "makeBlockHeader", "testt/makeBlockHeader", 312821479, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 26, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 32, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 32, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function makeBlockHeader_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12383 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12384) {
      if (e12384 instanceof Error) {
        var e__10804__auto__ = e12384;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12384;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12383;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "makeBlockHeader", "testt/makeBlockHeader", 312821479, null), testt.makeBlockHeader);
testt.makeBlockBlock = function makeBlockBlock() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.makeBlockBlock);
};
testt.makeBlockBlock = cljs.core.with_meta.call(null, testt.makeBlockBlock, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 25, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 36, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 36, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "makeBlockBlock", "testt/makeBlockBlock", -2090853181, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 25, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 36, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 36, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function makeBlockBlock_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12387 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12388) {
      if (e12388 instanceof Error) {
        var e__10804__auto__ = e12388;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12388;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12387;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "makeBlockBlock", "testt/makeBlockBlock", -2090853181, null), testt.makeBlockBlock);
testt.saveblock = function saveblock() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.saveblock);
};
testt.saveblock = cljs.core.with_meta.call(null, testt.saveblock, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 41, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 41, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "saveblock", "testt/saveblock", 851231593, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 41, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", 
"line", 212345235), 41, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function saveblock_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12391 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return database.cleandb.call(null);
    } catch (e12392) {
      if (e12392 instanceof Error) {
        var e__10804__auto__ = e12392;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12392;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12391;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "saveblock", "testt/saveblock", 851231593, null), testt.saveblock);
testt.blockheight = function blockheight() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.blockheight);
};
testt.blockheight = cljs.core.with_meta.call(null, testt.blockheight, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 22, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 52, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 52, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "blockheight", "testt/blockheight", -627848480, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 22, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 52, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 52, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function blockheight_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12395 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12396) {
      if (e12396 instanceof Error) {
        var e__10804__auto__ = e12396;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12396;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12395;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "blockheight", "testt/blockheight", -627848480, null), testt.blockheight);
testt.sha256 = function sha256() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.sha256);
};
testt.sha256 = cljs.core.with_meta.call(null, testt.sha256, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 17, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 56, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 56, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "sha256", "testt/sha256", -339325251, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 17, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 56, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 
56, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function sha256_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12399 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12400) {
      if (e12400 instanceof Error) {
        var e__10804__auto__ = e12400;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12400;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12399;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "sha256", "testt/sha256", -339325251, null), testt.sha256);
testt.transaction_making = function transaction_making() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.transaction_making);
};
testt.transaction_making = cljs.core.with_meta.call(null, testt.transaction_making, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 60, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 60, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "transaction-making", "testt/transaction-making", 1399216211, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 60, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 60, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function transaction_making_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12403 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12404) {
      if (e12404 instanceof Error) {
        var e__10804__auto__ = e12404;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12404;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12403;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "transaction-making", "testt/transaction-making", 1399216211, null), testt.transaction_making);
testt.merkleroot = function merkleroot() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.merkleroot);
};
testt.merkleroot = cljs.core.with_meta.call(null, testt.merkleroot, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 21, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 64, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 64, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "merkleroot", "testt/merkleroot", 1515943603, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 21, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 64, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", 
"line", 212345235), 64, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function merkleroot_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12407 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12408) {
      if (e12408 instanceof Error) {
        var e__10804__auto__ = e12408;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12408;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12407;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "merkleroot", "testt/merkleroot", 1515943603, null), testt.merkleroot);
testt.transaction_in_block = function transaction_in_block() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.transaction_in_block);
};
testt.transaction_in_block = cljs.core.with_meta.call(null, testt.transaction_in_block, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 31, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 69, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 69, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "transaction-in-block", "testt/transaction-in-block", -1858485192, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 31, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 69, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 69, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function transaction_in_block_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12411 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12412) {
      if (e12412 instanceof Error) {
        var e__10804__auto__ = e12412;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12412;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12411;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "transaction-in-block", "testt/transaction-in-block", -1858485192, null), testt.transaction_in_block);
testt.mineblock = function mineblock() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.mineblock);
};
testt.mineblock = cljs.core.with_meta.call(null, testt.mineblock, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 74, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 74, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "mineblock", "testt/mineblock", -1652160405, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 74, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", 
"line", 212345235), 74, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function mineblock_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12415 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12416) {
      if (e12416 instanceof Error) {
        var e__10804__auto__ = e12416;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12416;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12415;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "mineblock", "testt/mineblock", -1652160405, null), testt.mineblock);
testt.broadcastblock = function broadcastblock() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.broadcastblock);
};
testt.broadcastblock = cljs.core.with_meta.call(null, testt.broadcastblock, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 25, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 78, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 78, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "broadcastblock", "testt/broadcastblock", 832288060, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 25, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 78, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 78, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function broadcastblock_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12419 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12420) {
      if (e12420 instanceof Error) {
        var e__10804__auto__ = e12420;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12420;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12419;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "broadcastblock", "testt/broadcastblock", 832288060, null), testt.broadcastblock);
testt.blocksyncEmptyBase = function blocksyncEmptyBase() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.blocksyncEmptyBase);
};
testt.blocksyncEmptyBase = cljs.core.with_meta.call(null, testt.blocksyncEmptyBase, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 82, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 82, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "blocksyncEmptyBase", "testt/blocksyncEmptyBase", -1921112901, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 82, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 82, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function blocksyncEmptyBase_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12423 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12424) {
      if (e12424 instanceof Error) {
        var e__10804__auto__ = e12424;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12424;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12423;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "blocksyncEmptyBase", "testt/blocksyncEmptyBase", -1921112901, null), testt.blocksyncEmptyBase);
testt.getblocks = function getblocks() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.getblocks);
};
testt.getblocks = cljs.core.with_meta.call(null, testt.getblocks, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 87, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 87, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "getblocks", "testt/getblocks", -381015714, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 87, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", 
"line", 212345235), 87, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function getblocks_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12427 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12428) {
      if (e12428 instanceof Error) {
        var e__10804__auto__ = e12428;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12428;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12427;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "getblocks", "testt/getblocks", -381015714, null), testt.getblocks);
testt.blocksyncLowerBase = function blocksyncLowerBase() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.blocksyncLowerBase);
};
testt.blocksyncLowerBase = cljs.core.with_meta.call(null, testt.blocksyncLowerBase, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 90, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 90, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "blocksyncLowerBase", "testt/blocksyncLowerBase", 738512228, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 90, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 90, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function blocksyncLowerBase_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12431 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12432) {
      if (e12432 instanceof Error) {
        var e__10804__auto__ = e12432;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12432;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12431;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "blocksyncLowerBase", "testt/blocksyncLowerBase", 738512228, null), testt.blocksyncLowerBase);
testt.sendblocks = function sendblocks() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.sendblocks);
};
testt.sendblocks = cljs.core.with_meta.call(null, testt.sendblocks, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 21, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 95, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 95, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "sendblocks", "testt/sendblocks", 1505981122, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 21, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 95, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", 
"line", 212345235), 95, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function sendblocks_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12435 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12436) {
      if (e12436 instanceof Error) {
        var e__10804__auto__ = e12436;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12436;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12435;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "sendblocks", "testt/sendblocks", 1505981122, null), testt.sendblocks);
testt.dumpDatabase = function dumpDatabase() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.dumpDatabase);
};
testt.dumpDatabase = cljs.core.with_meta.call(null, testt.dumpDatabase, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 23, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 98, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 98, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "dumpDatabase", "testt/dumpDatabase", -599414213, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 23, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 98, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 98, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function dumpDatabase_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12439 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return database.dumpdb.call(null);
    } catch (e12440) {
      if (e12440 instanceof Error) {
        var e__10804__auto__ = e12440;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12440;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12439;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "dumpDatabase", "testt/dumpDatabase", -599414213, null), testt.dumpDatabase);
testt.blocksyncHigherBaseHasBlockInDB = function blocksyncHigherBaseHasBlockInDB() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.blocksyncHigherBaseHasBlockInDB);
};
testt.blocksyncHigherBaseHasBlockInDB = cljs.core.with_meta.call(null, testt.blocksyncHigherBaseHasBlockInDB, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 42, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 102, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 102, new cljs.core.Keyword(null, "file", "file", -1269645878), 
"/home/user/Buyan/app/test/test.cljs"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "blocksyncHigherBaseHasBlockInDB", "testt/blocksyncHigherBaseHasBlockInDB", -194653638, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 42, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 102, new cljs.core.Keyword(null, 
"column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 102, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function blocksyncHigherBaseHasBlockInDB_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12443 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12444) {
      if (e12444 instanceof Error) {
        var e__10804__auto__ = e12444;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12444;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12443;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "blocksyncHigherBaseHasBlockInDB", "testt/blocksyncHigherBaseHasBlockInDB", -194653638, null), testt.blocksyncHigherBaseHasBlockInDB);
testt.blocksyncHigherBaseDoesNotHaveBlockInDB = function blocksyncHigherBaseDoesNotHaveBlockInDB() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.blocksyncHigherBaseDoesNotHaveBlockInDB);
};
testt.blocksyncHigherBaseDoesNotHaveBlockInDB = cljs.core.with_meta.call(null, testt.blocksyncHigherBaseDoesNotHaveBlockInDB, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 50, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 105, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 105, new cljs.core.Keyword(null, "file", 
"file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "blocksyncHigherBaseDoesNotHaveBlockInDB", "testt/blocksyncHigherBaseDoesNotHaveBlockInDB", -511054535, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 50, new cljs.core.Keyword(null, "end-line", "end-line", 
1837326455), 105, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 105, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function blocksyncHigherBaseDoesNotHaveBlockInDB_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12447 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12448) {
      if (e12448 instanceof Error) {
        var e__10804__auto__ = e12448;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12448;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12447;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "blocksyncHigherBaseDoesNotHaveBlockInDB", "testt/blocksyncHigherBaseDoesNotHaveBlockInDB", -511054535, null), testt.blocksyncHigherBaseDoesNotHaveBlockInDB);
testt.blocksyncForkBase = function blocksyncForkBase() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.blocksyncForkBase);
};
testt.blocksyncForkBase = cljs.core.with_meta.call(null, testt.blocksyncForkBase, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 28, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 108, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 108, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "blocksyncForkBase", "testt/blocksyncForkBase", -156235619, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 28, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 108, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, 
"line", "line", 212345235), 108, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function blocksyncForkBase_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12451 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      return null;
    } catch (e12452) {
      if (e12452 instanceof Error) {
        var e__10804__auto__ = e12452;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12452;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12451;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "blocksyncForkBase", "testt/blocksyncForkBase", -156235619, null), testt.blocksyncForkBase);
testt.somewhat_less_wat = function somewhat_less_wat() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.somewhat_less_wat);
};
testt.somewhat_less_wat = cljs.core.with_meta.call(null, testt.somewhat_less_wat, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 111, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 111, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 111, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 111, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function somewhat_less_wat_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12458 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___10803__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_12460 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__10823__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.PersistentArrayMap.EMPTY + cljs.core.PersistentVector.EMPTY), "{}[]");
            var result__10824__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__10823__auto__);
            if (result__10824__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__10824__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__10823__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__10823__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__10824__auto__;
          } catch (e12462) {
            if (e12462 instanceof Error) {
              var t__10860__auto__ = e12462;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), t__10860__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e12462;
            }
          }
        } catch (e12461) {
          if (e12461 instanceof Error) {
            var e__10804__auto__ = e12461;
            if (cljs.core.truth_(async_QMARK___10803__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__10804__auto__);
            } else {
              throw e__10804__auto__;
            }
          } else {
            throw e12461;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12460;
      }
    } catch (e12459) {
      if (e12459 instanceof Error) {
        var e__10804__auto__ = e12459;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12459;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12458;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), testt.somewhat_less_wat);
testt.javascript_allows_div0 = function javascript_allows_div0() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.javascript_allows_div0);
};
testt.javascript_allows_div0 = cljs.core.with_meta.call(null, testt.javascript_allows_div0, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 115, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 115, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 115, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 115, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function javascript_allows_div0_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12468 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___10803__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_12470 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__10823__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (1 | 0) / (0 | 0)), 1 / 0), Infinity);
            var result__10824__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__10823__auto__);
            if (result__10824__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__10824__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__10823__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__10823__auto__)), 
              new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__10824__auto__;
          } catch (e12472) {
            if (e12472 instanceof Error) {
              var t__10860__auto__ = e12472;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", 
              -1371932971, null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__10860__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e12472;
            }
          }
        } catch (e12471) {
          if (e12471 instanceof Error) {
            var e__10804__auto__ = e12471;
            if (cljs.core.truth_(async_QMARK___10803__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__10804__auto__);
            } else {
              throw e__10804__auto__;
            }
          } else {
            throw e12471;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12470;
      }
    } catch (e12469) {
      if (e12469 instanceof Error) {
        var e__10804__auto__ = e12469;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12469;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12468;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), testt.javascript_allows_div0);
testt.pennies__GT_dollar_string = function pennies__GT_dollar_string(pennies) {
  if (cljs.core.integer_QMARK_.call(null, pennies)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "integer?", "integer?", 1303791671, null), new cljs.core.Symbol(null, "pennies", "pennies", -807392060, null)))));
  }
  return "$" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pennies / 100 | 0) + "." + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.mod.call(null, pennies, 100));
};
testt.pennies__GT_dollar_string = cljs.core.with_meta.call(null, testt.pennies__GT_dollar_string, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 119, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 119, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 119, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, 
new cljs.core.Keyword(null, "line", "line", 212345235), 119, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function pennies__GT_dollar_string_test(test_ctx__10888__auto__) {
  var _test_ctx = test_ctx__10888__auto__;
  var async_QMARK___10803__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_12479 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto__) ? null : _test_ctx;
    try {
      try {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "assertions are nice");
        var _test_ctx__$1 = _test_ctx;
        var async_QMARK___10803__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
        var _STAR_test_ctx_STAR_12481 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        try {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___10803__auto____$1) ? null : _test_ctx__$1;
          try {
            try {
              try {
                testt.pennies__GT_dollar_string.call(null, 564.2);
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), null, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } catch (e12484) {
                if (e12484 instanceof Error) {
                  var e__10854__auto__ = e12484;
                  var m__10855__auto___12485 = e__10854__auto__.message;
                  if (cljs.core.truth_(cljs.core.re_find.call(null, /integer?/, m__10855__auto___12485))) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__10854__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__10854__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                  return e__10854__auto__;
                } else {
                  throw e12484;
                }
              }
            } catch (e12483) {
              if (e12483 instanceof Error) {
                var t__10860__auto__ = e12483;
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__10860__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e12483;
              }
            }
          } catch (e12482) {
            if (e12482 instanceof Error) {
              var e__10804__auto__ = e12482;
              if (cljs.core.truth_(async_QMARK___10803__auto____$1)) {
                return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__10804__auto__);
              } else {
                throw e__10804__auto__;
              }
            } else {
              throw e12482;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12481;
        }
      } finally {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
      }
    } catch (e12480) {
      if (e12480 instanceof Error) {
        var e__10804__auto__ = e12480;
        if (cljs.core.truth_(async_QMARK___10803__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__10804__auto__);
        } else {
          throw e__10804__auto__;
        }
      } else {
        throw e12480;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_12479;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), testt.pennies__GT_dollar_string);
goog.provide("renderStrategy");
goog.require("cljs.core");
goog.require("html");
renderStrategy.run = function run(renderer) {
  return html.run.call(null);
};
goog.provide("pouchDB");
goog.require("cljs.core");
pouchDB.flushdb = cljs.core.PersistentVector.EMPTY;
pouchDB.dumpdb = cljs.core.PersistentVector.EMPTY;
pouchDB.dbase = function() {
  var obj8213 = {};
  return obj8213;
}();
goog.provide("plainText");
goog.require("cljs.core");
goog.provide("servantWorkers");
goog.require("cljs.core");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("servant.core");
servantWorkers.worker_count = 2;
servantWorkers.worker_script = "wrkr.js";
servantWorkers.servant_channel = servant.core.spawn_servants.call(null, servantWorkers.worker_count, servantWorkers.worker_script);
goog.provide("intercomTakeUtil");
goog.require("cljs.core");
goog.provide("intercomTake");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("intercomMake");
goog.require("intercomMake");
goog.require("pubsub");
goog.require("pubsub");
goog.require("blockchain");
goog.require("cljs.core.async");
goog.require("database");
goog.require("logger");
goog.require("logger");
goog.require("database");
intercomTake.sendm = function sendm(peer, payload) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11006) {
            var state_val_11007 = state_11006[1];
            if (state_val_11007 === 2) {
              var inst_11004 = state_11006[2];
              var state_11006__$1 = state_11006;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11006__$1, inst_11004);
            } else {
              if (state_val_11007 === 1) {
                var state_11006__$1 = state_11006;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11006__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11009 = [null, null, null, null, null];
              statearr_11009[0] = state_machine__6220__auto__;
              statearr_11009[1] = 1;
              return statearr_11009;
            };
            var state_machine__6220__auto____1 = function(state_11006) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11006);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11006) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11006);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11010 = f__6233__auto__.call(null);
        statearr_11010[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11010;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
intercomTake.takeInv = function takeInv(fullMessage) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11135) {
            var state_val_11136 = state_11135[1];
            if (state_val_11136 === 7) {
              var inst_11112 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
              var inst_11113 = blockchain.addToChain.call(null, intercomTake.blocks);
              var state_11135__$1 = function() {
                var statearr_11137 = state_11135;
                statearr_11137[5] = inst_11112;
                return statearr_11137;
              }();
              var statearr_11138_11155 = state_11135__$1;
              statearr_11138_11155[2] = inst_11113;
              statearr_11138_11155[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11136 === 1) {
                var inst_11083 = fullMessage.data;
                var inst_11084 = intercomTake.blocks = inst_11083;
                var inst_11085 = logger.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercomTake.blocks);
                var inst_11086 = intercomTake.blocks.vector;
                var inst_11087 = inst_11086[0];
                var inst_11088 = blockchain.prevblk.call(null, inst_11087);
                var inst_11089 = blockchain.blockKnown_QMARK_.call(null, inst_11088);
                var state_11135__$1 = function() {
                  var statearr_11139 = state_11135;
                  statearr_11139[6] = inst_11085;
                  statearr_11139[7] = inst_11084;
                  return statearr_11139;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11135__$1, 2, inst_11089);
              } else {
                if (state_val_11136 === 4) {
                  var inst_11119 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercomTake.blocks);
                  var inst_11120 = database.g.call(null, "last");
                  var state_11135__$1 = function() {
                    var statearr_11140 = state_11135;
                    statearr_11140[8] = inst_11119;
                    return statearr_11140;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11135__$1, 10, inst_11120);
                } else {
                  if (state_val_11136 === 6) {
                    var inst_11102 = state_11135[2];
                    var inst_11103 = intercomTake.heightFromBlock.call(null, inst_11102);
                    var inst_11104 = intercomTake.blocks.vector;
                    var inst_11105 = inst_11104.length;
                    var inst_11106 = inst_11103 + inst_11105;
                    var inst_11107 = inst_11106 + 1;
                    var inst_11108 = intercomTake.newHeight = inst_11107;
                    var inst_11109 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercomTake.newHeight);
                    var inst_11110 = intercomTake.bchainHeight < intercomTake.newHeight;
                    var state_11135__$1 = function() {
                      var statearr_11141 = state_11135;
                      statearr_11141[9] = inst_11109;
                      statearr_11141[10] = inst_11108;
                      return statearr_11141;
                    }();
                    if (cljs.core.truth_(inst_11110)) {
                      var statearr_11142_11156 = state_11135__$1;
                      statearr_11142_11156[1] = 7;
                    } else {
                      var statearr_11143_11157 = state_11135__$1;
                      statearr_11143_11157[1] = 8;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11136 === 3) {
                      var inst_11093 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                      var inst_11094 = intercomTake.sweet.call(null, "blockchainHeight");
                      var inst_11095 = intercomTake.bchainHeight = inst_11094;
                      var inst_11096 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercomTake.bchainHeight);
                      var inst_11097 = intercomTake.blocks.vector;
                      var inst_11098 = inst_11097[0];
                      var inst_11099 = blockchain.prevblk.call(null, inst_11098);
                      var inst_11100 = database.g.call(null, inst_11099);
                      var state_11135__$1 = function() {
                        var statearr_11144 = state_11135;
                        statearr_11144[11] = inst_11096;
                        statearr_11144[12] = inst_11095;
                        statearr_11144[13] = inst_11093;
                        return statearr_11144;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11135__$1, 6, inst_11100);
                    } else {
                      if (state_val_11136 === 12) {
                        var inst_11126 = state_11135[14];
                        var inst_11129 = state_11135[2];
                        var state_11135__$1 = state_11135;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11135__$1, 11, inst_11126, inst_11129);
                      } else {
                        if (state_val_11136 === 2) {
                          var inst_11091 = state_11135[2];
                          var state_11135__$1 = state_11135;
                          if (cljs.core.truth_(inst_11091)) {
                            var statearr_11145_11158 = state_11135__$1;
                            statearr_11145_11158[1] = 3;
                          } else {
                            var statearr_11146_11159 = state_11135__$1;
                            statearr_11146_11159[1] = 4;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11136 === 11) {
                            var inst_11131 = state_11135[2];
                            var state_11135__$1 = state_11135;
                            var statearr_11147_11160 = state_11135__$1;
                            statearr_11147_11160[2] = inst_11131;
                            statearr_11147_11160[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11136 === 9) {
                              var inst_11117 = state_11135[2];
                              var state_11135__$1 = state_11135;
                              var statearr_11148_11161 = state_11135__$1;
                              statearr_11148_11161[2] = inst_11117;
                              statearr_11148_11161[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11136 === 5) {
                                var inst_11133 = state_11135[2];
                                var state_11135__$1 = function() {
                                  var statearr_11149 = state_11135;
                                  statearr_11149[15] = inst_11133;
                                  return statearr_11149;
                                }();
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11135__$1, "grind");
                              } else {
                                if (state_val_11136 === 10) {
                                  var inst_11122 = state_11135[2];
                                  var inst_11123 = inst_11122.hash;
                                  var inst_11124 = intercomTake.lblock = inst_11123;
                                  var inst_11125 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercomTake.lblock);
                                  var inst_11126 = fullMessage.peer;
                                  var inst_11127 = intercomMake.makeGetBlock.call(null, intercomTake.lblock);
                                  var state_11135__$1 = function() {
                                    var statearr_11150 = state_11135;
                                    statearr_11150[16] = inst_11125;
                                    statearr_11150[17] = inst_11124;
                                    statearr_11150[14] = inst_11126;
                                    return statearr_11150;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11135__$1, 12, inst_11127);
                                } else {
                                  if (state_val_11136 === 8) {
                                    var inst_11115 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                    var state_11135__$1 = state_11135;
                                    var statearr_11151_11162 = state_11135__$1;
                                    statearr_11151_11162[2] = inst_11115;
                                    statearr_11151_11162[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11153 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11153[0] = state_machine__6220__auto__;
              statearr_11153[1] = 1;
              return statearr_11153;
            };
            var state_machine__6220__auto____1 = function(state_11135) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11135);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11135) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11135);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11154 = f__6233__auto__.call(null);
        statearr_11154[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11154;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
intercomTake.takeData = function takeData(message) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11183) {
            var state_val_11184 = state_11183[1];
            if (state_val_11184 === 1) {
              var inst_11176 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_11177 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_11178 = intercomTake.v.data;
              var inst_11179 = it.handleInvBlock.call(null, inst_11178, intercomTake.v);
              var inst_11180 = intercomTake.tostate.call(null, "grind");
              var inst_11181 = intercomTake.tostate.call(null, "grind", intercomTake.handleInvBlock);
              var state_11183__$1 = function() {
                var statearr_11185 = state_11183;
                statearr_11185[5] = inst_11176;
                statearr_11185[6] = inst_11179;
                statearr_11185[7] = inst_11177;
                statearr_11185[8] = inst_11180;
                return statearr_11185;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11183__$1, inst_11181);
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11187 = [null, null, null, null, null, null, null, null, null];
              statearr_11187[0] = state_machine__6220__auto__;
              statearr_11187[1] = 1;
              return statearr_11187;
            };
            var state_machine__6220__auto____1 = function(state_11183) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11183);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11183) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11183);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11188 = f__6233__auto__.call(null);
        statearr_11188[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11188;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
intercomTake.takeGetVersion = function takeGetVersion(message) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11205) {
            var state_val_11206 = state_11205[1];
            if (state_val_11206 === 1) {
              var inst_11200 = intercomTake.v.peer;
              var inst_11201 = intercomTake.sendmsg.call(null, inst_11200, "version", "0");
              var inst_11202 = intercomTake.tostate.call(null, "grind");
              var inst_11203 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_11205__$1 = function() {
                var statearr_11207 = state_11205;
                statearr_11207[5] = inst_11201;
                statearr_11207[6] = inst_11202;
                return statearr_11207;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11205__$1, inst_11203);
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11209 = [null, null, null, null, null, null, null];
              statearr_11209[0] = state_machine__6220__auto__;
              statearr_11209[1] = 1;
              return statearr_11209;
            };
            var state_machine__6220__auto____1 = function(state_11205) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11205);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11205) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11205);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11210 = f__6233__auto__.call(null);
        statearr_11210[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11210;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
intercomTake.takeVersion = function takeVersion(message) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11221) {
            var state_val_11222 = state_11221[1];
            if (state_val_11222 === 1) {
              var inst_11219 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_11221__$1 = function() {
                var statearr_11223 = state_11221;
                statearr_11223[5] = inst_11219;
                return statearr_11223;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11221__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11225 = [null, null, null, null, null, null];
              statearr_11225[0] = state_machine__6220__auto__;
              statearr_11225[1] = 1;
              return statearr_11225;
            };
            var state_machine__6220__auto____1 = function(state_11221) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11221);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11221) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11221);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11226 = f__6233__auto__.call(null);
        statearr_11226[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11226;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
intercomTake.takeConn = function takeConn(conn) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11267) {
            var state_val_11268 = state_11267[1];
            if (state_val_11268 === 4) {
              var inst_11265 = state_11267[2];
              var state_11267__$1 = state_11267;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11267__$1, inst_11265);
            } else {
              if (state_val_11268 === 3) {
                var state_11267__$1 = state_11267;
                var statearr_11269_11277 = state_11267__$1;
                statearr_11269_11277[2] = "version";
                statearr_11269_11277[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11268 === 2) {
                  var state_11267__$1 = state_11267;
                  var statearr_11270_11278 = state_11267__$1;
                  statearr_11270_11278[2] = "grind";
                  statearr_11270_11278[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11268 === 1) {
                    var inst_11252 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_11253 = conn.data;
                    var inst_11254 = inst_11253.writec;
                    var inst_11255 = intercomMake.makeVersion.call(null, "0");
                    var inst_11256 = intercomTake.sendm.call(null, inst_11254, inst_11255);
                    var inst_11257 = conn.connType;
                    var inst_11258 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_11257);
                    var inst_11259 = conn.data;
                    var inst_11260 = inst_11259.connType;
                    var inst_11261 = inst_11260 === "saltan";
                    var state_11267__$1 = function() {
                      var statearr_11271 = state_11267;
                      statearr_11271[5] = inst_11252;
                      statearr_11271[6] = inst_11258;
                      statearr_11271[7] = inst_11256;
                      return statearr_11271;
                    }();
                    if (cljs.core.truth_(inst_11261)) {
                      var statearr_11272_11279 = state_11267__$1;
                      statearr_11272_11279[1] = 2;
                    } else {
                      var statearr_11273_11280 = state_11267__$1;
                      statearr_11273_11280[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11275 = [null, null, null, null, null, null, null, null];
              statearr_11275[0] = state_machine__6220__auto__;
              statearr_11275[1] = 1;
              return statearr_11275;
            };
            var state_machine__6220__auto____1 = function(state_11267) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11267);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11267) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11267);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11276 = f__6233__auto__.call(null);
        statearr_11276[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11276;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
intercomTake.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_11301) {
            var state_val_11302 = state_11301[1];
            if (state_val_11302 === 2) {
              var inst_11298 = state_11301[2];
              var inst_11299 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_11298);
              var state_11301__$1 = state_11301;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11301__$1, inst_11299);
            } else {
              if (state_val_11302 === 1) {
                var inst_11294 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_11295 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_11296 = intercomTake.makeGetBlock.call(null, hash);
                var state_11301__$1 = function() {
                  var statearr_11303 = state_11301;
                  statearr_11303[5] = inst_11294;
                  statearr_11303[6] = inst_11295;
                  return statearr_11303;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11301__$1, 2, inst_11296);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_11305 = [null, null, null, null, null, null, null];
              statearr_11305[0] = state_machine__6220__auto__;
              statearr_11305[1] = 1;
              return statearr_11305;
            };
            var state_machine__6220__auto____1 = function(state_11301) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_11301);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_11301) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_11301);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_11306 = f__6233__auto__.call(null);
        statearr_11306[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_11306;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
goog.provide("routing");
goog.require("cljs.core");
goog.require("crypt0");
goog.require("mining");
goog.require("cljs.core.async");
goog.require("intercomMake");
goog.require("intercomMake");
goog.require("blockchain");
goog.require("cljs.core.async");
goog.require("database");
goog.require("crypt0");
goog.require("intercomTake");
goog.require("logger");
goog.require("intercomTake");
goog.require("mining");
goog.require("logger");
goog.require("database");
goog.require("crypt0");
routing.routea = function routea(a) {
  var c__6232__auto___13193 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto___13193) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto___13193) {
          return function(state_13188) {
            var state_val_13189 = state_13188[1];
            if (state_val_13189 === 1) {
              var inst_13105 = function() {
                return function(state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.cleandb.call(null);
                  };
                }(state_val_13189, c__6232__auto___13193);
              }();
              var inst_13106 = function() {
                return function(inst_13105, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.connectTo.call(null);
                  };
                }(inst_13105, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13107 = function() {
                return function(inst_13105, inst_13106, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.dumpdb.call(null);
                  };
                }(inst_13105, inst_13106, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13108 = function() {
                return function(inst_13105, inst_13106, inst_13107, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.g.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13109 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.initDBase.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13110 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.onDatabaseChange.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13111 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.p.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13112 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.ps.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13113 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return database.update.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13114 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.addToChain.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13115 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.addTransactionToBlock.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13116 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.blockKnown_QMARK_.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13117 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.blockchainHeight.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13118 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.heightFromBlock.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13119 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.last_QMARK_.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13120 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.log2.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13121 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.makeBlock.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13122 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.makeBlockHeader.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13123 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.makeTransaction.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13124 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.popA.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13125 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.prevblk.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13126 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.removeTransactionFromMemPool.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13127 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return blockchain.saveBlock.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13128 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.broadcastNewBlock.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13129 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.channelsFromConnection.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13130 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.cryptoCh.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13131 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.initial.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13132 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.intercomMeta.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13133 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.onBlockMined.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13134 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.onConnection.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13135 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.onCrypto.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13136 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.onData.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13137 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.onNewConnection.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13138 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.onOpen.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13139 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.onTransaction.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13140 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.sendmsg.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13141 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.setID.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13142 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return communications.setupComm.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13143 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, state_val_13189, 
                c__6232__auto___13193) {
                  return function() {
                    return communications.startP2PCommLoop.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13144 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, state_val_13189, 
                c__6232__auto___13193) {
                  return function() {
                    return crypt0.arraybtostring.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, state_val_13189, 
                c__6232__auto___13193);
              }();
              var inst_13145 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.bHash.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, state_val_13189, 
                c__6232__auto___13193);
              }();
              var inst_13146 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.encode.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                state_val_13189, c__6232__auto___13193);
              }();
              var inst_13147 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.s256.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13148 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.merkleRoot.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13149 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.resultToCh.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13150 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.s256.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13151 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.sha256.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13152 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.sha256c.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13153 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return crypt0.shaCallb.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13154 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercom.getIntercomState.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13155 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercom.intercomstatemachine.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13156 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercom.is_QMARK_.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13157 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercom.onMessage.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13158 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercom.setIntercomState.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13159 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercom.tostateu.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13160 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercom.typeof_QMARK_.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13161 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomMake.makeConn.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13162 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomMake.makeData.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13163 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomMake.makeGetBlock.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13164 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomMake.makeGetVersion.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13165 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomMake.makeInv.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13166 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomMake.makeVersion.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13167 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomTake.sendm.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13168 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomTake.takeConn.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13169 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomTake.takeData.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13170 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomTake.takeGetBlocks.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13171 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomTake.takeGetVersion.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13172 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return intercomTake.takeInv.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13173 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return logger.og.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13174 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mining.mine.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13175 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabase.g.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13176 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabase.p.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13177 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabase.ps.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13178 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabase.update.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13179 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabasew.cleandb.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13180 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabasew.dumpdb.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13181 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabasew.g.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13182 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabasew.initDBase.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13183 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, inst_13182, state_val_13189, c__6232__auto___13193) {
                  return function() {
                    return mockdatabasew.p.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, inst_13182, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13184 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, inst_13182, inst_13183, state_val_13189, 
                c__6232__auto___13193) {
                  return function() {
                    return mockdatabasew.ps.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, inst_13182, inst_13183, state_val_13189, c__6232__auto___13193);
              }();
              var inst_13185 = function() {
                return function(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, 
                inst_13145, inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, inst_13182, inst_13183, inst_13184, state_val_13189, 
                c__6232__auto___13193) {
                  return function() {
                    return mockdatabasew.update.call(null);
                  };
                }(inst_13105, inst_13106, inst_13107, inst_13108, inst_13109, inst_13110, inst_13111, inst_13112, inst_13113, inst_13114, inst_13115, inst_13116, inst_13117, inst_13118, inst_13119, inst_13120, inst_13121, inst_13122, inst_13123, inst_13124, inst_13125, inst_13126, inst_13127, inst_13128, inst_13129, inst_13130, inst_13131, inst_13132, inst_13133, inst_13134, inst_13135, inst_13136, inst_13137, inst_13138, inst_13139, inst_13140, inst_13141, inst_13142, inst_13143, inst_13144, inst_13145, 
                inst_13146, inst_13147, inst_13148, inst_13149, inst_13150, inst_13151, inst_13152, inst_13153, inst_13154, inst_13155, inst_13156, inst_13157, inst_13158, inst_13159, inst_13160, inst_13161, inst_13162, inst_13163, inst_13164, inst_13165, inst_13166, inst_13167, inst_13168, inst_13169, inst_13170, inst_13171, inst_13172, inst_13173, inst_13174, inst_13175, inst_13176, inst_13177, inst_13178, inst_13179, inst_13180, inst_13181, inst_13182, inst_13183, inst_13184, state_val_13189, 
                c__6232__auto___13193);
              }();
              var inst_13186 = pubsub.rrsa.call(null, a, "cleandb", inst_13105, "connectTo", inst_13106, "dumpdb", inst_13107, "g", inst_13108, "initDBase", inst_13109, "onDatabaseChange", inst_13110, "p", inst_13111, "ps", inst_13112, "update", inst_13113, "addToChain", inst_13114, "addTransactionToBlock", inst_13115, "blockKnown?", inst_13116, "blockchainHeight", inst_13117, "heightFromBlock", inst_13118, "last?", inst_13119, "log2", inst_13120, "makeBlock", inst_13121, "makeBlockHeader", inst_13122, 
              "makeTransaction", inst_13123, "popA", inst_13124, "prevblk", inst_13125, "removeTransactionFromMemPool", inst_13126, "saveBlock", inst_13127, "broadcastNewBlock", inst_13128, "channelsFromConnection", inst_13129, "cryptoCh", inst_13130, "initial", inst_13131, "intercomMeta", inst_13132, "onBlockMined", inst_13133, "onConnection", inst_13134, "onCrypto", inst_13135, "onData", inst_13136, "onNewConnection", inst_13137, "onOpen", inst_13138, "onTransaction", inst_13139, "sendmsg", inst_13140, 
              "setID", inst_13141, "setupComm", inst_13142, "startP2PCommLoop", inst_13143, "arraybtostring", inst_13144, "bHash", inst_13145, "encode", inst_13146, "hash", inst_13147, "merkleRoot", inst_13148, "resultToCh", inst_13149, "s256", inst_13150, "sha256", inst_13151, "sha256c", inst_13152, "shaCallb", inst_13153, "getIntercomState", inst_13154, "intercomstatemachine", inst_13155, "is?", inst_13156, "onMessage", inst_13157, "setIntercomState", inst_13158, "tostateu", inst_13159, "typeof?", 
              inst_13160, "makeConn", inst_13161, "makeData", inst_13162, "makeGetBlock", inst_13163, "makeInv", inst_13164, "makeInv", inst_13165, "makeVersion", inst_13166, "sendm", inst_13167, "takeConn", inst_13168, "takeData", inst_13169, "takeGetBlocks", inst_13170, "takeGetVersion", inst_13171, "takeInv", inst_13172, "log", inst_13173, "mine", inst_13174, "mg", inst_13175, "mp", inst_13176, "mps", inst_13177, "mupdate", inst_13178, "mcleandb", inst_13179, "mdumpdb", inst_13180, "mg", inst_13181, 
              "minitDBase", inst_13182, "mp", inst_13183, "mps", inst_13184, "mupdate", inst_13185);
              var state_13188__$1 = state_13188;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13188__$1, inst_13186);
            } else {
              return null;
            }
          };
        }(c__6232__auto___13193);
        return function(switch__6219__auto__, c__6232__auto___13193) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_13191 = [null, null, null, null, null];
              statearr_13191[0] = state_machine__6220__auto__;
              statearr_13191[1] = 1;
              return statearr_13191;
            };
            var state_machine__6220__auto____1 = function(state_13188) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_13188);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_13188) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_13188);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto___13193);
      }();
      var state__6234__auto__ = function() {
        var statearr_13192 = f__6233__auto__.call(null);
        statearr_13192[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto___13193;
        return statearr_13192;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto___13193));
  return logger.og.call(null, new cljs.core.Keyword(null, "route", "route", 329891309), "received", a);
};
goog.provide("intercomMakeUtil");
goog.require("cljs.core");
goog.provide("router");
goog.require("cljs.core");
goog.require("crypt0");
goog.require("mining");
goog.require("peerjs");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("intercom");
goog.require("intercomMake");
goog.require("intercom");
goog.require("intercomMake");
goog.require("pubsub");
goog.require("blockchain");
goog.require("peerjs");
goog.require("cljs.core.async");
goog.require("database");
goog.require("crypt0");
goog.require("logger");
goog.require("mining");
goog.require("logger");
goog.require("blockchain");
goog.require("database");
goog.require("crypt0");
router.a = function a(x) {
  var obj10950 = {"a":1};
  return obj10950;
};
router.route = function route() {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_10985) {
            var state_val_10986 = state_10985[1];
            if (state_val_10986 === 4) {
              var inst_10978 = state_10985[2];
              var inst_10979 = router.a = inst_10978;
              var inst_10980 = logger.og.call(null, new cljs.core.Keyword(null, "route", "route", 329891309), "received", router.a);
              var state_10985__$1 = function() {
                var statearr_10987 = state_10985;
                statearr_10987[5] = inst_10979;
                statearr_10987[6] = inst_10980;
                return statearr_10987;
              }();
              var statearr_10988_10993 = state_10985__$1;
              statearr_10988_10993[2] = null;
              statearr_10988_10993[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10986 === 3) {
                var inst_10983 = state_10985[2];
                var state_10985__$1 = state_10985;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10985__$1, inst_10983);
              } else {
                if (state_val_10986 === 2) {
                  var inst_10973 = function() {
                    return function(state_val_10986, c__6232__auto__) {
                      return function() {
                        return database.dumpdb.call(null);
                      };
                    }(state_val_10986, c__6232__auto__);
                  }();
                  var inst_10974 = function() {
                    return function(inst_10973, state_val_10986, c__6232__auto__) {
                      return function() {
                        return database.cleandb.call(null);
                      };
                    }(inst_10973, state_val_10986, c__6232__auto__);
                  }();
                  var inst_10975 = function() {
                    return function(inst_10973, inst_10974, state_val_10986, c__6232__auto__) {
                      return function() {
                        return crypt0.s256.call(null);
                      };
                    }(inst_10973, inst_10974, state_val_10986, c__6232__auto__);
                  }();
                  var inst_10976 = pubsub.rrs.call(null, "dumpdb", inst_10973, "cleandb", inst_10974, "hash", inst_10975);
                  var state_10985__$1 = state_10985;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10985__$1, 4, inst_10976);
                } else {
                  if (state_val_10986 === 1) {
                    var state_10985__$1 = state_10985;
                    var statearr_10989_10994 = state_10985__$1;
                    statearr_10989_10994[2] = null;
                    statearr_10989_10994[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_10991 = [null, null, null, null, null, null, null];
              statearr_10991[0] = state_machine__6220__auto__;
              statearr_10991[1] = 1;
              return statearr_10991;
            };
            var state_machine__6220__auto____1 = function(state_10985) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_10985);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_10985) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_10985);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_10992 = f__6233__auto__.call(null);
        statearr_10992[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_10992;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
goog.provide("app.main");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("router");
goog.require("pubsub");
goog.require("pubsub");
goog.require("logger");
goog.require("logger");
cljs.core.enable_console_print_BANG_.call(null);
app.main.dumpdb = function dumpdb() {
  return pubsub.s.call(null, "dumpdb", "");
};
$(document).on("dumpdb", app.main.dumpdb);
app.main.cleandb = function cleandb() {
  return pubsub.s.call(null, "cleandb", "");
};
$(document).on("cleandb", app.main.cleadb);
app.main.replScratchFunction = function replScratchFunction() {
  pubsub.si.call(null, "dumpdb");
  var c__6232__auto___12053 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto___12053) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto___12053) {
          return function(state_12048) {
            var state_val_12049 = state_12048[1];
            if (state_val_12049 === 2) {
              var inst_12046 = state_12048[2];
              var state_12048__$1 = state_12048;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12048__$1, inst_12046);
            } else {
              if (state_val_12049 === 1) {
                var inst_12044 = pubsub.sia.call(null, "hash", "s");
                var state_12048__$1 = state_12048;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12048__$1, 2, inst_12044);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto___12053);
        return function(switch__6219__auto__, c__6232__auto___12053) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12051 = [null, null, null, null, null];
              statearr_12051[0] = state_machine__6220__auto__;
              statearr_12051[1] = 1;
              return statearr_12051;
            };
            var state_machine__6220__auto____1 = function(state_12048) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12048);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12048) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12048);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto___12053);
      }();
      var state__6234__auto__ = function() {
        var statearr_12052 = f__6233__auto__.call(null);
        statearr_12052[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto___12053;
        return statearr_12052;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto___12053));
  app.main.dumpdb.call(null);
  return app.main.cleandb.call(null);
};
app.main.empty_string = "";
app.main.pri = function pri(x) {
  cljs.core.println.call(null, x);
  return 3;
};
app.main.entryy = function entryy() {
  var c__6232__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6232__auto__) {
    return function() {
      var f__6233__auto__ = function() {
        var switch__6219__auto__ = function(c__6232__auto__) {
          return function(state_12069) {
            var state_val_12070 = state_12069[1];
            if (state_val_12070 === 2) {
              var inst_12066 = state_12069[2];
              var inst_12067 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "received", inst_12066);
              var state_12069__$1 = state_12069;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12069__$1, inst_12067);
            } else {
              if (state_val_12070 === 1) {
                var inst_12064 = pubsub.sia.call(null, "hash", "s");
                var state_12069__$1 = state_12069;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12069__$1, 2, inst_12064);
              } else {
                return null;
              }
            }
          };
        }(c__6232__auto__);
        return function(switch__6219__auto__, c__6232__auto__) {
          return function() {
            var state_machine__6220__auto__ = null;
            var state_machine__6220__auto____0 = function() {
              var statearr_12072 = [null, null, null, null, null];
              statearr_12072[0] = state_machine__6220__auto__;
              statearr_12072[1] = 1;
              return statearr_12072;
            };
            var state_machine__6220__auto____1 = function(state_12069) {
              while (true) {
                var result__6221__auto__ = switch__6219__auto__.call(null, state_12069);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6221__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6221__auto__;
                }
                break;
              }
            };
            state_machine__6220__auto__ = function(state_12069) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6220__auto____0.call(this);
                case 1:
                  return state_machine__6220__auto____1.call(this, state_12069);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6220__auto____0;
            state_machine__6220__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6220__auto____1;
            return state_machine__6220__auto__;
          }();
        }(switch__6219__auto__, c__6232__auto__);
      }();
      var state__6234__auto__ = function() {
        var statearr_12073 = f__6233__auto__.call(null);
        statearr_12073[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6232__auto__;
        return statearr_12073;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6234__auto__);
    };
  }(c__6232__auto__));
  return c__6232__auto__;
};
window.onload = app.main.entryy;
