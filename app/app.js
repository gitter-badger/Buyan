if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__11518__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__11518 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11518__delegate.call(this, args);
    };
    G__11518.cljs$lang$maxFixedArity = 0;
    G__11518.cljs$lang$applyTo = function(arglist__11519) {
      var args = cljs.core.seq(arglist__11519);
      return G__11518__delegate(args);
    };
    G__11518.cljs$core$IFn$_invoke$arity$variadic = G__11518__delegate;
    return G__11518;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3636__auto__ = ty;
    if (cljs.core.truth_(and__3636__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3636__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4518__auto___11520 = len;
  var i_11521 = 0;
  while (true) {
    if (i_11521 < n__4518__auto___11520) {
      new_arr[i_11521] = arr[i_11521];
      var G__11522 = i_11521 + 1;
      i_11521 = G__11522;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__11523__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__11523 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11523__delegate.call(this, array, i, idxs);
    };
    G__11523.cljs$lang$maxFixedArity = 2;
    G__11523.cljs$lang$applyTo = function(arglist__11524) {
      var array = cljs.core.first(arglist__11524);
      arglist__11524 = cljs.core.next(arglist__11524);
      var i = cljs.core.first(arglist__11524);
      var idxs = cljs.core.rest(arglist__11524);
      return G__11523__delegate(array, i, idxs);
    };
    G__11523.cljs$core$IFn$_invoke$arity$variadic = G__11523__delegate;
    return G__11523;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__11525__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__11525 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11525__delegate.call(this, array, idx, idx2, idxv);
    };
    G__11525.cljs$lang$maxFixedArity = 3;
    G__11525.cljs$lang$applyTo = function(arglist__11526) {
      var array = cljs.core.first(arglist__11526);
      arglist__11526 = cljs.core.next(arglist__11526);
      var idx = cljs.core.first(arglist__11526);
      arglist__11526 = cljs.core.next(arglist__11526);
      var idx2 = cljs.core.first(arglist__11526);
      var idxv = cljs.core.rest(arglist__11526);
      return G__11525__delegate(array, idx, idx2, idxv);
    };
    G__11525.cljs$core$IFn$_invoke$arity$variadic = G__11525__delegate;
    return G__11525;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj11528 = {};
  return obj11528;
}();
cljs.core.IFn = function() {
  var obj11530 = {};
  return obj11530;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3636__auto__ = this$;
      if (and__3636__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4285__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3648__auto__ = cljs.core._invoke[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._invoke["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj11532 = {};
  return obj11532;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3636__auto__ = value;
    if (and__3636__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4285__auto__ = value == null ? null : value;
    return function() {
      var or__3648__auto__ = cljs.core._clone[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._clone["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj11534 = {};
  return obj11534;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._count[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._count["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj11536 = {};
  return obj11536;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._empty[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._empty["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj11538 = {};
  return obj11538;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._conj[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._conj["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj11540 = {};
  return obj11540;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._nth[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._nth["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._nth[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._nth["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj11542 = {};
  return obj11542;
}();
cljs.core.ISeq = function() {
  var obj11544 = {};
  return obj11544;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._rest[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._rest["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj11546 = {};
  return obj11546;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._next[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._next["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj11548 = {};
  return obj11548;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._lookup[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._lookup["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._lookup[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._lookup["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj11550 = {};
  return obj11550;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj11552 = {};
  return obj11552;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._dissoc[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._dissoc["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj11554 = {};
  return obj11554;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._key[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._key["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._val[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._val["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj11556 = {};
  return obj11556;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._disjoin[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._disjoin["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj11558 = {};
  return obj11558;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._peek[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._peek["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._pop[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pop["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj11560 = {};
  return obj11560;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_n[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj11562 = {};
  return obj11562;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._deref[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._deref["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj11564 = {};
  return obj11564;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj11566 = {};
  return obj11566;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._meta[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._meta["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj11568 = {};
  return obj11568;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._with_meta[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._with_meta["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj11570 = {};
  return obj11570;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._reduce[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._reduce["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3636__auto__ = coll;
      if (and__3636__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4285__auto__ = coll == null ? null : coll;
      return function() {
        var or__3648__auto__ = cljs.core._reduce[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._reduce["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj11572 = {};
  return obj11572;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj11574 = {};
  return obj11574;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._equiv[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._equiv["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj11576 = {};
  return obj11576;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._hash[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._hash["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj11578 = {};
  return obj11578;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._seq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._seq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj11580 = {};
  return obj11580;
}();
cljs.core.IList = function() {
  var obj11582 = {};
  return obj11582;
}();
cljs.core.IRecord = function() {
  var obj11584 = {};
  return obj11584;
}();
cljs.core.IReversible = function() {
  var obj11586 = {};
  return obj11586;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._rseq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._rseq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj11588 = {};
  return obj11588;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._entry_key[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._entry_key["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._comparator[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._comparator["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj11590 = {};
  return obj11590;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3636__auto__ = writer;
    if (and__3636__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4285__auto__ = writer == null ? null : writer;
    return function() {
      var or__3648__auto__ = cljs.core._write[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._write["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3636__auto__ = writer;
    if (and__3636__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4285__auto__ = writer == null ? null : writer;
    return function() {
      var or__3648__auto__ = cljs.core._flush[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._flush["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj11592 = {};
  return obj11592;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._pr_writer[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj11594 = {};
  return obj11594;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3636__auto__ = d;
    if (and__3636__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4285__auto__ = d == null ? null : d;
    return function() {
      var or__3648__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj11596 = {};
  return obj11596;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._notify_watches[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._add_watch[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._add_watch["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3636__auto__ = this$;
    if (and__3636__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4285__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3648__auto__ = cljs.core._remove_watch[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj11598 = {};
  return obj11598;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._as_transient[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._as_transient["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj11600 = {};
  return obj11600;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj11602 = {};
  return obj11602;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj11604 = {};
  return obj11604;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj11606 = {};
  return obj11606;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj11608 = {};
  return obj11608;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3636__auto__ = tcoll;
    if (and__3636__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4285__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3648__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj11610 = {};
  return obj11610;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._compare[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._compare["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj11612 = {};
  return obj11612;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._drop_first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._drop_first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj11614 = {};
  return obj11614;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_first[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj11616 = {};
  return obj11616;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._chunked_next[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj11618 = {};
  return obj11618;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._name[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._name["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._namespace[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._namespace["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj11620 = {};
  return obj11620;
}();
cljs.core.IReset = function() {
  var obj11622 = {};
  return obj11622;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3636__auto__ = o;
    if (and__3636__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4285__auto__ = o == null ? null : o;
    return function() {
      var or__3648__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj11624 = {};
  return obj11624;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3636__auto__ = o;
      if (and__3636__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4285__auto__ = o == null ? null : o;
      return function() {
        var or__3648__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj11626 = {};
  return obj11626;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3636__auto__ = coll;
    if (and__3636__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4285__auto__ = coll == null ? null : coll;
    return function() {
      var or__3648__auto__ = cljs.core._iterator[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._iterator["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__11627 = i + 2;
        var G__11628 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__11627;
        h1 = G__11628;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj11630 = {};
  return obj11630;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__11631 = i + 1;
          var G__11632 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__11631;
          hash = G__11632;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj11636 = {};
      return obj11636;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__11638 = o;
    if (G__11638) {
      var bit__4305__auto__ = G__11638.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4305__auto__ || G__11638.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3636__auto__) {
        return b.ns;
      } else {
        return and__3636__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4059__auto__ = self__._hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__11640 = null;
  var G__11640__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__11640__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__11640 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11640__2.call(this, self__, coll);
      case 3:
        return G__11640__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11640.cljs$core$IFn$_invoke$arity$2 = G__11640__2;
  G__11640.cljs$core$IFn$_invoke$arity$3 = G__11640__3;
  return G__11640;
}();
cljs.core.Symbol.prototype.apply = function(self__, args11639) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11639)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__11642 = x;
  if (G__11642) {
    var bit__4312__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3648__auto__ = bit__4312__auto__;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return G__11642.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__11642.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__11642);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__11642);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__11644 = value;
  if (G__11644) {
    var bit__4312__auto__ = G__11644.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4312__auto__ || G__11644.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__11644.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11644);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__11644);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11646 = coll;
      if (G__11646) {
        var bit__4305__auto__ = G__11646.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4305__auto__ || G__11646.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11648 = coll;
      if (G__11648) {
        var bit__4305__auto__ = G__11648.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11648.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11650 = coll;
      if (G__11650) {
        var bit__4305__auto__ = G__11650.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11650.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11652 = coll;
      if (G__11652) {
        var bit__4305__auto__ = G__11652.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4305__auto__ || G__11652.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__11653__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11654 = y;
            var G__11655 = cljs.core.first.call(null, more);
            var G__11656 = cljs.core.next.call(null, more);
            x = G__11654;
            y = G__11655;
            more = G__11656;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11653 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11653__delegate.call(this, x, y, more);
    };
    G__11653.cljs$lang$maxFixedArity = 2;
    G__11653.cljs$lang$applyTo = function(arglist__11657) {
      var x = cljs.core.first(arglist__11657);
      arglist__11657 = cljs.core.next(arglist__11657);
      var y = cljs.core.first(arglist__11657);
      var more = cljs.core.rest(arglist__11657);
      return G__11653__delegate(x, y, more);
    };
    G__11653.cljs$core$IFn$_invoke$arity$variadic = G__11653__delegate;
    return G__11653;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11658 = n + 1;
      var G__11659 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__11660 = cljs.core.next.call(null, coll__$1);
      n = G__11658;
      hash_code = G__11659;
      coll__$1 = G__11660;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11661 = n + 1;
      var G__11662 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__11663 = cljs.core.next.call(null, coll__$1);
      n = G__11661;
      hash_code = G__11662;
      coll__$1 = G__11663;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11664 = nval;
            var G__11665 = n + 1;
            val = G__11664;
            n = G__11665;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11666 = nval;
          var G__11667 = n + 1;
          val__$1 = G__11666;
          n = G__11667;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11668 = nval;
          var G__11669 = n + 1;
          val__$1 = G__11668;
          n = G__11669;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11670 = nval;
            var G__11671 = n + 1;
            val = G__11670;
            n = G__11671;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11672 = nval;
          var G__11673 = n + 1;
          val__$1 = G__11672;
          n = G__11673;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11674 = nval;
          var G__11675 = n + 1;
          val__$1 = G__11674;
          n = G__11675;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__11677 = x;
  if (G__11677) {
    var bit__4312__auto__ = G__11677.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4312__auto__ || G__11677.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__11677.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11677);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11677);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__11679 = x;
  if (G__11679) {
    var bit__4312__auto__ = G__11679.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4312__auto__ || G__11679.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__11679.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11679);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11679);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__11680 = sn;
      s = G__11680;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__11681__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__11682 = conj.call(null, coll, x);
          var G__11683 = cljs.core.first.call(null, xs);
          var G__11684 = cljs.core.next.call(null, xs);
          coll = G__11682;
          x = G__11683;
          xs = G__11684;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__11681 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11681__delegate.call(this, coll, x, xs);
    };
    G__11681.cljs$lang$maxFixedArity = 2;
    G__11681.cljs$lang$applyTo = function(arglist__11685) {
      var coll = cljs.core.first(arglist__11685);
      arglist__11685 = cljs.core.next(arglist__11685);
      var x = cljs.core.first(arglist__11685);
      var xs = cljs.core.rest(arglist__11685);
      return G__11681__delegate(coll, x, xs);
    };
    G__11681.cljs$core$IFn$_invoke$arity$variadic = G__11681__delegate;
    return G__11681;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__11686 = cljs.core.next.call(null, s);
      var G__11687 = acc + 1;
      s = G__11686;
      acc = G__11687;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11689 = coll;
      if (G__11689) {
        var bit__4305__auto__ = G__11689.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4305__auto__ || G__11689.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11690 = cljs.core.next.call(null, coll);
              var G__11691 = n - 1;
              coll = G__11690;
              n = G__11691;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11692 = cljs.core.next.call(null, coll);
              var G__11693 = n - 1;
              var G__11694 = not_found;
              coll = G__11692;
              n = G__11693;
              not_found = G__11694;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__11699 = coll;
          if (G__11699) {
            var bit__4305__auto__ = G__11699.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4305__auto__ || G__11699.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__11700 = coll;
                  if (G__11700) {
                    var bit__4312__auto__ = G__11700.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4312__auto__ || G__11700.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11700.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11700);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11700);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__11701 = coll;
          if (G__11701) {
            var bit__4305__auto__ = G__11701.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4305__auto__ || G__11701.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__11702 = coll;
                  if (G__11702) {
                    var bit__4312__auto__ = G__11702.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4312__auto__ || G__11702.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11702.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11702);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11702);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__11705 = o;
        if (G__11705) {
          var bit__4305__auto__ = G__11705.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4305__auto__ || G__11705.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__11706 = o;
        if (G__11706) {
          var bit__4305__auto__ = G__11706.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4305__auto__ || G__11706.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__11707__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__11708 = ret;
          var G__11709 = cljs.core.first.call(null, kvs);
          var G__11710 = cljs.core.second.call(null, kvs);
          var G__11711 = cljs.core.nnext.call(null, kvs);
          coll = G__11708;
          k = G__11709;
          v = G__11710;
          kvs = G__11711;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__11707 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11707__delegate.call(this, coll, k, v, kvs);
    };
    G__11707.cljs$lang$maxFixedArity = 3;
    G__11707.cljs$lang$applyTo = function(arglist__11712) {
      var coll = cljs.core.first(arglist__11712);
      arglist__11712 = cljs.core.next(arglist__11712);
      var k = cljs.core.first(arglist__11712);
      arglist__11712 = cljs.core.next(arglist__11712);
      var v = cljs.core.first(arglist__11712);
      var kvs = cljs.core.rest(arglist__11712);
      return G__11707__delegate(coll, k, v, kvs);
    };
    G__11707.cljs$core$IFn$_invoke$arity$variadic = G__11707__delegate;
    return G__11707;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__11713__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11714 = ret;
            var G__11715 = cljs.core.first.call(null, ks);
            var G__11716 = cljs.core.next.call(null, ks);
            coll = G__11714;
            k = G__11715;
            ks = G__11716;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11713 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11713__delegate.call(this, coll, k, ks);
    };
    G__11713.cljs$lang$maxFixedArity = 2;
    G__11713.cljs$lang$applyTo = function(arglist__11717) {
      var coll = cljs.core.first(arglist__11717);
      arglist__11717 = cljs.core.next(arglist__11717);
      var k = cljs.core.first(arglist__11717);
      var ks = cljs.core.rest(arglist__11717);
      return G__11713__delegate(coll, k, ks);
    };
    G__11713.cljs$core$IFn$_invoke$arity$variadic = G__11713__delegate;
    return G__11713;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3648__auto__ = goog.isFunction(f);
  if (or__3648__auto__) {
    return or__3648__auto__;
  } else {
    var G__11721 = f;
    if (G__11721) {
      var bit__4312__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3648__auto____$1 = bit__4312__auto__;
        if (cljs.core.truth_(or__3648__auto____$1)) {
          return or__3648__auto____$1;
        } else {
          return G__11721.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__11721.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11721);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11721);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__11723 = null;
  var G__11723__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__11723__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__11723__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__11723__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__11723__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__11723__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__11723__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__11723__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__11723__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__11723__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__11723__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__11723__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__11723__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__11723__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__11723__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__11723__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__11723__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__11723__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__11723__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__11723__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__11723__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__11723__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__11723 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11723__1.call(this, self__);
      case 2:
        return G__11723__2.call(this, self__, a);
      case 3:
        return G__11723__3.call(this, self__, a, b);
      case 4:
        return G__11723__4.call(this, self__, a, b, c);
      case 5:
        return G__11723__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11723__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11723__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11723__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11723__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11723__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11723__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11723__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11723__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11723__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11723__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11723__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11723__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11723__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11723__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11723__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11723__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11723__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11723.cljs$core$IFn$_invoke$arity$1 = G__11723__1;
  G__11723.cljs$core$IFn$_invoke$arity$2 = G__11723__2;
  G__11723.cljs$core$IFn$_invoke$arity$3 = G__11723__3;
  G__11723.cljs$core$IFn$_invoke$arity$4 = G__11723__4;
  G__11723.cljs$core$IFn$_invoke$arity$5 = G__11723__5;
  G__11723.cljs$core$IFn$_invoke$arity$6 = G__11723__6;
  G__11723.cljs$core$IFn$_invoke$arity$7 = G__11723__7;
  G__11723.cljs$core$IFn$_invoke$arity$8 = G__11723__8;
  G__11723.cljs$core$IFn$_invoke$arity$9 = G__11723__9;
  G__11723.cljs$core$IFn$_invoke$arity$10 = G__11723__10;
  G__11723.cljs$core$IFn$_invoke$arity$11 = G__11723__11;
  G__11723.cljs$core$IFn$_invoke$arity$12 = G__11723__12;
  G__11723.cljs$core$IFn$_invoke$arity$13 = G__11723__13;
  G__11723.cljs$core$IFn$_invoke$arity$14 = G__11723__14;
  G__11723.cljs$core$IFn$_invoke$arity$15 = G__11723__15;
  G__11723.cljs$core$IFn$_invoke$arity$16 = G__11723__16;
  G__11723.cljs$core$IFn$_invoke$arity$17 = G__11723__17;
  G__11723.cljs$core$IFn$_invoke$arity$18 = G__11723__18;
  G__11723.cljs$core$IFn$_invoke$arity$19 = G__11723__19;
  G__11723.cljs$core$IFn$_invoke$arity$20 = G__11723__20;
  G__11723.cljs$core$IFn$_invoke$arity$21 = G__11723__21;
  G__11723.cljs$core$IFn$_invoke$arity$22 = G__11723__22;
  return G__11723;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args11722) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11722)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__11727 = o;
    if (G__11727) {
      var bit__4312__auto__ = G__11727.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4312__auto__ || G__11727.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__11727.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11727);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11727);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3636__auto__ = !(o == null);
    if (and__3636__auto__) {
      var G__11731 = o;
      if (G__11731) {
        var bit__4312__auto__ = G__11731.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4312__auto__ || G__11731.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__11731.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11731);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11731);
      }
    } else {
      return and__3636__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__11732__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11733 = ret;
            var G__11734 = cljs.core.first.call(null, ks);
            var G__11735 = cljs.core.next.call(null, ks);
            coll = G__11733;
            k = G__11734;
            ks = G__11735;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11732 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11732__delegate.call(this, coll, k, ks);
    };
    G__11732.cljs$lang$maxFixedArity = 2;
    G__11732.cljs$lang$applyTo = function(arglist__11736) {
      var coll = cljs.core.first(arglist__11736);
      arglist__11736 = cljs.core.next(arglist__11736);
      var k = cljs.core.first(arglist__11736);
      var ks = cljs.core.rest(arglist__11736);
      return G__11732__delegate(coll, k, ks);
    };
    G__11732.cljs$core$IFn$_invoke$arity$variadic = G__11732__delegate;
    return G__11732;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11738 = x;
    if (G__11738) {
      var bit__4312__auto__ = G__11738.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4312__auto__ || G__11738.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__11738.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11738);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11738);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11740 = x;
    if (G__11740) {
      var bit__4312__auto__ = G__11740.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4312__auto__ || G__11740.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__11740.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11740);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11740);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__11742 = x;
  if (G__11742) {
    var bit__4312__auto__ = G__11742.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4312__auto__ || G__11742.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__11742.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11742);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11742);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__11744 = x;
  if (G__11744) {
    var bit__4312__auto__ = G__11744.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4312__auto__ || G__11744.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__11744.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11744);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11744);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__11746 = x;
  if (G__11746) {
    var bit__4312__auto__ = G__11746.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4312__auto__ || G__11746.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__11746.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11746);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11746);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__11748 = x;
  if (G__11748) {
    var bit__4312__auto__ = G__11748.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4312__auto__ || G__11748.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__11748.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11748);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11748);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11750 = x;
    if (G__11750) {
      var bit__4312__auto__ = G__11750.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4312__auto__ || G__11750.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__11750.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11750);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11750);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__11752 = x;
  if (G__11752) {
    var bit__4312__auto__ = G__11752.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4312__auto__ || G__11752.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__11752.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11752);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11752);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__11754 = x;
  if (G__11754) {
    var bit__4305__auto__ = G__11754.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4305__auto__ || G__11754.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj11758 = {};
    return obj11758;
  };
  var js_obj__1 = function() {
    var G__11759__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__11759 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11759__delegate.call(this, keyvals);
    };
    G__11759.cljs$lang$maxFixedArity = 0;
    G__11759.cljs$lang$applyTo = function(arglist__11760) {
      var keyvals = cljs.core.seq(arglist__11760);
      return G__11759__delegate(keyvals);
    };
    G__11759.cljs$core$IFn$_invoke$arity$variadic = G__11759__delegate;
    return G__11759;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11761 = i__$1 + 1;
      var G__11762 = j__$1 + 1;
      var G__11763 = len__$1 - 1;
      i__$1 = G__11761;
      j__$1 = G__11762;
      len__$1 = G__11763;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11764 = i__$1 - 1;
      var G__11765 = j__$1 - 1;
      var G__11766 = len__$1 - 1;
      i__$1 = G__11764;
      j__$1 = G__11765;
      len__$1 = G__11766;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj11768 = {};
  return obj11768;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__11770 = s;
    if (G__11770) {
      var bit__4312__auto__ = G__11770.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4312__auto__ || G__11770.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__11770.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11770);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11770);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__11772 = s;
  if (G__11772) {
    var bit__4312__auto__ = G__11772.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4312__auto__ || G__11772.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__11772.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11772);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11772);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3648__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3648__auto__) {
    return or__3648__auto__;
  } else {
    var G__11776 = f;
    if (G__11776) {
      var bit__4312__auto__ = G__11776.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4312__auto__ || G__11776.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__11776.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11776);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11776);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__11777__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__11778 = cljs.core.conj.call(null, s, x__$1);
              var G__11779 = etc;
              s = G__11778;
              xs = G__11779;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__11777 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11777__delegate.call(this, x, y, more);
    };
    G__11777.cljs$lang$maxFixedArity = 2;
    G__11777.cljs$lang$applyTo = function(arglist__11780) {
      var x = cljs.core.first(arglist__11780);
      arglist__11780 = cljs.core.next(arglist__11780);
      var y = cljs.core.first(arglist__11780);
      var more = cljs.core.rest(arglist__11780);
      return G__11777__delegate(x, y, more);
    };
    G__11777.cljs$core$IFn$_invoke$arity$variadic = G__11777__delegate;
    return G__11777;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3648__auto__ = cljs.core.seq.call(null, coll);
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__11782 = x;
            if (G__11782) {
              var bit__4305__auto__ = G__11782.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4305__auto__ || G__11782.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__11783 = xs;
        var G__11784 = ys;
        var G__11785 = len;
        var G__11786 = n + 1;
        xs = G__11783;
        ys = G__11784;
        len = G__11785;
        n = G__11786;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11787 = nval;
          var G__11788 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__11787;
          coll__$1 = G__11788;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__11791 = coll;
      if (G__11791) {
        var bit__4305__auto__ = G__11791.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4305__auto__ || G__11791.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__11792 = coll;
      if (G__11792) {
        var bit__4305__auto__ = G__11792.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4305__auto__ || G__11792.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__11793 = null;
      var G__11793__0 = function() {
        return f.call(null);
      };
      var G__11793__1 = function(x) {
        return cf.call(null, x);
      };
      var G__11793__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__11793 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__11793__0.call(this);
          case 1:
            return G__11793__1.call(this, x);
          case 2:
            return G__11793__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11793.cljs$core$IFn$_invoke$arity$0 = G__11793__0;
      G__11793.cljs$core$IFn$_invoke$arity$1 = G__11793__1;
      G__11793.cljs$core$IFn$_invoke$arity$2 = G__11793__2;
      return G__11793;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__11794__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__11794 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11794__delegate.call(this, x, y, more);
    };
    G__11794.cljs$lang$maxFixedArity = 2;
    G__11794.cljs$lang$applyTo = function(arglist__11795) {
      var x = cljs.core.first(arglist__11795);
      arglist__11795 = cljs.core.next(arglist__11795);
      var y = cljs.core.first(arglist__11795);
      var more = cljs.core.rest(arglist__11795);
      return G__11794__delegate(x, y, more);
    };
    G__11794.cljs$core$IFn$_invoke$arity$variadic = G__11794__delegate;
    return G__11794;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__11796__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__11796 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11796__delegate.call(this, x, y, more);
    };
    G__11796.cljs$lang$maxFixedArity = 2;
    G__11796.cljs$lang$applyTo = function(arglist__11797) {
      var x = cljs.core.first(arglist__11797);
      arglist__11797 = cljs.core.next(arglist__11797);
      var y = cljs.core.first(arglist__11797);
      var more = cljs.core.rest(arglist__11797);
      return G__11796__delegate(x, y, more);
    };
    G__11796.cljs$core$IFn$_invoke$arity$variadic = G__11796__delegate;
    return G__11796;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__11798__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__11798 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11798__delegate.call(this, x, y, more);
    };
    G__11798.cljs$lang$maxFixedArity = 2;
    G__11798.cljs$lang$applyTo = function(arglist__11799) {
      var x = cljs.core.first(arglist__11799);
      arglist__11799 = cljs.core.next(arglist__11799);
      var y = cljs.core.first(arglist__11799);
      var more = cljs.core.rest(arglist__11799);
      return G__11798__delegate(x, y, more);
    };
    G__11798.cljs$core$IFn$_invoke$arity$variadic = G__11798__delegate;
    return G__11798;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__11800__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__11800 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11800__delegate.call(this, x, y, more);
    };
    G__11800.cljs$lang$maxFixedArity = 2;
    G__11800.cljs$lang$applyTo = function(arglist__11801) {
      var x = cljs.core.first(arglist__11801);
      arglist__11801 = cljs.core.next(arglist__11801);
      var y = cljs.core.first(arglist__11801);
      var more = cljs.core.rest(arglist__11801);
      return G__11800__delegate(x, y, more);
    };
    G__11800.cljs$core$IFn$_invoke$arity$variadic = G__11800__delegate;
    return G__11800;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__11802__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__11803 = y;
            var G__11804 = cljs.core.first.call(null, more);
            var G__11805 = cljs.core.next.call(null, more);
            x = G__11803;
            y = G__11804;
            more = G__11805;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11802 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11802__delegate.call(this, x, y, more);
    };
    G__11802.cljs$lang$maxFixedArity = 2;
    G__11802.cljs$lang$applyTo = function(arglist__11806) {
      var x = cljs.core.first(arglist__11806);
      arglist__11806 = cljs.core.next(arglist__11806);
      var y = cljs.core.first(arglist__11806);
      var more = cljs.core.rest(arglist__11806);
      return G__11802__delegate(x, y, more);
    };
    G__11802.cljs$core$IFn$_invoke$arity$variadic = G__11802__delegate;
    return G__11802;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__11807__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11808 = y;
            var G__11809 = cljs.core.first.call(null, more);
            var G__11810 = cljs.core.next.call(null, more);
            x = G__11808;
            y = G__11809;
            more = G__11810;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11807 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11807__delegate.call(this, x, y, more);
    };
    G__11807.cljs$lang$maxFixedArity = 2;
    G__11807.cljs$lang$applyTo = function(arglist__11811) {
      var x = cljs.core.first(arglist__11811);
      arglist__11811 = cljs.core.next(arglist__11811);
      var y = cljs.core.first(arglist__11811);
      var more = cljs.core.rest(arglist__11811);
      return G__11807__delegate(x, y, more);
    };
    G__11807.cljs$core$IFn$_invoke$arity$variadic = G__11807__delegate;
    return G__11807;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__11812__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__11813 = y;
            var G__11814 = cljs.core.first.call(null, more);
            var G__11815 = cljs.core.next.call(null, more);
            x = G__11813;
            y = G__11814;
            more = G__11815;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11812 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11812__delegate.call(this, x, y, more);
    };
    G__11812.cljs$lang$maxFixedArity = 2;
    G__11812.cljs$lang$applyTo = function(arglist__11816) {
      var x = cljs.core.first(arglist__11816);
      arglist__11816 = cljs.core.next(arglist__11816);
      var y = cljs.core.first(arglist__11816);
      var more = cljs.core.rest(arglist__11816);
      return G__11812__delegate(x, y, more);
    };
    G__11812.cljs$core$IFn$_invoke$arity$variadic = G__11812__delegate;
    return G__11812;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__11817__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11818 = y;
            var G__11819 = cljs.core.first.call(null, more);
            var G__11820 = cljs.core.next.call(null, more);
            x = G__11818;
            y = G__11819;
            more = G__11820;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11817 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11817__delegate.call(this, x, y, more);
    };
    G__11817.cljs$lang$maxFixedArity = 2;
    G__11817.cljs$lang$applyTo = function(arglist__11821) {
      var x = cljs.core.first(arglist__11821);
      arglist__11821 = cljs.core.next(arglist__11821);
      var y = cljs.core.first(arglist__11821);
      var more = cljs.core.rest(arglist__11821);
      return G__11817__delegate(x, y, more);
    };
    G__11817.cljs$core$IFn$_invoke$arity$variadic = G__11817__delegate;
    return G__11817;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3955__auto__ = x;
    var y__3956__auto__ = y;
    return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
  };
  var max__3 = function() {
    var G__11822__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3955__auto__ = x;
        var y__3956__auto__ = y;
        return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
      }(), more);
    };
    var G__11822 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11822__delegate.call(this, x, y, more);
    };
    G__11822.cljs$lang$maxFixedArity = 2;
    G__11822.cljs$lang$applyTo = function(arglist__11823) {
      var x = cljs.core.first(arglist__11823);
      arglist__11823 = cljs.core.next(arglist__11823);
      var y = cljs.core.first(arglist__11823);
      var more = cljs.core.rest(arglist__11823);
      return G__11822__delegate(x, y, more);
    };
    G__11822.cljs$core$IFn$_invoke$arity$variadic = G__11822__delegate;
    return G__11822;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3962__auto__ = x;
    var y__3963__auto__ = y;
    return x__3962__auto__ < y__3963__auto__ ? x__3962__auto__ : y__3963__auto__;
  };
  var min__3 = function() {
    var G__11824__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3962__auto__ = x;
        var y__3963__auto__ = y;
        return x__3962__auto__ < y__3963__auto__ ? x__3962__auto__ : y__3963__auto__;
      }(), more);
    };
    var G__11824 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11824__delegate.call(this, x, y, more);
    };
    G__11824.cljs$lang$maxFixedArity = 2;
    G__11824.cljs$lang$applyTo = function(arglist__11825) {
      var x = cljs.core.first(arglist__11825);
      arglist__11825 = cljs.core.next(arglist__11825);
      var y = cljs.core.first(arglist__11825);
      var more = cljs.core.rest(arglist__11825);
      return G__11824__delegate(x, y, more);
    };
    G__11824.cljs$core$IFn$_invoke$arity$variadic = G__11824__delegate;
    return G__11824;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__11826__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__11826 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11826__delegate.call(this, x, y, more);
    };
    G__11826.cljs$lang$maxFixedArity = 2;
    G__11826.cljs$lang$applyTo = function(arglist__11827) {
      var x = cljs.core.first(arglist__11827);
      arglist__11827 = cljs.core.next(arglist__11827);
      var y = cljs.core.first(arglist__11827);
      var more = cljs.core.rest(arglist__11827);
      return G__11826__delegate(x, y, more);
    };
    G__11826.cljs$core$IFn$_invoke$arity$variadic = G__11826__delegate;
    return G__11826;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__11828__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__11828 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11828__delegate.call(this, x, y, more);
    };
    G__11828.cljs$lang$maxFixedArity = 2;
    G__11828.cljs$lang$applyTo = function(arglist__11829) {
      var x = cljs.core.first(arglist__11829);
      arglist__11829 = cljs.core.next(arglist__11829);
      var y = cljs.core.first(arglist__11829);
      var more = cljs.core.rest(arglist__11829);
      return G__11828__delegate(x, y, more);
    };
    G__11828.cljs$core$IFn$_invoke$arity$variadic = G__11828__delegate;
    return G__11828;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__11830__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__11830 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11830__delegate.call(this, x, y, more);
    };
    G__11830.cljs$lang$maxFixedArity = 2;
    G__11830.cljs$lang$applyTo = function(arglist__11831) {
      var x = cljs.core.first(arglist__11831);
      arglist__11831 = cljs.core.next(arglist__11831);
      var y = cljs.core.first(arglist__11831);
      var more = cljs.core.rest(arglist__11831);
      return G__11830__delegate(x, y, more);
    };
    G__11830.cljs$core$IFn$_invoke$arity$variadic = G__11830__delegate;
    return G__11830;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__11832__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__11832 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11832__delegate.call(this, x, y, more);
    };
    G__11832.cljs$lang$maxFixedArity = 2;
    G__11832.cljs$lang$applyTo = function(arglist__11833) {
      var x = cljs.core.first(arglist__11833);
      arglist__11833 = cljs.core.next(arglist__11833);
      var y = cljs.core.first(arglist__11833);
      var more = cljs.core.rest(arglist__11833);
      return G__11832__delegate(x, y, more);
    };
    G__11832.cljs$core$IFn$_invoke$arity$variadic = G__11832__delegate;
    return G__11832;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__11834__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__11834 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11834__delegate.call(this, x, y, more);
    };
    G__11834.cljs$lang$maxFixedArity = 2;
    G__11834.cljs$lang$applyTo = function(arglist__11835) {
      var x = cljs.core.first(arglist__11835);
      arglist__11835 = cljs.core.next(arglist__11835);
      var y = cljs.core.first(arglist__11835);
      var more = cljs.core.rest(arglist__11835);
      return G__11834__delegate(x, y, more);
    };
    G__11834.cljs$core$IFn$_invoke$arity$variadic = G__11834__delegate;
    return G__11834;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__11836__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__11836 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11836__delegate.call(this, x, y, more);
    };
    G__11836.cljs$lang$maxFixedArity = 2;
    G__11836.cljs$lang$applyTo = function(arglist__11837) {
      var x = cljs.core.first(arglist__11837);
      arglist__11837 = cljs.core.next(arglist__11837);
      var y = cljs.core.first(arglist__11837);
      var more = cljs.core.rest(arglist__11837);
      return G__11836__delegate(x, y, more);
    };
    G__11836.cljs$core$IFn$_invoke$arity$variadic = G__11836__delegate;
    return G__11836;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__11838__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__11838 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11838__delegate.call(this, x, y, more);
    };
    G__11838.cljs$lang$maxFixedArity = 2;
    G__11838.cljs$lang$applyTo = function(arglist__11839) {
      var x = cljs.core.first(arglist__11839);
      arglist__11839 = cljs.core.next(arglist__11839);
      var y = cljs.core.first(arglist__11839);
      var more = cljs.core.rest(arglist__11839);
      return G__11838__delegate(x, y, more);
    };
    G__11838.cljs$core$IFn$_invoke$arity$variadic = G__11838__delegate;
    return G__11838;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__11840__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11841 = y;
            var G__11842 = cljs.core.first.call(null, more);
            var G__11843 = cljs.core.next.call(null, more);
            x = G__11841;
            y = G__11842;
            more = G__11843;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11840 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11840__delegate.call(this, x, y, more);
    };
    G__11840.cljs$lang$maxFixedArity = 2;
    G__11840.cljs$lang$applyTo = function(arglist__11844) {
      var x = cljs.core.first(arglist__11844);
      arglist__11844 = cljs.core.next(arglist__11844);
      var y = cljs.core.first(arglist__11844);
      var more = cljs.core.rest(arglist__11844);
      return G__11840__delegate(x, y, more);
    };
    G__11840.cljs$core$IFn$_invoke$arity$variadic = G__11840__delegate;
    return G__11840;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__11845 = n__$1 - 1;
      var G__11846 = cljs.core.next.call(null, xs);
      n__$1 = G__11845;
      xs = G__11846;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__11847__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__11848 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__11849 = cljs.core.next.call(null, more);
          sb = G__11848;
          more = G__11849;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__11847 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11847__delegate.call(this, x, ys);
    };
    G__11847.cljs$lang$maxFixedArity = 1;
    G__11847.cljs$lang$applyTo = function(arglist__11850) {
      var x = cljs.core.first(arglist__11850);
      var ys = cljs.core.rest(arglist__11850);
      return G__11847__delegate(x, ys);
    };
    G__11847.cljs$core$IFn$_invoke$arity$variadic = G__11847__delegate;
    return G__11847;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__11851 = cljs.core.next.call(null, xs);
            var G__11852 = cljs.core.next.call(null, ys);
            xs = G__11851;
            ys = G__11852;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__11853 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__11854 = cljs.core.next.call(null, s);
        res = G__11853;
        s = G__11854;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__11855 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__11856 = cljs.core.next.call(null, s);
      h = G__11855;
      s = G__11856;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__11857 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__11858 = cljs.core.next.call(null, s__$1);
      h = G__11857;
      s__$1 = G__11858;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__11865_11871 = cljs.core.seq.call(null, fn_map);
  var chunk__11866_11872 = null;
  var count__11867_11873 = 0;
  var i__11868_11874 = 0;
  while (true) {
    if (i__11868_11874 < count__11867_11873) {
      var vec__11869_11875 = cljs.core._nth.call(null, chunk__11866_11872, i__11868_11874);
      var key_name_11876 = cljs.core.nth.call(null, vec__11869_11875, 0, null);
      var f_11877 = cljs.core.nth.call(null, vec__11869_11875, 1, null);
      var str_name_11878 = cljs.core.name.call(null, key_name_11876);
      obj[str_name_11878] = f_11877;
      var G__11879 = seq__11865_11871;
      var G__11880 = chunk__11866_11872;
      var G__11881 = count__11867_11873;
      var G__11882 = i__11868_11874 + 1;
      seq__11865_11871 = G__11879;
      chunk__11866_11872 = G__11880;
      count__11867_11873 = G__11881;
      i__11868_11874 = G__11882;
      continue;
    } else {
      var temp__4126__auto___11883 = cljs.core.seq.call(null, seq__11865_11871);
      if (temp__4126__auto___11883) {
        var seq__11865_11884__$1 = temp__4126__auto___11883;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11865_11884__$1)) {
          var c__4418__auto___11885 = cljs.core.chunk_first.call(null, seq__11865_11884__$1);
          var G__11886 = cljs.core.chunk_rest.call(null, seq__11865_11884__$1);
          var G__11887 = c__4418__auto___11885;
          var G__11888 = cljs.core.count.call(null, c__4418__auto___11885);
          var G__11889 = 0;
          seq__11865_11871 = G__11886;
          chunk__11866_11872 = G__11887;
          count__11867_11873 = G__11888;
          i__11868_11874 = G__11889;
          continue;
        } else {
          var vec__11870_11890 = cljs.core.first.call(null, seq__11865_11884__$1);
          var key_name_11891 = cljs.core.nth.call(null, vec__11870_11890, 0, null);
          var f_11892 = cljs.core.nth.call(null, vec__11870_11890, 1, null);
          var str_name_11893 = cljs.core.name.call(null, key_name_11891);
          obj[str_name_11893] = f_11892;
          var G__11894 = cljs.core.next.call(null, seq__11865_11884__$1);
          var G__11895 = null;
          var G__11896 = 0;
          var G__11897 = 0;
          seq__11865_11871 = G__11894;
          chunk__11866_11872 = G__11895;
          count__11867_11873 = G__11896;
          i__11868_11874 = G__11897;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__11899 = coll;
  if (G__11899) {
    var bit__4312__auto__ = G__11899.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4312__auto__ || G__11899.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__11899.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11899);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11899);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__11900 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__11900;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__11901 = i - 1;
        var G__11902 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__11901;
        r = G__11902;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__11903) {
    var xs = cljs.core.seq(arglist__11903);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3648__auto__ = coll == null;
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      var G__11907 = coll;
      if (G__11907) {
        var bit__4305__auto__ = G__11907.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4305__auto__ || G__11907.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__11909 = x;
  if (G__11909) {
    var bit__4312__auto__ = G__11909.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4312__auto__ || G__11909.cljs$core$IList$) {
      return true;
    } else {
      if (!G__11909.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11909);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11909);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4059__auto__ = self__._hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__11911 = null;
  var G__11911__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__11911__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__11911 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11911__2.call(this, self__, coll);
      case 3:
        return G__11911__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11911.cljs$core$IFn$_invoke$arity$2 = G__11911__2;
  G__11911.cljs$core$IFn$_invoke$arity$3 = G__11911__3;
  return G__11911;
}();
cljs.core.Keyword.prototype.apply = function(self__, args11910) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11910)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__11913 = x;
    if (G__11913) {
      var bit__4305__auto__ = G__11913.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4305__auto__ || G__11913.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__11914 = ls.sval();
        ls = G__11914;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__11916 = s;
    if (G__11916) {
      var bit__4305__auto__ = G__11916.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4305__auto__ || G__11916.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__11917 = cljs.core.next.call(null, s__$1);
      s__$1 = G__11917;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_11918 = 0;
  var xs_11919 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_11919) {
      ret[i_11918] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_11919));
      var G__11920 = i_11918 + 1;
      var G__11921 = cljs.core.next.call(null, xs_11919);
      i_11918 = G__11920;
      xs_11919 = G__11921;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11922 = i + 1;
          var G__11923 = cljs.core.next.call(null, s__$1);
          i = G__11922;
          s__$1 = G__11923;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11924 = size;
      var i_11925 = 0;
      while (true) {
        if (i_11925 < n__4518__auto___11924) {
          a[i_11925] = init_val_or_seq;
          var G__11926 = i_11925 + 1;
          i_11925 = G__11926;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11927 = i + 1;
          var G__11928 = cljs.core.next.call(null, s__$1);
          i = G__11927;
          s__$1 = G__11928;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11929 = size;
      var i_11930 = 0;
      while (true) {
        if (i_11930 < n__4518__auto___11929) {
          a[i_11930] = init_val_or_seq;
          var G__11931 = i_11930 + 1;
          i_11930 = G__11931;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11932 = i + 1;
          var G__11933 = cljs.core.next.call(null, s__$1);
          i = G__11932;
          s__$1 = G__11933;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11934 = size;
      var i_11935 = 0;
      while (true) {
        if (i_11935 < n__4518__auto___11934) {
          a[i_11935] = init_val_or_seq;
          var G__11936 = i_11935 + 1;
          i_11935 = G__11936;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11937 = i + 1;
          var G__11938 = cljs.core.next.call(null, s__$1);
          i = G__11937;
          s__$1 = G__11938;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4518__auto___11939 = size;
      var i_11940 = 0;
      while (true) {
        if (i_11940 < n__4518__auto___11939) {
          a[i_11940] = init_val_or_seq;
          var G__11941 = i_11940 + 1;
          i_11940 = G__11941;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__11942 = cljs.core.next.call(null, s__$1);
        var G__11943 = i - 1;
        var G__11944 = sum + 1;
        s__$1 = G__11942;
        i = G__11943;
        sum = G__11944;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__11945__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__11945 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11945__delegate.call(this, x, y, zs);
    };
    G__11945.cljs$lang$maxFixedArity = 2;
    G__11945.cljs$lang$applyTo = function(arglist__11946) {
      var x = cljs.core.first(arglist__11946);
      arglist__11946 = cljs.core.next(arglist__11946);
      var y = cljs.core.first(arglist__11946);
      var zs = cljs.core.rest(arglist__11946);
      return G__11945__delegate(x, y, zs);
    };
    G__11945.cljs$core$IFn$_invoke$arity$variadic = G__11945__delegate;
    return G__11945;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__11947__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__11947 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__11947__delegate.call(this, a, b, c, d, more);
    };
    G__11947.cljs$lang$maxFixedArity = 4;
    G__11947.cljs$lang$applyTo = function(arglist__11948) {
      var a = cljs.core.first(arglist__11948);
      arglist__11948 = cljs.core.next(arglist__11948);
      var b = cljs.core.first(arglist__11948);
      arglist__11948 = cljs.core.next(arglist__11948);
      var c = cljs.core.first(arglist__11948);
      arglist__11948 = cljs.core.next(arglist__11948);
      var d = cljs.core.first(arglist__11948);
      var more = cljs.core.rest(arglist__11948);
      return G__11947__delegate(a, b, c, d, more);
    };
    G__11947.cljs$core$IFn$_invoke$arity$variadic = G__11947__delegate;
    return G__11947;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__11949__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__11950 = ntcoll;
          var G__11951 = cljs.core.first.call(null, vals);
          var G__11952 = cljs.core.next.call(null, vals);
          tcoll = G__11950;
          val = G__11951;
          vals = G__11952;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11949 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11949__delegate.call(this, tcoll, val, vals);
    };
    G__11949.cljs$lang$maxFixedArity = 2;
    G__11949.cljs$lang$applyTo = function(arglist__11953) {
      var tcoll = cljs.core.first(arglist__11953);
      arglist__11953 = cljs.core.next(arglist__11953);
      var val = cljs.core.first(arglist__11953);
      var vals = cljs.core.rest(arglist__11953);
      return G__11949__delegate(tcoll, val, vals);
    };
    G__11949.cljs$core$IFn$_invoke$arity$variadic = G__11949__delegate;
    return G__11949;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__11954__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__11955 = ntcoll;
          var G__11956 = cljs.core.first.call(null, kvs);
          var G__11957 = cljs.core.second.call(null, kvs);
          var G__11958 = cljs.core.nnext.call(null, kvs);
          tcoll = G__11955;
          key = G__11956;
          val = G__11957;
          kvs = G__11958;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11954 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11954__delegate.call(this, tcoll, key, val, kvs);
    };
    G__11954.cljs$lang$maxFixedArity = 3;
    G__11954.cljs$lang$applyTo = function(arglist__11959) {
      var tcoll = cljs.core.first(arglist__11959);
      arglist__11959 = cljs.core.next(arglist__11959);
      var key = cljs.core.first(arglist__11959);
      arglist__11959 = cljs.core.next(arglist__11959);
      var val = cljs.core.first(arglist__11959);
      var kvs = cljs.core.rest(arglist__11959);
      return G__11954__delegate(tcoll, key, val, kvs);
    };
    G__11954.cljs$core$IFn$_invoke$arity$variadic = G__11954__delegate;
    return G__11954;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__11960__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__11961 = ntcoll;
          var G__11962 = cljs.core.first.call(null, ks);
          var G__11963 = cljs.core.next.call(null, ks);
          tcoll = G__11961;
          key = G__11962;
          ks = G__11963;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11960 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11960__delegate.call(this, tcoll, key, ks);
    };
    G__11960.cljs$lang$maxFixedArity = 2;
    G__11960.cljs$lang$applyTo = function(arglist__11964) {
      var tcoll = cljs.core.first(arglist__11964);
      arglist__11964 = cljs.core.next(arglist__11964);
      var key = cljs.core.first(arglist__11964);
      var ks = cljs.core.rest(arglist__11964);
      return G__11960__delegate(tcoll, key, ks);
    };
    G__11960.cljs$core$IFn$_invoke$arity$variadic = G__11960__delegate;
    return G__11960;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__11965__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__11966 = ntcoll;
          var G__11967 = cljs.core.first.call(null, vals);
          var G__11968 = cljs.core.next.call(null, vals);
          tcoll = G__11966;
          val = G__11967;
          vals = G__11968;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__11965 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11965__delegate.call(this, tcoll, val, vals);
    };
    G__11965.cljs$lang$maxFixedArity = 2;
    G__11965.cljs$lang$applyTo = function(arglist__11969) {
      var tcoll = cljs.core.first(arglist__11969);
      arglist__11969 = cljs.core.next(arglist__11969);
      var val = cljs.core.first(arglist__11969);
      var vals = cljs.core.rest(arglist__11969);
      return G__11965__delegate(tcoll, val, vals);
    };
    G__11965.cljs$core$IFn$_invoke$arity$variadic = G__11965__delegate;
    return G__11965;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4562 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4562);
      } else {
        return f.call(null, a4562);
      }
    } else {
      var b4563 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4562, b4563);
        } else {
          return f.call(null, a4562, b4563);
        }
      } else {
        var c4564 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4562, b4563, c4564);
          } else {
            return f.call(null, a4562, b4563, c4564);
          }
        } else {
          var d4565 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4562, b4563, c4564, d4565);
            } else {
              return f.call(null, a4562, b4563, c4564, d4565);
            }
          } else {
            var e4566 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4562, b4563, c4564, d4565, e4566);
              } else {
                return f.call(null, a4562, b4563, c4564, d4565, e4566);
              }
            } else {
              var f4567 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4562, b4563, c4564, d4565, e4566, f4567);
                } else {
                  return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567);
                }
              } else {
                var g4568 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4562, b4563, c4564, d4565, e4566, f4567, g4568);
                  } else {
                    return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568);
                  }
                } else {
                  var h4569 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569);
                    } else {
                      return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569);
                    }
                  } else {
                    var i4570 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570);
                      } else {
                        return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570);
                      }
                    } else {
                      var j4571 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571);
                        } else {
                          return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571);
                        }
                      } else {
                        var k4572 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572);
                          } else {
                            return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572);
                          }
                        } else {
                          var l4573 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573);
                            } else {
                              return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573);
                            }
                          } else {
                            var m4574 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574);
                              } else {
                                return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574);
                              }
                            } else {
                              var n4575 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575);
                                } else {
                                  return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575);
                                }
                              } else {
                                var o4576 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576);
                                  } else {
                                    return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576);
                                  }
                                } else {
                                  var p4577 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577);
                                    } else {
                                      return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577);
                                    }
                                  } else {
                                    var q4578 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578);
                                      } else {
                                        return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578);
                                      }
                                    } else {
                                      var r4579 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579);
                                        } else {
                                          return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579);
                                        }
                                      } else {
                                        var s4580 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580);
                                          } else {
                                            return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580);
                                          }
                                        } else {
                                          var t4581 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580, t4581);
                                            } else {
                                              return f.call(null, a4562, b4563, c4564, d4565, e4566, f4567, g4568, h4569, i4570, j4571, k4572, l4573, m4574, n4575, o4576, p4577, q4578, r4579, s4580, t4581);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__11970__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__11970 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__11970__delegate.call(this, f, a, b, c, d, args);
    };
    G__11970.cljs$lang$maxFixedArity = 5;
    G__11970.cljs$lang$applyTo = function(arglist__11971) {
      var f = cljs.core.first(arglist__11971);
      arglist__11971 = cljs.core.next(arglist__11971);
      var a = cljs.core.first(arglist__11971);
      arglist__11971 = cljs.core.next(arglist__11971);
      var b = cljs.core.first(arglist__11971);
      arglist__11971 = cljs.core.next(arglist__11971);
      var c = cljs.core.first(arglist__11971);
      arglist__11971 = cljs.core.next(arglist__11971);
      var d = cljs.core.first(arglist__11971);
      var args = cljs.core.rest(arglist__11971);
      return G__11970__delegate(f, a, b, c, d, args);
    };
    G__11970.cljs$core$IFn$_invoke$arity$variadic = G__11970__delegate;
    return G__11970;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__11972__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__11972 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__11972__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__11972.cljs$lang$maxFixedArity = 6;
    G__11972.cljs$lang$applyTo = function(arglist__11973) {
      var obj = cljs.core.first(arglist__11973);
      arglist__11973 = cljs.core.next(arglist__11973);
      var f = cljs.core.first(arglist__11973);
      arglist__11973 = cljs.core.next(arglist__11973);
      var a = cljs.core.first(arglist__11973);
      arglist__11973 = cljs.core.next(arglist__11973);
      var b = cljs.core.first(arglist__11973);
      arglist__11973 = cljs.core.next(arglist__11973);
      var c = cljs.core.first(arglist__11973);
      arglist__11973 = cljs.core.next(arglist__11973);
      var d = cljs.core.first(arglist__11973);
      var args = cljs.core.rest(arglist__11973);
      return G__11972__delegate(obj, f, a, b, c, d, args);
    };
    G__11972.cljs$core$IFn$_invoke$arity$variadic = G__11972__delegate;
    return G__11972;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__11974__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__11974 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11974__delegate.call(this, x, y, more);
    };
    G__11974.cljs$lang$maxFixedArity = 2;
    G__11974.cljs$lang$applyTo = function(arglist__11975) {
      var x = cljs.core.first(arglist__11975);
      arglist__11975 = cljs.core.next(arglist__11975);
      var y = cljs.core.first(arglist__11975);
      var more = cljs.core.rest(arglist__11975);
      return G__11974__delegate(x, y, more);
    };
    G__11974.cljs$core$IFn$_invoke$arity$variadic = G__11974__delegate;
    return G__11974;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t11979 !== "undefined") {
  } else {
    cljs.core.t11979 = function(nil_iter, meta11980) {
      this.nil_iter = nil_iter;
      this.meta11980 = meta11980;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t11979.cljs$lang$type = true;
    cljs.core.t11979.cljs$lang$ctorStr = "cljs.core/t11979";
    cljs.core.t11979.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/t11979");
    };
    cljs.core.t11979.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t11979.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t11979.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t11979.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11981) {
      var self__ = this;
      var _11981__$1 = this;
      return self__.meta11980;
    };
    cljs.core.t11979.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11981, meta11980__$1) {
      var self__ = this;
      var _11981__$1 = this;
      return new cljs.core.t11979(self__.nil_iter, meta11980__$1);
    };
    cljs.core.__GT_t11979 = function __GT_t11979(nil_iter__$1, meta11980) {
      return new cljs.core.t11979(nil_iter__$1, meta11980);
    };
  }
  return new cljs.core.t11979(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = !(lt.stepper == null);
      if (and__3636__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__11982 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__11982;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4518__auto___11983 = self__.iters.length;
  var i_11984 = 0;
  while (true) {
    if (i_11984 < n__4518__auto___11983) {
      self__.nexts[i_11984] = self__.iters[i_11984].next();
      var G__11985 = i_11984 + 1;
      i_11984 = G__11985;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = !(lt.stepper == null);
      if (and__3636__auto__) {
        return this$.hasNext();
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__11986_11990 = cljs.core.seq.call(null, colls);
  var chunk__11987_11991 = null;
  var count__11988_11992 = 0;
  var i__11989_11993 = 0;
  while (true) {
    if (i__11989_11993 < count__11988_11992) {
      var coll_11994 = cljs.core._nth.call(null, chunk__11987_11991, i__11989_11993);
      iters.push(cljs.core.iter.call(null, coll_11994));
      var G__11995 = seq__11986_11990;
      var G__11996 = chunk__11987_11991;
      var G__11997 = count__11988_11992;
      var G__11998 = i__11989_11993 + 1;
      seq__11986_11990 = G__11995;
      chunk__11987_11991 = G__11996;
      count__11988_11992 = G__11997;
      i__11989_11993 = G__11998;
      continue;
    } else {
      var temp__4126__auto___11999 = cljs.core.seq.call(null, seq__11986_11990);
      if (temp__4126__auto___11999) {
        var seq__11986_12000__$1 = temp__4126__auto___11999;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11986_12000__$1)) {
          var c__4418__auto___12001 = cljs.core.chunk_first.call(null, seq__11986_12000__$1);
          var G__12002 = cljs.core.chunk_rest.call(null, seq__11986_12000__$1);
          var G__12003 = c__4418__auto___12001;
          var G__12004 = cljs.core.count.call(null, c__4418__auto___12001);
          var G__12005 = 0;
          seq__11986_11990 = G__12002;
          chunk__11987_11991 = G__12003;
          count__11988_11992 = G__12004;
          i__11989_11993 = G__12005;
          continue;
        } else {
          var coll_12006 = cljs.core.first.call(null, seq__11986_12000__$1);
          iters.push(cljs.core.iter.call(null, coll_12006));
          var G__12007 = cljs.core.next.call(null, seq__11986_12000__$1);
          var G__12008 = null;
          var G__12009 = 0;
          var G__12010 = 0;
          seq__11986_11990 = G__12007;
          chunk__11987_11991 = G__12008;
          count__11988_11992 = G__12009;
          i__11989_11993 = G__12010;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3648__auto__ = cljs.core.seq.call(null, coll);
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__12011__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__12011 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12011__delegate.call(this, xform, coll, colls);
    };
    G__12011.cljs$lang$maxFixedArity = 2;
    G__12011.cljs$lang$applyTo = function(arglist__12012) {
      var xform = cljs.core.first(arglist__12012);
      arglist__12012 = cljs.core.next(arglist__12012);
      var coll = cljs.core.first(arglist__12012);
      var colls = cljs.core.rest(arglist__12012);
      return G__12011__delegate(xform, coll, colls);
    };
    G__12011.cljs$core$IFn$_invoke$arity$variadic = G__12011__delegate;
    return G__12011;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__12013 = pred;
        var G__12014 = cljs.core.next.call(null, coll);
        pred = G__12013;
        coll = G__12014;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3648__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        var G__12015 = pred;
        var G__12016 = cljs.core.next.call(null, coll);
        pred = G__12015;
        coll = G__12016;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__12017 = null;
    var G__12017__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__12017__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__12017__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__12017__3 = function() {
      var G__12018__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__12018 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__12018__delegate.call(this, x, y, zs);
      };
      G__12018.cljs$lang$maxFixedArity = 2;
      G__12018.cljs$lang$applyTo = function(arglist__12019) {
        var x = cljs.core.first(arglist__12019);
        arglist__12019 = cljs.core.next(arglist__12019);
        var y = cljs.core.first(arglist__12019);
        var zs = cljs.core.rest(arglist__12019);
        return G__12018__delegate(x, y, zs);
      };
      G__12018.cljs$core$IFn$_invoke$arity$variadic = G__12018__delegate;
      return G__12018;
    }();
    G__12017 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__12017__0.call(this);
        case 1:
          return G__12017__1.call(this, x);
        case 2:
          return G__12017__2.call(this, x, y);
        default:
          return G__12017__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__12017.cljs$lang$maxFixedArity = 2;
    G__12017.cljs$lang$applyTo = G__12017__3.cljs$lang$applyTo;
    G__12017.cljs$core$IFn$_invoke$arity$0 = G__12017__0;
    G__12017.cljs$core$IFn$_invoke$arity$1 = G__12017__1;
    G__12017.cljs$core$IFn$_invoke$arity$2 = G__12017__2;
    G__12017.cljs$core$IFn$_invoke$arity$variadic = G__12017__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__12017;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__12020__delegate = function(args) {
      return x;
    };
    var G__12020 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12020__delegate.call(this, args);
    };
    G__12020.cljs$lang$maxFixedArity = 0;
    G__12020.cljs$lang$applyTo = function(arglist__12021) {
      var args = cljs.core.seq(arglist__12021);
      return G__12020__delegate(args);
    };
    G__12020.cljs$core$IFn$_invoke$arity$variadic = G__12020__delegate;
    return G__12020;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__12022 = null;
      var G__12022__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__12022__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__12022__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__12022__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__12022__4 = function() {
        var G__12023__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__12023 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12023__delegate.call(this, x, y, z, args);
        };
        G__12023.cljs$lang$maxFixedArity = 3;
        G__12023.cljs$lang$applyTo = function(arglist__12024) {
          var x = cljs.core.first(arglist__12024);
          arglist__12024 = cljs.core.next(arglist__12024);
          var y = cljs.core.first(arglist__12024);
          arglist__12024 = cljs.core.next(arglist__12024);
          var z = cljs.core.first(arglist__12024);
          var args = cljs.core.rest(arglist__12024);
          return G__12023__delegate(x, y, z, args);
        };
        G__12023.cljs$core$IFn$_invoke$arity$variadic = G__12023__delegate;
        return G__12023;
      }();
      G__12022 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12022__0.call(this);
          case 1:
            return G__12022__1.call(this, x);
          case 2:
            return G__12022__2.call(this, x, y);
          case 3:
            return G__12022__3.call(this, x, y, z);
          default:
            return G__12022__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12022.cljs$lang$maxFixedArity = 3;
      G__12022.cljs$lang$applyTo = G__12022__4.cljs$lang$applyTo;
      G__12022.cljs$core$IFn$_invoke$arity$0 = G__12022__0;
      G__12022.cljs$core$IFn$_invoke$arity$1 = G__12022__1;
      G__12022.cljs$core$IFn$_invoke$arity$2 = G__12022__2;
      G__12022.cljs$core$IFn$_invoke$arity$3 = G__12022__3;
      G__12022.cljs$core$IFn$_invoke$arity$variadic = G__12022__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12022;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__12025 = null;
      var G__12025__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__12025__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__12025__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__12025__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__12025__4 = function() {
        var G__12026__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__12026 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12026__delegate.call(this, x, y, z, args);
        };
        G__12026.cljs$lang$maxFixedArity = 3;
        G__12026.cljs$lang$applyTo = function(arglist__12027) {
          var x = cljs.core.first(arglist__12027);
          arglist__12027 = cljs.core.next(arglist__12027);
          var y = cljs.core.first(arglist__12027);
          arglist__12027 = cljs.core.next(arglist__12027);
          var z = cljs.core.first(arglist__12027);
          var args = cljs.core.rest(arglist__12027);
          return G__12026__delegate(x, y, z, args);
        };
        G__12026.cljs$core$IFn$_invoke$arity$variadic = G__12026__delegate;
        return G__12026;
      }();
      G__12025 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12025__0.call(this);
          case 1:
            return G__12025__1.call(this, x);
          case 2:
            return G__12025__2.call(this, x, y);
          case 3:
            return G__12025__3.call(this, x, y, z);
          default:
            return G__12025__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12025.cljs$lang$maxFixedArity = 3;
      G__12025.cljs$lang$applyTo = G__12025__4.cljs$lang$applyTo;
      G__12025.cljs$core$IFn$_invoke$arity$0 = G__12025__0;
      G__12025.cljs$core$IFn$_invoke$arity$1 = G__12025__1;
      G__12025.cljs$core$IFn$_invoke$arity$2 = G__12025__2;
      G__12025.cljs$core$IFn$_invoke$arity$3 = G__12025__3;
      G__12025.cljs$core$IFn$_invoke$arity$variadic = G__12025__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12025;
    }();
  };
  var comp__4 = function() {
    var G__12028__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__12029__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__12030 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__12031 = cljs.core.next.call(null, fs__$2);
                ret = G__12030;
                fs__$2 = G__12031;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__12029 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__12029__delegate.call(this, args);
          };
          G__12029.cljs$lang$maxFixedArity = 0;
          G__12029.cljs$lang$applyTo = function(arglist__12032) {
            var args = cljs.core.seq(arglist__12032);
            return G__12029__delegate(args);
          };
          G__12029.cljs$core$IFn$_invoke$arity$variadic = G__12029__delegate;
          return G__12029;
        }();
      }(fs__$1);
    };
    var G__12028 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12028__delegate.call(this, f1, f2, f3, fs);
    };
    G__12028.cljs$lang$maxFixedArity = 3;
    G__12028.cljs$lang$applyTo = function(arglist__12033) {
      var f1 = cljs.core.first(arglist__12033);
      arglist__12033 = cljs.core.next(arglist__12033);
      var f2 = cljs.core.first(arglist__12033);
      arglist__12033 = cljs.core.next(arglist__12033);
      var f3 = cljs.core.first(arglist__12033);
      var fs = cljs.core.rest(arglist__12033);
      return G__12028__delegate(f1, f2, f3, fs);
    };
    G__12028.cljs$core$IFn$_invoke$arity$variadic = G__12028__delegate;
    return G__12028;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__12034__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__12034 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12034__delegate.call(this, args);
      };
      G__12034.cljs$lang$maxFixedArity = 0;
      G__12034.cljs$lang$applyTo = function(arglist__12035) {
        var args = cljs.core.seq(arglist__12035);
        return G__12034__delegate(args);
      };
      G__12034.cljs$core$IFn$_invoke$arity$variadic = G__12034__delegate;
      return G__12034;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__12036__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__12036 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12036__delegate.call(this, args);
      };
      G__12036.cljs$lang$maxFixedArity = 0;
      G__12036.cljs$lang$applyTo = function(arglist__12037) {
        var args = cljs.core.seq(arglist__12037);
        return G__12036__delegate(args);
      };
      G__12036.cljs$core$IFn$_invoke$arity$variadic = G__12036__delegate;
      return G__12036;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__12038__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__12038 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12038__delegate.call(this, args);
      };
      G__12038.cljs$lang$maxFixedArity = 0;
      G__12038.cljs$lang$applyTo = function(arglist__12039) {
        var args = cljs.core.seq(arglist__12039);
        return G__12038__delegate(args);
      };
      G__12038.cljs$core$IFn$_invoke$arity$variadic = G__12038__delegate;
      return G__12038;
    }();
  };
  var partial__5 = function() {
    var G__12040__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__12041__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__12041 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__12041__delegate.call(this, args);
        };
        G__12041.cljs$lang$maxFixedArity = 0;
        G__12041.cljs$lang$applyTo = function(arglist__12042) {
          var args = cljs.core.seq(arglist__12042);
          return G__12041__delegate(args);
        };
        G__12041.cljs$core$IFn$_invoke$arity$variadic = G__12041__delegate;
        return G__12041;
      }();
    };
    var G__12040 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12040__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__12040.cljs$lang$maxFixedArity = 4;
    G__12040.cljs$lang$applyTo = function(arglist__12043) {
      var f = cljs.core.first(arglist__12043);
      arglist__12043 = cljs.core.next(arglist__12043);
      var arg1 = cljs.core.first(arglist__12043);
      arglist__12043 = cljs.core.next(arglist__12043);
      var arg2 = cljs.core.first(arglist__12043);
      arglist__12043 = cljs.core.next(arglist__12043);
      var arg3 = cljs.core.first(arglist__12043);
      var more = cljs.core.rest(arglist__12043);
      return G__12040__delegate(f, arg1, arg2, arg3, more);
    };
    G__12040.cljs$core$IFn$_invoke$arity$variadic = G__12040__delegate;
    return G__12040;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__12044 = null;
      var G__12044__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__12044__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__12044__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__12044__4 = function() {
        var G__12045__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__12045 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12045__delegate.call(this, a, b, c, ds);
        };
        G__12045.cljs$lang$maxFixedArity = 3;
        G__12045.cljs$lang$applyTo = function(arglist__12046) {
          var a = cljs.core.first(arglist__12046);
          arglist__12046 = cljs.core.next(arglist__12046);
          var b = cljs.core.first(arglist__12046);
          arglist__12046 = cljs.core.next(arglist__12046);
          var c = cljs.core.first(arglist__12046);
          var ds = cljs.core.rest(arglist__12046);
          return G__12045__delegate(a, b, c, ds);
        };
        G__12045.cljs$core$IFn$_invoke$arity$variadic = G__12045__delegate;
        return G__12045;
      }();
      G__12044 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__12044__1.call(this, a);
          case 2:
            return G__12044__2.call(this, a, b);
          case 3:
            return G__12044__3.call(this, a, b, c);
          default:
            return G__12044__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12044.cljs$lang$maxFixedArity = 3;
      G__12044.cljs$lang$applyTo = G__12044__4.cljs$lang$applyTo;
      G__12044.cljs$core$IFn$_invoke$arity$1 = G__12044__1;
      G__12044.cljs$core$IFn$_invoke$arity$2 = G__12044__2;
      G__12044.cljs$core$IFn$_invoke$arity$3 = G__12044__3;
      G__12044.cljs$core$IFn$_invoke$arity$variadic = G__12044__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12044;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__12047 = null;
      var G__12047__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__12047__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__12047__4 = function() {
        var G__12048__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__12048 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12048__delegate.call(this, a, b, c, ds);
        };
        G__12048.cljs$lang$maxFixedArity = 3;
        G__12048.cljs$lang$applyTo = function(arglist__12049) {
          var a = cljs.core.first(arglist__12049);
          arglist__12049 = cljs.core.next(arglist__12049);
          var b = cljs.core.first(arglist__12049);
          arglist__12049 = cljs.core.next(arglist__12049);
          var c = cljs.core.first(arglist__12049);
          var ds = cljs.core.rest(arglist__12049);
          return G__12048__delegate(a, b, c, ds);
        };
        G__12048.cljs$core$IFn$_invoke$arity$variadic = G__12048__delegate;
        return G__12048;
      }();
      G__12047 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__12047__2.call(this, a, b);
          case 3:
            return G__12047__3.call(this, a, b, c);
          default:
            return G__12047__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12047.cljs$lang$maxFixedArity = 3;
      G__12047.cljs$lang$applyTo = G__12047__4.cljs$lang$applyTo;
      G__12047.cljs$core$IFn$_invoke$arity$2 = G__12047__2;
      G__12047.cljs$core$IFn$_invoke$arity$3 = G__12047__3;
      G__12047.cljs$core$IFn$_invoke$arity$variadic = G__12047__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12047;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__12050 = null;
      var G__12050__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__12050__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__12050__4 = function() {
        var G__12051__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__12051 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12051__delegate.call(this, a, b, c, ds);
        };
        G__12051.cljs$lang$maxFixedArity = 3;
        G__12051.cljs$lang$applyTo = function(arglist__12052) {
          var a = cljs.core.first(arglist__12052);
          arglist__12052 = cljs.core.next(arglist__12052);
          var b = cljs.core.first(arglist__12052);
          arglist__12052 = cljs.core.next(arglist__12052);
          var c = cljs.core.first(arglist__12052);
          var ds = cljs.core.rest(arglist__12052);
          return G__12051__delegate(a, b, c, ds);
        };
        G__12051.cljs$core$IFn$_invoke$arity$variadic = G__12051__delegate;
        return G__12051;
      }();
      G__12050 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__12050__2.call(this, a, b);
          case 3:
            return G__12050__3.call(this, a, b, c);
          default:
            return G__12050__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12050.cljs$lang$maxFixedArity = 3;
      G__12050.cljs$lang$applyTo = G__12050__4.cljs$lang$applyTo;
      G__12050.cljs$core$IFn$_invoke$arity$2 = G__12050__2;
      G__12050.cljs$core$IFn$_invoke$arity$3 = G__12050__3;
      G__12050.cljs$core$IFn$_invoke$arity$variadic = G__12050__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12050;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___12053 = size;
          var i_12054 = 0;
          while (true) {
            if (i_12054 < n__4518__auto___12053) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_12054, cljs.core._nth.call(null, c, i_12054)));
              var G__12055 = i_12054 + 1;
              i_12054 = G__12055;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__12056 = null;
        var G__12056__0 = function() {
          return rf.call(null);
        };
        var G__12056__1 = function(result) {
          return rf.call(null, result);
        };
        var G__12056__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__12056 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12056__0.call(this);
            case 1:
              return G__12056__1.call(this, result);
            case 2:
              return G__12056__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12056.cljs$core$IFn$_invoke$arity$0 = G__12056__0;
        G__12056.cljs$core$IFn$_invoke$arity$1 = G__12056__1;
        G__12056.cljs$core$IFn$_invoke$arity$2 = G__12056__2;
        return G__12056;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___12057 = size;
          var i_12058 = 0;
          while (true) {
            if (i_12058 < n__4518__auto___12057) {
              var x_12059 = f.call(null, cljs.core._nth.call(null, c, i_12058));
              if (x_12059 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_12059);
              }
              var G__12060 = i_12058 + 1;
              i_12058 = G__12060;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__12061 = cljs.core.seq.call(null, self__.watches);
  var chunk__12062 = null;
  var count__12063 = 0;
  var i__12064 = 0;
  while (true) {
    if (i__12064 < count__12063) {
      var vec__12065 = cljs.core._nth.call(null, chunk__12062, i__12064);
      var key = cljs.core.nth.call(null, vec__12065, 0, null);
      var f = cljs.core.nth.call(null, vec__12065, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__12067 = seq__12061;
      var G__12068 = chunk__12062;
      var G__12069 = count__12063;
      var G__12070 = i__12064 + 1;
      seq__12061 = G__12067;
      chunk__12062 = G__12068;
      count__12063 = G__12069;
      i__12064 = G__12070;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12061);
      if (temp__4126__auto__) {
        var seq__12061__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12061__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12061__$1);
          var G__12071 = cljs.core.chunk_rest.call(null, seq__12061__$1);
          var G__12072 = c__4418__auto__;
          var G__12073 = cljs.core.count.call(null, c__4418__auto__);
          var G__12074 = 0;
          seq__12061 = G__12071;
          chunk__12062 = G__12072;
          count__12063 = G__12073;
          i__12064 = G__12074;
          continue;
        } else {
          var vec__12066 = cljs.core.first.call(null, seq__12061__$1);
          var key = cljs.core.nth.call(null, vec__12066, 0, null);
          var f = cljs.core.nth.call(null, vec__12066, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__12075 = cljs.core.next.call(null, seq__12061__$1);
          var G__12076 = null;
          var G__12077 = 0;
          var G__12078 = 0;
          seq__12061 = G__12075;
          chunk__12062 = G__12076;
          count__12063 = G__12077;
          i__12064 = G__12078;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__12082__delegate = function(x, p__12079) {
      var map__12081 = p__12079;
      var map__12081__$1 = cljs.core.seq_QMARK_.call(null, map__12081) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12081) : map__12081;
      var validator = cljs.core.get.call(null, map__12081__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__12081__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__12082 = function(x, var_args) {
      var p__12079 = null;
      if (arguments.length > 1) {
        p__12079 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12082__delegate.call(this, x, p__12079);
    };
    G__12082.cljs$lang$maxFixedArity = 1;
    G__12082.cljs$lang$applyTo = function(arglist__12083) {
      var x = cljs.core.first(arglist__12083);
      var p__12079 = cljs.core.rest(arglist__12083);
      return G__12082__delegate(x, p__12079);
    };
    G__12082.cljs$core$IFn$_invoke$arity$variadic = G__12082__delegate;
    return G__12082;
  }();
  atom = function(x, var_args) {
    var p__12079 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__12084__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__12084 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12084__delegate.call(this, a, f, x, y, more);
    };
    G__12084.cljs$lang$maxFixedArity = 4;
    G__12084.cljs$lang$applyTo = function(arglist__12085) {
      var a = cljs.core.first(arglist__12085);
      arglist__12085 = cljs.core.next(arglist__12085);
      var f = cljs.core.first(arglist__12085);
      arglist__12085 = cljs.core.next(arglist__12085);
      var x = cljs.core.first(arglist__12085);
      arglist__12085 = cljs.core.next(arglist__12085);
      var y = cljs.core.first(arglist__12085);
      var more = cljs.core.rest(arglist__12085);
      return G__12084__delegate(a, f, x, y, more);
    };
    G__12084.cljs$core$IFn$_invoke$arity$variadic = G__12084__delegate;
    return G__12084;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__12086 = null;
          var G__12086__0 = function() {
            return rf.call(null);
          };
          var G__12086__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12086__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__12086 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12086__0.call(this);
              case 1:
                return G__12086__1.call(this, result);
              case 2:
                return G__12086__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12086.cljs$core$IFn$_invoke$arity$0 = G__12086__0;
          G__12086.cljs$core$IFn$_invoke$arity$1 = G__12086__1;
          G__12086.cljs$core$IFn$_invoke$arity$2 = G__12086__2;
          return G__12086;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4518__auto___12087 = size;
            var i_12088 = 0;
            while (true) {
              if (i_12088 < n__4518__auto___12087) {
                var x_12089 = f.call(null, idx + i_12088, cljs.core._nth.call(null, c, i_12088));
                if (x_12089 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_12089);
                }
                var G__12090 = i_12088 + 1;
                i_12088 = G__12090;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            return p.call(null, y);
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__12097__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__12097 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12097__delegate.call(this, x, y, z, args);
        };
        G__12097.cljs$lang$maxFixedArity = 3;
        G__12097.cljs$lang$applyTo = function(arglist__12098) {
          var x = cljs.core.first(arglist__12098);
          arglist__12098 = cljs.core.next(arglist__12098);
          var y = cljs.core.first(arglist__12098);
          arglist__12098 = cljs.core.next(arglist__12098);
          var z = cljs.core.first(arglist__12098);
          var args = cljs.core.rest(arglist__12098);
          return G__12097__delegate(x, y, z, args);
        };
        G__12097.cljs$core$IFn$_invoke$arity$variadic = G__12097__delegate;
        return G__12097;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__12099__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__12091_SHARP_) {
            var and__3636__auto__ = p1.call(null, p1__12091_SHARP_);
            if (cljs.core.truth_(and__3636__auto__)) {
              return p2.call(null, p1__12091_SHARP_);
            } else {
              return and__3636__auto__;
            }
          }, args));
        };
        var G__12099 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12099__delegate.call(this, x, y, z, args);
        };
        G__12099.cljs$lang$maxFixedArity = 3;
        G__12099.cljs$lang$applyTo = function(arglist__12100) {
          var x = cljs.core.first(arglist__12100);
          arglist__12100 = cljs.core.next(arglist__12100);
          var y = cljs.core.first(arglist__12100);
          arglist__12100 = cljs.core.next(arglist__12100);
          var z = cljs.core.first(arglist__12100);
          var args = cljs.core.rest(arglist__12100);
          return G__12099__delegate(x, y, z, args);
        };
        G__12099.cljs$core$IFn$_invoke$arity$variadic = G__12099__delegate;
        return G__12099;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3636__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3636__auto__)) {
            var and__3636__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3636__auto____$1)) {
              var and__3636__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3636__auto____$2)) {
                var and__3636__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3636__auto____$3)) {
                  var and__3636__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$4)) {
                    var and__3636__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3636__auto____$5)) {
                      var and__3636__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3636__auto____$6)) {
                        var and__3636__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3636__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3636__auto____$7;
                        }
                      } else {
                        return and__3636__auto____$6;
                      }
                    } else {
                      return and__3636__auto____$5;
                    }
                  } else {
                    return and__3636__auto____$4;
                  }
                } else {
                  return and__3636__auto____$3;
                }
              } else {
                return and__3636__auto____$2;
              }
            } else {
              return and__3636__auto____$1;
            }
          } else {
            return and__3636__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__12101__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__12092_SHARP_) {
            var and__3636__auto__ = p1.call(null, p1__12092_SHARP_);
            if (cljs.core.truth_(and__3636__auto__)) {
              var and__3636__auto____$1 = p2.call(null, p1__12092_SHARP_);
              if (cljs.core.truth_(and__3636__auto____$1)) {
                return p3.call(null, p1__12092_SHARP_);
              } else {
                return and__3636__auto____$1;
              }
            } else {
              return and__3636__auto__;
            }
          }, args));
        };
        var G__12101 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12101__delegate.call(this, x, y, z, args);
        };
        G__12101.cljs$lang$maxFixedArity = 3;
        G__12101.cljs$lang$applyTo = function(arglist__12102) {
          var x = cljs.core.first(arglist__12102);
          arglist__12102 = cljs.core.next(arglist__12102);
          var y = cljs.core.first(arglist__12102);
          arglist__12102 = cljs.core.next(arglist__12102);
          var z = cljs.core.first(arglist__12102);
          var args = cljs.core.rest(arglist__12102);
          return G__12101__delegate(x, y, z, args);
        };
        G__12101.cljs$core$IFn$_invoke$arity$variadic = G__12101__delegate;
        return G__12101;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__12103__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__12093_SHARP_) {
                return p1__12093_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__12094_SHARP_) {
                var and__3636__auto__ = p1__12094_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3636__auto__)) {
                  return p1__12094_SHARP_.call(null, y);
                } else {
                  return and__3636__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__12095_SHARP_) {
                var and__3636__auto__ = p1__12095_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3636__auto__)) {
                  var and__3636__auto____$1 = p1__12095_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3636__auto____$1)) {
                    return p1__12095_SHARP_.call(null, z);
                  } else {
                    return and__3636__auto____$1;
                  }
                } else {
                  return and__3636__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__12104__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__12096_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__12096_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__12104 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__12104__delegate.call(this, x, y, z, args);
            };
            G__12104.cljs$lang$maxFixedArity = 3;
            G__12104.cljs$lang$applyTo = function(arglist__12105) {
              var x = cljs.core.first(arglist__12105);
              arglist__12105 = cljs.core.next(arglist__12105);
              var y = cljs.core.first(arglist__12105);
              arglist__12105 = cljs.core.next(arglist__12105);
              var z = cljs.core.first(arglist__12105);
              var args = cljs.core.rest(arglist__12105);
              return G__12104__delegate(x, y, z, args);
            };
            G__12104.cljs$core$IFn$_invoke$arity$variadic = G__12104__delegate;
            return G__12104;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__12103 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12103__delegate.call(this, p1, p2, p3, ps);
    };
    G__12103.cljs$lang$maxFixedArity = 3;
    G__12103.cljs$lang$applyTo = function(arglist__12106) {
      var p1 = cljs.core.first(arglist__12106);
      arglist__12106 = cljs.core.next(arglist__12106);
      var p2 = cljs.core.first(arglist__12106);
      arglist__12106 = cljs.core.next(arglist__12106);
      var p3 = cljs.core.first(arglist__12106);
      var ps = cljs.core.rest(arglist__12106);
      return G__12103__delegate(p1, p2, p3, ps);
    };
    G__12103.cljs$core$IFn$_invoke$arity$variadic = G__12103__delegate;
    return G__12103;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3648__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3648__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__12113__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__12113 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12113__delegate.call(this, x, y, z, args);
        };
        G__12113.cljs$lang$maxFixedArity = 3;
        G__12113.cljs$lang$applyTo = function(arglist__12114) {
          var x = cljs.core.first(arglist__12114);
          arglist__12114 = cljs.core.next(arglist__12114);
          var y = cljs.core.first(arglist__12114);
          arglist__12114 = cljs.core.next(arglist__12114);
          var z = cljs.core.first(arglist__12114);
          var args = cljs.core.rest(arglist__12114);
          return G__12113__delegate(x, y, z, args);
        };
        G__12113.cljs$core$IFn$_invoke$arity$variadic = G__12113__delegate;
        return G__12113;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__12115__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3648__auto__) {
              return function(p1__12107_SHARP_) {
                var or__3648__auto____$1 = p1.call(null, p1__12107_SHARP_);
                if (cljs.core.truth_(or__3648__auto____$1)) {
                  return or__3648__auto____$1;
                } else {
                  return p2.call(null, p1__12107_SHARP_);
                }
              };
            }(or__3648__auto__), args);
          }
        };
        var G__12115 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12115__delegate.call(this, x, y, z, args);
        };
        G__12115.cljs$lang$maxFixedArity = 3;
        G__12115.cljs$lang$applyTo = function(arglist__12116) {
          var x = cljs.core.first(arglist__12116);
          arglist__12116 = cljs.core.next(arglist__12116);
          var y = cljs.core.first(arglist__12116);
          arglist__12116 = cljs.core.next(arglist__12116);
          var z = cljs.core.first(arglist__12116);
          var args = cljs.core.rest(arglist__12116);
          return G__12115__delegate(x, y, z, args);
        };
        G__12115.cljs$core$IFn$_invoke$arity$variadic = G__12115__delegate;
        return G__12115;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3648__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3648__auto____$1)) {
            return or__3648__auto____$1;
          } else {
            var or__3648__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3648__auto____$2)) {
              return or__3648__auto____$2;
            } else {
              var or__3648__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3648__auto____$3)) {
                return or__3648__auto____$3;
              } else {
                var or__3648__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3648__auto____$4)) {
                  return or__3648__auto____$4;
                } else {
                  var or__3648__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3648__auto____$5)) {
                    return or__3648__auto____$5;
                  } else {
                    var or__3648__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3648__auto____$6)) {
                      return or__3648__auto____$6;
                    } else {
                      var or__3648__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3648__auto____$7)) {
                        return or__3648__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__12117__delegate = function(x, y, z, args) {
          var or__3648__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3648__auto__) {
              return function(p1__12108_SHARP_) {
                var or__3648__auto____$1 = p1.call(null, p1__12108_SHARP_);
                if (cljs.core.truth_(or__3648__auto____$1)) {
                  return or__3648__auto____$1;
                } else {
                  var or__3648__auto____$2 = p2.call(null, p1__12108_SHARP_);
                  if (cljs.core.truth_(or__3648__auto____$2)) {
                    return or__3648__auto____$2;
                  } else {
                    return p3.call(null, p1__12108_SHARP_);
                  }
                }
              };
            }(or__3648__auto__), args);
          }
        };
        var G__12117 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12117__delegate.call(this, x, y, z, args);
        };
        G__12117.cljs$lang$maxFixedArity = 3;
        G__12117.cljs$lang$applyTo = function(arglist__12118) {
          var x = cljs.core.first(arglist__12118);
          arglist__12118 = cljs.core.next(arglist__12118);
          var y = cljs.core.first(arglist__12118);
          arglist__12118 = cljs.core.next(arglist__12118);
          var z = cljs.core.first(arglist__12118);
          var args = cljs.core.rest(arglist__12118);
          return G__12117__delegate(x, y, z, args);
        };
        G__12117.cljs$core$IFn$_invoke$arity$variadic = G__12117__delegate;
        return G__12117;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__12119__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__12109_SHARP_) {
                return p1__12109_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__12110_SHARP_) {
                var or__3648__auto__ = p1__12110_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3648__auto__)) {
                  return or__3648__auto__;
                } else {
                  return p1__12110_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__12111_SHARP_) {
                var or__3648__auto__ = p1__12111_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3648__auto__)) {
                  return or__3648__auto__;
                } else {
                  var or__3648__auto____$1 = p1__12111_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3648__auto____$1)) {
                    return or__3648__auto____$1;
                  } else {
                    return p1__12111_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__12120__delegate = function(x, y, z, args) {
              var or__3648__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3648__auto__)) {
                return or__3648__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3648__auto__, ps__$1) {
                  return function(p1__12112_SHARP_) {
                    return cljs.core.some.call(null, p1__12112_SHARP_, args);
                  };
                }(or__3648__auto__, ps__$1), ps__$1);
              }
            };
            var G__12120 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__12120__delegate.call(this, x, y, z, args);
            };
            G__12120.cljs$lang$maxFixedArity = 3;
            G__12120.cljs$lang$applyTo = function(arglist__12121) {
              var x = cljs.core.first(arglist__12121);
              arglist__12121 = cljs.core.next(arglist__12121);
              var y = cljs.core.first(arglist__12121);
              arglist__12121 = cljs.core.next(arglist__12121);
              var z = cljs.core.first(arglist__12121);
              var args = cljs.core.rest(arglist__12121);
              return G__12120__delegate(x, y, z, args);
            };
            G__12120.cljs$core$IFn$_invoke$arity$variadic = G__12120__delegate;
            return G__12120;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__12119 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12119__delegate.call(this, p1, p2, p3, ps);
    };
    G__12119.cljs$lang$maxFixedArity = 3;
    G__12119.cljs$lang$applyTo = function(arglist__12122) {
      var p1 = cljs.core.first(arglist__12122);
      arglist__12122 = cljs.core.next(arglist__12122);
      var p2 = cljs.core.first(arglist__12122);
      arglist__12122 = cljs.core.next(arglist__12122);
      var p3 = cljs.core.first(arglist__12122);
      var ps = cljs.core.rest(arglist__12122);
      return G__12119__delegate(p1, p2, p3, ps);
    };
    G__12119.cljs$core$IFn$_invoke$arity$variadic = G__12119__delegate;
    return G__12119;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__12124 = null;
        var G__12124__0 = function() {
          return rf.call(null);
        };
        var G__12124__1 = function(result) {
          return rf.call(null, result);
        };
        var G__12124__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__12124__3 = function() {
          var G__12125__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__12125 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__12125__delegate.call(this, result, input, inputs);
          };
          G__12125.cljs$lang$maxFixedArity = 2;
          G__12125.cljs$lang$applyTo = function(arglist__12126) {
            var result = cljs.core.first(arglist__12126);
            arglist__12126 = cljs.core.next(arglist__12126);
            var input = cljs.core.first(arglist__12126);
            var inputs = cljs.core.rest(arglist__12126);
            return G__12125__delegate(result, input, inputs);
          };
          G__12125.cljs$core$IFn$_invoke$arity$variadic = G__12125__delegate;
          return G__12125;
        }();
        G__12124 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__12124__0.call(this);
            case 1:
              return G__12124__1.call(this, result);
            case 2:
              return G__12124__2.call(this, result, input);
            default:
              return G__12124__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12124.cljs$lang$maxFixedArity = 2;
        G__12124.cljs$lang$applyTo = G__12124__3.cljs$lang$applyTo;
        G__12124.cljs$core$IFn$_invoke$arity$0 = G__12124__0;
        G__12124.cljs$core$IFn$_invoke$arity$1 = G__12124__1;
        G__12124.cljs$core$IFn$_invoke$arity$2 = G__12124__2;
        G__12124.cljs$core$IFn$_invoke$arity$variadic = G__12124__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__12124;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___12127 = size;
          var i_12128 = 0;
          while (true) {
            if (i_12128 < n__4518__auto___12127) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_12128)));
              var G__12129 = i_12128 + 1;
              i_12128 = G__12129;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__12130__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__12123_SHARP_) {
          return cljs.core.apply.call(null, f, p1__12123_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__12130 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12130__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__12130.cljs$lang$maxFixedArity = 4;
    G__12130.cljs$lang$applyTo = function(arglist__12131) {
      var f = cljs.core.first(arglist__12131);
      arglist__12131 = cljs.core.next(arglist__12131);
      var c1 = cljs.core.first(arglist__12131);
      arglist__12131 = cljs.core.next(arglist__12131);
      var c2 = cljs.core.first(arglist__12131);
      arglist__12131 = cljs.core.next(arglist__12131);
      var c3 = cljs.core.first(arglist__12131);
      var colls = cljs.core.rest(arglist__12131);
      return G__12130__delegate(f, c1, c2, c3, colls);
    };
    G__12130.cljs$core$IFn$_invoke$arity$variadic = G__12130__delegate;
    return G__12130;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__12132 = null;
          var G__12132__0 = function() {
            return rf.call(null);
          };
          var G__12132__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12132__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__12132 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12132__0.call(this);
              case 1:
                return G__12132__1.call(this, result);
              case 2:
                return G__12132__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12132.cljs$core$IFn$_invoke$arity$0 = G__12132__0;
          G__12132.cljs$core$IFn$_invoke$arity$1 = G__12132__1;
          G__12132.cljs$core$IFn$_invoke$arity$2 = G__12132__2;
          return G__12132;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__12133 = null;
          var G__12133__0 = function() {
            return rf.call(null);
          };
          var G__12133__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12133__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__12133 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12133__0.call(this);
              case 1:
                return G__12133__1.call(this, result);
              case 2:
                return G__12133__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12133.cljs$core$IFn$_invoke$arity$0 = G__12133__0;
          G__12133.cljs$core$IFn$_invoke$arity$1 = G__12133__1;
          G__12133.cljs$core$IFn$_invoke$arity$2 = G__12133__2;
          return G__12133;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__12134 = n__$1 - 1;
          var G__12135 = cljs.core.rest.call(null, s);
          n__$1 = G__12134;
          coll__$1 = G__12135;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__12136 = cljs.core.next.call(null, s);
      var G__12137 = cljs.core.next.call(null, lead);
      s = G__12136;
      lead = G__12137;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__12138 = null;
          var G__12138__0 = function() {
            return rf.call(null);
          };
          var G__12138__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12138__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3636__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3636__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3636__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__12138 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12138__0.call(this);
              case 1:
                return G__12138__1.call(this, result);
              case 2:
                return G__12138__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12138.cljs$core$IFn$_invoke$arity$0 = G__12138__0;
          G__12138.cljs$core$IFn$_invoke$arity$1 = G__12138__1;
          G__12138.cljs$core$IFn$_invoke$arity$2 = G__12138__2;
          return G__12138;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3636__auto__ = s;
          if (and__3636__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3636__auto__;
          }
        }())) {
          var G__12139 = pred__$1;
          var G__12140 = cljs.core.rest.call(null, s);
          pred__$1 = G__12139;
          coll__$1 = G__12140;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__12141__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__12141 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12141__delegate.call(this, c1, c2, colls);
    };
    G__12141.cljs$lang$maxFixedArity = 2;
    G__12141.cljs$lang$applyTo = function(arglist__12142) {
      var c1 = cljs.core.first(arglist__12142);
      arglist__12142 = cljs.core.next(arglist__12142);
      var c2 = cljs.core.first(arglist__12142);
      var colls = cljs.core.rest(arglist__12142);
      return G__12141__delegate(c1, c2, colls);
    };
    G__12141.cljs$core$IFn$_invoke$arity$variadic = G__12141__delegate;
    return G__12141;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__12143__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__12143 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12143__delegate.call(this, f, colls);
    };
    G__12143.cljs$lang$maxFixedArity = 1;
    G__12143.cljs$lang$applyTo = function(arglist__12144) {
      var f = cljs.core.first(arglist__12144);
      var colls = cljs.core.rest(arglist__12144);
      return G__12143__delegate(f, colls);
    };
    G__12143.cljs$core$IFn$_invoke$arity$variadic = G__12143__delegate;
    return G__12143;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__12145 = null;
        var G__12145__0 = function() {
          return rf.call(null);
        };
        var G__12145__1 = function(result) {
          return rf.call(null, result);
        };
        var G__12145__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__12145 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12145__0.call(this);
            case 1:
              return G__12145__1.call(this, result);
            case 2:
              return G__12145__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12145.cljs$core$IFn$_invoke$arity$0 = G__12145__0;
        G__12145.cljs$core$IFn$_invoke$arity$1 = G__12145__1;
        G__12145.cljs$core$IFn$_invoke$arity$2 = G__12145__2;
        return G__12145;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4518__auto___12146 = size;
          var i_12147 = 0;
          while (true) {
            if (i_12147 < n__4518__auto___12146) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_12147)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_12147));
              } else {
              }
              var G__12148 = i_12147 + 1;
              i_12147 = G__12148;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__12149_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__12149_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__12152 = to;
        if (G__12152) {
          var bit__4305__auto__ = G__12152.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4305__auto__ || G__12152.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__12153 = to;
      if (G__12153) {
        var bit__4305__auto__ = G__12153.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4305__auto__ || G__12153.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__12154__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__12154 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12154__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__12154.cljs$lang$maxFixedArity = 4;
    G__12154.cljs$lang$applyTo = function(arglist__12155) {
      var f = cljs.core.first(arglist__12155);
      arglist__12155 = cljs.core.next(arglist__12155);
      var c1 = cljs.core.first(arglist__12155);
      arglist__12155 = cljs.core.next(arglist__12155);
      var c2 = cljs.core.first(arglist__12155);
      arglist__12155 = cljs.core.next(arglist__12155);
      var c3 = cljs.core.first(arglist__12155);
      var colls = cljs.core.rest(arglist__12155);
      return G__12154__delegate(f, c1, c2, c3, colls);
    };
    G__12154.cljs$core$IFn$_invoke$arity$variadic = G__12154__delegate;
    return G__12154;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__12157 = m__$1;
          if (G__12157) {
            var bit__4312__auto__ = G__12157.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4312__auto__ || G__12157.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__12157.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__12157);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__12157);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__12158 = sentinel;
            var G__12159 = m__$2;
            var G__12160 = cljs.core.next.call(null, ks__$1);
            sentinel = G__12158;
            m__$1 = G__12159;
            ks__$1 = G__12160;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__12161, v) {
  var vec__12163 = p__12161;
  var k = cljs.core.nth.call(null, vec__12163, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__12163, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__12164, f) {
    var vec__12174 = p__12164;
    var k = cljs.core.nth.call(null, vec__12174, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12174, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__12165, f, a) {
    var vec__12175 = p__12165;
    var k = cljs.core.nth.call(null, vec__12175, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12175, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__12166, f, a, b) {
    var vec__12176 = p__12166;
    var k = cljs.core.nth.call(null, vec__12176, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12176, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__12167, f, a, b, c) {
    var vec__12177 = p__12167;
    var k = cljs.core.nth.call(null, vec__12177, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12177, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__12179__delegate = function(m, p__12168, f, a, b, c, args) {
      var vec__12178 = p__12168;
      var k = cljs.core.nth.call(null, vec__12178, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__12178, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__12179 = function(m, p__12168, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__12179__delegate.call(this, m, p__12168, f, a, b, c, args);
    };
    G__12179.cljs$lang$maxFixedArity = 6;
    G__12179.cljs$lang$applyTo = function(arglist__12180) {
      var m = cljs.core.first(arglist__12180);
      arglist__12180 = cljs.core.next(arglist__12180);
      var p__12168 = cljs.core.first(arglist__12180);
      arglist__12180 = cljs.core.next(arglist__12180);
      var f = cljs.core.first(arglist__12180);
      arglist__12180 = cljs.core.next(arglist__12180);
      var a = cljs.core.first(arglist__12180);
      arglist__12180 = cljs.core.next(arglist__12180);
      var b = cljs.core.first(arglist__12180);
      arglist__12180 = cljs.core.next(arglist__12180);
      var c = cljs.core.first(arglist__12180);
      var args = cljs.core.rest(arglist__12180);
      return G__12179__delegate(m, p__12168, f, a, b, c, args);
    };
    G__12179.cljs$core$IFn$_invoke$arity$variadic = G__12179__delegate;
    return G__12179;
  }();
  update_in = function(m, p__12168, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__12168, f);
      case 4:
        return update_in__4.call(this, m, p__12168, f, a);
      case 5:
        return update_in__5.call(this, m, p__12168, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__12168, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__12168, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__12181 = ll - 5;
      var G__12182 = r;
      ll = G__12181;
      ret = G__12182;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__12183 = cljs.core.pv_aget.call(null, node, 0);
      var G__12184 = level - 5;
      node = G__12183;
      level = G__12184;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__12185 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__12186 = level - 5;
        node = G__12185;
        level = G__12186;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__12188 = j + 1;
              var G__12189 = init__$3;
              j = G__12188;
              init__$2 = G__12189;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12190 = i + len;
        var G__12191 = init__$2;
        i = G__12190;
        init__$1 = G__12191;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__12192 = j + 1;
              var G__12193 = init__$3;
              j = G__12192;
              init__$2 = G__12193;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12194 = i + len;
        var G__12195 = init__$2;
        i = G__12194;
        init__$1 = G__12195;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4518__auto___12196 = len;
    var i_12197 = 0;
    while (true) {
      if (i_12197 < n__4518__auto___12196) {
        new_tail[i_12197] = self__.tail[i_12197];
        var G__12198 = i_12197 + 1;
        i_12197 = G__12198;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__12199 = null;
  var G__12199__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__12199__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__12199 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12199__2.call(this, self__, k);
      case 3:
        return G__12199__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12199.cljs$core$IFn$_invoke$arity$2 = G__12199__2;
  G__12199.cljs$core$IFn$_invoke$arity$3 = G__12199__3;
  return G__12199;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args12187) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12187)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__12200 = i + 1;
        var G__12201 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__12200;
        out = G__12201;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__12202) {
    var args = cljs.core.seq(arglist__12202);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3955__auto__ = self__.end;
    var y__3956__auto__ = v_pos + 1;
    return x__3955__auto__ > y__3956__auto__ ? x__3955__auto__ : y__3956__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__12204 = null;
  var G__12204__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__12204__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__12204 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12204__2.call(this, self__, k);
      case 3:
        return G__12204__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12204.cljs$core$IFn$_invoke$arity$2 = G__12204__2;
  G__12204.cljs$core$IFn$_invoke$arity$3 = G__12204__3;
  return G__12204;
}();
cljs.core.Subvec.prototype.apply = function(self__, args12203) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12203)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__12205 = meta;
      var G__12206 = v.v;
      var G__12207 = v.start + start;
      var G__12208 = v.start + end;
      var G__12209 = __hash;
      meta = G__12205;
      v = G__12206;
      start = G__12207;
      end = G__12208;
      __hash = G__12209;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj12213 = {};
    return obj12213;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__12214 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__12215 = level - 5;
        node = G__12214;
        level = G__12215;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__12217 = null;
  var G__12217__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12217__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12217 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12217__2.call(this, self__, k);
      case 3:
        return G__12217__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12217.cljs$core$IFn$_invoke$arity$2 = G__12217__2;
  G__12217.cljs$core$IFn$_invoke$arity$3 = G__12217__3;
  return G__12217;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args12216) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12216)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3648__auto__ = self__.front;
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3648__auto__ = self__.rear;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__12218 = i + incr;
        i = G__12218;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__12219 = i + 1;
      var G__12220 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__12219;
      out = G__12220;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj12224 = {};
    return obj12224;
  }();
  var l = ks.length;
  var i_12225 = 0;
  while (true) {
    if (i_12225 < l) {
      var k_12226 = ks[i_12225];
      new_obj[k_12226] = obj[k_12226];
      var G__12227 = i_12225 + 1;
      i_12225 = G__12227;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12230 = cljs.core.rest.call(null, keys__$1);
        var G__12231 = init__$2;
        keys__$1 = G__12230;
        init__$1 = G__12231;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__12228_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12228_SHARP_, self__.strobj[p1__12228_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__12232 = null;
  var G__12232__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12232__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12232 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12232__2.call(this, self__, k);
      case 3:
        return G__12232__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12232.cljs$core$IFn$_invoke$arity$2 = G__12232__2;
  G__12232.cljs$core$IFn$_invoke$arity$3 = G__12232__3;
  return G__12232;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args12229) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12229)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj12234 = {};
  return obj12234;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__12235 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__12235, 0, null);
    var v = cljs.core.nth.call(null, vec__12235, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__12236 = i + 2;
        i = G__12236;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__12237 = i + 2;
        i = G__12237;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__12238 = i + 2;
        i = G__12238;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__12239 = i + 2;
        i = G__12239;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__12240 = i + 2;
        i = G__12240;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_12241 = 0;
  while (true) {
    if (i_12241 < l) {
      narr[i_12241] = arr[i_12241];
      var G__12242 = i_12241 + 1;
      i_12241 = G__12242;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12244 = cljs.core.seq.call(null, coll);
  var chunk__12245 = null;
  var count__12246 = 0;
  var i__12247 = 0;
  while (true) {
    if (i__12247 < count__12246) {
      var vec__12248 = cljs.core._nth.call(null, chunk__12245, i__12247);
      var k = cljs.core.nth.call(null, vec__12248, 0, null);
      var v = cljs.core.nth.call(null, vec__12248, 1, null);
      f.call(null, v, k);
      var G__12254 = seq__12244;
      var G__12255 = chunk__12245;
      var G__12256 = count__12246;
      var G__12257 = i__12247 + 1;
      seq__12244 = G__12254;
      chunk__12245 = G__12255;
      count__12246 = G__12256;
      i__12247 = G__12257;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12244);
      if (temp__4126__auto__) {
        var seq__12244__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12244__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12244__$1);
          var G__12258 = cljs.core.chunk_rest.call(null, seq__12244__$1);
          var G__12259 = c__4418__auto__;
          var G__12260 = cljs.core.count.call(null, c__4418__auto__);
          var G__12261 = 0;
          seq__12244 = G__12258;
          chunk__12245 = G__12259;
          count__12246 = G__12260;
          i__12247 = G__12261;
          continue;
        } else {
          var vec__12249 = cljs.core.first.call(null, seq__12244__$1);
          var k = cljs.core.nth.call(null, vec__12249, 0, null);
          var v = cljs.core.nth.call(null, vec__12249, 1, null);
          f.call(null, v, k);
          var G__12262 = cljs.core.next.call(null, seq__12244__$1);
          var G__12263 = null;
          var G__12264 = 0;
          var G__12265 = 0;
          seq__12244 = G__12262;
          chunk__12245 = G__12263;
          count__12246 = G__12264;
          i__12247 = G__12265;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12266 = i + 2;
        var G__12267 = init__$2;
        i = G__12266;
        init__$1 = G__12267;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__12250 = other;
    if (G__12250) {
      var bit__4305__auto__ = G__12250.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4305__auto__ || G__12250.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__12268 = i + 2;
              i = G__12268;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj12252 = {};
    return obj12252;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__12269 = s + 2;
            var G__12270 = d;
            s = G__12269;
            d = G__12270;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__12271 = s + 2;
            var G__12272 = d + 2;
            s = G__12271;
            d = G__12272;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__12253 = cljs.core.aclone.call(null, self__.arr);
        G__12253[idx + 1] = v;
        return G__12253;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__12273 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__12274 = cljs.core.next.call(null, es);
          ret = G__12273;
          es = G__12274;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__12275 = null;
  var G__12275__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12275__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12275 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12275__2.call(this, self__, k);
      case 3:
        return G__12275__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12275.cljs$core$IFn$_invoke$arity$2 = G__12275__2;
  G__12275.cljs$core$IFn$_invoke$arity$3 = G__12275__3;
  return G__12275;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args12243) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12243)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12276 = i + 2;
        var G__12277 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__12276;
        ret = G__12277;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__12278_12280 = self__.arr;
      G__12278_12280.pop();
      G__12278_12280.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__12279 = o;
      if (G__12279) {
        var bit__4312__auto__ = G__12279.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4312__auto__ || G__12279.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__12279.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12279);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12279);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__12281 = cljs.core.next.call(null, es);
          var G__12282 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__12281;
          tcoll__$2 = G__12282;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__12283 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__12284 = i + 2;
      out = G__12283;
      i = G__12284;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__12287 = cljs.core.aclone.call(null, arr);
    G__12287[i] = a;
    return G__12287;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__12288 = cljs.core.aclone.call(null, arr);
    G__12288[i] = a;
    G__12288[j] = b;
    return G__12288;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12289 = i + 2;
        var G__12290 = init__$2;
        i = G__12289;
        init__$1 = G__12290;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_12291 = 0;
        var j_12292 = 0;
        while (true) {
          if (i_12291 < 32) {
            if ((self__.bitmap >>> i_12291 & 1) === 0) {
              var G__12293 = i_12291 + 1;
              var G__12294 = j_12292;
              i_12291 = G__12293;
              j_12292 = G__12294;
              continue;
            } else {
              nodes[i_12291] = !(self__.arr[j_12292] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_12292]), self__.arr[j_12292], self__.arr[j_12292 + 1], added_leaf_QMARK_) : self__.arr[j_12292 + 1];
              var G__12295 = i_12291 + 1;
              var G__12296 = j_12292 + 2;
              i_12291 = G__12295;
              j_12292 = G__12296;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_12297 = 0;
      var j_12298 = 0;
      while (true) {
        if (i_12297 < 32) {
          if ((self__.bitmap >>> i_12297 & 1) === 0) {
            var G__12299 = i_12297 + 1;
            var G__12300 = j_12298;
            i_12297 = G__12299;
            j_12298 = G__12300;
            continue;
          } else {
            nodes[i_12297] = !(self__.arr[j_12298] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_12298]), self__.arr[j_12298], self__.arr[j_12298 + 1], added_leaf_QMARK_) : self__.arr[j_12298 + 1];
            var G__12301 = i_12297 + 1;
            var G__12302 = j_12298 + 2;
            i_12297 = G__12301;
            j_12298 = G__12302;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__12303 = i + 1;
        var G__12304 = j + 2;
        var G__12305 = bitmap | 1 << i;
        i = G__12303;
        j = G__12304;
        bitmap = G__12305;
        continue;
      } else {
        var G__12306 = i + 1;
        var G__12307 = j;
        var G__12308 = bitmap;
        i = G__12306;
        j = G__12307;
        bitmap = G__12308;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__12309 = i + 1;
          var G__12310 = init__$2;
          i = G__12309;
          init__$1 = G__12310;
          continue;
        }
      } else {
        var G__12311 = i + 1;
        var G__12312 = init__$1;
        i = G__12311;
        init__$1 = G__12312;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__12313 = i + 2;
        i = G__12313;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__12314 = j + 2;
                j = G__12314;
                continue;
              }
            } else {
              var G__12315 = j + 2;
              j = G__12315;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__12316 = j + 1;
              j = G__12316;
              continue;
            }
          } else {
            var G__12317 = j + 1;
            j = G__12317;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12319 = cljs.core.seq.call(null, coll);
  var chunk__12320 = null;
  var count__12321 = 0;
  var i__12322 = 0;
  while (true) {
    if (i__12322 < count__12321) {
      var vec__12323 = cljs.core._nth.call(null, chunk__12320, i__12322);
      var k = cljs.core.nth.call(null, vec__12323, 0, null);
      var v = cljs.core.nth.call(null, vec__12323, 1, null);
      f.call(null, v, k);
      var G__12327 = seq__12319;
      var G__12328 = chunk__12320;
      var G__12329 = count__12321;
      var G__12330 = i__12322 + 1;
      seq__12319 = G__12327;
      chunk__12320 = G__12328;
      count__12321 = G__12329;
      i__12322 = G__12330;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12319);
      if (temp__4126__auto__) {
        var seq__12319__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12319__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12319__$1);
          var G__12331 = cljs.core.chunk_rest.call(null, seq__12319__$1);
          var G__12332 = c__4418__auto__;
          var G__12333 = cljs.core.count.call(null, c__4418__auto__);
          var G__12334 = 0;
          seq__12319 = G__12331;
          chunk__12320 = G__12332;
          count__12321 = G__12333;
          i__12322 = G__12334;
          continue;
        } else {
          var vec__12324 = cljs.core.first.call(null, seq__12319__$1);
          var k = cljs.core.nth.call(null, vec__12324, 0, null);
          var v = cljs.core.nth.call(null, vec__12324, 1, null);
          f.call(null, v, k);
          var G__12335 = cljs.core.next.call(null, seq__12319__$1);
          var G__12336 = null;
          var G__12337 = 0;
          var G__12338 = 0;
          seq__12319 = G__12335;
          chunk__12320 = G__12336;
          count__12321 = G__12337;
          i__12322 = G__12338;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj12326 = {};
    return obj12326;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__12339 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__12340 = cljs.core.next.call(null, es);
          ret = G__12339;
          es = G__12340;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__12341 = null;
  var G__12341__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12341__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12341 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12341__2.call(this, self__, k);
      case 3:
        return G__12341__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12341.cljs$core$IFn$_invoke$arity$2 = G__12341__2;
  G__12341.cljs$core$IFn$_invoke$arity$3 = G__12341__3;
  return G__12341;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args12318) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12318)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__12342 = i + 1;
      var G__12343 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__12342;
      out = G__12343;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__12344 = o;
      if (G__12344) {
        var bit__4312__auto__ = G__12344.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4312__auto__ || G__12344.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__12344.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12344);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12344);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__12345 = cljs.core.next.call(null, es);
          var G__12346 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__12345;
          tcoll__$1 = G__12346;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__12347 = ascending_QMARK_ ? t.left : t.right;
      var G__12348 = cljs.core.conj.call(null, stack__$1, t);
      t = G__12347;
      stack__$1 = G__12348;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__12350 = null;
  var G__12350__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12350__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12350 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12350__2.call(this, self__, k);
      case 3:
        return G__12350__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12350.cljs$core$IFn$_invoke$arity$2 = G__12350__2;
  G__12350.cljs$core$IFn$_invoke$arity$3 = G__12350__3;
  return G__12350;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args12349) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12349)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__12352 = null;
  var G__12352__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12352__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12352 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12352__2.call(this, self__, k);
      case 3:
        return G__12352__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12352.cljs$core$IFn$_invoke$arity$2 = G__12352__2;
  G__12352.cljs$core$IFn$_invoke$arity$3 = G__12352__3;
  return G__12352;
}();
cljs.core.RedNode.prototype.apply = function(self__, args12351) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12351)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.RedNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.RedNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app__$1, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app__$1 = tree_map_append.call(null, left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.BlackNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.BlackNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app__$1, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12354 = cljs.core.seq.call(null, coll);
  var chunk__12355 = null;
  var count__12356 = 0;
  var i__12357 = 0;
  while (true) {
    if (i__12357 < count__12356) {
      var vec__12358 = cljs.core._nth.call(null, chunk__12355, i__12357);
      var k = cljs.core.nth.call(null, vec__12358, 0, null);
      var v = cljs.core.nth.call(null, vec__12358, 1, null);
      f.call(null, v, k);
      var G__12360 = seq__12354;
      var G__12361 = chunk__12355;
      var G__12362 = count__12356;
      var G__12363 = i__12357 + 1;
      seq__12354 = G__12360;
      chunk__12355 = G__12361;
      count__12356 = G__12362;
      i__12357 = G__12363;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12354);
      if (temp__4126__auto__) {
        var seq__12354__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12354__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12354__$1);
          var G__12364 = cljs.core.chunk_rest.call(null, seq__12354__$1);
          var G__12365 = c__4418__auto__;
          var G__12366 = cljs.core.count.call(null, c__4418__auto__);
          var G__12367 = 0;
          seq__12354 = G__12364;
          chunk__12355 = G__12365;
          count__12356 = G__12366;
          i__12357 = G__12367;
          continue;
        } else {
          var vec__12359 = cljs.core.first.call(null, seq__12354__$1);
          var k = cljs.core.nth.call(null, vec__12359, 0, null);
          var v = cljs.core.nth.call(null, vec__12359, 1, null);
          f.call(null, v, k);
          var G__12368 = cljs.core.next.call(null, seq__12354__$1);
          var G__12369 = null;
          var G__12370 = 0;
          var G__12371 = 0;
          seq__12354 = G__12368;
          chunk__12355 = G__12369;
          count__12356 = G__12370;
          i__12357 = G__12371;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__12372 = t.left;
          t = G__12372;
          continue;
        } else {
          var G__12373 = t.right;
          t = G__12373;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__12374 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__12375 = cljs.core.next.call(null, es);
          ret = G__12374;
          es = G__12375;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__12376 = null;
  var G__12376__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12376__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12376 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12376__2.call(this, self__, k);
      case 3:
        return G__12376__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12376.cljs$core$IFn$_invoke$arity$2 = G__12376__2;
  G__12376.cljs$core$IFn$_invoke$arity$3 = G__12376__3;
  return G__12376;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args12353) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12353)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__12377 = cljs.core.conj.call(null, stack, t);
              var G__12378 = t.left;
              stack = G__12377;
              t = G__12378;
              continue;
            } else {
              var G__12379 = stack;
              var G__12380 = t.right;
              stack = G__12379;
              t = G__12380;
              continue;
            }
          } else {
            if (c > 0) {
              var G__12381 = cljs.core.conj.call(null, stack, t);
              var G__12382 = t.right;
              stack = G__12381;
              t = G__12382;
              continue;
            } else {
              var G__12383 = stack;
              var G__12384 = t.left;
              stack = G__12383;
              t = G__12384;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__12385 = cljs.core.nnext.call(null, in$);
        var G__12386 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12385;
        out = G__12386;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__12387) {
    var keyvals = cljs.core.seq(arglist__12387);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__12388) {
    var keyvals = cljs.core.seq(arglist__12388);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj12392 = {};
      return obj12392;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__12393 = cljs.core.nnext.call(null, kvs);
        kvs = G__12393;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__12394) {
    var keyvals = cljs.core.seq(arglist__12394);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__12395 = cljs.core.nnext.call(null, in$);
        var G__12396 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12395;
        out = G__12396;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__12397) {
    var keyvals = cljs.core.seq(arglist__12397);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__12398 = cljs.core.nnext.call(null, in$);
        var G__12399 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12398;
        out = G__12399;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__12400) {
    var comparator = cljs.core.first(arglist__12400);
    var keyvals = cljs.core.rest(arglist__12400);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12401 = self__.mseq;
    if (G__12401) {
      var bit__4312__auto__ = G__12401.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12401.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12401.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12401);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12401);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12402 = self__.mseq;
    if (G__12402) {
      var bit__4312__auto__ = G__12402.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12402.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12402.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12402);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12402);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12403 = self__.mseq;
    if (G__12403) {
      var bit__4312__auto__ = G__12403.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12403.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12403.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12403);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12403);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12404 = self__.mseq;
    if (G__12404) {
      var bit__4312__auto__ = G__12404.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4312__auto__ || G__12404.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12404.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12404);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12404);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__12405_SHARP_, p2__12406_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3648__auto__ = p1__12405_SHARP_;
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__12406_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__12407) {
    var maps = cljs.core.seq(arglist__12407);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3648__auto__ = m1;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__12408) {
    var f = cljs.core.first(arglist__12408);
    var maps = cljs.core.rest(arglist__12408);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__12409 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__12410 = cljs.core.next.call(null, keys);
      ret = G__12409;
      keys = G__12410;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12413 = cljs.core.seq.call(null, coll);
  var chunk__12414 = null;
  var count__12415 = 0;
  var i__12416 = 0;
  while (true) {
    if (i__12416 < count__12415) {
      var vec__12417 = cljs.core._nth.call(null, chunk__12414, i__12416);
      var k = cljs.core.nth.call(null, vec__12417, 0, null);
      var v = cljs.core.nth.call(null, vec__12417, 1, null);
      f.call(null, v, k);
      var G__12419 = seq__12413;
      var G__12420 = chunk__12414;
      var G__12421 = count__12415;
      var G__12422 = i__12416 + 1;
      seq__12413 = G__12419;
      chunk__12414 = G__12420;
      count__12415 = G__12421;
      i__12416 = G__12422;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12413);
      if (temp__4126__auto__) {
        var seq__12413__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12413__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12413__$1);
          var G__12423 = cljs.core.chunk_rest.call(null, seq__12413__$1);
          var G__12424 = c__4418__auto__;
          var G__12425 = cljs.core.count.call(null, c__4418__auto__);
          var G__12426 = 0;
          seq__12413 = G__12423;
          chunk__12414 = G__12424;
          count__12415 = G__12425;
          i__12416 = G__12426;
          continue;
        } else {
          var vec__12418 = cljs.core.first.call(null, seq__12413__$1);
          var k = cljs.core.nth.call(null, vec__12418, 0, null);
          var v = cljs.core.nth.call(null, vec__12418, 1, null);
          f.call(null, v, k);
          var G__12427 = cljs.core.next.call(null, seq__12413__$1);
          var G__12428 = null;
          var G__12429 = 0;
          var G__12430 = 0;
          seq__12413 = G__12427;
          chunk__12414 = G__12428;
          count__12415 = G__12429;
          i__12416 = G__12430;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__12411_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12411_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__12431 = null;
  var G__12431__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12431__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12431 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12431__2.call(this, self__, k);
      case 3:
        return G__12431__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12431.cljs$core$IFn$_invoke$arity$2 = G__12431__2;
  G__12431.cljs$core$IFn$_invoke$arity$3 = G__12431__3;
  return G__12431;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args12412) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12412)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12432 = i + 1;
        var G__12433 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__12432;
        out = G__12433;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__12434 = i + 1;
        var G__12435 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__12434;
        out = G__12435;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__12437 = null;
  var G__12437__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__12437__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__12437 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12437__2.call(this, self__, k);
      case 3:
        return G__12437__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12437.cljs$core$IFn$_invoke$arity$2 = G__12437__2;
  G__12437.cljs$core$IFn$_invoke$arity$3 = G__12437__3;
  return G__12437;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args12436) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12436)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12440 = cljs.core.seq.call(null, coll);
  var chunk__12441 = null;
  var count__12442 = 0;
  var i__12443 = 0;
  while (true) {
    if (i__12443 < count__12442) {
      var vec__12444 = cljs.core._nth.call(null, chunk__12441, i__12443);
      var k = cljs.core.nth.call(null, vec__12444, 0, null);
      var v = cljs.core.nth.call(null, vec__12444, 1, null);
      f.call(null, v, k);
      var G__12446 = seq__12440;
      var G__12447 = chunk__12441;
      var G__12448 = count__12442;
      var G__12449 = i__12443 + 1;
      seq__12440 = G__12446;
      chunk__12441 = G__12447;
      count__12442 = G__12448;
      i__12443 = G__12449;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12440);
      if (temp__4126__auto__) {
        var seq__12440__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12440__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12440__$1);
          var G__12450 = cljs.core.chunk_rest.call(null, seq__12440__$1);
          var G__12451 = c__4418__auto__;
          var G__12452 = cljs.core.count.call(null, c__4418__auto__);
          var G__12453 = 0;
          seq__12440 = G__12450;
          chunk__12441 = G__12451;
          count__12442 = G__12452;
          i__12443 = G__12453;
          continue;
        } else {
          var vec__12445 = cljs.core.first.call(null, seq__12440__$1);
          var k = cljs.core.nth.call(null, vec__12445, 0, null);
          var v = cljs.core.nth.call(null, vec__12445, 1, null);
          f.call(null, v, k);
          var G__12454 = cljs.core.next.call(null, seq__12440__$1);
          var G__12455 = null;
          var G__12456 = 0;
          var G__12457 = 0;
          seq__12440 = G__12454;
          chunk__12441 = G__12455;
          count__12442 = G__12456;
          i__12443 = G__12457;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__12438_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12438_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__12458 = null;
  var G__12458__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12458__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12458 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12458__2.call(this, self__, k);
      case 3:
        return G__12458__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12458.cljs$core$IFn$_invoke$arity$2 = G__12458__2;
  G__12458.cljs$core$IFn$_invoke$arity$3 = G__12458__3;
  return G__12458;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args12439) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12439)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4512__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4512__auto__.length) {
        var G__12459 = i + 1;
        var G__12460 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__12459;
        res = G__12460;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__12461 = cljs.core._next.call(null, in$__$1);
          var G__12462 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__12461;
          out = G__12462;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__12463__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__12463 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12463__delegate.call(this, keys);
    };
    G__12463.cljs$lang$maxFixedArity = 0;
    G__12463.cljs$lang$applyTo = function(arglist__12464) {
      var keys = cljs.core.seq(arglist__12464);
      return G__12463__delegate(keys);
    };
    G__12463.cljs$core$IFn$_invoke$arity$variadic = G__12463__delegate;
    return G__12463;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__12465) {
    var keys = cljs.core.seq(arglist__12465);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__12466) {
    var comparator = cljs.core.first(arglist__12466);
    var keys = cljs.core.rest(arglist__12466);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__12467_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__12467_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__12467_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__12468_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__12468_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__12468_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__12475, seen__$1) {
        while (true) {
          var vec__12476 = p__12475;
          var f = cljs.core.nth.call(null, vec__12476, 0, null);
          var xs__$1 = vec__12476;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__12477 = cljs.core.rest.call(null, s);
              var G__12478 = seen__$1;
              p__12475 = G__12477;
              seen__$1 = G__12478;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__12479 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__12480 = cljs.core.next.call(null, s__$1);
      ret = G__12479;
      s__$1 = G__12480;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__12482 = x;
    if (G__12482) {
      var bit__4305__auto__ = G__12482.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4305__auto__ || G__12482.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__12483 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__12484 = cljs.core.next.call(null, ks);
      var G__12485 = cljs.core.next.call(null, vs);
      map = G__12483;
      ks = G__12484;
      vs = G__12485;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__12488__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12486_SHARP_, p2__12487_SHARP_) {
        return max_key.call(null, k, p1__12486_SHARP_, p2__12487_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__12488 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12488__delegate.call(this, k, x, y, more);
    };
    G__12488.cljs$lang$maxFixedArity = 3;
    G__12488.cljs$lang$applyTo = function(arglist__12489) {
      var k = cljs.core.first(arglist__12489);
      arglist__12489 = cljs.core.next(arglist__12489);
      var x = cljs.core.first(arglist__12489);
      arglist__12489 = cljs.core.next(arglist__12489);
      var y = cljs.core.first(arglist__12489);
      var more = cljs.core.rest(arglist__12489);
      return G__12488__delegate(k, x, y, more);
    };
    G__12488.cljs$core$IFn$_invoke$arity$variadic = G__12488__delegate;
    return G__12488;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__12492__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12490_SHARP_, p2__12491_SHARP_) {
        return min_key.call(null, k, p1__12490_SHARP_, p2__12491_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__12492 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12492__delegate.call(this, k, x, y, more);
    };
    G__12492.cljs$lang$maxFixedArity = 3;
    G__12492.cljs$lang$applyTo = function(arglist__12493) {
      var k = cljs.core.first(arglist__12493);
      arglist__12493 = cljs.core.next(arglist__12493);
      var x = cljs.core.first(arglist__12493);
      arglist__12493 = cljs.core.next(arglist__12493);
      var y = cljs.core.first(arglist__12493);
      var more = cljs.core.rest(arglist__12493);
      return G__12492__delegate(k, x, y, more);
    };
    G__12492.cljs$core$IFn$_invoke$arity$variadic = G__12492__delegate;
    return G__12492;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__12494 = null;
          var G__12494__0 = function() {
            return rf.call(null);
          };
          var G__12494__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__12494__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__12494 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12494__0.call(this);
              case 1:
                return G__12494__1.call(this, result);
              case 2:
                return G__12494__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12494.cljs$core$IFn$_invoke$arity$0 = G__12494__0;
          G__12494.cljs$core$IFn$_invoke$arity$1 = G__12494__1;
          G__12494.cljs$core$IFn$_invoke$arity$2 = G__12494__2;
          return G__12494;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__12495 = null;
        var G__12495__0 = function() {
          return rf.call(null);
        };
        var G__12495__1 = function(result) {
          return rf.call(null, result);
        };
        var G__12495__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__12495 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12495__0.call(this);
            case 1:
              return G__12495__1.call(this, result);
            case 2:
              return G__12495__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12495.cljs$core$IFn$_invoke$arity$0 = G__12495__0;
        G__12495.cljs$core$IFn$_invoke$arity$1 = G__12495__1;
        G__12495.cljs$core$IFn$_invoke$arity$2 = G__12495__2;
        return G__12495;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__12498 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__12498, 0, null);
        var s = vec__12498;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__12499 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__12499, 0, null);
      var s = vec__12499;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__12502 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__12502, 0, null);
        var s = vec__12502;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__12503 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__12503, 0, null);
      var s = vec__12503;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__12504 = i + self__.step;
        var G__12505 = ret__$1;
        i = G__12504;
        ret = G__12505;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__12506 = null;
          var G__12506__0 = function() {
            return rf.call(null);
          };
          var G__12506__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12506__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__12506 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12506__0.call(this);
              case 1:
                return G__12506__1.call(this, result);
              case 2:
                return G__12506__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12506.cljs$core$IFn$_invoke$arity$0 = G__12506__0;
          G__12506.cljs$core$IFn$_invoke$arity$1 = G__12506__1;
          G__12506.cljs$core$IFn$_invoke$arity$2 = G__12506__2;
          return G__12506;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__12508 = null;
          var G__12508__0 = function() {
            return rf.call(null);
          };
          var G__12508__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__12508__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__12508 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12508__0.call(this);
              case 1:
                return G__12508__1.call(this, result);
              case 2:
                return G__12508__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12508.cljs$core$IFn$_invoke$arity$0 = G__12508__0;
          G__12508.cljs$core$IFn$_invoke$arity$1 = G__12508__1;
          G__12508.cljs$core$IFn$_invoke$arity$2 = G__12508__2;
          return G__12508;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__12507_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__12507_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__12519 = null;
      var G__12519__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__12519__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__12519__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__12519__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__12519__4 = function() {
        var G__12520__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__12520 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12520__delegate.call(this, x, y, z, args);
        };
        G__12520.cljs$lang$maxFixedArity = 3;
        G__12520.cljs$lang$applyTo = function(arglist__12521) {
          var x = cljs.core.first(arglist__12521);
          arglist__12521 = cljs.core.next(arglist__12521);
          var y = cljs.core.first(arglist__12521);
          arglist__12521 = cljs.core.next(arglist__12521);
          var z = cljs.core.first(arglist__12521);
          var args = cljs.core.rest(arglist__12521);
          return G__12520__delegate(x, y, z, args);
        };
        G__12520.cljs$core$IFn$_invoke$arity$variadic = G__12520__delegate;
        return G__12520;
      }();
      G__12519 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12519__0.call(this);
          case 1:
            return G__12519__1.call(this, x);
          case 2:
            return G__12519__2.call(this, x, y);
          case 3:
            return G__12519__3.call(this, x, y, z);
          default:
            return G__12519__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12519.cljs$lang$maxFixedArity = 3;
      G__12519.cljs$lang$applyTo = G__12519__4.cljs$lang$applyTo;
      G__12519.cljs$core$IFn$_invoke$arity$0 = G__12519__0;
      G__12519.cljs$core$IFn$_invoke$arity$1 = G__12519__1;
      G__12519.cljs$core$IFn$_invoke$arity$2 = G__12519__2;
      G__12519.cljs$core$IFn$_invoke$arity$3 = G__12519__3;
      G__12519.cljs$core$IFn$_invoke$arity$variadic = G__12519__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12519;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__12522 = null;
      var G__12522__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__12522__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__12522__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__12522__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__12522__4 = function() {
        var G__12523__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__12523 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12523__delegate.call(this, x, y, z, args);
        };
        G__12523.cljs$lang$maxFixedArity = 3;
        G__12523.cljs$lang$applyTo = function(arglist__12524) {
          var x = cljs.core.first(arglist__12524);
          arglist__12524 = cljs.core.next(arglist__12524);
          var y = cljs.core.first(arglist__12524);
          arglist__12524 = cljs.core.next(arglist__12524);
          var z = cljs.core.first(arglist__12524);
          var args = cljs.core.rest(arglist__12524);
          return G__12523__delegate(x, y, z, args);
        };
        G__12523.cljs$core$IFn$_invoke$arity$variadic = G__12523__delegate;
        return G__12523;
      }();
      G__12522 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12522__0.call(this);
          case 1:
            return G__12522__1.call(this, x);
          case 2:
            return G__12522__2.call(this, x, y);
          case 3:
            return G__12522__3.call(this, x, y, z);
          default:
            return G__12522__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12522.cljs$lang$maxFixedArity = 3;
      G__12522.cljs$lang$applyTo = G__12522__4.cljs$lang$applyTo;
      G__12522.cljs$core$IFn$_invoke$arity$0 = G__12522__0;
      G__12522.cljs$core$IFn$_invoke$arity$1 = G__12522__1;
      G__12522.cljs$core$IFn$_invoke$arity$2 = G__12522__2;
      G__12522.cljs$core$IFn$_invoke$arity$3 = G__12522__3;
      G__12522.cljs$core$IFn$_invoke$arity$variadic = G__12522__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12522;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__12525 = null;
      var G__12525__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__12525__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__12525__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__12525__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__12525__4 = function() {
        var G__12526__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__12526 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12526__delegate.call(this, x, y, z, args);
        };
        G__12526.cljs$lang$maxFixedArity = 3;
        G__12526.cljs$lang$applyTo = function(arglist__12527) {
          var x = cljs.core.first(arglist__12527);
          arglist__12527 = cljs.core.next(arglist__12527);
          var y = cljs.core.first(arglist__12527);
          arglist__12527 = cljs.core.next(arglist__12527);
          var z = cljs.core.first(arglist__12527);
          var args = cljs.core.rest(arglist__12527);
          return G__12526__delegate(x, y, z, args);
        };
        G__12526.cljs$core$IFn$_invoke$arity$variadic = G__12526__delegate;
        return G__12526;
      }();
      G__12525 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12525__0.call(this);
          case 1:
            return G__12525__1.call(this, x);
          case 2:
            return G__12525__2.call(this, x, y);
          case 3:
            return G__12525__3.call(this, x, y, z);
          default:
            return G__12525__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12525.cljs$lang$maxFixedArity = 3;
      G__12525.cljs$lang$applyTo = G__12525__4.cljs$lang$applyTo;
      G__12525.cljs$core$IFn$_invoke$arity$0 = G__12525__0;
      G__12525.cljs$core$IFn$_invoke$arity$1 = G__12525__1;
      G__12525.cljs$core$IFn$_invoke$arity$2 = G__12525__2;
      G__12525.cljs$core$IFn$_invoke$arity$3 = G__12525__3;
      G__12525.cljs$core$IFn$_invoke$arity$variadic = G__12525__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12525;
    }();
  };
  var juxt__4 = function() {
    var G__12528__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__12529 = null;
          var G__12529__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12509_SHARP_, p2__12510_SHARP_) {
                return cljs.core.conj.call(null, p1__12509_SHARP_, p2__12510_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12529__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12511_SHARP_, p2__12512_SHARP_) {
                return cljs.core.conj.call(null, p1__12511_SHARP_, p2__12512_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12529__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12513_SHARP_, p2__12514_SHARP_) {
                return cljs.core.conj.call(null, p1__12513_SHARP_, p2__12514_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12529__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__12515_SHARP_, p2__12516_SHARP_) {
                return cljs.core.conj.call(null, p1__12515_SHARP_, p2__12516_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12529__4 = function() {
            var G__12530__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__12517_SHARP_, p2__12518_SHARP_) {
                  return cljs.core.conj.call(null, p1__12517_SHARP_, cljs.core.apply.call(null, p2__12518_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__12530 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__12530__delegate.call(this, x, y, z, args);
            };
            G__12530.cljs$lang$maxFixedArity = 3;
            G__12530.cljs$lang$applyTo = function(arglist__12531) {
              var x = cljs.core.first(arglist__12531);
              arglist__12531 = cljs.core.next(arglist__12531);
              var y = cljs.core.first(arglist__12531);
              arglist__12531 = cljs.core.next(arglist__12531);
              var z = cljs.core.first(arglist__12531);
              var args = cljs.core.rest(arglist__12531);
              return G__12530__delegate(x, y, z, args);
            };
            G__12530.cljs$core$IFn$_invoke$arity$variadic = G__12530__delegate;
            return G__12530;
          }();
          G__12529 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__12529__0.call(this);
              case 1:
                return G__12529__1.call(this, x);
              case 2:
                return G__12529__2.call(this, x, y);
              case 3:
                return G__12529__3.call(this, x, y, z);
              default:
                return G__12529__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12529.cljs$lang$maxFixedArity = 3;
          G__12529.cljs$lang$applyTo = G__12529__4.cljs$lang$applyTo;
          G__12529.cljs$core$IFn$_invoke$arity$0 = G__12529__0;
          G__12529.cljs$core$IFn$_invoke$arity$1 = G__12529__1;
          G__12529.cljs$core$IFn$_invoke$arity$2 = G__12529__2;
          G__12529.cljs$core$IFn$_invoke$arity$3 = G__12529__3;
          G__12529.cljs$core$IFn$_invoke$arity$variadic = G__12529__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__12529;
        }();
      }(fs__$1);
    };
    var G__12528 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12528__delegate.call(this, f, g, h, fs);
    };
    G__12528.cljs$lang$maxFixedArity = 3;
    G__12528.cljs$lang$applyTo = function(arglist__12532) {
      var f = cljs.core.first(arglist__12532);
      arglist__12532 = cljs.core.next(arglist__12532);
      var g = cljs.core.first(arglist__12532);
      arglist__12532 = cljs.core.next(arglist__12532);
      var h = cljs.core.first(arglist__12532);
      var fs = cljs.core.rest(arglist__12532);
      return G__12528__delegate(f, g, h, fs);
    };
    G__12528.cljs$core$IFn$_invoke$arity$variadic = G__12528__delegate;
    return G__12528;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__12533 = cljs.core.next.call(null, coll);
        coll = G__12533;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__12534 = n - 1;
        var G__12535 = cljs.core.next.call(null, coll);
        n = G__12534;
        coll = G__12535;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__12537 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__12537, 0, null);
    var flags = cljs.core.nth.call(null, vec__12537, 1, null);
    var pattern = cljs.core.nth.call(null, vec__12537, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_12539 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_12540__$1 = cljs.core.next.call(null, coll);
      var n_12541 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_12540__$1 && (n_12541 == null || !(n_12541 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_12540__$1), writer, opts);
          var G__12542 = cljs.core.next.call(null, coll_12540__$1);
          var G__12543 = n_12541 - 1;
          coll_12540__$1 = G__12542;
          n_12541 = G__12543;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_12540__$1) && n_12541 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_12539;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__12548 = cljs.core.seq.call(null, ss);
    var chunk__12549 = null;
    var count__12550 = 0;
    var i__12551 = 0;
    while (true) {
      if (i__12551 < count__12550) {
        var s = cljs.core._nth.call(null, chunk__12549, i__12551);
        cljs.core._write.call(null, writer, s);
        var G__12552 = seq__12548;
        var G__12553 = chunk__12549;
        var G__12554 = count__12550;
        var G__12555 = i__12551 + 1;
        seq__12548 = G__12552;
        chunk__12549 = G__12553;
        count__12550 = G__12554;
        i__12551 = G__12555;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__12548);
        if (temp__4126__auto__) {
          var seq__12548__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12548__$1)) {
            var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12548__$1);
            var G__12556 = cljs.core.chunk_rest.call(null, seq__12548__$1);
            var G__12557 = c__4418__auto__;
            var G__12558 = cljs.core.count.call(null, c__4418__auto__);
            var G__12559 = 0;
            seq__12548 = G__12556;
            chunk__12549 = G__12557;
            count__12550 = G__12558;
            i__12551 = G__12559;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__12548__$1);
            cljs.core._write.call(null, writer, s);
            var G__12560 = cljs.core.next.call(null, seq__12548__$1);
            var G__12561 = null;
            var G__12562 = 0;
            var G__12563 = 0;
            seq__12548 = G__12560;
            chunk__12549 = G__12561;
            count__12550 = G__12562;
            i__12551 = G__12563;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__12564) {
    var writer = cljs.core.first(arglist__12564);
    var ss = cljs.core.rest(arglist__12564);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj12566 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj12566;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3636__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3636__auto__)) {
          var and__3636__auto____$1 = function() {
            var G__12572 = obj;
            if (G__12572) {
              var bit__4312__auto__ = G__12572.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4312__auto__ || G__12572.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__12572.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12572);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12572);
            }
          }();
          if (and__3636__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3636__auto____$1;
          }
        } else {
          return and__3636__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__12573 = obj;
            if (G__12573) {
              var bit__4305__auto__ = G__12573.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4305__auto__ || G__12573.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__12575 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__12575;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__12574 = obj;
                            if (G__12574) {
                              var bit__4312__auto__ = G__12574.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4312__auto__ || G__12574.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__12574.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12574);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12574);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__12580 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__12581 = null;
  var count__12582 = 0;
  var i__12583 = 0;
  while (true) {
    if (i__12583 < count__12582) {
      var obj = cljs.core._nth.call(null, chunk__12581, i__12583);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__12584 = seq__12580;
      var G__12585 = chunk__12581;
      var G__12586 = count__12582;
      var G__12587 = i__12583 + 1;
      seq__12580 = G__12584;
      chunk__12581 = G__12585;
      count__12582 = G__12586;
      i__12583 = G__12587;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__12580);
      if (temp__4126__auto__) {
        var seq__12580__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12580__$1)) {
          var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__12580__$1);
          var G__12588 = cljs.core.chunk_rest.call(null, seq__12580__$1);
          var G__12589 = c__4418__auto__;
          var G__12590 = cljs.core.count.call(null, c__4418__auto__);
          var G__12591 = 0;
          seq__12580 = G__12588;
          chunk__12581 = G__12589;
          count__12582 = G__12590;
          i__12583 = G__12591;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__12580__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__12592 = cljs.core.next.call(null, seq__12580__$1);
          var G__12593 = null;
          var G__12594 = 0;
          var G__12595 = 0;
          seq__12580 = G__12592;
          chunk__12581 = G__12593;
          count__12582 = G__12594;
          i__12583 = G__12595;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__12596) {
    var objs = cljs.core.seq(arglist__12596);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__12597) {
    var objs = cljs.core.seq(arglist__12597);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__12598) {
    var objs = cljs.core.seq(arglist__12598);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__12599) {
    var objs = cljs.core.seq(arglist__12599);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__12600) {
    var objs = cljs.core.seq(arglist__12600);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__12601) {
    var objs = cljs.core.seq(arglist__12601);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__12602) {
    var objs = cljs.core.seq(arglist__12602);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__12603) {
    var objs = cljs.core.seq(arglist__12603);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__12604) {
    var iref = cljs.core.first(arglist__12604);
    arglist__12604 = cljs.core.next(arglist__12604);
    var f = cljs.core.first(arglist__12604);
    var args = cljs.core.rest(arglist__12604);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__12605_SHARP_, p2__12606_SHARP_) {
    var ret = rf.call(null, p1__12605_SHARP_, p2__12606_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__12607 = null;
      var G__12607__0 = function() {
        return rf.call(null);
      };
      var G__12607__1 = function(result) {
        return rf.call(null, result);
      };
      var G__12607__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__12607 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12607__0.call(this);
          case 1:
            return G__12607__1.call(this, result);
          case 2:
            return G__12607__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12607.cljs$core$IFn$_invoke$arity$0 = G__12607__0;
      G__12607.cljs$core$IFn$_invoke$arity$1 = G__12607__1;
      G__12607.cljs$core$IFn$_invoke$arity$2 = G__12607__2;
      return G__12607;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__12608 = null;
          var G__12608__0 = function() {
            return rf.call(null);
          };
          var G__12608__1 = function(result) {
            return rf.call(null, result);
          };
          var G__12608__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__12608 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__12608__0.call(this);
              case 1:
                return G__12608__1.call(this, result);
              case 2:
                return G__12608__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__12608.cljs$core$IFn$_invoke$arity$0 = G__12608__0;
          G__12608.cljs$core$IFn$_invoke$arity$1 = G__12608__1;
          G__12608.cljs$core$IFn$_invoke$arity$2 = G__12608__2;
          return G__12608;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__12610_SHARP_, p2__12609_SHARP_) {
    return proc.call(null, p2__12609_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj12612 = {};
  return obj12612;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__12614 = k;
    if (G__12614) {
      var bit__4312__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3648__auto__ = bit__4312__auto__;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return G__12614.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__12614.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12614);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12614);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__12628 = x;
      if (G__12628) {
        var bit__4312__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3648__auto__ = bit__4312__auto__;
          if (cljs.core.truth_(or__3648__auto__)) {
            return or__3648__auto__;
          } else {
            return G__12628.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__12628.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12628);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12628);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj12630 = {};
              return obj12630;
            }();
            var seq__12631_12641 = cljs.core.seq.call(null, x);
            var chunk__12632_12642 = null;
            var count__12633_12643 = 0;
            var i__12634_12644 = 0;
            while (true) {
              if (i__12634_12644 < count__12633_12643) {
                var vec__12635_12645 = cljs.core._nth.call(null, chunk__12632_12642, i__12634_12644);
                var k_12646 = cljs.core.nth.call(null, vec__12635_12645, 0, null);
                var v_12647 = cljs.core.nth.call(null, vec__12635_12645, 1, null);
                m[cljs.core.key__GT_js.call(null, k_12646)] = clj__GT_js.call(null, v_12647);
                var G__12648 = seq__12631_12641;
                var G__12649 = chunk__12632_12642;
                var G__12650 = count__12633_12643;
                var G__12651 = i__12634_12644 + 1;
                seq__12631_12641 = G__12648;
                chunk__12632_12642 = G__12649;
                count__12633_12643 = G__12650;
                i__12634_12644 = G__12651;
                continue;
              } else {
                var temp__4126__auto___12652 = cljs.core.seq.call(null, seq__12631_12641);
                if (temp__4126__auto___12652) {
                  var seq__12631_12653__$1 = temp__4126__auto___12652;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__12631_12653__$1)) {
                    var c__4418__auto___12654 = cljs.core.chunk_first.call(null, seq__12631_12653__$1);
                    var G__12655 = cljs.core.chunk_rest.call(null, seq__12631_12653__$1);
                    var G__12656 = c__4418__auto___12654;
                    var G__12657 = cljs.core.count.call(null, c__4418__auto___12654);
                    var G__12658 = 0;
                    seq__12631_12641 = G__12655;
                    chunk__12632_12642 = G__12656;
                    count__12633_12643 = G__12657;
                    i__12634_12644 = G__12658;
                    continue;
                  } else {
                    var vec__12636_12659 = cljs.core.first.call(null, seq__12631_12653__$1);
                    var k_12660 = cljs.core.nth.call(null, vec__12636_12659, 0, null);
                    var v_12661 = cljs.core.nth.call(null, vec__12636_12659, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_12660)] = clj__GT_js.call(null, v_12661);
                    var G__12662 = cljs.core.next.call(null, seq__12631_12653__$1);
                    var G__12663 = null;
                    var G__12664 = 0;
                    var G__12665 = 0;
                    seq__12631_12641 = G__12662;
                    chunk__12632_12642 = G__12663;
                    count__12633_12643 = G__12664;
                    i__12634_12644 = G__12665;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__12637_12666 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__12638_12667 = null;
              var count__12639_12668 = 0;
              var i__12640_12669 = 0;
              while (true) {
                if (i__12640_12669 < count__12639_12668) {
                  var x_12670__$1 = cljs.core._nth.call(null, chunk__12638_12667, i__12640_12669);
                  arr.push(x_12670__$1);
                  var G__12671 = seq__12637_12666;
                  var G__12672 = chunk__12638_12667;
                  var G__12673 = count__12639_12668;
                  var G__12674 = i__12640_12669 + 1;
                  seq__12637_12666 = G__12671;
                  chunk__12638_12667 = G__12672;
                  count__12639_12668 = G__12673;
                  i__12640_12669 = G__12674;
                  continue;
                } else {
                  var temp__4126__auto___12675 = cljs.core.seq.call(null, seq__12637_12666);
                  if (temp__4126__auto___12675) {
                    var seq__12637_12676__$1 = temp__4126__auto___12675;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__12637_12676__$1)) {
                      var c__4418__auto___12677 = cljs.core.chunk_first.call(null, seq__12637_12676__$1);
                      var G__12678 = cljs.core.chunk_rest.call(null, seq__12637_12676__$1);
                      var G__12679 = c__4418__auto___12677;
                      var G__12680 = cljs.core.count.call(null, c__4418__auto___12677);
                      var G__12681 = 0;
                      seq__12637_12666 = G__12678;
                      chunk__12638_12667 = G__12679;
                      count__12639_12668 = G__12680;
                      i__12640_12669 = G__12681;
                      continue;
                    } else {
                      var x_12682__$1 = cljs.core.first.call(null, seq__12637_12676__$1);
                      arr.push(x_12682__$1);
                      var G__12683 = cljs.core.next.call(null, seq__12637_12676__$1);
                      var G__12684 = null;
                      var G__12685 = 0;
                      var G__12686 = 0;
                      seq__12637_12666 = G__12683;
                      chunk__12638_12667 = G__12684;
                      count__12639_12668 = G__12685;
                      i__12640_12669 = G__12686;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj12688 = {};
  return obj12688;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3636__auto__ = x;
    if (and__3636__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4285__auto__ = x == null ? null : x;
    return function() {
      var or__3648__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__12709__delegate = function(x, opts) {
      if (function() {
        var G__12699 = x;
        if (G__12699) {
          var bit__4312__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3648__auto__ = bit__4312__auto__;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return G__12699.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__12699.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12699);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12699);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__12700 = opts;
          var map__12700__$1 = cljs.core.seq_QMARK_.call(null, map__12700) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12700) : map__12700;
          var keywordize_keys = cljs.core.get.call(null, map__12700__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__12700, map__12700__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4387__auto__ = function(map__12700, map__12700__$1, keywordize_keys, keyfn) {
                          return function iter__12705(s__12706) {
                            return new cljs.core.LazySeq(null, function(map__12700, map__12700__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__12706__$1 = s__12706;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__12706__$1);
                                  if (temp__4126__auto__) {
                                    var s__12706__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__12706__$2)) {
                                      var c__4385__auto__ = cljs.core.chunk_first.call(null, s__12706__$2);
                                      var size__4386__auto__ = cljs.core.count.call(null, c__4385__auto__);
                                      var b__12708 = cljs.core.chunk_buffer.call(null, size__4386__auto__);
                                      if (function() {
                                        var i__12707 = 0;
                                        while (true) {
                                          if (i__12707 < size__4386__auto__) {
                                            var k = cljs.core._nth.call(null, c__4385__auto__, i__12707);
                                            cljs.core.chunk_append.call(null, b__12708, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__12710 = i__12707 + 1;
                                            i__12707 = G__12710;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12708), iter__12705.call(null, cljs.core.chunk_rest.call(null, s__12706__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12708), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__12706__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__12705.call(null, cljs.core.rest.call(null, s__12706__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__12700, map__12700__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__12700, map__12700__$1, keywordize_keys, keyfn);
                        return iter__4387__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__12700, map__12700__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__12709 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12709__delegate.call(this, x, opts);
    };
    G__12709.cljs$lang$maxFixedArity = 1;
    G__12709.cljs$lang$applyTo = function(arglist__12711) {
      var x = cljs.core.first(arglist__12711);
      var opts = cljs.core.rest(arglist__12711);
      return G__12709__delegate(x, opts);
    };
    G__12709.cljs$core$IFn$_invoke$arity$variadic = G__12709__delegate;
    return G__12709;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__12712__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__12712 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12712__delegate.call(this, args);
      };
      G__12712.cljs$lang$maxFixedArity = 0;
      G__12712.cljs$lang$applyTo = function(arglist__12713) {
        var args = cljs.core.seq(arglist__12713);
        return G__12712__delegate(args);
      };
      G__12712.cljs$core$IFn$_invoke$arity$variadic = G__12712__delegate;
      return G__12712;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__12714 = ret;
        f = G__12714;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__12715__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__12715 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12715__delegate.call(this, f, args);
    };
    G__12715.cljs$lang$maxFixedArity = 1;
    G__12715.cljs$lang$applyTo = function(arglist__12716) {
      var f = cljs.core.first(arglist__12716);
      var args = cljs.core.rest(arglist__12716);
      return G__12715__delegate(f, args);
    };
    G__12715.cljs$core$IFn$_invoke$arity$variadic = G__12715__delegate;
    return G__12715;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__12717) {
    var f = cljs.core.first(arglist__12717);
    var args = cljs.core.rest(arglist__12717);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3648__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      var or__3648__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3648__auto____$1) {
        return or__3648__auto____$1;
      } else {
        var and__3636__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3636__auto__) {
          var and__3636__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3636__auto____$1) {
            var and__3636__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3636__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__12718 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__12719 = i + 1;
                  ret = G__12718;
                  i = G__12719;
                  continue;
                }
                break;
              }
            } else {
              return and__3636__auto____$2;
            }
          } else {
            return and__3636__auto____$1;
          }
        } else {
          return and__3636__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3648__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__12720_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__12720_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__12720_SHARP_), cljs.core.second.call(null, p1__12720_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__12721_SHARP_, p2__12722_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__12721_SHARP_, p2__12722_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3648__auto__ = cljs.core.truth_(function() {
    var and__3636__auto__ = xprefs;
    if (cljs.core.truth_(and__3636__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3636__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    var or__3648__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__12723 = cljs.core.rest.call(null, ps);
          ps = G__12723;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3648__auto____$1)) {
      return or__3648__auto____$1;
    } else {
      var or__3648__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__12724 = cljs.core.rest.call(null, ps);
            ps = G__12724;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3648__auto____$2)) {
        return or__3648__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3648__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__12727) {
    var vec__12728 = p__12727;
    var k = cljs.core.nth.call(null, vec__12728, 0, null);
    var _ = cljs.core.nth.call(null, vec__12728, 1, null);
    var e = vec__12728;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3648__auto__ = be == null;
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj12730 = {};
  return obj12730;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._reset[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._reset["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._add_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._add_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._remove_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._remove_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._prefer_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._get_method[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._get_method["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._methods[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._methods["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3636__auto__ = mf;
    if (and__3636__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4285__auto__ = mf == null ? null : mf;
    return function() {
      var or__3648__auto__ = cljs.core._prefers[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core._prefers["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__12732 = null;
  var G__12732__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__12732__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__12732__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__12732__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__12732__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__12732__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__12732__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__12732__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__12732__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__12732__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__12732__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__12732__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__12732__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__12732__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__12732__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__12732__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__12732__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__12732__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__12732__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__12732__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__12732__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__12732 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__12732__2.call(this, self__, a);
      case 3:
        return G__12732__3.call(this, self__, a, b);
      case 4:
        return G__12732__4.call(this, self__, a, b, c);
      case 5:
        return G__12732__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12732__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12732__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12732__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12732__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12732__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12732__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12732__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12732__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12732__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12732__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12732__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12732__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12732__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12732__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12732__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12732__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12732__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12732.cljs$core$IFn$_invoke$arity$2 = G__12732__2;
  G__12732.cljs$core$IFn$_invoke$arity$3 = G__12732__3;
  G__12732.cljs$core$IFn$_invoke$arity$4 = G__12732__4;
  G__12732.cljs$core$IFn$_invoke$arity$5 = G__12732__5;
  G__12732.cljs$core$IFn$_invoke$arity$6 = G__12732__6;
  G__12732.cljs$core$IFn$_invoke$arity$7 = G__12732__7;
  G__12732.cljs$core$IFn$_invoke$arity$8 = G__12732__8;
  G__12732.cljs$core$IFn$_invoke$arity$9 = G__12732__9;
  G__12732.cljs$core$IFn$_invoke$arity$10 = G__12732__10;
  G__12732.cljs$core$IFn$_invoke$arity$11 = G__12732__11;
  G__12732.cljs$core$IFn$_invoke$arity$12 = G__12732__12;
  G__12732.cljs$core$IFn$_invoke$arity$13 = G__12732__13;
  G__12732.cljs$core$IFn$_invoke$arity$14 = G__12732__14;
  G__12732.cljs$core$IFn$_invoke$arity$15 = G__12732__15;
  G__12732.cljs$core$IFn$_invoke$arity$16 = G__12732__16;
  G__12732.cljs$core$IFn$_invoke$arity$17 = G__12732__17;
  G__12732.cljs$core$IFn$_invoke$arity$18 = G__12732__18;
  G__12732.cljs$core$IFn$_invoke$arity$19 = G__12732__19;
  G__12732.cljs$core$IFn$_invoke$arity$20 = G__12732__20;
  G__12732.cljs$core$IFn$_invoke$arity$21 = G__12732__21;
  G__12732.cljs$core$IFn$_invoke$arity$22 = G__12732__22;
  return G__12732;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args12731) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12731)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj14704 = {};
  return obj14704;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3636__auto__ = port;
    if (and__3636__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4285__auto__ = port == null ? null : port;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj14706 = {};
  return obj14706;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3636__auto__ = port;
    if (and__3636__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4285__auto__ = port == null ? null : port;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj14708 = {};
  return obj14708;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3636__auto__ = chan;
    if (and__3636__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4285__auto__ = chan == null ? null : chan;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj14710 = {};
  return obj14710;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3636__auto__ = h;
    if (and__3636__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4285__auto__ = h == null ? null : h;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3636__auto__ = h;
    if (and__3636__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4285__auto__ = h == null ? null : h;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj14712 = {};
  return obj14712;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3636__auto__ = b;
    if (and__3636__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4285__auto__ = b == null ? null : b;
    return function() {
      var or__3648__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__14713 = cnt + 1;
      cnt = G__14713;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4518__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4518__auto__) {
      var v_14714 = this$.pop();
      if (keep_QMARK_.call(null, v_14714)) {
        this$.unshift(v_14714);
      } else {
      }
      var G__14715 = x + 1;
      x = G__14715;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_14716 = 0;
  while (true) {
    var m_14717 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_14717 == null) {
    } else {
      m_14717.call(null);
      if (count_14716 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__14718 = count_14716 + 1;
        count_14716 = G__14718;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3636__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3636__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t14722 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t14722 = function(val, box, meta14723) {
      this.val = val;
      this.box = box;
      this.meta14723 = meta14723;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t14722.cljs$lang$type = true;
    cljs.core.async.impl.channels.t14722.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t14722";
    cljs.core.async.impl.channels.t14722.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.channels/t14722");
    };
    cljs.core.async.impl.channels.t14722.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t14722.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14724) {
      var self__ = this;
      var _14724__$1 = this;
      return self__.meta14723;
    };
    cljs.core.async.impl.channels.t14722.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14724, meta14723__$1) {
      var self__ = this;
      var _14724__$1 = this;
      return new cljs.core.async.impl.channels.t14722(self__.val, self__.box, meta14723__$1);
    };
    cljs.core.async.impl.channels.__GT_t14722 = function __GT_t14722(val__$1, box__$1, meta14723) {
      return new cljs.core.async.impl.channels.t14722(val__$1, box__$1, meta14723);
    };
  }
  return new cljs.core.async.impl.channels.t14722(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4228__auto__, writer__4229__auto__, opts__4230__auto__) {
  return cljs.core._write.call(null, writer__4229__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_14725 = self__.takes.pop();
      if (taker_14725 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_14725)) {
          var take_cb_14726 = cljs.core.async.impl.protocols.commit.call(null, taker_14725);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_14726, taker_14725, this$__$1) {
            return function() {
              return take_cb_14726.call(null, null);
            };
          }(take_cb_14726, taker_14725, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t14673 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t14673 = function(f, fn_handler, meta14674) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta14674 = meta14674;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t14673.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t14673.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t14673";
    cljs.core.async.impl.ioc_helpers.t14673.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.ioc-helpers/t14673");
    };
    cljs.core.async.impl.ioc_helpers.t14673.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t14673.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t14673.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t14673.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14675) {
      var self__ = this;
      var _14675__$1 = this;
      return self__.meta14674;
    };
    cljs.core.async.impl.ioc_helpers.t14673.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14675, meta14674__$1) {
      var self__ = this;
      var _14675__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t14673(self__.f, self__.fn_handler, meta14674__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t14673 = function __GT_t14673(f__$1, fn_handler__$1, meta14674) {
      return new cljs.core.async.impl.ioc_helpers.t14673(f__$1, fn_handler__$1, meta14674);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t14673(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e14677) {
    if (e14677 instanceof Object) {
      var ex = e14677;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e14677;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_14680_14682 = state;
    statearr_14680_14682[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_14680_14682[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14681_14683 = state;
    statearr_14681_14683[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14681_14683[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_14686_14688 = state;
    statearr_14686_14688[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_14686_14688[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14687_14689 = state;
    statearr_14687_14689[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14687_14689[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__14690) {
    var map__14695 = p__14690;
    var map__14695__$1 = cljs.core.seq_QMARK_.call(null, map__14695) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14695) : map__14695;
    var opts = map__14695__$1;
    var statearr_14696_14699 = state;
    statearr_14696_14699[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__14695, map__14695__$1, opts) {
      return function(val) {
        var statearr_14697_14700 = state;
        statearr_14697_14700[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__14695, map__14695__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_14698_14701 = state;
      statearr_14698_14701[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__14690 = null;
    if (arguments.length > 3) {
      p__14690 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__14690);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__14702) {
    var state = cljs.core.first(arglist__14702);
    arglist__14702 = cljs.core.next(arglist__14702);
    var cont_block = cljs.core.first(arglist__14702);
    arglist__14702 = cljs.core.next(arglist__14702);
    var ports = cljs.core.first(arglist__14702);
    var p__14690 = cljs.core.rest(arglist__14702);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__14690);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__14646 = level + 1;
        level = G__14646;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_14647 = 0;
    while (true) {
      if (i_14647 < arr.length) {
        arr[i_14647] = null;
        var G__14648 = i_14647 + 1;
        i_14647 = G__14648;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__14649 = x_SINGLEQUOTE_;
                x__$1 = G__14649;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__14650 = x__$1;
        var G__14651 = k;
        var G__14652 = level - 1;
        var G__14653 = update;
        x = G__14650;
        k = G__14651;
        level = G__14652;
        update = G__14653;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_14654 = self__.level + 1;
      while (true) {
        if (i_14654 <= new_level + 1) {
          update[i_14654] = self__.header;
          var G__14655 = i_14654 + 1;
          i_14654 = G__14655;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_14656 = 0;
    while (true) {
      if (i_14656 <= self__.level) {
        var links_14657 = update[i_14656].forward;
        if (links_14657[i_14656] === x__$1) {
          links_14657[i_14656] = x__$1.forward[i_14656];
          var G__14658 = i_14656 + 1;
          i_14656 = G__14658;
          continue;
        } else {
          var G__14659 = i_14656 + 1;
          i_14656 = G__14659;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__14660 = x_SINGLEQUOTE_;
              x__$1 = G__14660;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__14661 = nx;
        var G__14662 = level__$1 - 1;
        x = G__14661;
        level__$1 = G__14662;
        continue;
      } else {
        var G__14663 = x;
        var G__14664 = level__$1 - 1;
        x = G__14663;
        level__$1 = G__14664;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__14665 = x_SINGLEQUOTE_;
              x__$1 = G__14665;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__14666 = nx;
        var G__14667 = level__$1 - 1;
        x = G__14666;
        level__$1 = G__14667;
        continue;
      } else {
        var G__14668 = x;
        var G__14669 = level__$1 - 1;
        x = G__14668;
        level__$1 = G__14669;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3648__auto__ = cljs.core.truth_(function() {
    var and__3636__auto__ = me;
    if (cljs.core.truth_(and__3636__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3636__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3648__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3648__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t12736 !== "undefined") {
  } else {
    cljs.core.async.t12736 = function(f, fn_handler, meta12737) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12737 = meta12737;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12736.cljs$lang$type = true;
    cljs.core.async.t12736.cljs$lang$ctorStr = "cljs.core.async/t12736";
    cljs.core.async.t12736.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12736");
    };
    cljs.core.async.t12736.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12736.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t12736.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t12736.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12738) {
      var self__ = this;
      var _12738__$1 = this;
      return self__.meta12737;
    };
    cljs.core.async.t12736.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12738, meta12737__$1) {
      var self__ = this;
      var _12738__$1 = this;
      return new cljs.core.async.t12736(self__.f, self__.fn_handler, meta12737__$1);
    };
    cljs.core.async.__GT_t12736 = function __GT_t12736(f__$1, fn_handler__$1, meta12737) {
      return new cljs.core.async.t12736(f__$1, fn_handler__$1, meta12737);
    };
  }
  return new cljs.core.async.t12736(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_12739 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_12739);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_12739, ret) {
          return function() {
            return fn1.call(null, val_12739);
          };
        }(val_12739, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3636__auto__ = ret;
      if (cljs.core.truth_(and__3636__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3636__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4518__auto___12740 = n;
  var x_12741 = 0;
  while (true) {
    if (x_12741 < n__4518__auto___12740) {
      a[x_12741] = 0;
      var G__12742 = x_12741 + 1;
      x_12741 = G__12742;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__12743 = i + 1;
      i = G__12743;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t12747 !== "undefined") {
  } else {
    cljs.core.async.t12747 = function(flag, alt_flag, meta12748) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta12748 = meta12748;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12747.cljs$lang$type = true;
    cljs.core.async.t12747.cljs$lang$ctorStr = "cljs.core.async/t12747";
    cljs.core.async.t12747.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
        return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12747");
      };
    }(flag);
    cljs.core.async.t12747.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12747.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t12747.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t12747.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_12749) {
        var self__ = this;
        var _12749__$1 = this;
        return self__.meta12748;
      };
    }(flag);
    cljs.core.async.t12747.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_12749, meta12748__$1) {
        var self__ = this;
        var _12749__$1 = this;
        return new cljs.core.async.t12747(self__.flag, self__.alt_flag, meta12748__$1);
      };
    }(flag);
    cljs.core.async.__GT_t12747 = function(flag) {
      return function __GT_t12747(flag__$1, alt_flag__$1, meta12748) {
        return new cljs.core.async.t12747(flag__$1, alt_flag__$1, meta12748);
      };
    }(flag);
  }
  return new cljs.core.async.t12747(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t12753 !== "undefined") {
  } else {
    cljs.core.async.t12753 = function(cb, flag, alt_handler, meta12754) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta12754 = meta12754;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12753.cljs$lang$type = true;
    cljs.core.async.t12753.cljs$lang$ctorStr = "cljs.core.async/t12753";
    cljs.core.async.t12753.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12753");
    };
    cljs.core.async.t12753.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12753.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t12753.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t12753.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12755) {
      var self__ = this;
      var _12755__$1 = this;
      return self__.meta12754;
    };
    cljs.core.async.t12753.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12755, meta12754__$1) {
      var self__ = this;
      var _12755__$1 = this;
      return new cljs.core.async.t12753(self__.cb, self__.flag, self__.alt_handler, meta12754__$1);
    };
    cljs.core.async.__GT_t12753 = function __GT_t12753(cb__$1, flag__$1, alt_handler__$1, meta12754) {
      return new cljs.core.async.t12753(cb__$1, flag__$1, alt_handler__$1, meta12754);
    };
  }
  return new cljs.core.async.t12753(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__12756_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12756_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3648__auto__ = wport;
            if (cljs.core.truth_(or__3648__auto__)) {
              return or__3648__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__12757 = i + 1;
          i = G__12757;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3648__auto__ = ret;
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3636__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3636__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3636__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__12758) {
    var map__12760 = p__12758;
    var map__12760__$1 = cljs.core.seq_QMARK_.call(null, map__12760) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12760) : map__12760;
    var opts = map__12760__$1;
    throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__12758 = null;
    if (arguments.length > 1) {
      p__12758 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__12758);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__12761) {
    var ports = cljs.core.first(arglist__12761);
    var p__12758 = cljs.core.rest(arglist__12761);
    return alts_BANG___delegate(ports, p__12758);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t12769 !== "undefined") {
  } else {
    cljs.core.async.t12769 = function(ch, f, map_LT_, meta12770) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta12770 = meta12770;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12769.cljs$lang$type = true;
    cljs.core.async.t12769.cljs$lang$ctorStr = "cljs.core.async/t12769";
    cljs.core.async.t12769.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12769");
    };
    cljs.core.async.t12769.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12769.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t12769.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12769.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t12772 !== "undefined") {
        } else {
          cljs.core.async.t12772 = function(fn1, _, meta12770, ch, f, map_LT_, meta12773) {
            this.fn1 = fn1;
            this._ = _;
            this.meta12770 = meta12770;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta12773 = meta12773;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t12772.cljs$lang$type = true;
          cljs.core.async.t12772.cljs$lang$ctorStr = "cljs.core.async/t12772";
          cljs.core.async.t12772.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
              return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12772");
            };
          }(___$1);
          cljs.core.async.t12772.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t12772.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12772.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12772.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__12762_SHARP_) {
                  return f1.call(null, p1__12762_SHARP_ == null ? null : self__.f.call(null, p1__12762_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t12772.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_12774) {
              var self__ = this;
              var _12774__$1 = this;
              return self__.meta12773;
            };
          }(___$1);
          cljs.core.async.t12772.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_12774, meta12773__$1) {
              var self__ = this;
              var _12774__$1 = this;
              return new cljs.core.async.t12772(self__.fn1, self__._, self__.meta12770, self__.ch, self__.f, self__.map_LT_, meta12773__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t12772 = function(___$1) {
            return function __GT_t12772(fn1__$1, ___$2, meta12770__$1, ch__$2, f__$2, map_LT___$2, meta12773) {
              return new cljs.core.async.t12772(fn1__$1, ___$2, meta12770__$1, ch__$2, f__$2, map_LT___$2, meta12773);
            };
          }(___$1);
        }
        return new cljs.core.async.t12772(fn1, ___$1, self__.meta12770, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3636__auto__ = ret;
        if (cljs.core.truth_(and__3636__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3636__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t12769.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12769.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12769.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12771) {
      var self__ = this;
      var _12771__$1 = this;
      return self__.meta12770;
    };
    cljs.core.async.t12769.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12771, meta12770__$1) {
      var self__ = this;
      var _12771__$1 = this;
      return new cljs.core.async.t12769(self__.ch, self__.f, self__.map_LT_, meta12770__$1);
    };
    cljs.core.async.__GT_t12769 = function __GT_t12769(ch__$1, f__$1, map_LT___$1, meta12770) {
      return new cljs.core.async.t12769(ch__$1, f__$1, map_LT___$1, meta12770);
    };
  }
  return new cljs.core.async.t12769(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t12778 !== "undefined") {
  } else {
    cljs.core.async.t12778 = function(ch, f, map_GT_, meta12779) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta12779 = meta12779;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12778.cljs$lang$type = true;
    cljs.core.async.t12778.cljs$lang$ctorStr = "cljs.core.async/t12778";
    cljs.core.async.t12778.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12778");
    };
    cljs.core.async.t12778.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12778.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t12778.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12778.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12778.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12778.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12778.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12780) {
      var self__ = this;
      var _12780__$1 = this;
      return self__.meta12779;
    };
    cljs.core.async.t12778.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12780, meta12779__$1) {
      var self__ = this;
      var _12780__$1 = this;
      return new cljs.core.async.t12778(self__.ch, self__.f, self__.map_GT_, meta12779__$1);
    };
    cljs.core.async.__GT_t12778 = function __GT_t12778(ch__$1, f__$1, map_GT___$1, meta12779) {
      return new cljs.core.async.t12778(ch__$1, f__$1, map_GT___$1, meta12779);
    };
  }
  return new cljs.core.async.t12778(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t12784 !== "undefined") {
  } else {
    cljs.core.async.t12784 = function(ch, p, filter_GT_, meta12785) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta12785 = meta12785;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12784.cljs$lang$type = true;
    cljs.core.async.t12784.cljs$lang$ctorStr = "cljs.core.async/t12784";
    cljs.core.async.t12784.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
      return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t12784");
    };
    cljs.core.async.t12784.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12784.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t12784.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12784.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12784.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12784.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12784.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12786) {
      var self__ = this;
      var _12786__$1 = this;
      return self__.meta12785;
    };
    cljs.core.async.t12784.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12786, meta12785__$1) {
      var self__ = this;
      var _12786__$1 = this;
      return new cljs.core.async.t12784(self__.ch, self__.p, self__.filter_GT_, meta12785__$1);
    };
    cljs.core.async.__GT_t12784 = function __GT_t12784(ch__$1, p__$1, filter_GT___$1, meta12785) {
      return new cljs.core.async.t12784(ch__$1, p__$1, filter_GT___$1, meta12785);
    };
  }
  return new cljs.core.async.t12784(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5710__auto___12861 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___12861, out) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___12861, out) {
            return function(state_12844) {
              var state_val_12845 = state_12844[1];
              if (state_val_12845 === 7) {
                var inst_12840 = state_12844[2];
                var state_12844__$1 = state_12844;
                var statearr_12846_12862 = state_12844__$1;
                statearr_12846_12862[2] = inst_12840;
                statearr_12846_12862[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12845 === 1) {
                  var state_12844__$1 = state_12844;
                  var statearr_12847_12863 = state_12844__$1;
                  statearr_12847_12863[2] = null;
                  statearr_12847_12863[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12845 === 4) {
                    var inst_12826 = state_12844[5];
                    var inst_12826__$1 = state_12844[2];
                    var inst_12827 = inst_12826__$1 == null;
                    var state_12844__$1 = function() {
                      var statearr_12848 = state_12844;
                      statearr_12848[5] = inst_12826__$1;
                      return statearr_12848;
                    }();
                    if (cljs.core.truth_(inst_12827)) {
                      var statearr_12849_12864 = state_12844__$1;
                      statearr_12849_12864[1] = 5;
                    } else {
                      var statearr_12850_12865 = state_12844__$1;
                      statearr_12850_12865[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12845 === 6) {
                      var inst_12826 = state_12844[5];
                      var inst_12831 = p.call(null, inst_12826);
                      var state_12844__$1 = state_12844;
                      if (cljs.core.truth_(inst_12831)) {
                        var statearr_12851_12866 = state_12844__$1;
                        statearr_12851_12866[1] = 8;
                      } else {
                        var statearr_12852_12867 = state_12844__$1;
                        statearr_12852_12867[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12845 === 3) {
                        var inst_12842 = state_12844[2];
                        var state_12844__$1 = state_12844;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12844__$1, inst_12842);
                      } else {
                        if (state_val_12845 === 2) {
                          var state_12844__$1 = state_12844;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12844__$1, 4, ch);
                        } else {
                          if (state_val_12845 === 11) {
                            var inst_12834 = state_12844[2];
                            var state_12844__$1 = state_12844;
                            var statearr_12853_12868 = state_12844__$1;
                            statearr_12853_12868[2] = inst_12834;
                            statearr_12853_12868[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12845 === 9) {
                              var state_12844__$1 = state_12844;
                              var statearr_12854_12869 = state_12844__$1;
                              statearr_12854_12869[2] = null;
                              statearr_12854_12869[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12845 === 5) {
                                var inst_12829 = cljs.core.async.close_BANG_.call(null, out);
                                var state_12844__$1 = state_12844;
                                var statearr_12855_12870 = state_12844__$1;
                                statearr_12855_12870[2] = inst_12829;
                                statearr_12855_12870[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12845 === 10) {
                                  var inst_12837 = state_12844[2];
                                  var state_12844__$1 = function() {
                                    var statearr_12856 = state_12844;
                                    statearr_12856[6] = inst_12837;
                                    return statearr_12856;
                                  }();
                                  var statearr_12857_12871 = state_12844__$1;
                                  statearr_12857_12871[2] = null;
                                  statearr_12857_12871[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12845 === 8) {
                                    var inst_12826 = state_12844[5];
                                    var state_12844__$1 = state_12844;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12844__$1, 11, out, inst_12826);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___12861, out);
          return function(switch__5697__auto__, c__5710__auto___12861, out) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_12859 = [null, null, null, null, null, null, null];
                statearr_12859[0] = state_machine__5698__auto__;
                statearr_12859[1] = 1;
                return statearr_12859;
              };
              var state_machine__5698__auto____1 = function(state_12844) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_12844);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_12844) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_12844);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___12861, out);
        }();
        var state__5712__auto__ = function() {
          var statearr_12860 = f__5711__auto__.call(null);
          statearr_12860[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___12861;
          return statearr_12860;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___12861, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_13019) {
            var state_val_13020 = state_13019[1];
            if (state_val_13020 === 7) {
              var inst_13015 = state_13019[2];
              var state_13019__$1 = state_13019;
              var statearr_13021_13054 = state_13019__$1;
              statearr_13021_13054[2] = inst_13015;
              statearr_13021_13054[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13020 === 20) {
                var inst_12990 = state_13019[5];
                var inst_13001 = state_13019[2];
                var inst_13002 = cljs.core.next.call(null, inst_12990);
                var inst_12976 = inst_13002;
                var inst_12977 = null;
                var inst_12978 = 0;
                var inst_12979 = 0;
                var state_13019__$1 = function() {
                  var statearr_13022 = state_13019;
                  statearr_13022[6] = inst_12979;
                  statearr_13022[7] = inst_13001;
                  statearr_13022[8] = inst_12977;
                  statearr_13022[9] = inst_12978;
                  statearr_13022[10] = inst_12976;
                  return statearr_13022;
                }();
                var statearr_13023_13055 = state_13019__$1;
                statearr_13023_13055[2] = null;
                statearr_13023_13055[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13020 === 1) {
                  var state_13019__$1 = state_13019;
                  var statearr_13024_13056 = state_13019__$1;
                  statearr_13024_13056[2] = null;
                  statearr_13024_13056[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13020 === 4) {
                    var inst_12965 = state_13019[11];
                    var inst_12965__$1 = state_13019[2];
                    var inst_12966 = inst_12965__$1 == null;
                    var state_13019__$1 = function() {
                      var statearr_13028 = state_13019;
                      statearr_13028[11] = inst_12965__$1;
                      return statearr_13028;
                    }();
                    if (cljs.core.truth_(inst_12966)) {
                      var statearr_13029_13057 = state_13019__$1;
                      statearr_13029_13057[1] = 5;
                    } else {
                      var statearr_13030_13058 = state_13019__$1;
                      statearr_13030_13058[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13020 === 15) {
                      var state_13019__$1 = state_13019;
                      var statearr_13031_13059 = state_13019__$1;
                      statearr_13031_13059[2] = null;
                      statearr_13031_13059[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13020 === 13) {
                        var inst_12979 = state_13019[6];
                        var inst_12977 = state_13019[8];
                        var inst_12978 = state_13019[9];
                        var inst_12976 = state_13019[10];
                        var inst_12986 = state_13019[2];
                        var inst_12987 = inst_12979 + 1;
                        var tmp13025 = inst_12977;
                        var tmp13026 = inst_12978;
                        var tmp13027 = inst_12976;
                        var inst_12976__$1 = tmp13027;
                        var inst_12977__$1 = tmp13025;
                        var inst_12978__$1 = tmp13026;
                        var inst_12979__$1 = inst_12987;
                        var state_13019__$1 = function() {
                          var statearr_13032 = state_13019;
                          statearr_13032[6] = inst_12979__$1;
                          statearr_13032[12] = inst_12986;
                          statearr_13032[8] = inst_12977__$1;
                          statearr_13032[9] = inst_12978__$1;
                          statearr_13032[10] = inst_12976__$1;
                          return statearr_13032;
                        }();
                        var statearr_13033_13060 = state_13019__$1;
                        statearr_13033_13060[2] = null;
                        statearr_13033_13060[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13020 === 6) {
                          var inst_12965 = state_13019[11];
                          var inst_12970 = f.call(null, inst_12965);
                          var inst_12975 = cljs.core.seq.call(null, inst_12970);
                          var inst_12976 = inst_12975;
                          var inst_12977 = null;
                          var inst_12978 = 0;
                          var inst_12979 = 0;
                          var state_13019__$1 = function() {
                            var statearr_13034 = state_13019;
                            statearr_13034[6] = inst_12979;
                            statearr_13034[8] = inst_12977;
                            statearr_13034[9] = inst_12978;
                            statearr_13034[10] = inst_12976;
                            return statearr_13034;
                          }();
                          var statearr_13035_13061 = state_13019__$1;
                          statearr_13035_13061[2] = null;
                          statearr_13035_13061[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13020 === 17) {
                            var inst_12990 = state_13019[5];
                            var inst_12994 = cljs.core.chunk_first.call(null, inst_12990);
                            var inst_12995 = cljs.core.chunk_rest.call(null, inst_12990);
                            var inst_12996 = cljs.core.count.call(null, inst_12994);
                            var inst_12976 = inst_12995;
                            var inst_12977 = inst_12994;
                            var inst_12978 = inst_12996;
                            var inst_12979 = 0;
                            var state_13019__$1 = function() {
                              var statearr_13036 = state_13019;
                              statearr_13036[6] = inst_12979;
                              statearr_13036[8] = inst_12977;
                              statearr_13036[9] = inst_12978;
                              statearr_13036[10] = inst_12976;
                              return statearr_13036;
                            }();
                            var statearr_13037_13062 = state_13019__$1;
                            statearr_13037_13062[2] = null;
                            statearr_13037_13062[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13020 === 3) {
                              var inst_13017 = state_13019[2];
                              var state_13019__$1 = state_13019;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13019__$1, inst_13017);
                            } else {
                              if (state_val_13020 === 12) {
                                var inst_13010 = state_13019[2];
                                var state_13019__$1 = state_13019;
                                var statearr_13038_13063 = state_13019__$1;
                                statearr_13038_13063[2] = inst_13010;
                                statearr_13038_13063[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13020 === 2) {
                                  var state_13019__$1 = state_13019;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13019__$1, 4, in$);
                                } else {
                                  if (state_val_13020 === 19) {
                                    var inst_13005 = state_13019[2];
                                    var state_13019__$1 = state_13019;
                                    var statearr_13039_13064 = state_13019__$1;
                                    statearr_13039_13064[2] = inst_13005;
                                    statearr_13039_13064[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13020 === 11) {
                                      var inst_12990 = state_13019[5];
                                      var inst_12976 = state_13019[10];
                                      var inst_12990__$1 = cljs.core.seq.call(null, inst_12976);
                                      var state_13019__$1 = function() {
                                        var statearr_13040 = state_13019;
                                        statearr_13040[5] = inst_12990__$1;
                                        return statearr_13040;
                                      }();
                                      if (inst_12990__$1) {
                                        var statearr_13041_13065 = state_13019__$1;
                                        statearr_13041_13065[1] = 14;
                                      } else {
                                        var statearr_13042_13066 = state_13019__$1;
                                        statearr_13042_13066[1] = 15;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13020 === 9) {
                                        var inst_13012 = state_13019[2];
                                        var state_13019__$1 = function() {
                                          var statearr_13043 = state_13019;
                                          statearr_13043[13] = inst_13012;
                                          return statearr_13043;
                                        }();
                                        var statearr_13044_13067 = state_13019__$1;
                                        statearr_13044_13067[2] = null;
                                        statearr_13044_13067[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13020 === 5) {
                                          var inst_12968 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_13019__$1 = state_13019;
                                          var statearr_13045_13068 = state_13019__$1;
                                          statearr_13045_13068[2] = inst_12968;
                                          statearr_13045_13068[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13020 === 14) {
                                            var inst_12990 = state_13019[5];
                                            var inst_12992 = cljs.core.chunked_seq_QMARK_.call(null, inst_12990);
                                            var state_13019__$1 = state_13019;
                                            if (inst_12992) {
                                              var statearr_13046_13069 = state_13019__$1;
                                              statearr_13046_13069[1] = 17;
                                            } else {
                                              var statearr_13047_13070 = state_13019__$1;
                                              statearr_13047_13070[1] = 18;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13020 === 16) {
                                              var inst_13008 = state_13019[2];
                                              var state_13019__$1 = state_13019;
                                              var statearr_13048_13071 = state_13019__$1;
                                              statearr_13048_13071[2] = inst_13008;
                                              statearr_13048_13071[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13020 === 10) {
                                                var inst_12979 = state_13019[6];
                                                var inst_12977 = state_13019[8];
                                                var inst_12984 = cljs.core._nth.call(null, inst_12977, inst_12979);
                                                var state_13019__$1 = state_13019;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13019__$1, 13, out, inst_12984);
                                              } else {
                                                if (state_val_13020 === 18) {
                                                  var inst_12990 = state_13019[5];
                                                  var inst_12999 = cljs.core.first.call(null, inst_12990);
                                                  var state_13019__$1 = state_13019;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13019__$1, 20, out, inst_12999);
                                                } else {
                                                  if (state_val_13020 === 8) {
                                                    var inst_12979 = state_13019[6];
                                                    var inst_12978 = state_13019[9];
                                                    var inst_12981 = inst_12979 < inst_12978;
                                                    var inst_12982 = inst_12981;
                                                    var state_13019__$1 = state_13019;
                                                    if (cljs.core.truth_(inst_12982)) {
                                                      var statearr_13049_13072 = state_13019__$1;
                                                      statearr_13049_13072[1] = 10;
                                                    } else {
                                                      var statearr_13050_13073 = state_13019__$1;
                                                      statearr_13050_13073[1] = 11;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_13052 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13052[0] = state_machine__5698__auto__;
              statearr_13052[1] = 1;
              return statearr_13052;
            };
            var state_machine__5698__auto____1 = function(state_13019) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_13019);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_13019) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_13019);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_13053 = f__5711__auto__.call(null);
        statearr_13053[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_13053;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5710__auto___13146 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___13146) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___13146) {
            return function(state_13129) {
              var state_val_13130 = state_13129[1];
              if (state_val_13130 === 7) {
                var inst_13125 = state_13129[2];
                var state_13129__$1 = state_13129;
                var statearr_13131_13147 = state_13129__$1;
                statearr_13131_13147[2] = inst_13125;
                statearr_13131_13147[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13130 === 1) {
                  var state_13129__$1 = state_13129;
                  var statearr_13132_13148 = state_13129__$1;
                  statearr_13132_13148[2] = null;
                  statearr_13132_13148[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13130 === 4) {
                    var inst_13112 = state_13129[5];
                    var inst_13112__$1 = state_13129[2];
                    var inst_13113 = inst_13112__$1 == null;
                    var state_13129__$1 = function() {
                      var statearr_13133 = state_13129;
                      statearr_13133[5] = inst_13112__$1;
                      return statearr_13133;
                    }();
                    if (cljs.core.truth_(inst_13113)) {
                      var statearr_13134_13149 = state_13129__$1;
                      statearr_13134_13149[1] = 5;
                    } else {
                      var statearr_13135_13150 = state_13129__$1;
                      statearr_13135_13150[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13130 === 6) {
                      var inst_13112 = state_13129[5];
                      var state_13129__$1 = state_13129;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13129__$1, 11, to, inst_13112);
                    } else {
                      if (state_val_13130 === 3) {
                        var inst_13127 = state_13129[2];
                        var state_13129__$1 = state_13129;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13129__$1, inst_13127);
                      } else {
                        if (state_val_13130 === 2) {
                          var state_13129__$1 = state_13129;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13129__$1, 4, from);
                        } else {
                          if (state_val_13130 === 11) {
                            var inst_13122 = state_13129[2];
                            var state_13129__$1 = function() {
                              var statearr_13136 = state_13129;
                              statearr_13136[6] = inst_13122;
                              return statearr_13136;
                            }();
                            var statearr_13137_13151 = state_13129__$1;
                            statearr_13137_13151[2] = null;
                            statearr_13137_13151[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13130 === 9) {
                              var state_13129__$1 = state_13129;
                              var statearr_13138_13152 = state_13129__$1;
                              statearr_13138_13152[2] = null;
                              statearr_13138_13152[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13130 === 5) {
                                var state_13129__$1 = state_13129;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_13139_13153 = state_13129__$1;
                                  statearr_13139_13153[1] = 8;
                                } else {
                                  var statearr_13140_13154 = state_13129__$1;
                                  statearr_13140_13154[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13130 === 10) {
                                  var inst_13119 = state_13129[2];
                                  var state_13129__$1 = state_13129;
                                  var statearr_13141_13155 = state_13129__$1;
                                  statearr_13141_13155[2] = inst_13119;
                                  statearr_13141_13155[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13130 === 8) {
                                    var inst_13116 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_13129__$1 = state_13129;
                                    var statearr_13142_13156 = state_13129__$1;
                                    statearr_13142_13156[2] = inst_13116;
                                    statearr_13142_13156[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___13146);
          return function(switch__5697__auto__, c__5710__auto___13146) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_13144 = [null, null, null, null, null, null, null];
                statearr_13144[0] = state_machine__5698__auto__;
                statearr_13144[1] = 1;
                return statearr_13144;
              };
              var state_machine__5698__auto____1 = function(state_13129) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_13129);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_13129) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_13129);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___13146);
        }();
        var state__5712__auto__ = function() {
          var statearr_13145 = f__5711__auto__.call(null);
          statearr_13145[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___13146;
          return statearr_13145;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___13146));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5710__auto___13235 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___13235, tc, fc) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___13235, tc, fc) {
            return function(state_13217) {
              var state_val_13218 = state_13217[1];
              if (state_val_13218 === 7) {
                var inst_13213 = state_13217[2];
                var state_13217__$1 = state_13217;
                var statearr_13219_13236 = state_13217__$1;
                statearr_13219_13236[2] = inst_13213;
                statearr_13219_13236[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13218 === 1) {
                  var state_13217__$1 = state_13217;
                  var statearr_13220_13237 = state_13217__$1;
                  statearr_13220_13237[2] = null;
                  statearr_13220_13237[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13218 === 4) {
                    var inst_13198 = state_13217[5];
                    var inst_13198__$1 = state_13217[2];
                    var inst_13199 = inst_13198__$1 == null;
                    var state_13217__$1 = function() {
                      var statearr_13221 = state_13217;
                      statearr_13221[5] = inst_13198__$1;
                      return statearr_13221;
                    }();
                    if (cljs.core.truth_(inst_13199)) {
                      var statearr_13222_13238 = state_13217__$1;
                      statearr_13222_13238[1] = 5;
                    } else {
                      var statearr_13223_13239 = state_13217__$1;
                      statearr_13223_13239[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13218 === 6) {
                      var inst_13198 = state_13217[5];
                      var inst_13204 = p.call(null, inst_13198);
                      var state_13217__$1 = state_13217;
                      if (cljs.core.truth_(inst_13204)) {
                        var statearr_13224_13240 = state_13217__$1;
                        statearr_13224_13240[1] = 9;
                      } else {
                        var statearr_13225_13241 = state_13217__$1;
                        statearr_13225_13241[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13218 === 3) {
                        var inst_13215 = state_13217[2];
                        var state_13217__$1 = state_13217;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13217__$1, inst_13215);
                      } else {
                        if (state_val_13218 === 2) {
                          var state_13217__$1 = state_13217;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13217__$1, 4, ch);
                        } else {
                          if (state_val_13218 === 11) {
                            var inst_13198 = state_13217[5];
                            var inst_13208 = state_13217[2];
                            var state_13217__$1 = state_13217;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13217__$1, 8, inst_13208, inst_13198);
                          } else {
                            if (state_val_13218 === 9) {
                              var state_13217__$1 = state_13217;
                              var statearr_13226_13242 = state_13217__$1;
                              statearr_13226_13242[2] = tc;
                              statearr_13226_13242[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13218 === 5) {
                                var inst_13201 = cljs.core.async.close_BANG_.call(null, tc);
                                var inst_13202 = cljs.core.async.close_BANG_.call(null, fc);
                                var state_13217__$1 = function() {
                                  var statearr_13227 = state_13217;
                                  statearr_13227[6] = inst_13201;
                                  return statearr_13227;
                                }();
                                var statearr_13228_13243 = state_13217__$1;
                                statearr_13228_13243[2] = inst_13202;
                                statearr_13228_13243[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13218 === 10) {
                                  var state_13217__$1 = state_13217;
                                  var statearr_13229_13244 = state_13217__$1;
                                  statearr_13229_13244[2] = fc;
                                  statearr_13229_13244[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13218 === 8) {
                                    var inst_13210 = state_13217[2];
                                    var state_13217__$1 = function() {
                                      var statearr_13230 = state_13217;
                                      statearr_13230[7] = inst_13210;
                                      return statearr_13230;
                                    }();
                                    var statearr_13231_13245 = state_13217__$1;
                                    statearr_13231_13245[2] = null;
                                    statearr_13231_13245[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___13235, tc, fc);
          return function(switch__5697__auto__, c__5710__auto___13235, tc, fc) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_13233 = [null, null, null, null, null, null, null, null];
                statearr_13233[0] = state_machine__5698__auto__;
                statearr_13233[1] = 1;
                return statearr_13233;
              };
              var state_machine__5698__auto____1 = function(state_13217) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_13217);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_13217) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_13217);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___13235, tc, fc);
        }();
        var state__5712__auto__ = function() {
          var statearr_13234 = f__5711__auto__.call(null);
          statearr_13234[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___13235;
          return statearr_13234;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___13235, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_13288) {
            var state_val_13289 = state_13288[1];
            if (state_val_13289 === 7) {
              var inst_13284 = state_13288[2];
              var state_13288__$1 = state_13288;
              var statearr_13290_13302 = state_13288__$1;
              statearr_13290_13302[2] = inst_13284;
              statearr_13290_13302[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13289 === 6) {
                var inst_13274 = state_13288[5];
                var inst_13277 = state_13288[6];
                var inst_13281 = f.call(null, inst_13274, inst_13277);
                var inst_13274__$1 = inst_13281;
                var state_13288__$1 = function() {
                  var statearr_13291 = state_13288;
                  statearr_13291[5] = inst_13274__$1;
                  return statearr_13291;
                }();
                var statearr_13292_13303 = state_13288__$1;
                statearr_13292_13303[2] = null;
                statearr_13292_13303[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13289 === 5) {
                  var inst_13274 = state_13288[5];
                  var state_13288__$1 = state_13288;
                  var statearr_13293_13304 = state_13288__$1;
                  statearr_13293_13304[2] = inst_13274;
                  statearr_13293_13304[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13289 === 4) {
                    var inst_13277 = state_13288[6];
                    var inst_13277__$1 = state_13288[2];
                    var inst_13278 = inst_13277__$1 == null;
                    var state_13288__$1 = function() {
                      var statearr_13294 = state_13288;
                      statearr_13294[6] = inst_13277__$1;
                      return statearr_13294;
                    }();
                    if (cljs.core.truth_(inst_13278)) {
                      var statearr_13295_13305 = state_13288__$1;
                      statearr_13295_13305[1] = 5;
                    } else {
                      var statearr_13296_13306 = state_13288__$1;
                      statearr_13296_13306[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13289 === 3) {
                      var inst_13286 = state_13288[2];
                      var state_13288__$1 = state_13288;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13288__$1, inst_13286);
                    } else {
                      if (state_val_13289 === 2) {
                        var state_13288__$1 = state_13288;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13288__$1, 4, ch);
                      } else {
                        if (state_val_13289 === 1) {
                          var inst_13274 = init;
                          var state_13288__$1 = function() {
                            var statearr_13297 = state_13288;
                            statearr_13297[5] = inst_13274;
                            return statearr_13297;
                          }();
                          var statearr_13298_13307 = state_13288__$1;
                          statearr_13298_13307[2] = null;
                          statearr_13298_13307[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_13300 = [null, null, null, null, null, null, null];
              statearr_13300[0] = state_machine__5698__auto__;
              statearr_13300[1] = 1;
              return statearr_13300;
            };
            var state_machine__5698__auto____1 = function(state_13288) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_13288);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_13288) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_13288);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_13301 = f__5711__auto__.call(null);
        statearr_13301[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_13301;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto__) {
            return function(state_13365) {
              var state_val_13366 = state_13365[1];
              if (state_val_13366 === 7) {
                var inst_13346 = state_13365[5];
                var inst_13351 = state_13365[2];
                var inst_13352 = cljs.core.next.call(null, inst_13346);
                var inst_13346__$1 = inst_13352;
                var state_13365__$1 = function() {
                  var statearr_13367 = state_13365;
                  statearr_13367[6] = inst_13351;
                  statearr_13367[5] = inst_13346__$1;
                  return statearr_13367;
                }();
                var statearr_13368_13382 = state_13365__$1;
                statearr_13368_13382[2] = null;
                statearr_13368_13382[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13366 === 1) {
                  var inst_13345 = cljs.core.seq.call(null, coll);
                  var inst_13346 = inst_13345;
                  var state_13365__$1 = function() {
                    var statearr_13369 = state_13365;
                    statearr_13369[5] = inst_13346;
                    return statearr_13369;
                  }();
                  var statearr_13370_13383 = state_13365__$1;
                  statearr_13370_13383[2] = null;
                  statearr_13370_13383[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13366 === 4) {
                    var inst_13346 = state_13365[5];
                    var inst_13349 = cljs.core.first.call(null, inst_13346);
                    var state_13365__$1 = state_13365;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13365__$1, 7, ch, inst_13349);
                  } else {
                    if (state_val_13366 === 6) {
                      var inst_13361 = state_13365[2];
                      var state_13365__$1 = state_13365;
                      var statearr_13371_13384 = state_13365__$1;
                      statearr_13371_13384[2] = inst_13361;
                      statearr_13371_13384[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13366 === 3) {
                        var inst_13363 = state_13365[2];
                        var state_13365__$1 = state_13365;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13365__$1, inst_13363);
                      } else {
                        if (state_val_13366 === 2) {
                          var inst_13346 = state_13365[5];
                          var state_13365__$1 = state_13365;
                          if (cljs.core.truth_(inst_13346)) {
                            var statearr_13372_13385 = state_13365__$1;
                            statearr_13372_13385[1] = 4;
                          } else {
                            var statearr_13373_13386 = state_13365__$1;
                            statearr_13373_13386[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13366 === 9) {
                            var state_13365__$1 = state_13365;
                            var statearr_13374_13387 = state_13365__$1;
                            statearr_13374_13387[2] = null;
                            statearr_13374_13387[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13366 === 5) {
                              var state_13365__$1 = state_13365;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_13375_13388 = state_13365__$1;
                                statearr_13375_13388[1] = 8;
                              } else {
                                var statearr_13376_13389 = state_13365__$1;
                                statearr_13376_13389[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13366 === 10) {
                                var inst_13359 = state_13365[2];
                                var state_13365__$1 = state_13365;
                                var statearr_13377_13390 = state_13365__$1;
                                statearr_13377_13390[2] = inst_13359;
                                statearr_13377_13390[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13366 === 8) {
                                  var inst_13356 = cljs.core.async.close_BANG_.call(null, ch);
                                  var state_13365__$1 = state_13365;
                                  var statearr_13378_13391 = state_13365__$1;
                                  statearr_13378_13391[2] = inst_13356;
                                  statearr_13378_13391[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto__);
          return function(switch__5697__auto__, c__5710__auto__) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_13380 = [null, null, null, null, null, null, null];
                statearr_13380[0] = state_machine__5698__auto__;
                statearr_13380[1] = 1;
                return statearr_13380;
              };
              var state_machine__5698__auto____1 = function(state_13365) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_13365);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_13365) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_13365);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto__);
        }();
        var state__5712__auto__ = function() {
          var statearr_13381 = f__5711__auto__.call(null);
          statearr_13381[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
          return statearr_13381;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto__));
    return c__5710__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj13393 = {};
  return obj13393;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3636__auto__ = _;
    if (and__3636__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4285__auto__ = _ == null ? null : _;
    return function() {
      var or__3648__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj13395 = {};
  return obj13395;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t13608 !== "undefined") {
    } else {
      cljs.core.async.t13608 = function(cs, ch, mult, meta13609) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta13609 = meta13609;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13608.cljs$lang$type = true;
      cljs.core.async.t13608.cljs$lang$ctorStr = "cljs.core.async/t13608";
      cljs.core.async.t13608.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
          return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t13608");
        };
      }(cs);
      cljs.core.async.t13608.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t13608.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t13608.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t13608.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t13608.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13608.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t13608.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_13610) {
          var self__ = this;
          var _13610__$1 = this;
          return self__.meta13609;
        };
      }(cs);
      cljs.core.async.t13608.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_13610, meta13609__$1) {
          var self__ = this;
          var _13610__$1 = this;
          return new cljs.core.async.t13608(self__.cs, self__.ch, self__.mult, meta13609__$1);
        };
      }(cs);
      cljs.core.async.__GT_t13608 = function(cs) {
        return function __GT_t13608(cs__$1, ch__$1, mult__$1, meta13609) {
          return new cljs.core.async.t13608(cs__$1, ch__$1, mult__$1, meta13609);
        };
      }(cs);
    }
    return new cljs.core.async.t13608(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5710__auto___13820 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___13820, cs, m, dchan, dctr, done) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___13820, cs, m, dchan, dctr, done) {
          return function(state_13738) {
            var state_val_13739 = state_13738[1];
            if (state_val_13739 === 7) {
              var inst_13734 = state_13738[2];
              var state_13738__$1 = state_13738;
              var statearr_13740_13821 = state_13738__$1;
              statearr_13740_13821[2] = inst_13734;
              statearr_13740_13821[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13739 === 20) {
                var inst_13642 = state_13738[5];
                var inst_13652 = cljs.core.first.call(null, inst_13642);
                var inst_13653 = cljs.core.nth.call(null, inst_13652, 0, null);
                var inst_13654 = cljs.core.nth.call(null, inst_13652, 1, null);
                var state_13738__$1 = function() {
                  var statearr_13741 = state_13738;
                  statearr_13741[6] = inst_13653;
                  return statearr_13741;
                }();
                if (cljs.core.truth_(inst_13654)) {
                  var statearr_13742_13822 = state_13738__$1;
                  statearr_13742_13822[1] = 22;
                } else {
                  var statearr_13743_13823 = state_13738__$1;
                  statearr_13743_13823[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13739 === 27) {
                  var inst_13684 = state_13738[7];
                  var inst_13682 = state_13738[8];
                  var inst_13689 = cljs.core._nth.call(null, inst_13682, inst_13684);
                  var state_13738__$1 = function() {
                    var statearr_13744 = state_13738;
                    statearr_13744[9] = inst_13689;
                    return statearr_13744;
                  }();
                  var statearr_13745_13824 = state_13738__$1;
                  statearr_13745_13824[2] = null;
                  statearr_13745_13824[1] = 32;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13739 === 1) {
                    var state_13738__$1 = state_13738;
                    var statearr_13746_13825 = state_13738__$1;
                    statearr_13746_13825[2] = null;
                    statearr_13746_13825[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13739 === 24) {
                      var inst_13642 = state_13738[5];
                      var inst_13659 = state_13738[2];
                      var inst_13660 = cljs.core.next.call(null, inst_13642);
                      var inst_13622 = inst_13660;
                      var inst_13623 = null;
                      var inst_13624 = 0;
                      var inst_13625 = 0;
                      var state_13738__$1 = function() {
                        var statearr_13747 = state_13738;
                        statearr_13747[10] = inst_13623;
                        statearr_13747[11] = inst_13625;
                        statearr_13747[12] = inst_13659;
                        statearr_13747[13] = inst_13622;
                        statearr_13747[14] = inst_13624;
                        return statearr_13747;
                      }();
                      var statearr_13748_13826 = state_13738__$1;
                      statearr_13748_13826[2] = null;
                      statearr_13748_13826[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13739 === 39) {
                        var inst_13701 = state_13738[15];
                        var inst_13718 = state_13738[2];
                        var inst_13719 = cljs.core.next.call(null, inst_13701);
                        var inst_13681 = inst_13719;
                        var inst_13682 = null;
                        var inst_13683 = 0;
                        var inst_13684 = 0;
                        var state_13738__$1 = function() {
                          var statearr_13752 = state_13738;
                          statearr_13752[7] = inst_13684;
                          statearr_13752[16] = inst_13718;
                          statearr_13752[17] = inst_13681;
                          statearr_13752[18] = inst_13683;
                          statearr_13752[8] = inst_13682;
                          return statearr_13752;
                        }();
                        var statearr_13753_13827 = state_13738__$1;
                        statearr_13753_13827[2] = null;
                        statearr_13753_13827[1] = 25;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13739 === 4) {
                          var inst_13613 = state_13738[19];
                          var inst_13613__$1 = state_13738[2];
                          var inst_13614 = inst_13613__$1 == null;
                          var state_13738__$1 = function() {
                            var statearr_13754 = state_13738;
                            statearr_13754[19] = inst_13613__$1;
                            return statearr_13754;
                          }();
                          if (cljs.core.truth_(inst_13614)) {
                            var statearr_13755_13828 = state_13738__$1;
                            statearr_13755_13828[1] = 5;
                          } else {
                            var statearr_13756_13829 = state_13738__$1;
                            statearr_13756_13829[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13739 === 15) {
                            var inst_13623 = state_13738[10];
                            var inst_13625 = state_13738[11];
                            var inst_13622 = state_13738[13];
                            var inst_13624 = state_13738[14];
                            var inst_13638 = state_13738[2];
                            var inst_13639 = inst_13625 + 1;
                            var tmp13749 = inst_13623;
                            var tmp13750 = inst_13622;
                            var tmp13751 = inst_13624;
                            var inst_13622__$1 = tmp13750;
                            var inst_13623__$1 = tmp13749;
                            var inst_13624__$1 = tmp13751;
                            var inst_13625__$1 = inst_13639;
                            var state_13738__$1 = function() {
                              var statearr_13757 = state_13738;
                              statearr_13757[10] = inst_13623__$1;
                              statearr_13757[20] = inst_13638;
                              statearr_13757[11] = inst_13625__$1;
                              statearr_13757[13] = inst_13622__$1;
                              statearr_13757[14] = inst_13624__$1;
                              return statearr_13757;
                            }();
                            var statearr_13758_13830 = state_13738__$1;
                            statearr_13758_13830[2] = null;
                            statearr_13758_13830[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13739 === 21) {
                              var inst_13663 = state_13738[2];
                              var state_13738__$1 = state_13738;
                              var statearr_13759_13831 = state_13738__$1;
                              statearr_13759_13831[2] = inst_13663;
                              statearr_13759_13831[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13739 === 31) {
                                var inst_13689 = state_13738[9];
                                var inst_13690 = state_13738[2];
                                var inst_13691 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_13692 = cljs.core.async.untap_STAR_.call(null, m, inst_13689);
                                var state_13738__$1 = function() {
                                  var statearr_13760 = state_13738;
                                  statearr_13760[21] = inst_13690;
                                  statearr_13760[22] = inst_13691;
                                  return statearr_13760;
                                }();
                                var statearr_13761_13832 = state_13738__$1;
                                statearr_13761_13832[2] = inst_13692;
                                statearr_13761_13832[1] = 30;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13739 === 32) {
                                  try {
                                    var inst_13689 = state_13738[9];
                                    var inst_13613 = state_13738[19];
                                    var inst_13695 = cljs.core.async.put_BANG_.call(null, inst_13689, inst_13613, done);
                                    var state_13738__$1 = state_13738;
                                    var statearr_13764_13833 = state_13738__$1;
                                    statearr_13764_13833[2] = inst_13695;
                                    statearr_13764_13833[1] = 30;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e13762) {
                                    if (e13762 instanceof Object) {
                                      var ex__5691__auto__ = e13762;
                                      var statearr_13763_13834 = state_13738;
                                      statearr_13763_13834[1] = 31;
                                      statearr_13763_13834[2] = ex__5691__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e13762;
                                    }
                                  }
                                } else {
                                  if (state_val_13739 === 40) {
                                    var inst_13710 = state_13738[23];
                                    var inst_13711 = state_13738[2];
                                    var inst_13712 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_13713 = cljs.core.async.untap_STAR_.call(null, m, inst_13710);
                                    var state_13738__$1 = function() {
                                      var statearr_13765 = state_13738;
                                      statearr_13765[24] = inst_13711;
                                      statearr_13765[25] = inst_13712;
                                      return statearr_13765;
                                    }();
                                    var statearr_13766_13835 = state_13738__$1;
                                    statearr_13766_13835[2] = inst_13713;
                                    statearr_13766_13835[1] = 39;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13739 === 33) {
                                      var inst_13701 = state_13738[15];
                                      var inst_13703 = cljs.core.chunked_seq_QMARK_.call(null, inst_13701);
                                      var state_13738__$1 = state_13738;
                                      if (inst_13703) {
                                        var statearr_13767_13836 = state_13738__$1;
                                        statearr_13767_13836[1] = 36;
                                      } else {
                                        var statearr_13768_13837 = state_13738__$1;
                                        statearr_13768_13837[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13739 === 13) {
                                        var inst_13632 = state_13738[26];
                                        var inst_13635 = cljs.core.async.close_BANG_.call(null, inst_13632);
                                        var state_13738__$1 = state_13738;
                                        var statearr_13769_13838 = state_13738__$1;
                                        statearr_13769_13838[2] = inst_13635;
                                        statearr_13769_13838[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13739 === 22) {
                                          var inst_13653 = state_13738[6];
                                          var inst_13656 = cljs.core.async.close_BANG_.call(null, inst_13653);
                                          var state_13738__$1 = state_13738;
                                          var statearr_13770_13839 = state_13738__$1;
                                          statearr_13770_13839[2] = inst_13656;
                                          statearr_13770_13839[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13739 === 36) {
                                            var inst_13701 = state_13738[15];
                                            var inst_13705 = cljs.core.chunk_first.call(null, inst_13701);
                                            var inst_13706 = cljs.core.chunk_rest.call(null, inst_13701);
                                            var inst_13707 = cljs.core.count.call(null, inst_13705);
                                            var inst_13681 = inst_13706;
                                            var inst_13682 = inst_13705;
                                            var inst_13683 = inst_13707;
                                            var inst_13684 = 0;
                                            var state_13738__$1 = function() {
                                              var statearr_13771 = state_13738;
                                              statearr_13771[7] = inst_13684;
                                              statearr_13771[17] = inst_13681;
                                              statearr_13771[18] = inst_13683;
                                              statearr_13771[8] = inst_13682;
                                              return statearr_13771;
                                            }();
                                            var statearr_13772_13840 = state_13738__$1;
                                            statearr_13772_13840[2] = null;
                                            statearr_13772_13840[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13739 === 41) {
                                              try {
                                                var inst_13710 = state_13738[23];
                                                var inst_13613 = state_13738[19];
                                                var inst_13716 = cljs.core.async.put_BANG_.call(null, inst_13710, inst_13613, done);
                                                var state_13738__$1 = state_13738;
                                                var statearr_13775_13841 = state_13738__$1;
                                                statearr_13775_13841[2] = inst_13716;
                                                statearr_13775_13841[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } catch (e13773) {
                                                if (e13773 instanceof Object) {
                                                  var ex__5691__auto__ = e13773;
                                                  var statearr_13774_13842 = state_13738;
                                                  statearr_13774_13842[1] = 40;
                                                  statearr_13774_13842[2] = ex__5691__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  throw e13773;
                                                }
                                              }
                                            } else {
                                              if (state_val_13739 === 29) {
                                                var inst_13727 = state_13738[2];
                                                var state_13738__$1 = state_13738;
                                                var statearr_13776_13843 = state_13738__$1;
                                                statearr_13776_13843[2] = inst_13727;
                                                statearr_13776_13843[1] = 26;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13739 === 6) {
                                                  var inst_13672 = cljs.core.deref.call(null, cs);
                                                  var inst_13673 = cljs.core.keys.call(null, inst_13672);
                                                  var inst_13674 = cljs.core.count.call(null, inst_13673);
                                                  var inst_13675 = cljs.core.reset_BANG_.call(null, dctr, inst_13674);
                                                  var inst_13680 = cljs.core.seq.call(null, inst_13673);
                                                  var inst_13681 = inst_13680;
                                                  var inst_13682 = null;
                                                  var inst_13683 = 0;
                                                  var inst_13684 = 0;
                                                  var state_13738__$1 = function() {
                                                    var statearr_13777 = state_13738;
                                                    statearr_13777[7] = inst_13684;
                                                    statearr_13777[17] = inst_13681;
                                                    statearr_13777[18] = inst_13683;
                                                    statearr_13777[8] = inst_13682;
                                                    statearr_13777[27] = inst_13675;
                                                    return statearr_13777;
                                                  }();
                                                  var statearr_13778_13844 = state_13738__$1;
                                                  statearr_13778_13844[2] = null;
                                                  statearr_13778_13844[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13739 === 28) {
                                                    var inst_13701 = state_13738[15];
                                                    var inst_13681 = state_13738[17];
                                                    var inst_13701__$1 = cljs.core.seq.call(null, inst_13681);
                                                    var state_13738__$1 = function() {
                                                      var statearr_13779 = state_13738;
                                                      statearr_13779[15] = inst_13701__$1;
                                                      return statearr_13779;
                                                    }();
                                                    if (inst_13701__$1) {
                                                      var statearr_13780_13845 = state_13738__$1;
                                                      statearr_13780_13845[1] = 33;
                                                    } else {
                                                      var statearr_13781_13846 = state_13738__$1;
                                                      statearr_13781_13846[1] = 34;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13739 === 25) {
                                                      var inst_13684 = state_13738[7];
                                                      var inst_13683 = state_13738[18];
                                                      var inst_13686 = inst_13684 < inst_13683;
                                                      var inst_13687 = inst_13686;
                                                      var state_13738__$1 = state_13738;
                                                      if (cljs.core.truth_(inst_13687)) {
                                                        var statearr_13782_13847 = state_13738__$1;
                                                        statearr_13782_13847[1] = 27;
                                                      } else {
                                                        var statearr_13783_13848 = state_13738__$1;
                                                        statearr_13783_13848[1] = 28;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13739 === 34) {
                                                        var state_13738__$1 = state_13738;
                                                        var statearr_13784_13849 = state_13738__$1;
                                                        statearr_13784_13849[2] = null;
                                                        statearr_13784_13849[1] = 35;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13739 === 17) {
                                                          var state_13738__$1 = state_13738;
                                                          var statearr_13785_13850 = state_13738__$1;
                                                          statearr_13785_13850[2] = null;
                                                          statearr_13785_13850[1] = 18;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13739 === 3) {
                                                            var inst_13736 = state_13738[2];
                                                            var state_13738__$1 = state_13738;
                                                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13738__$1, inst_13736);
                                                          } else {
                                                            if (state_val_13739 === 12) {
                                                              var inst_13668 = state_13738[2];
                                                              var state_13738__$1 = state_13738;
                                                              var statearr_13786_13851 = state_13738__$1;
                                                              statearr_13786_13851[2] = inst_13668;
                                                              statearr_13786_13851[1] = 9;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13739 === 2) {
                                                                var state_13738__$1 = state_13738;
                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13738__$1, 4, ch);
                                                              } else {
                                                                if (state_val_13739 === 23) {
                                                                  var state_13738__$1 = state_13738;
                                                                  var statearr_13787_13852 = state_13738__$1;
                                                                  statearr_13787_13852[2] = null;
                                                                  statearr_13787_13852[1] = 24;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_13739 === 35) {
                                                                    var inst_13725 = state_13738[2];
                                                                    var state_13738__$1 = state_13738;
                                                                    var statearr_13788_13853 = state_13738__$1;
                                                                    statearr_13788_13853[2] = inst_13725;
                                                                    statearr_13788_13853[1] = 29;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_13739 === 19) {
                                                                      var inst_13642 = state_13738[5];
                                                                      var inst_13646 = cljs.core.chunk_first.call(null, inst_13642);
                                                                      var inst_13647 = cljs.core.chunk_rest.call(null, inst_13642);
                                                                      var inst_13648 = cljs.core.count.call(null, inst_13646);
                                                                      var inst_13622 = inst_13647;
                                                                      var inst_13623 = inst_13646;
                                                                      var inst_13624 = inst_13648;
                                                                      var inst_13625 = 0;
                                                                      var state_13738__$1 = function() {
                                                                        var statearr_13789 = state_13738;
                                                                        statearr_13789[10] = inst_13623;
                                                                        statearr_13789[11] = inst_13625;
                                                                        statearr_13789[13] = inst_13622;
                                                                        statearr_13789[14] = inst_13624;
                                                                        return statearr_13789;
                                                                      }();
                                                                      var statearr_13790_13854 = state_13738__$1;
                                                                      statearr_13790_13854[2] = null;
                                                                      statearr_13790_13854[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_13739 === 11) {
                                                                        var inst_13642 = state_13738[5];
                                                                        var inst_13622 = state_13738[13];
                                                                        var inst_13642__$1 = cljs.core.seq.call(null, inst_13622);
                                                                        var state_13738__$1 = function() {
                                                                          var statearr_13791 = state_13738;
                                                                          statearr_13791[5] = inst_13642__$1;
                                                                          return statearr_13791;
                                                                        }();
                                                                        if (inst_13642__$1) {
                                                                          var statearr_13792_13855 = state_13738__$1;
                                                                          statearr_13792_13855[1] = 16;
                                                                        } else {
                                                                          var statearr_13793_13856 = state_13738__$1;
                                                                          statearr_13793_13856[1] = 17;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_13739 === 9) {
                                                                          var inst_13670 = state_13738[2];
                                                                          var state_13738__$1 = state_13738;
                                                                          var statearr_13794_13857 = state_13738__$1;
                                                                          statearr_13794_13857[2] = inst_13670;
                                                                          statearr_13794_13857[1] = 7;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_13739 === 5) {
                                                                            var inst_13620 = cljs.core.deref.call(null, cs);
                                                                            var inst_13621 = cljs.core.seq.call(null, inst_13620);
                                                                            var inst_13622 = inst_13621;
                                                                            var inst_13623 = null;
                                                                            var inst_13624 = 0;
                                                                            var inst_13625 = 0;
                                                                            var state_13738__$1 = function() {
                                                                              var statearr_13795 = state_13738;
                                                                              statearr_13795[10] = inst_13623;
                                                                              statearr_13795[11] = inst_13625;
                                                                              statearr_13795[13] = inst_13622;
                                                                              statearr_13795[14] = inst_13624;
                                                                              return statearr_13795;
                                                                            }();
                                                                            var statearr_13796_13858 = state_13738__$1;
                                                                            statearr_13796_13858[2] = null;
                                                                            statearr_13796_13858[1] = 8;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_13739 === 14) {
                                                                              var state_13738__$1 = state_13738;
                                                                              var statearr_13797_13859 = state_13738__$1;
                                                                              statearr_13797_13859[2] = null;
                                                                              statearr_13797_13859[1] = 15;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_13739 === 26) {
                                                                                var inst_13729 = state_13738[2];
                                                                                var state_13738__$1 = function() {
                                                                                  var statearr_13798 = state_13738;
                                                                                  statearr_13798[28] = inst_13729;
                                                                                  return statearr_13798;
                                                                                }();
                                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13738__$1, 42, dchan);
                                                                              } else {
                                                                                if (state_val_13739 === 16) {
                                                                                  var inst_13642 = state_13738[5];
                                                                                  var inst_13644 = cljs.core.chunked_seq_QMARK_.call(null, inst_13642);
                                                                                  var state_13738__$1 = state_13738;
                                                                                  if (inst_13644) {
                                                                                    var statearr_13802_13860 = state_13738__$1;
                                                                                    statearr_13802_13860[1] = 19;
                                                                                  } else {
                                                                                    var statearr_13803_13861 = state_13738__$1;
                                                                                    statearr_13803_13861[1] = 20;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_13739 === 38) {
                                                                                    var inst_13722 = state_13738[2];
                                                                                    var state_13738__$1 = state_13738;
                                                                                    var statearr_13804_13862 = state_13738__$1;
                                                                                    statearr_13804_13862[2] = inst_13722;
                                                                                    statearr_13804_13862[1] = 35;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_13739 === 30) {
                                                                                      var inst_13684 = state_13738[7];
                                                                                      var inst_13681 = state_13738[17];
                                                                                      var inst_13683 = state_13738[18];
                                                                                      var inst_13682 = state_13738[8];
                                                                                      var inst_13697 = state_13738[2];
                                                                                      var inst_13698 = inst_13684 + 1;
                                                                                      var tmp13799 = inst_13681;
                                                                                      var tmp13800 = inst_13683;
                                                                                      var tmp13801 = inst_13682;
                                                                                      var inst_13681__$1 = tmp13799;
                                                                                      var inst_13682__$1 = tmp13801;
                                                                                      var inst_13683__$1 = tmp13800;
                                                                                      var inst_13684__$1 = inst_13698;
                                                                                      var state_13738__$1 = function() {
                                                                                        var statearr_13805 = state_13738;
                                                                                        statearr_13805[7] = inst_13684__$1;
                                                                                        statearr_13805[29] = inst_13697;
                                                                                        statearr_13805[17] = inst_13681__$1;
                                                                                        statearr_13805[18] = inst_13683__$1;
                                                                                        statearr_13805[8] = inst_13682__$1;
                                                                                        return statearr_13805;
                                                                                      }();
                                                                                      var statearr_13806_13863 = state_13738__$1;
                                                                                      statearr_13806_13863[2] = null;
                                                                                      statearr_13806_13863[1] = 25;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_13739 === 10) {
                                                                                        var inst_13623 = state_13738[10];
                                                                                        var inst_13625 = state_13738[11];
                                                                                        var inst_13631 = cljs.core._nth.call(null, inst_13623, inst_13625);
                                                                                        var inst_13632 = cljs.core.nth.call(null, inst_13631, 0, null);
                                                                                        var inst_13633 = cljs.core.nth.call(null, inst_13631, 1, null);
                                                                                        var state_13738__$1 = function() {
                                                                                          var statearr_13807 = state_13738;
                                                                                          statearr_13807[26] = inst_13632;
                                                                                          return statearr_13807;
                                                                                        }();
                                                                                        if (cljs.core.truth_(inst_13633)) {
                                                                                          var statearr_13808_13864 = state_13738__$1;
                                                                                          statearr_13808_13864[1] = 13;
                                                                                        } else {
                                                                                          var statearr_13809_13865 = state_13738__$1;
                                                                                          statearr_13809_13865[1] = 14;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_13739 === 18) {
                                                                                          var inst_13666 = state_13738[2];
                                                                                          var state_13738__$1 = state_13738;
                                                                                          var statearr_13810_13866 = state_13738__$1;
                                                                                          statearr_13810_13866[2] = inst_13666;
                                                                                          statearr_13810_13866[1] = 12;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_13739 === 42) {
                                                                                            var inst_13731 = state_13738[2];
                                                                                            var state_13738__$1 = function() {
                                                                                              var statearr_13811 = state_13738;
                                                                                              statearr_13811[30] = inst_13731;
                                                                                              return statearr_13811;
                                                                                            }();
                                                                                            var statearr_13812_13867 = state_13738__$1;
                                                                                            statearr_13812_13867[2] = null;
                                                                                            statearr_13812_13867[1] = 2;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_13739 === 37) {
                                                                                              var inst_13701 = state_13738[15];
                                                                                              var inst_13710 = cljs.core.first.call(null, inst_13701);
                                                                                              var state_13738__$1 = function() {
                                                                                                var statearr_13813 = state_13738;
                                                                                                statearr_13813[23] = inst_13710;
                                                                                                return statearr_13813;
                                                                                              }();
                                                                                              var statearr_13814_13868 = state_13738__$1;
                                                                                              statearr_13814_13868[2] = null;
                                                                                              statearr_13814_13868[1] = 41;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_13739 === 8) {
                                                                                                var inst_13625 = state_13738[11];
                                                                                                var inst_13624 = state_13738[14];
                                                                                                var inst_13627 = inst_13625 < inst_13624;
                                                                                                var inst_13628 = inst_13627;
                                                                                                var state_13738__$1 = state_13738;
                                                                                                if (cljs.core.truth_(inst_13628)) {
                                                                                                  var statearr_13815_13869 = state_13738__$1;
                                                                                                  statearr_13815_13869[1] = 10;
                                                                                                } else {
                                                                                                  var statearr_13816_13870 = state_13738__$1;
                                                                                                  statearr_13816_13870[1] = 11;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                return null;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto___13820, cs, m, dchan, dctr, done);
        return function(switch__5697__auto__, c__5710__auto___13820, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_13818 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13818[0] = state_machine__5698__auto__;
              statearr_13818[1] = 1;
              return statearr_13818;
            };
            var state_machine__5698__auto____1 = function(state_13738) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_13738);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_13738) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_13738);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___13820, cs, m, dchan, dctr, done);
      }();
      var state__5712__auto__ = function() {
        var statearr_13819 = f__5711__auto__.call(null);
        statearr_13819[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___13820;
        return statearr_13819;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___13820, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj13872 = {};
  return obj13872;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3636__auto__ = m;
    if (and__3636__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4285__auto__ = m == null ? null : m;
    return function() {
      var or__3648__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t13978 !== "undefined") {
    } else {
      cljs.core.async.t13978 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta13979) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta13979 = meta13979;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13978.cljs$lang$type = true;
      cljs.core.async.t13978.cljs$lang$ctorStr = "cljs.core.async/t13978";
      cljs.core.async.t13978.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
          return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t13978");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t13978.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13978.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13980) {
          var self__ = this;
          var _13980__$1 = this;
          return self__.meta13979;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13978.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13980, meta13979__$1) {
          var self__ = this;
          var _13980__$1 = this;
          return new cljs.core.async.t13978(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta13979__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t13978 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t13978(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13979) {
          return new cljs.core.async.t13978(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13979);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t13978(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__5710__auto___14083 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14083, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___14083, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_14045) {
            var state_val_14046 = state_14045[1];
            if (state_val_14046 === 7) {
              var inst_13994 = state_14045[5];
              var inst_13999 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13994);
              var state_14045__$1 = state_14045;
              var statearr_14047_14084 = state_14045__$1;
              statearr_14047_14084[2] = inst_13999;
              statearr_14047_14084[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14046 === 20) {
                var inst_14009 = state_14045[6];
                var state_14045__$1 = state_14045;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14045__$1, 23, out, inst_14009);
              } else {
                if (state_val_14046 === 1) {
                  var inst_13984 = state_14045[7];
                  var inst_13984__$1 = calc_state.call(null);
                  var inst_13985 = cljs.core.seq_QMARK_.call(null, inst_13984__$1);
                  var state_14045__$1 = function() {
                    var statearr_14048 = state_14045;
                    statearr_14048[7] = inst_13984__$1;
                    return statearr_14048;
                  }();
                  if (inst_13985) {
                    var statearr_14049_14085 = state_14045__$1;
                    statearr_14049_14085[1] = 2;
                  } else {
                    var statearr_14050_14086 = state_14045__$1;
                    statearr_14050_14086[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14046 === 4) {
                    var inst_13984 = state_14045[7];
                    var inst_13990 = state_14045[2];
                    var inst_13991 = cljs.core.get.call(null, inst_13990, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                    var inst_13992 = cljs.core.get.call(null, inst_13990, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                    var inst_13993 = cljs.core.get.call(null, inst_13990, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                    var inst_13994 = inst_13984;
                    var state_14045__$1 = function() {
                      var statearr_14051 = state_14045;
                      statearr_14051[5] = inst_13994;
                      statearr_14051[8] = inst_13992;
                      statearr_14051[9] = inst_13993;
                      statearr_14051[10] = inst_13991;
                      return statearr_14051;
                    }();
                    var statearr_14052_14087 = state_14045__$1;
                    statearr_14052_14087[2] = null;
                    statearr_14052_14087[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14046 === 15) {
                      var state_14045__$1 = state_14045;
                      var statearr_14053_14088 = state_14045__$1;
                      statearr_14053_14088[2] = null;
                      statearr_14053_14088[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14046 === 21) {
                        var state_14045__$1 = state_14045;
                        var statearr_14054_14089 = state_14045__$1;
                        statearr_14054_14089[2] = null;
                        statearr_14054_14089[1] = 22;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14046 === 13) {
                          var inst_14041 = state_14045[2];
                          var state_14045__$1 = state_14045;
                          var statearr_14055_14090 = state_14045__$1;
                          statearr_14055_14090[2] = inst_14041;
                          statearr_14055_14090[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14046 === 22) {
                            var inst_14002 = state_14045[11];
                            var inst_14038 = state_14045[2];
                            var inst_13994 = inst_14002;
                            var state_14045__$1 = function() {
                              var statearr_14056 = state_14045;
                              statearr_14056[5] = inst_13994;
                              statearr_14056[12] = inst_14038;
                              return statearr_14056;
                            }();
                            var statearr_14057_14091 = state_14045__$1;
                            statearr_14057_14091[2] = null;
                            statearr_14057_14091[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14046 === 6) {
                              var inst_14043 = state_14045[2];
                              var state_14045__$1 = state_14045;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14045__$1, inst_14043);
                            } else {
                              if (state_val_14046 === 17) {
                                var inst_14024 = state_14045[13];
                                var state_14045__$1 = state_14045;
                                var statearr_14058_14092 = state_14045__$1;
                                statearr_14058_14092[2] = inst_14024;
                                statearr_14058_14092[1] = 19;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14046 === 3) {
                                  var inst_13984 = state_14045[7];
                                  var state_14045__$1 = state_14045;
                                  var statearr_14059_14093 = state_14045__$1;
                                  statearr_14059_14093[2] = inst_13984;
                                  statearr_14059_14093[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14046 === 12) {
                                    var inst_14010 = state_14045[14];
                                    var inst_14005 = state_14045[15];
                                    var inst_14024 = state_14045[13];
                                    var inst_14024__$1 = inst_14005.call(null, inst_14010);
                                    var state_14045__$1 = function() {
                                      var statearr_14060 = state_14045;
                                      statearr_14060[13] = inst_14024__$1;
                                      return statearr_14060;
                                    }();
                                    if (cljs.core.truth_(inst_14024__$1)) {
                                      var statearr_14061_14094 = state_14045__$1;
                                      statearr_14061_14094[1] = 17;
                                    } else {
                                      var statearr_14062_14095 = state_14045__$1;
                                      statearr_14062_14095[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14046 === 2) {
                                      var inst_13984 = state_14045[7];
                                      var inst_13987 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13984);
                                      var state_14045__$1 = state_14045;
                                      var statearr_14063_14096 = state_14045__$1;
                                      statearr_14063_14096[2] = inst_13987;
                                      statearr_14063_14096[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14046 === 23) {
                                        var inst_14035 = state_14045[2];
                                        var state_14045__$1 = state_14045;
                                        var statearr_14064_14097 = state_14045__$1;
                                        statearr_14064_14097[2] = inst_14035;
                                        statearr_14064_14097[1] = 22;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14046 === 19) {
                                          var inst_14032 = state_14045[2];
                                          var state_14045__$1 = state_14045;
                                          if (cljs.core.truth_(inst_14032)) {
                                            var statearr_14065_14098 = state_14045__$1;
                                            statearr_14065_14098[1] = 20;
                                          } else {
                                            var statearr_14066_14099 = state_14045__$1;
                                            statearr_14066_14099[1] = 21;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14046 === 11) {
                                            var inst_14009 = state_14045[6];
                                            var inst_14015 = inst_14009 == null;
                                            var state_14045__$1 = state_14045;
                                            if (cljs.core.truth_(inst_14015)) {
                                              var statearr_14067_14100 = state_14045__$1;
                                              statearr_14067_14100[1] = 14;
                                            } else {
                                              var statearr_14068_14101 = state_14045__$1;
                                              statearr_14068_14101[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14046 === 9) {
                                              var inst_14002 = state_14045[11];
                                              var inst_14002__$1 = state_14045[2];
                                              var inst_14003 = cljs.core.get.call(null, inst_14002__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                              var inst_14004 = cljs.core.get.call(null, inst_14002__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                              var inst_14005 = cljs.core.get.call(null, inst_14002__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                              var state_14045__$1 = function() {
                                                var statearr_14069 = state_14045;
                                                statearr_14069[16] = inst_14004;
                                                statearr_14069[11] = inst_14002__$1;
                                                statearr_14069[15] = inst_14005;
                                                return statearr_14069;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_14045__$1, 10, inst_14003);
                                            } else {
                                              if (state_val_14046 === 5) {
                                                var inst_13994 = state_14045[5];
                                                var inst_13997 = cljs.core.seq_QMARK_.call(null, inst_13994);
                                                var state_14045__$1 = state_14045;
                                                if (inst_13997) {
                                                  var statearr_14070_14102 = state_14045__$1;
                                                  statearr_14070_14102[1] = 7;
                                                } else {
                                                  var statearr_14071_14103 = state_14045__$1;
                                                  statearr_14071_14103[1] = 8;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14046 === 14) {
                                                  var inst_14010 = state_14045[14];
                                                  var inst_14017 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_14010);
                                                  var state_14045__$1 = state_14045;
                                                  var statearr_14072_14104 = state_14045__$1;
                                                  statearr_14072_14104[2] = inst_14017;
                                                  statearr_14072_14104[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14046 === 16) {
                                                    var inst_14020 = state_14045[2];
                                                    var inst_14021 = calc_state.call(null);
                                                    var inst_13994 = inst_14021;
                                                    var state_14045__$1 = function() {
                                                      var statearr_14073 = state_14045;
                                                      statearr_14073[5] = inst_13994;
                                                      statearr_14073[17] = inst_14020;
                                                      return statearr_14073;
                                                    }();
                                                    var statearr_14074_14105 = state_14045__$1;
                                                    statearr_14074_14105[2] = null;
                                                    statearr_14074_14105[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14046 === 10) {
                                                      var inst_14009 = state_14045[6];
                                                      var inst_14010 = state_14045[14];
                                                      var inst_14008 = state_14045[2];
                                                      var inst_14009__$1 = cljs.core.nth.call(null, inst_14008, 0, null);
                                                      var inst_14010__$1 = cljs.core.nth.call(null, inst_14008, 1, null);
                                                      var inst_14011 = inst_14009__$1 == null;
                                                      var inst_14012 = cljs.core._EQ_.call(null, inst_14010__$1, change);
                                                      var inst_14013 = inst_14011 || inst_14012;
                                                      var state_14045__$1 = function() {
                                                        var statearr_14075 = state_14045;
                                                        statearr_14075[6] = inst_14009__$1;
                                                        statearr_14075[14] = inst_14010__$1;
                                                        return statearr_14075;
                                                      }();
                                                      if (cljs.core.truth_(inst_14013)) {
                                                        var statearr_14076_14106 = state_14045__$1;
                                                        statearr_14076_14106[1] = 11;
                                                      } else {
                                                        var statearr_14077_14107 = state_14045__$1;
                                                        statearr_14077_14107[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14046 === 18) {
                                                        var inst_14004 = state_14045[16];
                                                        var inst_14010 = state_14045[14];
                                                        var inst_14005 = state_14045[15];
                                                        var inst_14027 = cljs.core.empty_QMARK_.call(null, inst_14005);
                                                        var inst_14028 = inst_14004.call(null, inst_14010);
                                                        var inst_14029 = cljs.core.not.call(null, inst_14028);
                                                        var inst_14030 = inst_14027 && inst_14029;
                                                        var state_14045__$1 = state_14045;
                                                        var statearr_14078_14108 = state_14045__$1;
                                                        statearr_14078_14108[2] = inst_14030;
                                                        statearr_14078_14108[1] = 19;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14046 === 8) {
                                                          var inst_13994 = state_14045[5];
                                                          var state_14045__$1 = state_14045;
                                                          var statearr_14079_14109 = state_14045__$1;
                                                          statearr_14079_14109[2] = inst_13994;
                                                          statearr_14079_14109[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto___14083, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__5697__auto__, c__5710__auto___14083, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_14081 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14081[0] = state_machine__5698__auto__;
              statearr_14081[1] = 1;
              return statearr_14081;
            };
            var state_machine__5698__auto____1 = function(state_14045) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_14045);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_14045) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_14045);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___14083, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__5712__auto__ = function() {
        var statearr_14082 = f__5711__auto__.call(null);
        statearr_14082[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14083;
        return statearr_14082;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___14083, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj14111 = {};
  return obj14111;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3636__auto__ = p;
    if (and__3636__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4285__auto__ = p == null ? null : p;
    return function() {
      var or__3648__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3636__auto__ = p;
    if (and__3636__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4285__auto__ = p == null ? null : p;
    return function() {
      var or__3648__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3636__auto__ = p;
      if (and__3636__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4285__auto__ = p == null ? null : p;
      return function() {
        var or__3648__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3636__auto__ = p;
      if (and__3636__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3636__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4285__auto__ = p == null ? null : p;
      return function() {
        var or__3648__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4285__auto__)];
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          var or__3648__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3648__auto____$1) {
            return or__3648__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3648__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3648__auto__, mults) {
            return function(p1__14112_SHARP_) {
              if (cljs.core.truth_(p1__14112_SHARP_.call(null, topic))) {
                return p1__14112_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__14112_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3648__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t14236 !== "undefined") {
      } else {
        cljs.core.async.t14236 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta14237) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta14237 = meta14237;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t14236.cljs$lang$type = true;
        cljs.core.async.t14236.cljs$lang$ctorStr = "cljs.core.async/t14236";
        cljs.core.async.t14236.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
            return cljs.core._write.call(null, writer__4226__auto__, "cljs.core.async/t14236");
          };
        }(mults, ensure_mult);
        cljs.core.async.t14236.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t14236.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14236.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t14236.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14236.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t14236.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t14236.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t14236.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_14238) {
            var self__ = this;
            var _14238__$1 = this;
            return self__.meta14237;
          };
        }(mults, ensure_mult);
        cljs.core.async.t14236.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_14238, meta14237__$1) {
            var self__ = this;
            var _14238__$1 = this;
            return new cljs.core.async.t14236(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta14237__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t14236 = function(mults, ensure_mult) {
          return function __GT_t14236(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta14237) {
            return new cljs.core.async.t14236(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta14237);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t14236(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5710__auto___14359 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14359, mults, ensure_mult, p) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___14359, mults, ensure_mult, p) {
            return function(state_14311) {
              var state_val_14312 = state_14311[1];
              if (state_val_14312 === 7) {
                var inst_14307 = state_14311[2];
                var state_14311__$1 = state_14311;
                var statearr_14313_14360 = state_14311__$1;
                statearr_14313_14360[2] = inst_14307;
                statearr_14313_14360[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14312 === 20) {
                  var state_14311__$1 = state_14311;
                  var statearr_14314_14361 = state_14311__$1;
                  statearr_14314_14361[2] = null;
                  statearr_14314_14361[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14312 === 1) {
                    var state_14311__$1 = state_14311;
                    var statearr_14315_14362 = state_14311__$1;
                    statearr_14315_14362[2] = null;
                    statearr_14315_14362[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14312 === 24) {
                      try {
                        var inst_14241 = state_14311[5];
                        var inst_14291 = state_14311[6];
                        var inst_14297 = cljs.core.async.muxch_STAR_.call(null, inst_14291);
                        var state_14311__$1 = state_14311;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14311__$1, 25, inst_14297, inst_14241);
                      } catch (e14316) {
                        if (e14316 instanceof Object) {
                          var ex__5691__auto__ = e14316;
                          var statearr_14317_14363 = state_14311;
                          statearr_14317_14363[1] = 23;
                          statearr_14317_14363[2] = ex__5691__auto__;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e14316;
                        }
                      }
                    } else {
                      if (state_val_14312 === 4) {
                        var inst_14241 = state_14311[5];
                        var inst_14241__$1 = state_14311[2];
                        var inst_14242 = inst_14241__$1 == null;
                        var state_14311__$1 = function() {
                          var statearr_14318 = state_14311;
                          statearr_14318[5] = inst_14241__$1;
                          return statearr_14318;
                        }();
                        if (cljs.core.truth_(inst_14242)) {
                          var statearr_14319_14364 = state_14311__$1;
                          statearr_14319_14364[1] = 5;
                        } else {
                          var statearr_14320_14365 = state_14311__$1;
                          statearr_14320_14365[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14312 === 15) {
                          var inst_14283 = state_14311[2];
                          var state_14311__$1 = state_14311;
                          var statearr_14321_14366 = state_14311__$1;
                          statearr_14321_14366[2] = inst_14283;
                          statearr_14321_14366[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14312 === 21) {
                            var inst_14304 = state_14311[2];
                            var state_14311__$1 = function() {
                              var statearr_14322 = state_14311;
                              statearr_14322[7] = inst_14304;
                              return statearr_14322;
                            }();
                            var statearr_14323_14367 = state_14311__$1;
                            statearr_14323_14367[2] = null;
                            statearr_14323_14367[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14312 === 13) {
                              var inst_14265 = state_14311[8];
                              var inst_14267 = cljs.core.chunked_seq_QMARK_.call(null, inst_14265);
                              var state_14311__$1 = state_14311;
                              if (inst_14267) {
                                var statearr_14324_14368 = state_14311__$1;
                                statearr_14324_14368[1] = 16;
                              } else {
                                var statearr_14325_14369 = state_14311__$1;
                                statearr_14325_14369[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14312 === 22) {
                                var inst_14301 = state_14311[2];
                                var state_14311__$1 = state_14311;
                                var statearr_14326_14370 = state_14311__$1;
                                statearr_14326_14370[2] = inst_14301;
                                statearr_14326_14370[1] = 21;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14312 === 6) {
                                  var inst_14241 = state_14311[5];
                                  var inst_14289 = state_14311[9];
                                  var inst_14291 = state_14311[6];
                                  var inst_14289__$1 = topic_fn.call(null, inst_14241);
                                  var inst_14290 = cljs.core.deref.call(null, mults);
                                  var inst_14291__$1 = cljs.core.get.call(null, inst_14290, inst_14289__$1);
                                  var state_14311__$1 = function() {
                                    var statearr_14327 = state_14311;
                                    statearr_14327[9] = inst_14289__$1;
                                    statearr_14327[6] = inst_14291__$1;
                                    return statearr_14327;
                                  }();
                                  if (cljs.core.truth_(inst_14291__$1)) {
                                    var statearr_14328_14371 = state_14311__$1;
                                    statearr_14328_14371[1] = 19;
                                  } else {
                                    var statearr_14329_14372 = state_14311__$1;
                                    statearr_14329_14372[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14312 === 25) {
                                    try {
                                      var inst_14299 = state_14311[2];
                                      var state_14311__$1 = state_14311;
                                      var statearr_14332_14373 = state_14311__$1;
                                      statearr_14332_14373[2] = inst_14299;
                                      statearr_14332_14373[1] = 22;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } catch (e14330) {
                                      if (e14330 instanceof Object) {
                                        var ex__5691__auto__ = e14330;
                                        var statearr_14331_14374 = state_14311;
                                        statearr_14331_14374[1] = 23;
                                        statearr_14331_14374[2] = ex__5691__auto__;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        throw e14330;
                                      }
                                    }
                                  } else {
                                    if (state_val_14312 === 17) {
                                      var inst_14265 = state_14311[8];
                                      var inst_14274 = cljs.core.first.call(null, inst_14265);
                                      var inst_14275 = cljs.core.async.muxch_STAR_.call(null, inst_14274);
                                      var inst_14276 = cljs.core.async.close_BANG_.call(null, inst_14275);
                                      var inst_14277 = cljs.core.next.call(null, inst_14265);
                                      var inst_14251 = inst_14277;
                                      var inst_14252 = null;
                                      var inst_14253 = 0;
                                      var inst_14254 = 0;
                                      var state_14311__$1 = function() {
                                        var statearr_14333 = state_14311;
                                        statearr_14333[10] = inst_14252;
                                        statearr_14333[11] = inst_14276;
                                        statearr_14333[12] = inst_14253;
                                        statearr_14333[13] = inst_14251;
                                        statearr_14333[14] = inst_14254;
                                        return statearr_14333;
                                      }();
                                      var statearr_14334_14375 = state_14311__$1;
                                      statearr_14334_14375[2] = null;
                                      statearr_14334_14375[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14312 === 3) {
                                        var inst_14309 = state_14311[2];
                                        var state_14311__$1 = state_14311;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14311__$1, inst_14309);
                                      } else {
                                        if (state_val_14312 === 12) {
                                          var inst_14285 = state_14311[2];
                                          var state_14311__$1 = state_14311;
                                          var statearr_14335_14376 = state_14311__$1;
                                          statearr_14335_14376[2] = inst_14285;
                                          statearr_14335_14376[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14312 === 2) {
                                            var state_14311__$1 = state_14311;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14311__$1, 4, ch);
                                          } else {
                                            if (state_val_14312 === 23) {
                                              var inst_14289 = state_14311[9];
                                              var inst_14293 = state_14311[2];
                                              var inst_14294 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_14289);
                                              var state_14311__$1 = function() {
                                                var statearr_14336 = state_14311;
                                                statearr_14336[15] = inst_14293;
                                                return statearr_14336;
                                              }();
                                              var statearr_14337_14377 = state_14311__$1;
                                              statearr_14337_14377[2] = inst_14294;
                                              statearr_14337_14377[1] = 22;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14312 === 19) {
                                                var state_14311__$1 = state_14311;
                                                var statearr_14338_14378 = state_14311__$1;
                                                statearr_14338_14378[2] = null;
                                                statearr_14338_14378[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14312 === 11) {
                                                  var inst_14265 = state_14311[8];
                                                  var inst_14251 = state_14311[13];
                                                  var inst_14265__$1 = cljs.core.seq.call(null, inst_14251);
                                                  var state_14311__$1 = function() {
                                                    var statearr_14339 = state_14311;
                                                    statearr_14339[8] = inst_14265__$1;
                                                    return statearr_14339;
                                                  }();
                                                  if (inst_14265__$1) {
                                                    var statearr_14340_14379 = state_14311__$1;
                                                    statearr_14340_14379[1] = 13;
                                                  } else {
                                                    var statearr_14341_14380 = state_14311__$1;
                                                    statearr_14341_14380[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14312 === 9) {
                                                    var inst_14287 = state_14311[2];
                                                    var state_14311__$1 = state_14311;
                                                    var statearr_14342_14381 = state_14311__$1;
                                                    statearr_14342_14381[2] = inst_14287;
                                                    statearr_14342_14381[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14312 === 5) {
                                                      var inst_14248 = cljs.core.deref.call(null, mults);
                                                      var inst_14249 = cljs.core.vals.call(null, inst_14248);
                                                      var inst_14250 = cljs.core.seq.call(null, inst_14249);
                                                      var inst_14251 = inst_14250;
                                                      var inst_14252 = null;
                                                      var inst_14253 = 0;
                                                      var inst_14254 = 0;
                                                      var state_14311__$1 = function() {
                                                        var statearr_14343 = state_14311;
                                                        statearr_14343[10] = inst_14252;
                                                        statearr_14343[12] = inst_14253;
                                                        statearr_14343[13] = inst_14251;
                                                        statearr_14343[14] = inst_14254;
                                                        return statearr_14343;
                                                      }();
                                                      var statearr_14344_14382 = state_14311__$1;
                                                      statearr_14344_14382[2] = null;
                                                      statearr_14344_14382[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14312 === 14) {
                                                        var state_14311__$1 = state_14311;
                                                        var statearr_14348_14383 = state_14311__$1;
                                                        statearr_14348_14383[2] = null;
                                                        statearr_14348_14383[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14312 === 16) {
                                                          var inst_14265 = state_14311[8];
                                                          var inst_14269 = cljs.core.chunk_first.call(null, inst_14265);
                                                          var inst_14270 = cljs.core.chunk_rest.call(null, inst_14265);
                                                          var inst_14271 = cljs.core.count.call(null, inst_14269);
                                                          var inst_14251 = inst_14270;
                                                          var inst_14252 = inst_14269;
                                                          var inst_14253 = inst_14271;
                                                          var inst_14254 = 0;
                                                          var state_14311__$1 = function() {
                                                            var statearr_14349 = state_14311;
                                                            statearr_14349[10] = inst_14252;
                                                            statearr_14349[12] = inst_14253;
                                                            statearr_14349[13] = inst_14251;
                                                            statearr_14349[14] = inst_14254;
                                                            return statearr_14349;
                                                          }();
                                                          var statearr_14350_14384 = state_14311__$1;
                                                          statearr_14350_14384[2] = null;
                                                          statearr_14350_14384[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14312 === 10) {
                                                            var inst_14252 = state_14311[10];
                                                            var inst_14253 = state_14311[12];
                                                            var inst_14251 = state_14311[13];
                                                            var inst_14254 = state_14311[14];
                                                            var inst_14259 = cljs.core._nth.call(null, inst_14252, inst_14254);
                                                            var inst_14260 = cljs.core.async.muxch_STAR_.call(null, inst_14259);
                                                            var inst_14261 = cljs.core.async.close_BANG_.call(null, inst_14260);
                                                            var inst_14262 = inst_14254 + 1;
                                                            var tmp14345 = inst_14252;
                                                            var tmp14346 = inst_14253;
                                                            var tmp14347 = inst_14251;
                                                            var inst_14251__$1 = tmp14347;
                                                            var inst_14252__$1 = tmp14345;
                                                            var inst_14253__$1 = tmp14346;
                                                            var inst_14254__$1 = inst_14262;
                                                            var state_14311__$1 = function() {
                                                              var statearr_14351 = state_14311;
                                                              statearr_14351[10] = inst_14252__$1;
                                                              statearr_14351[12] = inst_14253__$1;
                                                              statearr_14351[13] = inst_14251__$1;
                                                              statearr_14351[14] = inst_14254__$1;
                                                              statearr_14351[16] = inst_14261;
                                                              return statearr_14351;
                                                            }();
                                                            var statearr_14352_14385 = state_14311__$1;
                                                            statearr_14352_14385[2] = null;
                                                            statearr_14352_14385[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14312 === 18) {
                                                              var inst_14280 = state_14311[2];
                                                              var state_14311__$1 = state_14311;
                                                              var statearr_14353_14386 = state_14311__$1;
                                                              statearr_14353_14386[2] = inst_14280;
                                                              statearr_14353_14386[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14312 === 8) {
                                                                var inst_14253 = state_14311[12];
                                                                var inst_14254 = state_14311[14];
                                                                var inst_14256 = inst_14254 < inst_14253;
                                                                var inst_14257 = inst_14256;
                                                                var state_14311__$1 = state_14311;
                                                                if (cljs.core.truth_(inst_14257)) {
                                                                  var statearr_14354_14387 = state_14311__$1;
                                                                  statearr_14354_14387[1] = 10;
                                                                } else {
                                                                  var statearr_14355_14388 = state_14311__$1;
                                                                  statearr_14355_14388[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___14359, mults, ensure_mult, p);
          return function(switch__5697__auto__, c__5710__auto___14359, mults, ensure_mult, p) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_14357 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14357[0] = state_machine__5698__auto__;
                statearr_14357[1] = 1;
                return statearr_14357;
              };
              var state_machine__5698__auto____1 = function(state_14311) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_14311);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_14311) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_14311);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___14359, mults, ensure_mult, p);
        }();
        var state__5712__auto__ = function() {
          var statearr_14358 = f__5711__auto__.call(null);
          statearr_14358[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14359;
          return statearr_14358;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___14359, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5710__auto___14519 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14519, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___14519, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_14491) {
              var state_val_14492 = state_14491[1];
              if (state_val_14492 === 7) {
                var state_14491__$1 = state_14491;
                var statearr_14493_14520 = state_14491__$1;
                statearr_14493_14520[2] = null;
                statearr_14493_14520[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14492 === 1) {
                  var state_14491__$1 = state_14491;
                  var statearr_14494_14521 = state_14491__$1;
                  statearr_14494_14521[2] = null;
                  statearr_14494_14521[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14492 === 4) {
                    var inst_14456 = state_14491[5];
                    var inst_14458 = inst_14456 < cnt;
                    var state_14491__$1 = state_14491;
                    if (cljs.core.truth_(inst_14458)) {
                      var statearr_14495_14522 = state_14491__$1;
                      statearr_14495_14522[1] = 6;
                    } else {
                      var statearr_14496_14523 = state_14491__$1;
                      statearr_14496_14523[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14492 === 15) {
                      var inst_14487 = state_14491[2];
                      var state_14491__$1 = state_14491;
                      var statearr_14497_14524 = state_14491__$1;
                      statearr_14497_14524[2] = inst_14487;
                      statearr_14497_14524[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14492 === 13) {
                        var inst_14480 = cljs.core.async.close_BANG_.call(null, out);
                        var state_14491__$1 = state_14491;
                        var statearr_14498_14525 = state_14491__$1;
                        statearr_14498_14525[2] = inst_14480;
                        statearr_14498_14525[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14492 === 6) {
                          var state_14491__$1 = state_14491;
                          var statearr_14499_14526 = state_14491__$1;
                          statearr_14499_14526[2] = null;
                          statearr_14499_14526[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14492 === 3) {
                            var inst_14489 = state_14491[2];
                            var state_14491__$1 = state_14491;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14491__$1, inst_14489);
                          } else {
                            if (state_val_14492 === 12) {
                              var inst_14477 = state_14491[6];
                              var inst_14477__$1 = state_14491[2];
                              var inst_14478 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_14477__$1);
                              var state_14491__$1 = function() {
                                var statearr_14500 = state_14491;
                                statearr_14500[6] = inst_14477__$1;
                                return statearr_14500;
                              }();
                              if (cljs.core.truth_(inst_14478)) {
                                var statearr_14501_14527 = state_14491__$1;
                                statearr_14501_14527[1] = 13;
                              } else {
                                var statearr_14502_14528 = state_14491__$1;
                                statearr_14502_14528[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14492 === 2) {
                                var inst_14455 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_14456 = 0;
                                var state_14491__$1 = function() {
                                  var statearr_14503 = state_14491;
                                  statearr_14503[5] = inst_14456;
                                  statearr_14503[7] = inst_14455;
                                  return statearr_14503;
                                }();
                                var statearr_14504_14529 = state_14491__$1;
                                statearr_14504_14529[2] = null;
                                statearr_14504_14529[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14492 === 11) {
                                  try {
                                    var inst_14456 = state_14491[5];
                                    var inst_14464 = chs__$1.call(null, inst_14456);
                                    var inst_14465 = done.call(null, inst_14456);
                                    var inst_14466 = cljs.core.async.take_BANG_.call(null, inst_14464, inst_14465);
                                    var state_14491__$1 = state_14491;
                                    var statearr_14507_14530 = state_14491__$1;
                                    statearr_14507_14530[2] = inst_14466;
                                    statearr_14507_14530[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e14505) {
                                    if (e14505 instanceof Object) {
                                      var ex__5691__auto__ = e14505;
                                      var statearr_14506_14531 = state_14491;
                                      statearr_14506_14531[1] = 10;
                                      statearr_14506_14531[2] = ex__5691__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e14505;
                                    }
                                  }
                                } else {
                                  if (state_val_14492 === 9) {
                                    var inst_14456 = state_14491[5];
                                    var inst_14468 = state_14491[2];
                                    var inst_14469 = inst_14456 + 1;
                                    var inst_14456__$1 = inst_14469;
                                    var state_14491__$1 = function() {
                                      var statearr_14508 = state_14491;
                                      statearr_14508[5] = inst_14456__$1;
                                      statearr_14508[8] = inst_14468;
                                      return statearr_14508;
                                    }();
                                    var statearr_14509_14532 = state_14491__$1;
                                    statearr_14509_14532[2] = null;
                                    statearr_14509_14532[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14492 === 5) {
                                      var inst_14475 = state_14491[2];
                                      var state_14491__$1 = function() {
                                        var statearr_14510 = state_14491;
                                        statearr_14510[9] = inst_14475;
                                        return statearr_14510;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14491__$1, 12, dchan);
                                    } else {
                                      if (state_val_14492 === 14) {
                                        var inst_14477 = state_14491[6];
                                        var inst_14482 = cljs.core.apply.call(null, f, inst_14477);
                                        var state_14491__$1 = state_14491;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14491__$1, 16, out, inst_14482);
                                      } else {
                                        if (state_val_14492 === 16) {
                                          var inst_14484 = state_14491[2];
                                          var state_14491__$1 = function() {
                                            var statearr_14511 = state_14491;
                                            statearr_14511[10] = inst_14484;
                                            return statearr_14511;
                                          }();
                                          var statearr_14512_14533 = state_14491__$1;
                                          statearr_14512_14533[2] = null;
                                          statearr_14512_14533[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14492 === 10) {
                                            var inst_14460 = state_14491[2];
                                            var inst_14461 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_14491__$1 = function() {
                                              var statearr_14513 = state_14491;
                                              statearr_14513[11] = inst_14460;
                                              return statearr_14513;
                                            }();
                                            var statearr_14514_14534 = state_14491__$1;
                                            statearr_14514_14534[2] = inst_14461;
                                            statearr_14514_14534[1] = 9;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14492 === 8) {
                                              var inst_14473 = state_14491[2];
                                              var state_14491__$1 = state_14491;
                                              var statearr_14515_14535 = state_14491__$1;
                                              statearr_14515_14535[2] = inst_14473;
                                              statearr_14515_14535[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___14519, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__5697__auto__, c__5710__auto___14519, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_14517 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14517[0] = state_machine__5698__auto__;
                statearr_14517[1] = 1;
                return statearr_14517;
              };
              var state_machine__5698__auto____1 = function(state_14491) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_14491);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_14491) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_14491);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___14519, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__5712__auto__ = function() {
          var statearr_14518 = f__5711__auto__.call(null);
          statearr_14518[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14519;
          return statearr_14518;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___14519, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5710__auto___14635 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14635, out) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___14635, out) {
            return function(state_14615) {
              var state_val_14616 = state_14615[1];
              if (state_val_14616 === 7) {
                var inst_14595 = state_14615[5];
                var inst_14594 = state_14615[6];
                var inst_14594__$1 = state_14615[2];
                var inst_14595__$1 = cljs.core.nth.call(null, inst_14594__$1, 0, null);
                var inst_14596 = cljs.core.nth.call(null, inst_14594__$1, 1, null);
                var inst_14597 = inst_14595__$1 == null;
                var state_14615__$1 = function() {
                  var statearr_14617 = state_14615;
                  statearr_14617[7] = inst_14596;
                  statearr_14617[5] = inst_14595__$1;
                  statearr_14617[6] = inst_14594__$1;
                  return statearr_14617;
                }();
                if (cljs.core.truth_(inst_14597)) {
                  var statearr_14618_14636 = state_14615__$1;
                  statearr_14618_14636[1] = 8;
                } else {
                  var statearr_14619_14637 = state_14615__$1;
                  statearr_14619_14637[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14616 === 1) {
                  var inst_14586 = cljs.core.vec.call(null, chs);
                  var inst_14587 = inst_14586;
                  var state_14615__$1 = function() {
                    var statearr_14620 = state_14615;
                    statearr_14620[8] = inst_14587;
                    return statearr_14620;
                  }();
                  var statearr_14621_14638 = state_14615__$1;
                  statearr_14621_14638[2] = null;
                  statearr_14621_14638[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14616 === 4) {
                    var inst_14587 = state_14615[8];
                    var state_14615__$1 = state_14615;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_14615__$1, 7, inst_14587);
                  } else {
                    if (state_val_14616 === 6) {
                      var inst_14611 = state_14615[2];
                      var state_14615__$1 = state_14615;
                      var statearr_14622_14639 = state_14615__$1;
                      statearr_14622_14639[2] = inst_14611;
                      statearr_14622_14639[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14616 === 3) {
                        var inst_14613 = state_14615[2];
                        var state_14615__$1 = state_14615;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14615__$1, inst_14613);
                      } else {
                        if (state_val_14616 === 2) {
                          var inst_14587 = state_14615[8];
                          var inst_14589 = cljs.core.count.call(null, inst_14587);
                          var inst_14590 = inst_14589 > 0;
                          var state_14615__$1 = state_14615;
                          if (cljs.core.truth_(inst_14590)) {
                            var statearr_14624_14640 = state_14615__$1;
                            statearr_14624_14640[1] = 4;
                          } else {
                            var statearr_14625_14641 = state_14615__$1;
                            statearr_14625_14641[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14616 === 11) {
                            var inst_14587 = state_14615[8];
                            var inst_14604 = state_14615[2];
                            var tmp14623 = inst_14587;
                            var inst_14587__$1 = tmp14623;
                            var state_14615__$1 = function() {
                              var statearr_14626 = state_14615;
                              statearr_14626[9] = inst_14604;
                              statearr_14626[8] = inst_14587__$1;
                              return statearr_14626;
                            }();
                            var statearr_14627_14642 = state_14615__$1;
                            statearr_14627_14642[2] = null;
                            statearr_14627_14642[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14616 === 9) {
                              var inst_14595 = state_14615[5];
                              var state_14615__$1 = state_14615;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14615__$1, 11, out, inst_14595);
                            } else {
                              if (state_val_14616 === 5) {
                                var inst_14609 = cljs.core.async.close_BANG_.call(null, out);
                                var state_14615__$1 = state_14615;
                                var statearr_14628_14643 = state_14615__$1;
                                statearr_14628_14643[2] = inst_14609;
                                statearr_14628_14643[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14616 === 10) {
                                  var inst_14607 = state_14615[2];
                                  var state_14615__$1 = state_14615;
                                  var statearr_14629_14644 = state_14615__$1;
                                  statearr_14629_14644[2] = inst_14607;
                                  statearr_14629_14644[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14616 === 8) {
                                    var inst_14596 = state_14615[7];
                                    var inst_14587 = state_14615[8];
                                    var inst_14595 = state_14615[5];
                                    var inst_14594 = state_14615[6];
                                    var inst_14599 = function() {
                                      var c = inst_14596;
                                      var v = inst_14595;
                                      var vec__14592 = inst_14594;
                                      var cs = inst_14587;
                                      return function(c, v, vec__14592, cs, inst_14596, inst_14587, inst_14595, inst_14594, state_val_14616, c__5710__auto___14635, out) {
                                        return function(p1__14536_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__14536_SHARP_);
                                        };
                                      }(c, v, vec__14592, cs, inst_14596, inst_14587, inst_14595, inst_14594, state_val_14616, c__5710__auto___14635, out);
                                    }();
                                    var inst_14600 = cljs.core.filterv.call(null, inst_14599, inst_14587);
                                    var inst_14587__$1 = inst_14600;
                                    var state_14615__$1 = function() {
                                      var statearr_14630 = state_14615;
                                      statearr_14630[8] = inst_14587__$1;
                                      return statearr_14630;
                                    }();
                                    var statearr_14631_14645 = state_14615__$1;
                                    statearr_14631_14645[2] = null;
                                    statearr_14631_14645[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5710__auto___14635, out);
          return function(switch__5697__auto__, c__5710__auto___14635, out) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_14633 = [null, null, null, null, null, null, null, null, null, null];
                statearr_14633[0] = state_machine__5698__auto__;
                statearr_14633[1] = 1;
                return statearr_14633;
              };
              var state_machine__5698__auto____1 = function(state_14615) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_14615);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_14615) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_14615);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___14635, out);
        }();
        var state__5712__auto__ = function() {
          var statearr_14634 = f__5711__auto__.call(null);
          statearr_14634[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14635;
          return statearr_14634;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___14635, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("logger");
goog.require("cljs.core");
cljs.core.enable_console_print_BANG_.call(null);
logger.tagsOn = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "all", "all", 892129742), new cljs.core.Keyword(null, "inv", "inv", 1526077438), new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), new cljs.core.Keyword(null, 
"makeBlock", "makeBlock", -1854081426), new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), new cljs.core.Keyword(null, "dbput", "dbput", 890434907), new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312)], null);
logger.tags = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630)], null);
logger.og = function og(type, format, data) {
  if (cljs.core.truth_(function() {
    var or__3648__auto__ = cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([type], true), logger.tagsOn);
    if (cljs.core.truth_(or__3648__auto__)) {
      return or__3648__auto__;
    } else {
      return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), logger.tagsOn);
    }
  }())) {
    return console.log(type + " " + format, data);
  } else {
    return null;
  }
};
goog.provide("pubsub");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("logger");
goog.require("cljs.core.async");
pubsub.proxychan = cljs.core.async.chan.call(null);
pubsub.proxychan2 = cljs.core.async.chan.call(null, 1);
pubsub.get = function get() {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8474) {
            var state_val_8475 = state_8474[1];
            if (state_val_8475 === 3) {
              var inst_8471 = state_8474[2];
              var inst_8472 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
              var state_8474__$1 = function() {
                var statearr_8476 = state_8474;
                statearr_8476[5] = inst_8472;
                statearr_8476[6] = inst_8471;
                return statearr_8476;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8474__$1, pubsub.a);
            } else {
              if (state_val_8475 === 2) {
                var inst_8467 = state_8474[2];
                var inst_8468 = pubsub.a = inst_8467;
                var inst_8469 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
                var state_8474__$1 = function() {
                  var statearr_8477 = state_8474;
                  statearr_8477[7] = inst_8469;
                  statearr_8477[8] = inst_8468;
                  return statearr_8477;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8474__$1, 3, pubsub.proxychan2, pubsub.a);
              } else {
                if (state_val_8475 === 1) {
                  var state_8474__$1 = state_8474;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8474__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8479 = [null, null, null, null, null, null, null, null, null];
              statearr_8479[0] = state_machine__5698__auto__;
              statearr_8479[1] = 1;
              return statearr_8479;
            };
            var state_machine__5698__auto____1 = function(state_8474) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8474);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8474) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8474);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8480 = f__5711__auto__.call(null);
        statearr_8480[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8480;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
pubsub.init = function init(what) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8495) {
            var state_val_8496 = state_8495[1];
            if (state_val_8496 === 2) {
              var inst_8493 = state_8495[2];
              var state_8495__$1 = state_8495;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8495__$1, inst_8493);
            } else {
              if (state_val_8496 === 1) {
                var inst_8491 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "peerjs", what);
                var state_8495__$1 = function() {
                  var statearr_8497 = state_8495;
                  statearr_8497[5] = inst_8491;
                  return statearr_8497;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8495__$1, 2, pubsub.proxychan2, what);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8499 = [null, null, null, null, null, null];
              statearr_8499[0] = state_machine__5698__auto__;
              statearr_8499[1] = 1;
              return statearr_8499;
            };
            var state_machine__5698__auto____1 = function(state_8495) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8495);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8495) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8495);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8500 = f__5711__auto__.call(null);
        statearr_8500[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8500;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
pubsub.set = function set(what) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8517) {
            var state_val_8518 = state_8517[1];
            if (state_val_8518 === 3) {
              var inst_8515 = state_8517[2];
              var state_8517__$1 = state_8517;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8517__$1, inst_8515);
            } else {
              if (state_val_8518 === 2) {
                var inst_8513 = state_8517[2];
                var state_8517__$1 = function() {
                  var statearr_8519 = state_8517;
                  statearr_8519[5] = inst_8513;
                  return statearr_8519;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8517__$1, 3, pubsub.proxychan2, what);
              } else {
                if (state_val_8518 === 1) {
                  var state_8517__$1 = state_8517;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8517__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8521 = [null, null, null, null, null, null];
              statearr_8521[0] = state_machine__5698__auto__;
              statearr_8521[1] = 1;
              return statearr_8521;
            };
            var state_machine__5698__auto____1 = function(state_8517) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8517);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8517) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8517);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8522 = f__5711__auto__.call(null);
        statearr_8522[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8522;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
pubsub.subs = function() {
  var obj8524 = {};
  return obj8524;
}();
pubsub.sub = function sub(typ, fun) {
  return pubsub.subs[typ] = fun;
};
pubsub.pub = function pub(typ, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "pub", "pub", -1189143908), "pubing ", typ + " " + msg);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8542) {
            var state_val_8543 = state_8542[1];
            if (state_val_8543 === 2) {
              var inst_8540 = state_8542[2];
              var state_8542__$1 = state_8542;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8542__$1, inst_8540);
            } else {
              if (state_val_8543 === 1) {
                var inst_8538 = {"typ":typ, "msg":msg};
                var state_8542__$1 = state_8542;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8542__$1, 2, pubsub.proxychan, inst_8538);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8545 = [null, null, null, null, null];
              statearr_8545[0] = state_machine__5698__auto__;
              statearr_8545[1] = 1;
              return statearr_8545;
            };
            var state_machine__5698__auto____1 = function(state_8542) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8542);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8542) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8542);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8546 = f__5711__auto__.call(null);
        statearr_8546[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8546;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
pubsub.initpubsub = function initpubsub() {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8581) {
            var state_val_8582 = state_8581[1];
            if (state_val_8582 === 4) {
              var inst_8570 = state_8581[2];
              var inst_8571 = pubsub.m = inst_8570;
              var inst_8572 = logger.og.call(null, new cljs.core.Keyword(null, "sub", "sub", -2093760025), "about to deliver subbed %s", pubsub.m);
              var inst_8573 = pubsub.m["typ"];
              var inst_8574 = pubsub.subs[inst_8573];
              var inst_8575 = pubsub.m["msg"];
              var inst_8576 = inst_8574.call(null, inst_8575);
              var state_8581__$1 = function() {
                var statearr_8583 = state_8581;
                statearr_8583[5] = inst_8576;
                statearr_8583[6] = inst_8571;
                statearr_8583[7] = inst_8572;
                return statearr_8583;
              }();
              var statearr_8584_8589 = state_8581__$1;
              statearr_8584_8589[2] = null;
              statearr_8584_8589[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_8582 === 3) {
                var inst_8579 = state_8581[2];
                var state_8581__$1 = state_8581;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8581__$1, inst_8579);
              } else {
                if (state_val_8582 === 2) {
                  var state_8581__$1 = state_8581;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8581__$1, 4, pubsub.proxychan);
                } else {
                  if (state_val_8582 === 1) {
                    var state_8581__$1 = state_8581;
                    var statearr_8585_8590 = state_8581__$1;
                    statearr_8585_8590[2] = null;
                    statearr_8585_8590[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8587 = [null, null, null, null, null, null, null, null];
              statearr_8587[0] = state_machine__5698__auto__;
              statearr_8587[1] = 1;
              return statearr_8587;
            };
            var state_machine__5698__auto____1 = function(state_8581) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8581);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8581) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8581);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8588 = f__5711__auto__.call(null);
        statearr_8588[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8588;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__15402 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__15402;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__15406 = cljs.core._EQ_;
    var expr__15407 = limit;
    if (cljs.core.truth_(pred__15406.call(null, 1, expr__15407))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__15406.call(null, 2, expr__15407))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__15409 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__15410 = limit__$1 - 1;
            var G__15411 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__15409;
            limit__$1 = G__15410;
            parts = G__15411;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__15412 = index - 1;
        index = G__15412;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___15413 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___15413)) {
        var replacement_15414 = temp__4124__auto___15413;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_15414));
      } else {
        buffer.append(ch);
      }
      var G__15415 = index + 1;
      index = G__15415;
      continue;
    }
    break;
  }
};
goog.provide("cemerick.cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
cemerick.cljs.test._STAR_test_print_fn_STAR_ = null;
cemerick.cljs.test._STAR_entry_point_STAR_ = true;
cemerick.cljs.test._STAR_test_ctx_STAR_ = null;
cemerick.cljs.test.init_test_environment_STAR_ = function init_test_environment_STAR_(aux_data) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, cljs.core.assoc.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), cljs.core.truth_(cemerick.cljs.test._STAR_test_print_fn_STAR_) ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143), cemerick.cljs.test._STAR_test_print_fn_STAR_], null) : null), new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128), cljs.core.List.EMPTY), aux_data));
};
cemerick.cljs.test.init_test_environment = function init_test_environment() {
  var G__15248 = cemerick.cljs.test.init_test_environment_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786), cljs.core.List.EMPTY], null));
  cljs.core.swap_BANG_.call(null, G__15248, cljs.core.assoc, new cljs.core.Keyword(null, "async", "async", 1050769601), cemerick.cljs.test.init_test_environment_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY));
  return G__15248;
};
cemerick.cljs.test.registered_tests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_test_hooks = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_fixtures = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.register_test_BANG_ = function register_test_BANG_(ns, name, fn) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_tests, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns], null), cljs.core.assoc, name, fn);
};
cemerick.cljs.test.register_test_ns_hook_BANG_ = function register_test_ns_hook_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_test_hooks, cljs.core.assoc, ns, name);
};
cemerick.cljs.test.TestContext = function(test_env, test_name, __meta, __extmap) {
  this.test_env = test_env;
  this.test_name = test_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4244__auto__, k__4245__auto__) {
  var self__ = this;
  var this__4244__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4244__auto____$1, k__4245__auto__, null);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4246__auto__, k15250, else__4247__auto__) {
  var self__ = this;
  var this__4246__auto____$1 = this;
  var G__15252 = k15250 instanceof cljs.core.Keyword ? k15250.fqn : null;
  switch(G__15252) {
    case "test-name":
      return self__.test_name;
      break;
    case "test-env":
      return self__.test_env;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15250, else__4247__auto__);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4258__auto__, writer__4259__auto__, opts__4260__auto__) {
  var self__ = this;
  var this__4258__auto____$1 = this;
  var pr_pair__4261__auto__ = function(this__4258__auto____$1) {
    return function(keyval__4262__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4259__auto__, cljs.core.pr_writer, "", " ", "", opts__4260__auto__, keyval__4262__auto__);
    };
  }(this__4258__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4259__auto__, pr_pair__4261__auto__, "#cemerick.cljs.test.TestContext{", ", ", "}", opts__4260__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4242__auto__) {
  var self__ = this;
  var this__4242__auto____$1 = this;
  return self__.__meta;
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4238__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4239__auto__) {
  var self__ = this;
  var this__4239__auto____$1 = this;
  var h__4059__auto__ = self__.__hash;
  if (!(h__4059__auto__ == null)) {
    return h__4059__auto__;
  } else {
    var h__4059__auto____$1 = cljs.core.hash_imap.call(null, this__4239__auto____$1);
    self__.__hash = h__4059__auto____$1;
    return h__4059__auto____$1;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4240__auto__, other__4241__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3636__auto__ = other__4241__auto__;
    if (cljs.core.truth_(and__3636__auto__)) {
      return this__4240__auto____$1.constructor === other__4241__auto__.constructor && cljs.core.equiv_map.call(null, this__4240__auto____$1, other__4241__auto__);
    } else {
      return and__3636__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4253__auto__, k__4254__auto__) {
  var self__ = this;
  var this__4253__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), null], null), null), k__4254__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4253__auto____$1), self__.__meta), k__4254__auto__);
  } else {
    return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4254__auto__)), null);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4251__auto__, k__4252__auto__, G__15249) {
  var self__ = this;
  var this__4251__auto____$1 = this;
  var pred__15253 = cljs.core.keyword_identical_QMARK_;
  var expr__15254 = k__4252__auto__;
  if (cljs.core.truth_(pred__15253.call(null, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), expr__15254))) {
    return new cemerick.cljs.test.TestContext(G__15249, self__.test_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15253.call(null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), expr__15254))) {
      return new cemerick.cljs.test.TestContext(self__.test_env, G__15249, self__.__meta, self__.__extmap, null);
    } else {
      return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4252__auto__, G__15249), null);
    }
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4256__auto__) {
  var self__ = this;
  var this__4256__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), 
  self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4243__auto__, G__15249) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, G__15249, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4249__auto__, entry__4250__auto__) {
  var self__ = this;
  var this__4249__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4250__auto__)) {
    return cljs.core._assoc.call(null, this__4249__auto____$1, cljs.core._nth.call(null, entry__4250__auto__, 0), cljs.core._nth.call(null, entry__4250__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4249__auto____$1, entry__4250__auto__);
  }
};
cemerick.cljs.test.TestContext.cljs$lang$type = true;
cemerick.cljs.test.TestContext.cljs$lang$ctorPrSeq = function(this__4278__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.TestContext.cljs$lang$ctorPrWriter = function(this__4278__auto__, writer__4279__auto__) {
  return cljs.core._write.call(null, writer__4279__auto__, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.__GT_TestContext = function __GT_TestContext(test_env, test_name) {
  return new cemerick.cljs.test.TestContext(test_env, test_name);
};
cemerick.cljs.test.map__GT_TestContext = function map__GT_TestContext(G__15251) {
  return new cemerick.cljs.test.TestContext((new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(G__15251), (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(G__15251), null, cljs.core.dissoc.call(null, G__15251, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), new cljs.core.Keyword(null, "test-name", "test-name", -675595913)));
};
cemerick.cljs.test.maybe_deref = function maybe_deref(x) {
  if (function() {
    var G__15258 = x;
    if (G__15258) {
      var bit__4312__auto__ = G__15258.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4312__auto__ || G__15258.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__15258.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__15258);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__15258);
    }
  }()) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cemerick.cljs.test.testing_complete_QMARK_ = function testing_complete_QMARK_(test_env) {
  var map__15260 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__15260__$1 = cljs.core.seq_QMARK_.call(null, map__15260) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15260) : map__15260;
  var remaining = cljs.core.get.call(null, map__15260__$1, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312));
  var running = cljs.core.get.call(null, map__15260__$1, new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558));
  var async = cljs.core.get.call(null, map__15260__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var and__3636__auto__ = cljs.core.empty_QMARK_.call(null, remaining);
  if (and__3636__auto__) {
    var and__3636__auto____$1 = cljs.core.empty_QMARK_.call(null, running);
    if (and__3636__auto____$1) {
      var or__3648__auto__ = async == null;
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        return testing_complete_QMARK_.call(null, async);
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
cemerick.cljs.test.on_async_progress = function on_async_progress(test_env, callback) {
  if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env))) {
    setTimeout(function() {
      return callback.call(null, test_env);
    }, 1);
  } else {
    cljs.core.add_watch.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cemerick.cljs.test.maybe_deref.call(null, test_env)), cljs.core.gensym.call(null, "on-progress"), function(key, ref, old, new$) {
      var vec__15263 = cljs.core.map.call(null, function(p1__15261_SHARP_) {
        return cljs.core.select_keys.call(null, p1__15261_SHARP_, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test", "test", 577538877), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "error", "error", -978969032)], null));
      }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old, new$], null));
      var oldv = cljs.core.nth.call(null, vec__15263, 0, null);
      var newv = cljs.core.nth.call(null, vec__15263, 1, null);
      var complete_QMARK_ = cemerick.cljs.test.testing_complete_QMARK_.call(null, new$);
      if (cljs.core.truth_(function() {
        var or__3648__auto__ = complete_QMARK_;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, oldv, newv);
        }
      }())) {
        callback.call(null, cemerick.cljs.test.maybe_deref.call(null, test_env));
      } else {
      }
      if (cljs.core.truth_(complete_QMARK_)) {
        return cljs.core.remove_watch.call(null, ref, key);
      } else {
        return null;
      }
    });
  }
  return test_env;
};
goog.exportSymbol("cemerick.cljs.test.on_async_progress", cemerick.cljs.test.on_async_progress);
cemerick.cljs.test.on_testing_complete = function on_testing_complete(test_env, callback) {
  return cemerick.cljs.test.on_async_progress.call(null, test_env, function(test_env__$1) {
    if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env__$1))) {
      return callback.call(null, test_env__$1);
    } else {
      return null;
    }
  });
};
goog.exportSymbol("cemerick.cljs.test.on_testing_complete", cemerick.cljs.test.on_testing_complete);
cemerick.cljs.test.testing_vars_str = function testing_vars_str(p__15264) {
  var map__15266 = p__15264;
  var map__15266__$1 = cljs.core.seq_QMARK_.call(null, map__15266) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15266) : map__15266;
  var m = map__15266__$1;
  var test_name = cljs.core.get.call(null, map__15266__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
  var test_env = cljs.core.get.call(null, map__15266__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var line = cljs.core.get.call(null, map__15266__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var file = cljs.core.get.call(null, map__15266__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, function() {
    var or__3648__auto__ = cljs.core.seq.call(null, cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env))));
    if (or__3648__auto__) {
      return or__3648__auto__;
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, test_name);
    }
  }())) + " (" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(file) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(line) + ")";
};
cemerick.cljs.test.testing_contexts_str = function testing_contexts_str(test_env) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))));
};
cemerick.cljs.test.inc_report_counter = function inc_report_counter(test_env, name) {
  return cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
};
cemerick.cljs.test.report = function() {
  var method_table__4528__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4529__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4530__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4531__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4532__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("report", new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4532__auto__, method_table__4528__auto__, prefer_table__4529__auto__, method_cache__4530__auto__, cached_hierarchy__4531__auto__);
}();
cemerick.cljs.test.file_and_line = function file_and_line(error) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), error.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), error.lineNumber], null);
};
cemerick.cljs.test.do_report = function() {
  var do_report = null;
  var do_report__1 = function(m) {
    return cemerick.cljs.test.report.call(null, function() {
      var G__15271 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
      switch(G__15271) {
        case "error":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)), m);
          break;
        case "fail":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, Error()), m);
          break;
        default:
          return m;
      }
    }());
  };
  var do_report__2 = function(p__15267, m) {
    var map__15270 = p__15267;
    var map__15270__$1 = cljs.core.seq_QMARK_.call(null, map__15270) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15270) : map__15270;
    var test_ctx = map__15270__$1;
    var test_name = cljs.core.get.call(null, map__15270__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__15270__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    return do_report.call(null, cljs.core.merge.call(null, m, test_ctx));
  };
  do_report = function(p__15267, m) {
    switch(arguments.length) {
      case 1:
        return do_report__1.call(this, p__15267);
      case 2:
        return do_report__2.call(this, p__15267, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  do_report.cljs$core$IFn$_invoke$arity$1 = do_report__1;
  do_report.cljs$core$IFn$_invoke$arity$2 = do_report__2;
  return do_report;
}();
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__15273) {
  var map__15274 = p__15273;
  var map__15274__$1 = cljs.core.seq_QMARK_.call(null, map__15274) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15274) : map__15274;
  var m = map__15274__$1;
  var test_env = cljs.core.get.call(null, map__15274__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15275 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.prn.call(null, m);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15275;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "pass", "pass", 1574159993), function(p__15276) {
  var map__15277 = p__15276;
  var map__15277__$1 = cljs.core.seq_QMARK_.call(null, map__15277) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15277) : map__15277;
  var m = map__15277__$1;
  var test_env = cljs.core.get.call(null, map__15277__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15278 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15278;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "fail", "fail", 1706214930), function(p__15279) {
  var map__15280 = p__15279;
  var map__15280__$1 = cljs.core.seq_QMARK_.call(null, map__15280) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15280) : map__15280;
  var m = map__15280__$1;
  var test_env = cljs.core.get.call(null, map__15280__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15281 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
    cljs.core.println.call(null, "\nFAIL in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___15282 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___15282)) {
      var message_15283 = temp__4126__auto___15282;
      cljs.core.println.call(null, message_15283);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15281;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "error", "error", -978969032), function(p__15284) {
  var map__15285 = p__15284;
  var map__15285__$1 = cljs.core.seq_QMARK_.call(null, map__15285) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15285) : map__15285;
  var m = map__15285__$1;
  var test_env = cljs.core.get.call(null, map__15285__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15286 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "error", "error", -978969032));
    cljs.core.println.call(null, "\nERROR in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___15287 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___15287)) {
      var message_15288 = temp__4126__auto___15287;
      cljs.core.println.call(null, message_15288);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    cljs.core.print.call(null, "  actual: ");
    var actual = (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m);
    if (actual instanceof Error) {
      return cljs.core.println.call(null, actual.stack);
    } else {
      return cljs.core.prn.call(null, actual);
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15286;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), function(p__15289) {
  var map__15290 = p__15289;
  var map__15290__$1 = cljs.core.seq_QMARK_.call(null, map__15290) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15290) : map__15290;
  var m = map__15290__$1;
  var test_env = cljs.core.get.call(null, map__15290__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_15291 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709));
    cljs.core.println.call(null, "\nWARNING in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var message = temp__4126__auto__;
      return cljs.core.println.call(null, message);
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15291;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "summary", "summary", 380847952), function(p__15292) {
  var map__15293 = p__15292;
  var map__15293__$1 = cljs.core.seq_QMARK_.call(null, map__15293) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15293) : map__15293;
  var test_env = map__15293__$1;
  var error = cljs.core.get.call(null, map__15293__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__15293__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var pass = cljs.core.get.call(null, map__15293__$1, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  var test = cljs.core.get.call(null, map__15293__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var _STAR_print_fn_STAR_15294 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cljs.core.println.call(null, "\nRan", test, "tests containing", pass + fail + error, "assertions.");
    var temp__4124__auto__ = function() {
      var and__3636__auto__ = cljs.core.not.call(null, cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env));
      if (and__3636__auto__) {
        return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, cljs.core.juxt.call(null, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312), new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env)))));
      } else {
        return and__3636__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var pending_count = temp__4124__auto__;
      return cljs.core.println.call(null, "Waiting on", pending_count, "asynchronous test" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pending_count > 1 ? "s" : null) + " to complete.");
    } else {
      return cljs.core.println.call(null, "Testing complete:", fail, "failures,", error, "errors.");
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15294;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), function(p__15295) {
  var map__15296 = p__15295;
  var map__15296__$1 = cljs.core.seq_QMARK_.call(null, map__15296) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15296) : map__15296;
  var m = map__15296__$1;
  var async = cljs.core.get.call(null, map__15296__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var test_env = cljs.core.get.call(null, map__15296__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var ns = cljs.core.get.call(null, map__15296__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var _STAR_print_fn_STAR_15297 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__3648__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.println.call(null, "\nTesting", ns, cljs.core.truth_(async) ? "(async)" : "");
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15297;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), function(p__15298) {
  var map__15299 = p__15298;
  var map__15299__$1 = cljs.core.seq_QMARK_.call(null, map__15299) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15299) : map__15299;
  var m = map__15299__$1;
  var test_env = cljs.core.get.call(null, map__15299__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), function(p__15300) {
  var map__15301 = p__15300;
  var map__15301__$1 = cljs.core.seq_QMARK_.call(null, map__15301) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15301) : map__15301;
  var m = map__15301__$1;
  var test_env = cljs.core.get.call(null, map__15301__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), function(p__15302) {
  var map__15303 = p__15302;
  var map__15303__$1 = cljs.core.seq_QMARK_.call(null, map__15303) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15303) : map__15303;
  var m = map__15303__$1;
  var test_env = cljs.core.get.call(null, map__15303__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cemerick.cljs.test.register_fixtures_BANG_ = function() {
  var register_fixtures_BANG___delegate = function(ns_sym, fixture_type, fixture_fns) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_fixtures, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns_sym, fixture_type], null), cljs.core.constantly.call(null, fixture_fns));
  };
  var register_fixtures_BANG_ = function(ns_sym, fixture_type, var_args) {
    var fixture_fns = null;
    if (arguments.length > 2) {
      fixture_fns = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return register_fixtures_BANG___delegate.call(this, ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$lang$maxFixedArity = 2;
  register_fixtures_BANG_.cljs$lang$applyTo = function(arglist__15304) {
    var ns_sym = cljs.core.first(arglist__15304);
    arglist__15304 = cljs.core.next(arglist__15304);
    var fixture_type = cljs.core.first(arglist__15304);
    var fixture_fns = cljs.core.rest(arglist__15304);
    return register_fixtures_BANG___delegate(ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$core$IFn$_invoke$arity$variadic = register_fixtures_BANG___delegate;
  return register_fixtures_BANG_;
}();
cemerick.cljs.test.default_fixture = function default_fixture(f) {
  return f.call(null);
};
cemerick.cljs.test.compose_fixtures = function compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cemerick.cljs.test.join_fixtures = function join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cemerick.cljs.test.compose_fixtures, cemerick.cljs.test.default_fixture, fixtures);
};
cemerick.cljs.test.async_test_QMARK_ = function async_test_QMARK_(test_fn) {
  return cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, test_fn)));
};
cemerick.cljs.test.test_async_fn = function test_async_fn(async_test_env, test_name, test_fn) {
  cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), test_fn, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name], null));
  cemerick.cljs.test.inc_report_counter.call(null, async_test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
  return test_fn.call(null, new cemerick.cljs.test.TestContext(async_test_env, test_name));
};
cemerick.cljs.test.start_next_async_test = function start_next_async_test(async_test_env) {
  var next_test = cljs.core.atom.call(null, function() {
    return null;
  });
  cljs.core.swap_BANG_.call(null, async_test_env, function(next_test) {
    return function(env) {
      var temp__4124__auto__ = function() {
        var and__3636__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "stop", "stop", -2140911342)).cljs$core$IFn$_invoke$arity$1(env));
        if (and__3636__auto__) {
          return cljs.core.first.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(env));
        } else {
          return and__3636__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__15306 = temp__4124__auto__;
        var name = cljs.core.nth.call(null, vec__15306, 0, null);
        var testfn = cljs.core.nth.call(null, vec__15306, 1, null);
        cljs.core.reset_BANG_.call(null, next_test, testfn);
        var ns_15307 = cljs.core.namespace.call(null, name);
        if (cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, async_test_env)), ns_15307)) {
        } else {
          cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_15307, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "async", "async", 1050769601), true], null));
          cljs.core.alter_meta_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), ns_15307);
        }
        return cljs.core.update_in.call(null, cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.dissoc, name), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.assoc, 
        name, new Date);
      } else {
        return env;
      }
    };
  }(next_test));
  setTimeout(function(next_test) {
    return function() {
      return cljs.core.deref.call(null, next_test).call(null);
    };
  }(next_test), 1);
  return async_test_env;
};
cemerick.cljs.test.squelch_internals = function squelch_internals(test_env) {
  var G__15312 = test_env;
  cljs.core.swap_BANG_.call(null, G__15312, function(G__15312) {
    return function(p1__15308_SHARP_) {
      return cljs.core.reduce.call(null, function(G__15312) {
        return function(env, p__15313) {
          var vec__15314 = p__15313;
          var k = cljs.core.nth.call(null, vec__15314, 0, null);
          var v = cljs.core.nth.call(null, vec__15314, 1, null);
          if (cljs.core._EQ_.call(null, cljs.core.namespace.call(null, k), cljs.core.namespace.call(null, new cljs.core.Keyword("cemerick.cljs.test", "foo", "cemerick.cljs.test/foo", -1669146357)))) {
            return env;
          } else {
            return cljs.core.assoc.call(null, env, k, v);
          }
        };
      }(G__15312), cljs.core.PersistentArrayMap.EMPTY, p1__15308_SHARP_);
    };
  }(G__15312));
  return G__15312;
};
cemerick.cljs.test.finish_test_entry_point = function finish_test_entry_point(entry_point_QMARK_, test_env) {
  if (cljs.core.truth_(entry_point_QMARK_)) {
    if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))))) {
      cljs.core.swap_BANG_.call(null, test_env, cljs.core.dissoc, new cljs.core.Keyword(null, "async", "async", 1050769601));
    } else {
      cemerick.cljs.test.start_next_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)));
    }
    return cljs.core.deref.call(null, cemerick.cljs.test.squelch_internals.call(null, test_env));
  } else {
    return test_env;
  }
};
cemerick.cljs.test.schedule_async_test = function schedule_async_test(async_test_env, test_name, test_fn) {
  cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.fnil.call(null, cljs.core.assoc, cljs.core.sorted_map.call(null)), test_name, cljs.core.with_meta.call(null, function() {
    return cemerick.cljs.test.test_async_fn.call(null, async_test_env, test_name, test_fn);
  }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), test_name], null)));
  return async_test_env;
};
cemerick.cljs.test.done_STAR_ = function() {
  var done_STAR_ = null;
  var done_STAR___1 = function(p__15316) {
    var map__15320 = p__15316;
    var map__15320__$1 = cljs.core.seq_QMARK_.call(null, map__15320) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15320) : map__15320;
    var test_ctx = map__15320__$1;
    var test_name = cljs.core.get.call(null, map__15320__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var async_test_env = cljs.core.get.call(null, map__15320__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    var first_call_QMARK_ = cljs.core.atom.call(null, false);
    cljs.core.swap_BANG_.call(null, async_test_env, function(first_call_QMARK_, map__15320, map__15320__$1, test_ctx, test_name, async_test_env) {
      return function(env) {
        cljs.core.reset_BANG_.call(null, first_call_QMARK_, cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).cljs$core$IFn$_invoke$arity$1(env), test_name));
        return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.dissoc, test_name);
      };
    }(first_call_QMARK_, map__15320, map__15320__$1, test_ctx, test_name, async_test_env));
    if (cljs.core.truth_(cljs.core.deref.call(null, first_call_QMARK_))) {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), test_name], null), test_ctx));
      if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, async_test_env))) {
        cemerick.cljs.test.squelch_internals.call(null, async_test_env);
      } else {
        cemerick.cljs.test.start_next_async_test.call(null, async_test_env);
      }
    } else {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), new cljs.core.Keyword(null, "message", "message", -406056002), "`(done)` called multiple times to signal end-of-test"], null), test_ctx));
    }
    return async_test_env;
  };
  var done_STAR___2 = function(p__15315, error) {
    var map__15319 = p__15315;
    var map__15319__$1 = cljs.core.seq_QMARK_.call(null, map__15319) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15319) : map__15319;
    var test_ctx = map__15319__$1;
    var test_name = cljs.core.get.call(null, map__15319__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__15319__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null)))));
    }
    cemerick.cljs.test.do_report.call(null, cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), 
    error], null), test_ctx)));
    return done_STAR_.call(null, test_ctx);
  };
  done_STAR_ = function(p__15315, error) {
    switch(arguments.length) {
      case 1:
        return done_STAR___1.call(this, p__15315);
      case 2:
        return done_STAR___2.call(this, p__15315, error);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  done_STAR_.cljs$core$IFn$_invoke$arity$1 = done_STAR___1;
  done_STAR_.cljs$core$IFn$_invoke$arity$2 = done_STAR___2;
  return done_STAR_;
}();
cemerick.cljs.test.stop = function stop(async_test_env) {
  return cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.assoc, new cljs.core.Keyword(null, "stop", "stop", -2140911342), true);
};
cemerick.cljs.test.test_function = function() {
  var test_function = null;
  var test_function__1 = function(v) {
    return test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), v);
  };
  var test_function__2 = function(test_env, v) {
    var entry_point_QMARK___11355__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15324 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      if (cljs.core.fn_QMARK_.call(null, v)) {
      } else {
        throw new Error("Assert failed: test-var must be passed the function to be tested (not a symbol naming it)\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)))));
      }
      var map__15325_15327 = cljs.core.meta.call(null, v);
      var map__15325_15328__$1 = cljs.core.seq_QMARK_.call(null, map__15325_15327) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15325_15327) : map__15325_15327;
      var t_15329 = cljs.core.get.call(null, map__15325_15328__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
      var test_name_15330 = cljs.core.get.call(null, map__15325_15328__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var async_QMARK__15331 = cljs.core.get.call(null, map__15325_15328__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
      if (cljs.core.truth_(t_15329)) {
        if (cljs.core.truth_(async_QMARK__15331)) {
          cemerick.cljs.test.schedule_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), test_name_15330, t_15329);
        } else {
          try {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.conj, function() {
              var or__3648__auto__ = test_name_15330;
              if (cljs.core.truth_(or__3648__auto__)) {
                return or__3648__auto__;
              } else {
                return v;
              }
            }());
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_15330], null));
            cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
            try {
              t_15329.call(null, new cemerick.cljs.test.TestContext(test_env, test_name_15330));
            } catch (e15326) {
              if (e15326 instanceof Error) {
                var e_15332 = e15326;
                cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_15330, new cljs.core.Keyword(null, 
                "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e_15332], null));
              } else {
                throw e15326;
              }
            }
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_15330], null));
          } finally {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.pop);
          }
        }
      } else {
      }
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11355__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15324;
    }
  };
  test_function = function(test_env, v) {
    switch(arguments.length) {
      case 1:
        return test_function__1.call(this, test_env);
      case 2:
        return test_function__2.call(this, test_env, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_function.cljs$core$IFn$_invoke$arity$1 = test_function__1;
  test_function.cljs$core$IFn$_invoke$arity$2 = test_function__2;
  return test_function;
}();
cemerick.cljs.test.test_all_vars = function() {
  var test_all_vars = null;
  var test_all_vars__1 = function(ns_sym) {
    return test_all_vars.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_all_vars__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___11355__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15341 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var tests_15346 = cljs.core.filter.call(null, function(_STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__) {
        return function(p1__15333_SHARP_) {
          return(new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__15333_SHARP_));
        };
      }(_STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__), cljs.core.vals.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests), ns_sym)));
      var once_fixture_fn_15347 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "once", "once", -262568523)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      var each_fixture_fn_15348 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "each", "each", 940016129)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      once_fixture_fn_15347.call(null, function(once_fixture_fn_15347, each_fixture_fn_15348, tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__) {
        return function() {
          var seq__15342 = cljs.core.seq.call(null, cljs.core.remove.call(null, cemerick.cljs.test.async_test_QMARK_, tests_15346));
          var chunk__15343 = null;
          var count__15344 = 0;
          var i__15345 = 0;
          while (true) {
            if (i__15345 < count__15344) {
              var v = cljs.core._nth.call(null, chunk__15343, i__15345);
              each_fixture_fn_15348.call(null, function(seq__15342, chunk__15343, count__15344, i__15345, v, once_fixture_fn_15347, each_fixture_fn_15348, tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__) {
                return function() {
                  return cemerick.cljs.test.test_function.call(null, test_env, v);
                };
              }(seq__15342, chunk__15343, count__15344, i__15345, v, once_fixture_fn_15347, each_fixture_fn_15348, tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__));
              var G__15349 = seq__15342;
              var G__15350 = chunk__15343;
              var G__15351 = count__15344;
              var G__15352 = i__15345 + 1;
              seq__15342 = G__15349;
              chunk__15343 = G__15350;
              count__15344 = G__15351;
              i__15345 = G__15352;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__15342);
              if (temp__4126__auto__) {
                var seq__15342__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__15342__$1)) {
                  var c__4418__auto__ = cljs.core.chunk_first.call(null, seq__15342__$1);
                  var G__15353 = cljs.core.chunk_rest.call(null, seq__15342__$1);
                  var G__15354 = c__4418__auto__;
                  var G__15355 = cljs.core.count.call(null, c__4418__auto__);
                  var G__15356 = 0;
                  seq__15342 = G__15353;
                  chunk__15343 = G__15354;
                  count__15344 = G__15355;
                  i__15345 = G__15356;
                  continue;
                } else {
                  var v = cljs.core.first.call(null, seq__15342__$1);
                  each_fixture_fn_15348.call(null, function(seq__15342, chunk__15343, count__15344, i__15345, v, seq__15342__$1, temp__4126__auto__, once_fixture_fn_15347, each_fixture_fn_15348, tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__) {
                    return function() {
                      return cemerick.cljs.test.test_function.call(null, test_env, v);
                    };
                  }(seq__15342, chunk__15343, count__15344, i__15345, v, seq__15342__$1, temp__4126__auto__, once_fixture_fn_15347, each_fixture_fn_15348, tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__));
                  var G__15357 = cljs.core.next.call(null, seq__15342__$1);
                  var G__15358 = null;
                  var G__15359 = 0;
                  var G__15360 = 0;
                  seq__15342 = G__15357;
                  chunk__15343 = G__15358;
                  count__15344 = G__15359;
                  i__15345 = G__15360;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(once_fixture_fn_15347, each_fixture_fn_15348, tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__));
      cljs.core.reduce.call(null, function(tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__) {
        return function(p1__15334_SHARP_, p2__15335_SHARP_) {
          return cljs.core.apply.call(null, cemerick.cljs.test.schedule_async_test, p1__15334_SHARP_, p2__15335_SHARP_);
        };
      }(tests_15346, _STAR_entry_point_STAR_15341, entry_point_QMARK___11355__auto__), (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.juxt.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "test", "test", 577538877)), cljs.core.meta), cljs.core.filter.call(null, cemerick.cljs.test.async_test_QMARK_, tests_15346)));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11355__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15341;
    }
  };
  test_all_vars = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_all_vars__1.call(this, test_env);
      case 2:
        return test_all_vars__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_all_vars.cljs$core$IFn$_invoke$arity$1 = test_all_vars__1;
  test_all_vars.cljs$core$IFn$_invoke$arity$2 = test_all_vars__2;
  return test_all_vars;
}();
cemerick.cljs.test.test_ns = function() {
  var test_ns = null;
  var test_ns__1 = function(ns_sym) {
    return test_ns.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_ns__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___11355__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15362 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      var temp__4124__auto___15363 = cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_test_hooks), ns_sym);
      if (cljs.core.truth_(temp__4124__auto___15363)) {
        var test_hook_15364 = temp__4124__auto___15363;
        test_hook_15364.call(null, test_env);
      } else {
        cemerick.cljs.test.test_all_vars.call(null, test_env, ns_sym);
      }
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11355__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15362;
    }
  };
  test_ns = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_ns__1.call(this, test_env);
      case 2:
        return test_ns__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_ns.cljs$core$IFn$_invoke$arity$1 = test_ns__1;
  test_ns.cljs$core$IFn$_invoke$arity$2 = test_ns__2;
  return test_ns;
}();
cemerick.cljs.test.test_summary = function test_summary(test_env) {
  var test_env__$1 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  return cemerick.cljs.test.do_report.call(null, cljs.core.assoc.call(null, cljs.core.merge_with.call(null, cljs.core._PLUS_, test_env__$1, cemerick.cljs.test.maybe_deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env__$1))), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952)));
};
cemerick.cljs.test.run_tests_STAR_ = function() {
  var run_tests_STAR___delegate = function(namespaces) {
    var vec__15371 = cljs.core.first.call(null, namespaces) instanceof cljs.core.Atom ? namespaces : cljs.core.cons.call(null, cemerick.cljs.test.init_test_environment.call(null), namespaces);
    var test_env = cljs.core.nth.call(null, vec__15371, 0, null);
    var namespaces__$1 = cljs.core.nthnext.call(null, vec__15371, 1);
    var entry_point_QMARK___11355__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_15372 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var seq__15373_15377 = cljs.core.seq.call(null, cljs.core.distinct.call(null, namespaces__$1));
      var chunk__15374_15378 = null;
      var count__15375_15379 = 0;
      var i__15376_15380 = 0;
      while (true) {
        if (i__15376_15380 < count__15375_15379) {
          var ns_15381 = cljs.core._nth.call(null, chunk__15374_15378, i__15376_15380);
          cemerick.cljs.test.test_ns.call(null, test_env, ns_15381);
          var G__15382 = seq__15373_15377;
          var G__15383 = chunk__15374_15378;
          var G__15384 = count__15375_15379;
          var G__15385 = i__15376_15380 + 1;
          seq__15373_15377 = G__15382;
          chunk__15374_15378 = G__15383;
          count__15375_15379 = G__15384;
          i__15376_15380 = G__15385;
          continue;
        } else {
          var temp__4126__auto___15386 = cljs.core.seq.call(null, seq__15373_15377);
          if (temp__4126__auto___15386) {
            var seq__15373_15387__$1 = temp__4126__auto___15386;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15373_15387__$1)) {
              var c__4418__auto___15388 = cljs.core.chunk_first.call(null, seq__15373_15387__$1);
              var G__15389 = cljs.core.chunk_rest.call(null, seq__15373_15387__$1);
              var G__15390 = c__4418__auto___15388;
              var G__15391 = cljs.core.count.call(null, c__4418__auto___15388);
              var G__15392 = 0;
              seq__15373_15377 = G__15389;
              chunk__15374_15378 = G__15390;
              count__15375_15379 = G__15391;
              i__15376_15380 = G__15392;
              continue;
            } else {
              var ns_15393 = cljs.core.first.call(null, seq__15373_15387__$1);
              cemerick.cljs.test.test_ns.call(null, test_env, ns_15393);
              var G__15394 = cljs.core.next.call(null, seq__15373_15387__$1);
              var G__15395 = null;
              var G__15396 = 0;
              var G__15397 = 0;
              seq__15373_15377 = G__15394;
              chunk__15374_15378 = G__15395;
              count__15375_15379 = G__15396;
              i__15376_15380 = G__15397;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cemerick.cljs.test.on_testing_complete.call(null, test_env, cemerick.cljs.test.test_summary);
      cemerick.cljs.test.test_summary.call(null, test_env);
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___11355__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_15372;
    }
  };
  var run_tests_STAR_ = function(var_args) {
    var namespaces = null;
    if (arguments.length > 0) {
      namespaces = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return run_tests_STAR___delegate.call(this, namespaces);
  };
  run_tests_STAR_.cljs$lang$maxFixedArity = 0;
  run_tests_STAR_.cljs$lang$applyTo = function(arglist__15398) {
    var namespaces = cljs.core.seq(arglist__15398);
    return run_tests_STAR___delegate(namespaces);
  };
  run_tests_STAR_.cljs$core$IFn$_invoke$arity$variadic = run_tests_STAR___delegate;
  return run_tests_STAR_;
}();
goog.exportSymbol("cemerick.cljs.test.run_tests_STAR_", cemerick.cljs.test.run_tests_STAR_);
cemerick.cljs.test.run_all_tests = function() {
  var run_all_tests = null;
  var run_all_tests__0 = function() {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests)));
  };
  var run_all_tests__1 = function(re) {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.filter.call(null, function(p1__15399_SHARP_) {
      return cljs.core.re_matches.call(null, re, cljs.core.name.call(null, p1__15399_SHARP_));
    }, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests))));
  };
  run_all_tests = function(re) {
    switch(arguments.length) {
      case 0:
        return run_all_tests__0.call(this);
      case 1:
        return run_all_tests__1.call(this, re);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run_all_tests.cljs$core$IFn$_invoke$arity$0 = run_all_tests__0;
  run_all_tests.cljs$core$IFn$_invoke$arity$1 = run_all_tests__1;
  return run_all_tests;
}();
goog.exportSymbol("cemerick.cljs.test.run_all_tests", cemerick.cljs.test.run_all_tests);
cemerick.cljs.test.successful_QMARK_ = function successful_QMARK_(test_env) {
  var map__15401 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__15401__$1 = cljs.core.seq_QMARK_.call(null, map__15401) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15401) : map__15401;
  var async = cljs.core.get.call(null, map__15401__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var error = cljs.core.get.call(null, map__15401__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__15401__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var and__3636__auto__ = cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env);
  if (cljs.core.truth_(and__3636__auto__)) {
    var and__3636__auto____$1 = function() {
      var or__3648__auto__ = fail;
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }() === 0;
    if (and__3636__auto____$1) {
      var and__3636__auto____$2 = function() {
        var or__3648__auto__ = error;
        if (cljs.core.truth_(or__3648__auto__)) {
          return or__3648__auto__;
        } else {
          return 0;
        }
      }() === 0;
      if (and__3636__auto____$2) {
        var or__3648__auto__ = async == null;
        if (or__3648__auto__) {
          return or__3648__auto__;
        } else {
          return successful_QMARK_.call(null, async);
        }
      } else {
        return and__3636__auto____$2;
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
goog.exportSymbol("cemerick.cljs.test.successful_QMARK_", cemerick.cljs.test.successful_QMARK_);
cemerick.cljs.test.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
goog.exportSymbol("cemerick.cljs.test.set_print_fn_BANG_", cemerick.cljs.test.set_print_fn_BANG_);
goog.provide("testt");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cemerick.cljs.test");
goog.require("cemerick.cljs.test");
testt.somewhat_less_wat = function somewhat_less_wat() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.somewhat_less_wat);
};
testt.somewhat_less_wat = cljs.core.with_meta.call(null, testt.somewhat_less_wat, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 11, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 11, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 29, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 11, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 11, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function somewhat_less_wat_test(test_ctx__11318__auto__) {
  var _test_ctx = test_ctx__11318__auto__;
  var async_QMARK___11233__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_11490 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11233__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___11233__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_11492 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11233__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__11253__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.PersistentArrayMap.EMPTY + cljs.core.PersistentVector.EMPTY), "{}[]");
            var result__11254__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__11253__auto__);
            if (result__11254__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__11254__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11253__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11253__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__11254__auto__;
          } catch (e11494) {
            if (e11494 instanceof Error) {
              var t__11290__auto__ = e11494;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), "{}[]", cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentVector.EMPTY)), 
              new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11290__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e11494;
            }
          }
        } catch (e11493) {
          if (e11493 instanceof Error) {
            var e__11234__auto__ = e11493;
            if (cljs.core.truth_(async_QMARK___11233__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11234__auto__);
            } else {
              throw e__11234__auto__;
            }
          } else {
            throw e11493;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11492;
      }
    } catch (e11491) {
      if (e11491 instanceof Error) {
        var e__11234__auto__ = e11491;
        if (cljs.core.truth_(async_QMARK___11233__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11234__auto__);
        } else {
          throw e__11234__auto__;
        }
      } else {
        throw e11491;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11490;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "somewhat-less-wat", "testt/somewhat-less-wat", -231905664, null), testt.somewhat_less_wat);
testt.javascript_allows_div0 = function javascript_allows_div0() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), testt.javascript_allows_div0);
};
testt.javascript_allows_div0 = cljs.core.with_meta.call(null, testt.javascript_allows_div0, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 15, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 15, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 15, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, 
"line", "line", 212345235), 15, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function javascript_allows_div0_test(test_ctx__11318__auto__) {
  var _test_ctx = test_ctx__11318__auto__;
  var async_QMARK___11233__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_11500 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11233__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___11233__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_11502 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11233__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__11253__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (1 | 0) / (0 | 0)), 1 / 0), Infinity);
            var result__11254__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__11253__auto__);
            if (result__11254__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__11254__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11253__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, 
              null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11253__auto__)), 
              new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            }
            return result__11254__auto__;
          } catch (e11504) {
            if (e11504 instanceof Error) {
              var t__11290__auto__ = e11504;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol("js", "Infinity", "js/Infinity", 2039810812, null), cljs.core.list(new cljs.core.Symbol(null, "/", "/", 
              -1371932971, null), 1, 0), cljs.core.list(new cljs.core.Symbol(null, "/", "/", -1371932971, null), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 1), cljs.core.list(new cljs.core.Symbol(null, "int", "int", -100885395, null), 0))), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11290__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
            } else {
              throw e11504;
            }
          }
        } catch (e11503) {
          if (e11503 instanceof Error) {
            var e__11234__auto__ = e11503;
            if (cljs.core.truth_(async_QMARK___11233__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11234__auto__);
            } else {
              throw e__11234__auto__;
            }
          } else {
            throw e11503;
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11502;
      }
    } catch (e11501) {
      if (e11501 instanceof Error) {
        var e__11234__auto__ = e11501;
        if (cljs.core.truth_(async_QMARK___11233__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11234__auto__);
        } else {
          throw e__11234__auto__;
        }
      } else {
        throw e11501;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11500;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "javascript-allows-div0", "testt/javascript-allows-div0", 1346947229, null), testt.javascript_allows_div0);
testt.pennies__GT_dollar_string = function pennies__GT_dollar_string(pennies) {
  if (cljs.core.integer_QMARK_.call(null, pennies)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "integer?", "integer?", 1303791671, null), new cljs.core.Symbol(null, "pennies", "pennies", -807392060, null)))));
  }
  return "$" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pennies / 100 | 0) + "." + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.mod.call(null, pennies, 100));
};
testt.pennies__GT_dollar_string = cljs.core.with_meta.call(null, testt.pennies__GT_dollar_string, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 19, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 19, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], 
null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 33, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 19, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, 
new cljs.core.Keyword(null, "line", "line", 212345235), 19, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/user/Buyan/app/test/test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function pennies__GT_dollar_string_test(test_ctx__11318__auto__) {
  var _test_ctx = test_ctx__11318__auto__;
  var async_QMARK___11233__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_11511 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11233__auto__) ? null : _test_ctx;
    try {
      try {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "assertions are nice");
        var _test_ctx__$1 = _test_ctx;
        var async_QMARK___11233__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
        var _STAR_test_ctx_STAR_11513 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        try {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11233__auto____$1) ? null : _test_ctx__$1;
          try {
            try {
              try {
                testt.pennies__GT_dollar_string.call(null, 564.2);
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), null, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } catch (e11516) {
                if (e11516 instanceof Error) {
                  var e__11284__auto__ = e11516;
                  var m__11285__auto___11517 = e__11284__auto__.message;
                  if (cljs.core.truth_(cljs.core.re_find.call(null, /integer?/, m__11285__auto___11517))) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__11284__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                    "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), e__11284__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                  return e__11284__auto__;
                } else {
                  throw e11516;
                }
              }
            } catch (e11515) {
              if (e11515 instanceof Error) {
                var t__11290__auto__ = e11515;
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "thrown-with-msg?", "thrown-with-msg?", 1169763203, null), new cljs.core.Symbol("js", "Error", "js/Error", -1692659266, null), /integer?/, cljs.core.list(new cljs.core.Symbol(null, 
                "pennies-\x3edollar-string", "pennies-\x3edollar-string", 1142609118, null), 564.2)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11290__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e11515;
              }
            }
          } catch (e11514) {
            if (e11514 instanceof Error) {
              var e__11234__auto__ = e11514;
              if (cljs.core.truth_(async_QMARK___11233__auto____$1)) {
                return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11234__auto__);
              } else {
                throw e__11234__auto__;
              }
            } else {
              throw e11514;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11513;
        }
      } finally {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
      }
    } catch (e11512) {
      if (e11512 instanceof Error) {
        var e__11234__auto__ = e11512;
        if (cljs.core.truth_(async_QMARK___11233__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11234__auto__);
        } else {
          throw e__11234__auto__;
        }
      } else {
        throw e11512;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_11511;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "testt", "testt", -1437552360, null), new cljs.core.Symbol("testt", "pennies-\x3edollar-string", "testt/pennies-\x3edollar-string", 2113176316, null), testt.pennies__GT_dollar_string);
goog.provide("renderStrategy");
goog.require("cljs.core");
goog.provide("pouchDB");
goog.require("cljs.core");
pouchDB.dbase = new PouchDB("dbname");
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj14737 = {};
  return obj14737;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3636__auto__ = reader;
    if (and__3636__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4285__auto__ = reader == null ? null : reader;
    return function() {
      var or__3648__auto__ = cljs.reader.read_char[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.read_char["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3636__auto__ = reader;
    if (and__3636__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3636__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4285__auto__ = reader == null ? null : reader;
    return function() {
      var or__3648__auto__ = cljs.reader.unread[goog.typeOf(x__4285__auto__)];
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.unread["_"];
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4225__auto__, writer__4226__auto__, opt__4227__auto__) {
  return cljs.core._write.call(null, writer__4226__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3648__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3648__auto__)) {
    return or__3648__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__14738) {
    var rdr = cljs.core.first(arglist__14738);
    var msg = cljs.core.rest(arglist__14738);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3636__auto__ = !(ch === "#");
  if (and__3636__auto__) {
    var and__3636__auto____$1 = !(ch === "'");
    if (and__3636__auto____$1) {
      var and__3636__auto____$2 = !(ch === ":");
      if (and__3636__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3636__auto____$2;
      }
    } else {
      return and__3636__auto____$1;
    }
  } else {
    return and__3636__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__14739 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__14740 = cljs.reader.read_char.call(null, rdr);
      sb = G__14739;
      ch = G__14740;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__14741 = cljs.reader.read_char.call(null, rdr);
      ch = G__14741;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__14742 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__14742;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__14743 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__14743;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3648__auto__ = ch == null;
      if (or__3648__auto__) {
        return or__3648__auto__;
      } else {
        var or__3648__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3648__auto____$1) {
          return or__3648__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3648__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__14744 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__14745 = cljs.reader.read_char.call(null, reader);
      buffer = G__14744;
      ch = G__14745;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__14746 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__14747 = cljs.reader.read_char.call(null, reader);
        buffer = G__14746;
        ch = G__14747;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14748 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__14749 = cljs.reader.read_char.call(null, reader);
          buffer = G__14748;
          ch = G__14749;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__14754 = function() {
            var G__14752 = buffer;
            G__14752.append(nch);
            return G__14752;
          }();
          var G__14755 = cljs.reader.read_char.call(null, reader);
          buffer = G__14754;
          ch = G__14755;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__14756 = function() {
            var G__14753 = buffer;
            G__14753.append(ch);
            return G__14753;
          }();
          var G__14757 = cljs.reader.read_char.call(null, reader);
          buffer = G__14756;
          ch = G__14757;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__14759 = o;
    if (G__14759) {
      var bit__4312__auto__ = G__14759.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4312__auto__ || G__14759.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14759.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14759);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14759);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__14760 = reader;
        var G__14761 = eof_is_error;
        var G__14762 = sentinel;
        var G__14763 = is_recursive;
        reader = G__14760;
        eof_is_error = G__14761;
        sentinel = G__14762;
        is_recursive = G__14763;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__14764 = cljs.reader.read_comment.call(null, reader, ch);
          var G__14765 = eof_is_error;
          var G__14766 = sentinel;
          var G__14767 = is_recursive;
          reader = G__14764;
          eof_is_error = G__14765;
          sentinel = G__14766;
          is_recursive = G__14767;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__14768 = reader;
            var G__14769 = eof_is_error;
            var G__14770 = sentinel;
            var G__14771 = is_recursive;
            reader = G__14768;
            eof_is_error = G__14769;
            sentinel = G__14770;
            is_recursive = G__14771;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__14772 = b.append("0");
          b = G__14772;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__14774 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__14774, 0, null);
  var years = cljs.core.nth.call(null, vec__14774, 1, null);
  var months = cljs.core.nth.call(null, vec__14774, 2, null);
  var days = cljs.core.nth.call(null, vec__14774, 3, null);
  var hours = cljs.core.nth.call(null, vec__14774, 4, null);
  var minutes = cljs.core.nth.call(null, vec__14774, 5, null);
  var seconds = cljs.core.nth.call(null, vec__14774, 6, null);
  var fraction = cljs.core.nth.call(null, vec__14774, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__14774, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__14774, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__14774, 10, null);
  var v = vec__14774;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3648__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3648__auto__)) {
        return or__3648__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__14776 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__14776, 0, null);
    var months = cljs.core.nth.call(null, vec__14776, 1, null);
    var days = cljs.core.nth.call(null, vec__14776, 2, null);
    var hours = cljs.core.nth.call(null, vec__14776, 3, null);
    var minutes = cljs.core.nth.call(null, vec__14776, 4, null);
    var seconds = cljs.core.nth.call(null, vec__14776, 5, null);
    var ms = cljs.core.nth.call(null, vec__14776, 6, null);
    var offset = cljs.core.nth.call(null, vec__14776, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__14789_14801 = cljs.core.seq.call(null, form);
    var chunk__14790_14802 = null;
    var count__14791_14803 = 0;
    var i__14792_14804 = 0;
    while (true) {
      if (i__14792_14804 < count__14791_14803) {
        var x_14805 = cljs.core._nth.call(null, chunk__14790_14802, i__14792_14804);
        arr.push(x_14805);
        var G__14806 = seq__14789_14801;
        var G__14807 = chunk__14790_14802;
        var G__14808 = count__14791_14803;
        var G__14809 = i__14792_14804 + 1;
        seq__14789_14801 = G__14806;
        chunk__14790_14802 = G__14807;
        count__14791_14803 = G__14808;
        i__14792_14804 = G__14809;
        continue;
      } else {
        var temp__4126__auto___14810 = cljs.core.seq.call(null, seq__14789_14801);
        if (temp__4126__auto___14810) {
          var seq__14789_14811__$1 = temp__4126__auto___14810;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14789_14811__$1)) {
            var c__4418__auto___14812 = cljs.core.chunk_first.call(null, seq__14789_14811__$1);
            var G__14813 = cljs.core.chunk_rest.call(null, seq__14789_14811__$1);
            var G__14814 = c__4418__auto___14812;
            var G__14815 = cljs.core.count.call(null, c__4418__auto___14812);
            var G__14816 = 0;
            seq__14789_14801 = G__14813;
            chunk__14790_14802 = G__14814;
            count__14791_14803 = G__14815;
            i__14792_14804 = G__14816;
            continue;
          } else {
            var x_14817 = cljs.core.first.call(null, seq__14789_14811__$1);
            arr.push(x_14817);
            var G__14818 = cljs.core.next.call(null, seq__14789_14811__$1);
            var G__14819 = null;
            var G__14820 = 0;
            var G__14821 = 0;
            seq__14789_14801 = G__14818;
            chunk__14790_14802 = G__14819;
            count__14791_14803 = G__14820;
            i__14792_14804 = G__14821;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj14794 = {};
        return obj14794;
      }();
      var seq__14795_14822 = cljs.core.seq.call(null, form);
      var chunk__14796_14823 = null;
      var count__14797_14824 = 0;
      var i__14798_14825 = 0;
      while (true) {
        if (i__14798_14825 < count__14797_14824) {
          var vec__14799_14826 = cljs.core._nth.call(null, chunk__14796_14823, i__14798_14825);
          var k_14827 = cljs.core.nth.call(null, vec__14799_14826, 0, null);
          var v_14828 = cljs.core.nth.call(null, vec__14799_14826, 1, null);
          obj[cljs.core.name.call(null, k_14827)] = v_14828;
          var G__14829 = seq__14795_14822;
          var G__14830 = chunk__14796_14823;
          var G__14831 = count__14797_14824;
          var G__14832 = i__14798_14825 + 1;
          seq__14795_14822 = G__14829;
          chunk__14796_14823 = G__14830;
          count__14797_14824 = G__14831;
          i__14798_14825 = G__14832;
          continue;
        } else {
          var temp__4126__auto___14833 = cljs.core.seq.call(null, seq__14795_14822);
          if (temp__4126__auto___14833) {
            var seq__14795_14834__$1 = temp__4126__auto___14833;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14795_14834__$1)) {
              var c__4418__auto___14835 = cljs.core.chunk_first.call(null, seq__14795_14834__$1);
              var G__14836 = cljs.core.chunk_rest.call(null, seq__14795_14834__$1);
              var G__14837 = c__4418__auto___14835;
              var G__14838 = cljs.core.count.call(null, c__4418__auto___14835);
              var G__14839 = 0;
              seq__14795_14822 = G__14836;
              chunk__14796_14823 = G__14837;
              count__14797_14824 = G__14838;
              i__14798_14825 = G__14839;
              continue;
            } else {
              var vec__14800_14840 = cljs.core.first.call(null, seq__14795_14834__$1);
              var k_14841 = cljs.core.nth.call(null, vec__14800_14840, 0, null);
              var v_14842 = cljs.core.nth.call(null, vec__14800_14840, 1, null);
              obj[cljs.core.name.call(null, k_14841)] = v_14842;
              var G__14843 = cljs.core.next.call(null, seq__14795_14834__$1);
              var G__14844 = null;
              var G__14845 = 0;
              var G__14846 = 0;
              seq__14795_14822 = G__14843;
              chunk__14796_14823 = G__14844;
              count__14797_14824 = G__14845;
              i__14798_14825 = G__14846;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("servant.worker");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
servant.worker.worker_fn_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
servant.worker.register_servant_fn = function register_servant_fn(fn_name, f) {
  return cljs.core.swap_BANG_.call(null, servant.worker.worker_fn_map, cljs.core.assoc, cljs.core.keyword.call(null, fn_name), f);
};
servant.worker.run_function_name = function run_function_name(message_data) {
  var fn_key = cljs.reader.read_string.call(null, message_data["fn"]);
  var f = cljs.core.get.call(null, cljs.core.deref.call(null, servant.worker.worker_fn_map), fn_key);
  var args = message_data["args"];
  return cljs.core.apply.call(null, f, args);
};
servant.worker.post_array_buffer = function post_array_buffer(p__14727) {
  var vec__14729 = p__14727;
  var result = cljs.core.nth.call(null, vec__14729, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__14729, 1, null);
  return self.postMessage(result, cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.worker.decode_message = function decode_message(event) {
  var pred__14733 = cljs.core._EQ_;
  var expr__14734 = event.data["command"];
  if (cljs.core.truth_(pred__14733.call(null, "channel", expr__14734))) {
    return self.postMessage(servant.worker.run_function_name.call(null, event.data));
  } else {
    if (cljs.core.truth_(pred__14733.call(null, "channel-arraybuffer", expr__14734))) {
      return servant.worker.post_array_buffer.call(null, servant.worker.run_function_name.call(null, event.data));
    } else {
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__14734));
    }
  }
};
servant.worker.bootstrap = function bootstrap() {
  return self.onmessage = servant.worker.decode_message;
};
goog.provide("servant.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("cljs.core.async");
servant.core.webworker_QMARK_ = function webworker_QMARK_() {
  return void 0 === self.document;
};
servant.core.not_webworker_QMARK_ = cljs.core.complement.call(null, servant.core.webworker_QMARK_);
servant.core.spawn_servants = function spawn_servants(worker_count, worker_script) {
  var servant_channel = cljs.core.async.chan.call(null, worker_count);
  var c__5710__auto___14997 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___14997, servant_channel) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___14997, servant_channel) {
          return function(state_14968) {
            var state_val_14969 = state_14968[1];
            if (state_val_14969 === 7) {
              var inst_14931 = state_14968[5];
              var inst_14929 = state_14968[6];
              var inst_14928 = state_14968[7];
              var inst_14930 = state_14968[8];
              var inst_14939 = state_14968[2];
              var inst_14940 = inst_14931 + 1;
              var tmp14970 = inst_14929;
              var tmp14971 = inst_14928;
              var tmp14972 = inst_14930;
              var inst_14928__$1 = tmp14971;
              var inst_14929__$1 = tmp14970;
              var inst_14930__$1 = tmp14972;
              var inst_14931__$1 = inst_14940;
              var state_14968__$1 = function() {
                var statearr_14973 = state_14968;
                statearr_14973[9] = inst_14939;
                statearr_14973[5] = inst_14931__$1;
                statearr_14973[6] = inst_14929__$1;
                statearr_14973[7] = inst_14928__$1;
                statearr_14973[8] = inst_14930__$1;
                return statearr_14973;
              }();
              var statearr_14974_14998 = state_14968__$1;
              statearr_14974_14998[2] = null;
              statearr_14974_14998[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14969 === 1) {
                var inst_14926 = cljs.core.range.call(null, worker_count);
                var inst_14927 = cljs.core.seq.call(null, inst_14926);
                var inst_14928 = inst_14927;
                var inst_14929 = null;
                var inst_14930 = 0;
                var inst_14931 = 0;
                var state_14968__$1 = function() {
                  var statearr_14975 = state_14968;
                  statearr_14975[5] = inst_14931;
                  statearr_14975[6] = inst_14929;
                  statearr_14975[7] = inst_14928;
                  statearr_14975[8] = inst_14930;
                  return statearr_14975;
                }();
                var statearr_14976_14999 = state_14968__$1;
                statearr_14976_14999[2] = null;
                statearr_14976_14999[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14969 === 4) {
                  var inst_14931 = state_14968[5];
                  var inst_14929 = state_14968[6];
                  var inst_14936 = cljs.core._nth.call(null, inst_14929, inst_14931);
                  var inst_14937 = new Worker(worker_script);
                  var state_14968__$1 = function() {
                    var statearr_14977 = state_14968;
                    statearr_14977[10] = inst_14936;
                    return statearr_14977;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14968__$1, 7, servant_channel, inst_14937);
                } else {
                  if (state_val_14969 === 13) {
                    var inst_14959 = state_14968[2];
                    var state_14968__$1 = state_14968;
                    var statearr_14978_15000 = state_14968__$1;
                    statearr_14978_15000[2] = inst_14959;
                    statearr_14978_15000[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14969 === 6) {
                      var inst_14964 = state_14968[2];
                      var state_14968__$1 = state_14968;
                      var statearr_14979_15001 = state_14968__$1;
                      statearr_14979_15001[2] = inst_14964;
                      statearr_14979_15001[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14969 === 3) {
                        var inst_14966 = state_14968[2];
                        var state_14968__$1 = state_14968;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14968__$1, inst_14966);
                      } else {
                        if (state_val_14969 === 12) {
                          var inst_14943 = state_14968[11];
                          var inst_14952 = cljs.core.first.call(null, inst_14943);
                          var inst_14953 = new Worker(worker_script);
                          var state_14968__$1 = function() {
                            var statearr_14980 = state_14968;
                            statearr_14980[12] = inst_14952;
                            return statearr_14980;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14968__$1, 14, servant_channel, inst_14953);
                        } else {
                          if (state_val_14969 === 2) {
                            var inst_14931 = state_14968[5];
                            var inst_14930 = state_14968[8];
                            var inst_14933 = inst_14931 < inst_14930;
                            var inst_14934 = inst_14933;
                            var state_14968__$1 = state_14968;
                            if (cljs.core.truth_(inst_14934)) {
                              var statearr_14981_15002 = state_14968__$1;
                              statearr_14981_15002[1] = 4;
                            } else {
                              var statearr_14982_15003 = state_14968__$1;
                              statearr_14982_15003[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14969 === 11) {
                              var inst_14943 = state_14968[11];
                              var inst_14947 = cljs.core.chunk_first.call(null, inst_14943);
                              var inst_14948 = cljs.core.chunk_rest.call(null, inst_14943);
                              var inst_14949 = cljs.core.count.call(null, inst_14947);
                              var inst_14928 = inst_14948;
                              var inst_14929 = inst_14947;
                              var inst_14930 = inst_14949;
                              var inst_14931 = 0;
                              var state_14968__$1 = function() {
                                var statearr_14983 = state_14968;
                                statearr_14983[5] = inst_14931;
                                statearr_14983[6] = inst_14929;
                                statearr_14983[7] = inst_14928;
                                statearr_14983[8] = inst_14930;
                                return statearr_14983;
                              }();
                              var statearr_14984_15004 = state_14968__$1;
                              statearr_14984_15004[2] = null;
                              statearr_14984_15004[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14969 === 9) {
                                var state_14968__$1 = state_14968;
                                var statearr_14985_15005 = state_14968__$1;
                                statearr_14985_15005[2] = null;
                                statearr_14985_15005[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14969 === 5) {
                                  var inst_14943 = state_14968[11];
                                  var inst_14928 = state_14968[7];
                                  var inst_14943__$1 = cljs.core.seq.call(null, inst_14928);
                                  var state_14968__$1 = function() {
                                    var statearr_14986 = state_14968;
                                    statearr_14986[11] = inst_14943__$1;
                                    return statearr_14986;
                                  }();
                                  if (inst_14943__$1) {
                                    var statearr_14987_15006 = state_14968__$1;
                                    statearr_14987_15006[1] = 8;
                                  } else {
                                    var statearr_14988_15007 = state_14968__$1;
                                    statearr_14988_15007[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14969 === 14) {
                                    var inst_14943 = state_14968[11];
                                    var inst_14955 = state_14968[2];
                                    var inst_14956 = cljs.core.next.call(null, inst_14943);
                                    var inst_14928 = inst_14956;
                                    var inst_14929 = null;
                                    var inst_14930 = 0;
                                    var inst_14931 = 0;
                                    var state_14968__$1 = function() {
                                      var statearr_14989 = state_14968;
                                      statearr_14989[13] = inst_14955;
                                      statearr_14989[5] = inst_14931;
                                      statearr_14989[6] = inst_14929;
                                      statearr_14989[7] = inst_14928;
                                      statearr_14989[8] = inst_14930;
                                      return statearr_14989;
                                    }();
                                    var statearr_14990_15008 = state_14968__$1;
                                    statearr_14990_15008[2] = null;
                                    statearr_14990_15008[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14969 === 10) {
                                      var inst_14962 = state_14968[2];
                                      var state_14968__$1 = state_14968;
                                      var statearr_14991_15009 = state_14968__$1;
                                      statearr_14991_15009[2] = inst_14962;
                                      statearr_14991_15009[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14969 === 8) {
                                        var inst_14943 = state_14968[11];
                                        var inst_14945 = cljs.core.chunked_seq_QMARK_.call(null, inst_14943);
                                        var state_14968__$1 = state_14968;
                                        if (inst_14945) {
                                          var statearr_14992_15010 = state_14968__$1;
                                          statearr_14992_15010[1] = 11;
                                        } else {
                                          var statearr_14993_15011 = state_14968__$1;
                                          statearr_14993_15011[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto___14997, servant_channel);
        return function(switch__5697__auto__, c__5710__auto___14997, servant_channel) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_14995 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14995[0] = state_machine__5698__auto__;
              statearr_14995[1] = 1;
              return statearr_14995;
            };
            var state_machine__5698__auto____1 = function(state_14968) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_14968);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_14968) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_14968);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___14997, servant_channel);
      }();
      var state__5712__auto__ = function() {
        var statearr_14996 = f__5711__auto__.call(null);
        statearr_14996[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___14997;
        return statearr_14996;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___14997, servant_channel));
  return servant_channel;
};
servant.core.kill_servants = function kill_servants(servant_channel, worker_count) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_15133) {
            var state_val_15134 = state_15133[1];
            if (state_val_15134 === 7) {
              var inst_15095 = state_15133[5];
              var inst_15096 = state_15133[6];
              var inst_15093 = state_15133[7];
              var inst_15094 = state_15133[8];
              var inst_15103 = state_15133[2];
              var inst_15104 = inst_15103.terminate();
              var inst_15105 = inst_15096 + 1;
              var tmp15135 = inst_15095;
              var tmp15136 = inst_15093;
              var tmp15137 = inst_15094;
              var inst_15093__$1 = tmp15136;
              var inst_15094__$1 = tmp15137;
              var inst_15095__$1 = tmp15135;
              var inst_15096__$1 = inst_15105;
              var state_15133__$1 = function() {
                var statearr_15138 = state_15133;
                statearr_15138[5] = inst_15095__$1;
                statearr_15138[6] = inst_15096__$1;
                statearr_15138[7] = inst_15093__$1;
                statearr_15138[9] = inst_15104;
                statearr_15138[8] = inst_15094__$1;
                return statearr_15138;
              }();
              var statearr_15139_15162 = state_15133__$1;
              statearr_15139_15162[2] = null;
              statearr_15139_15162[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15134 === 1) {
                var inst_15091 = cljs.core.range.call(null, worker_count);
                var inst_15092 = cljs.core.seq.call(null, inst_15091);
                var inst_15093 = inst_15092;
                var inst_15094 = null;
                var inst_15095 = 0;
                var inst_15096 = 0;
                var state_15133__$1 = function() {
                  var statearr_15140 = state_15133;
                  statearr_15140[5] = inst_15095;
                  statearr_15140[6] = inst_15096;
                  statearr_15140[7] = inst_15093;
                  statearr_15140[8] = inst_15094;
                  return statearr_15140;
                }();
                var statearr_15141_15163 = state_15133__$1;
                statearr_15141_15163[2] = null;
                statearr_15141_15163[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15134 === 4) {
                  var inst_15096 = state_15133[6];
                  var inst_15094 = state_15133[8];
                  var inst_15101 = cljs.core._nth.call(null, inst_15094, inst_15096);
                  var state_15133__$1 = function() {
                    var statearr_15142 = state_15133;
                    statearr_15142[10] = inst_15101;
                    return statearr_15142;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15133__$1, 7, servant_channel);
                } else {
                  if (state_val_15134 === 13) {
                    var inst_15124 = state_15133[2];
                    var state_15133__$1 = state_15133;
                    var statearr_15143_15164 = state_15133__$1;
                    statearr_15143_15164[2] = inst_15124;
                    statearr_15143_15164[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15134 === 6) {
                      var inst_15129 = state_15133[2];
                      var state_15133__$1 = state_15133;
                      var statearr_15144_15165 = state_15133__$1;
                      statearr_15144_15165[2] = inst_15129;
                      statearr_15144_15165[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15134 === 3) {
                        var inst_15131 = state_15133[2];
                        var state_15133__$1 = state_15133;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15133__$1, inst_15131);
                      } else {
                        if (state_val_15134 === 12) {
                          var inst_15108 = state_15133[11];
                          var inst_15117 = cljs.core.first.call(null, inst_15108);
                          var state_15133__$1 = function() {
                            var statearr_15145 = state_15133;
                            statearr_15145[12] = inst_15117;
                            return statearr_15145;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15133__$1, 14, servant_channel);
                        } else {
                          if (state_val_15134 === 2) {
                            var inst_15095 = state_15133[5];
                            var inst_15096 = state_15133[6];
                            var inst_15098 = inst_15096 < inst_15095;
                            var inst_15099 = inst_15098;
                            var state_15133__$1 = state_15133;
                            if (cljs.core.truth_(inst_15099)) {
                              var statearr_15146_15166 = state_15133__$1;
                              statearr_15146_15166[1] = 4;
                            } else {
                              var statearr_15147_15167 = state_15133__$1;
                              statearr_15147_15167[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15134 === 11) {
                              var inst_15108 = state_15133[11];
                              var inst_15112 = cljs.core.chunk_first.call(null, inst_15108);
                              var inst_15113 = cljs.core.chunk_rest.call(null, inst_15108);
                              var inst_15114 = cljs.core.count.call(null, inst_15112);
                              var inst_15093 = inst_15113;
                              var inst_15094 = inst_15112;
                              var inst_15095 = inst_15114;
                              var inst_15096 = 0;
                              var state_15133__$1 = function() {
                                var statearr_15148 = state_15133;
                                statearr_15148[5] = inst_15095;
                                statearr_15148[6] = inst_15096;
                                statearr_15148[7] = inst_15093;
                                statearr_15148[8] = inst_15094;
                                return statearr_15148;
                              }();
                              var statearr_15149_15168 = state_15133__$1;
                              statearr_15149_15168[2] = null;
                              statearr_15149_15168[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15134 === 9) {
                                var state_15133__$1 = state_15133;
                                var statearr_15150_15169 = state_15133__$1;
                                statearr_15150_15169[2] = null;
                                statearr_15150_15169[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15134 === 5) {
                                  var inst_15093 = state_15133[7];
                                  var inst_15108 = state_15133[11];
                                  var inst_15108__$1 = cljs.core.seq.call(null, inst_15093);
                                  var state_15133__$1 = function() {
                                    var statearr_15151 = state_15133;
                                    statearr_15151[11] = inst_15108__$1;
                                    return statearr_15151;
                                  }();
                                  if (inst_15108__$1) {
                                    var statearr_15152_15170 = state_15133__$1;
                                    statearr_15152_15170[1] = 8;
                                  } else {
                                    var statearr_15153_15171 = state_15133__$1;
                                    statearr_15153_15171[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15134 === 14) {
                                    var inst_15108 = state_15133[11];
                                    var inst_15119 = state_15133[2];
                                    var inst_15120 = inst_15119.terminate();
                                    var inst_15121 = cljs.core.next.call(null, inst_15108);
                                    var inst_15093 = inst_15121;
                                    var inst_15094 = null;
                                    var inst_15095 = 0;
                                    var inst_15096 = 0;
                                    var state_15133__$1 = function() {
                                      var statearr_15154 = state_15133;
                                      statearr_15154[13] = inst_15120;
                                      statearr_15154[5] = inst_15095;
                                      statearr_15154[6] = inst_15096;
                                      statearr_15154[7] = inst_15093;
                                      statearr_15154[8] = inst_15094;
                                      return statearr_15154;
                                    }();
                                    var statearr_15155_15172 = state_15133__$1;
                                    statearr_15155_15172[2] = null;
                                    statearr_15155_15172[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15134 === 10) {
                                      var inst_15127 = state_15133[2];
                                      var state_15133__$1 = state_15133;
                                      var statearr_15156_15173 = state_15133__$1;
                                      statearr_15156_15173[2] = inst_15127;
                                      statearr_15156_15173[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15134 === 8) {
                                        var inst_15108 = state_15133[11];
                                        var inst_15110 = cljs.core.chunked_seq_QMARK_.call(null, inst_15108);
                                        var state_15133__$1 = state_15133;
                                        if (inst_15110) {
                                          var statearr_15157_15174 = state_15133__$1;
                                          statearr_15157_15174[1] = 11;
                                        } else {
                                          var statearr_15158_15175 = state_15133__$1;
                                          statearr_15158_15175[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_15160 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15160[0] = state_machine__5698__auto__;
              statearr_15160[1] = 1;
              return statearr_15160;
            };
            var state_machine__5698__auto____1 = function(state_15133) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_15133);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_15133) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_15133);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_15161 = f__5711__auto__.call(null);
        statearr_15161[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_15161;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
servant.core.f__GT_key = function f__GT_key(f) {
  return cljs.core.ffirst.call(null, cljs.core.filter.call(null, function(p1__15176_SHARP_) {
    return cljs.core._EQ_.call(null, f, cljs.core.second.call(null, p1__15176_SHARP_));
  }, cljs.core.deref.call(null, servant.worker.worker_fn_map)));
};
servant.core.standard_message = function standard_message(worker, fn_key, args) {
  return worker.postMessage(function() {
    var obj15180 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args)};
    return obj15180;
  }());
};
servant.core.array_buffer_message = function array_buffer_message(worker, fn_key, args) {
  var vec__15184 = args;
  var args__$1 = cljs.core.nth.call(null, vec__15184, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__15184, 1, null);
  return worker.postMessage(function() {
    var obj15186 = {"command":"channel-arraybuffer", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj15186;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.array_buffer_message_standard_reply = function array_buffer_message_standard_reply(worker, fn_key, args) {
  var vec__15190 = args;
  var args__$1 = cljs.core.nth.call(null, vec__15190, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__15190, 1, null);
  return worker.postMessage(function() {
    var obj15192 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj15192;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.servant_thread_with_key = function() {
  var servant_thread_with_key__delegate = function(servant_channel, post_message_fn, fn_key, args) {
    var out_channel = cljs.core.async.chan.call(null, 1);
    var c__5710__auto___15244 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___15244, out_channel) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto___15244, out_channel) {
            return function(state_15226) {
              var state_val_15227 = state_15226[1];
              if (state_val_15227 === 2) {
                var inst_15220 = state_15226[2];
                var inst_15221 = cljs.core.pr_str.call(null, fn_key);
                var inst_15222 = post_message_fn.call(null, inst_15220, inst_15221, args);
                var inst_15223 = function() {
                  var worker = inst_15220;
                  return function(worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel) {
                    return function(p1__15193_SHARP_) {
                      var c__5710__auto____$1 = cljs.core.async.chan.call(null, 1);
                      cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto____$1, worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel) {
                        return function() {
                          var f__5711__auto__ = function() {
                            var switch__5697__auto__ = function(c__5710__auto____$1, worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel) {
                              return function(state_15234) {
                                var state_val_15235 = state_15234[1];
                                if (state_val_15235 === 3) {
                                  var inst_15232 = state_15234[2];
                                  var state_15234__$1 = state_15234;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15234__$1, inst_15232);
                                } else {
                                  if (state_val_15235 === 2) {
                                    var inst_15230 = state_15234[2];
                                    var state_15234__$1 = function() {
                                      var statearr_15236 = state_15234;
                                      statearr_15236[5] = inst_15230;
                                      return statearr_15236;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15234__$1, 3, servant_channel, worker);
                                  } else {
                                    if (state_val_15235 === 1) {
                                      var inst_15228 = p1__15193_SHARP_.data;
                                      var state_15234__$1 = state_15234;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15234__$1, 2, out_channel, inst_15228);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              };
                            }(c__5710__auto____$1, worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel);
                            return function(switch__5697__auto__, c__5710__auto____$1, worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel) {
                              return function() {
                                var state_machine__5698__auto__ = null;
                                var state_machine__5698__auto____0 = function() {
                                  var statearr_15238 = [null, null, null, null, null, null];
                                  statearr_15238[0] = state_machine__5698__auto__;
                                  statearr_15238[1] = 1;
                                  return statearr_15238;
                                };
                                var state_machine__5698__auto____1 = function(state_15234) {
                                  while (true) {
                                    var result__5699__auto__ = switch__5697__auto__.call(null, state_15234);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__5699__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__5698__auto__ = function(state_15234) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__5698__auto____0.call(this);
                                    case 1:
                                      return state_machine__5698__auto____1.call(this, state_15234);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
                                state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
                                return state_machine__5698__auto__;
                              }();
                            }(switch__5697__auto__, c__5710__auto____$1, worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel);
                          }();
                          var state__5712__auto__ = function() {
                            var statearr_15239 = f__5711__auto__.call(null);
                            statearr_15239[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto____$1;
                            return statearr_15239;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
                        };
                      }(c__5710__auto____$1, worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel));
                      return c__5710__auto____$1;
                    };
                  }(worker, inst_15220, inst_15221, inst_15222, state_val_15227, c__5710__auto___15244, out_channel);
                }();
                var inst_15224 = inst_15220.addEventListener("message", inst_15223);
                var state_15226__$1 = function() {
                  var statearr_15240 = state_15226;
                  statearr_15240[5] = inst_15222;
                  return statearr_15240;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15226__$1, inst_15224);
              } else {
                if (state_val_15227 === 1) {
                  var state_15226__$1 = state_15226;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15226__$1, 2, servant_channel);
                } else {
                  return null;
                }
              }
            };
          }(c__5710__auto___15244, out_channel);
          return function(switch__5697__auto__, c__5710__auto___15244, out_channel) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_15242 = [null, null, null, null, null, null];
                statearr_15242[0] = state_machine__5698__auto__;
                statearr_15242[1] = 1;
                return statearr_15242;
              };
              var state_machine__5698__auto____1 = function(state_15226) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_15226);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_15226) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_15226);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto___15244, out_channel);
        }();
        var state__5712__auto__ = function() {
          var statearr_15243 = f__5711__auto__.call(null);
          statearr_15243[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___15244;
          return statearr_15243;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto___15244, out_channel));
    return out_channel;
  };
  var servant_thread_with_key = function(servant_channel, post_message_fn, fn_key, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread_with_key__delegate.call(this, servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$lang$maxFixedArity = 3;
  servant_thread_with_key.cljs$lang$applyTo = function(arglist__15245) {
    var servant_channel = cljs.core.first(arglist__15245);
    arglist__15245 = cljs.core.next(arglist__15245);
    var post_message_fn = cljs.core.first(arglist__15245);
    arglist__15245 = cljs.core.next(arglist__15245);
    var fn_key = cljs.core.first(arglist__15245);
    var args = cljs.core.rest(arglist__15245);
    return servant_thread_with_key__delegate(servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$core$IFn$_invoke$arity$variadic = servant_thread_with_key__delegate;
  return servant_thread_with_key;
}();
servant.core.servant_thread = function() {
  var servant_thread__delegate = function(servant_channel, post_message_fn, f, args) {
    return cljs.core.apply.call(null, servant.core.servant_thread_with_key, servant_channel, post_message_fn, servant.core.f__GT_key.call(null, f), args);
  };
  var servant_thread = function(servant_channel, post_message_fn, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return servant_thread__delegate.call(this, servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$lang$maxFixedArity = 3;
  servant_thread.cljs$lang$applyTo = function(arglist__15246) {
    var servant_channel = cljs.core.first(arglist__15246);
    arglist__15246 = cljs.core.next(arglist__15246);
    var post_message_fn = cljs.core.first(arglist__15246);
    arglist__15246 = cljs.core.next(arglist__15246);
    var f = cljs.core.first(arglist__15246);
    var args = cljs.core.rest(arglist__15246);
    return servant_thread__delegate(servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$core$IFn$_invoke$arity$variadic = servant_thread__delegate;
  return servant_thread;
}();
goog.provide("mining");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("servant.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("logger");
mining.hashmine = cljs.core.async.chan.call(null);
mining.hashmine.type = "workerch";
console.log("this runs in the browser");
mining.worker_count = 2;
mining.worker_script = "wrkr.js";
mining.servant_channel = servant.core.spawn_servants.call(null, mining.worker_count, mining.worker_script);
mining.mine = function mine(rootHash) {
  logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to mine %s ", rootHash);
  mining.chann = servant.core.servant_thread.call(null, mining.servant_channel, servant.core.standard_message, "none", "newjob", rootHash);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10237) {
            var state_val_10238 = state_10237[1];
            if (state_val_10238 === 2) {
              var inst_10231 = state_10237[2];
              var inst_10232 = mining.v = inst_10231;
              var inst_10233 = logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "recieved from mining", mining.v);
              var inst_10234 = JSON.parse(mining.v);
              var inst_10235 = pubsub.pub.call(null, "blockMined", inst_10234);
              var state_10237__$1 = function() {
                var statearr_10239 = state_10237;
                statearr_10239[5] = inst_10233;
                statearr_10239[6] = inst_10232;
                return statearr_10239;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10237__$1, inst_10235);
            } else {
              if (state_val_10238 === 1) {
                var inst_10229 = logger.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to wait for mining to end ");
                var state_10237__$1 = function() {
                  var statearr_10240 = state_10237;
                  statearr_10240[7] = inst_10229;
                  return statearr_10240;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10237__$1, 2, mining.chann);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10242 = [null, null, null, null, null, null, null, null];
              statearr_10242[0] = state_machine__5698__auto__;
              statearr_10242[1] = 1;
              return statearr_10242;
            };
            var state_machine__5698__auto____1 = function(state_10237) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10237);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10237) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10237);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10243 = f__5711__auto__.call(null);
        statearr_10243[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10243;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
goog.provide("plainText");
goog.require("cljs.core");
goog.provide("peerjs");
goog.require("cljs.core");
peerjs.peerParams = function() {
  var obj8910 = {"host":"localhost", "port":8E3, "key":"peerjs", "debug":false};
  return obj8910;
}();
goog.provide("servantWorkers");
goog.require("cljs.core");
goog.require("servant.worker");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("servant.core");
servantWorkers.worker_count = 2;
servantWorkers.worker_script = "wrkr.js";
servantWorkers.servant_channel = servant.core.spawn_servants.call(null, servantWorkers.worker_count, servantWorkers.worker_script);
goog.provide("database");
goog.require("cljs.core");
goog.require("pouchDB");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pouchDB");
goog.require("crypto");
goog.require("logger");
goog.require("logger");
database.onDatabaseChange = cljs.core.async.chan.call(null);
database.onDatabaseChange.type = "databaseChange";
database.update = function update(k, f) {
  logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "getting from db ", k);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8025) {
            var state_val_8026 = state_8025[1];
            if (state_val_8026 === 5) {
              var inst_8023 = state_8025[2];
              var state_8025__$1 = function() {
                var statearr_8027 = state_8025;
                statearr_8027[5] = inst_8023;
                return statearr_8027;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8025__$1, database.r);
            } else {
              if (state_val_8026 === 4) {
                var state_8025__$1 = state_8025;
                var statearr_8028_8041 = state_8025__$1;
                statearr_8028_8041[2] = database.r;
                statearr_8028_8041[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_8026 === 3) {
                  var inst_8020 = database.r.val;
                  var state_8025__$1 = state_8025;
                  var statearr_8029_8042 = state_8025__$1;
                  statearr_8029_8042[2] = inst_8020;
                  statearr_8029_8042[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_8026 === 2) {
                    var inst_8015 = state_8025[2];
                    var inst_8016 = database.r = inst_8015;
                    var inst_8017 = "got from db " + k;
                    var inst_8018 = logger.og.call(null, new cljs.core.Keyword(null, "db", "db", 993250759), inst_8017, database.r);
                    var state_8025__$1 = function() {
                      var statearr_8030 = state_8025;
                      statearr_8030[6] = inst_8016;
                      statearr_8030[7] = inst_8018;
                      return statearr_8030;
                    }();
                    if (cljs.core.truth_(database.r)) {
                      var statearr_8031_8043 = state_8025__$1;
                      statearr_8031_8043[1] = 3;
                    } else {
                      var statearr_8032_8044 = state_8025__$1;
                      statearr_8032_8044[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_8026 === 1) {
                      var inst_8009 = cljs.core.async.chan.call(null);
                      var inst_8010 = function() {
                        var c = inst_8009;
                        return function(c, inst_8009, state_val_8026, c__5710__auto__) {
                          return function(err, v) {
                            logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "about to update ", v);
                            logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "about to update err ", err);
                            if (cljs.core.truth_(v)) {
                              logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "rev ", v._rev);
                              return pouchDB.dbase.put(function() {
                                var obj8034 = {"val":f.call(null, v.val)};
                                return obj8034;
                              }(), k, v._rev, function(c, inst_8009, state_val_8026, c__5710__auto__) {
                                return function() {
                                  return null;
                                };
                              }(c, inst_8009, state_val_8026, c__5710__auto__));
                            } else {
                              return pouchDB.dbase.put(function() {
                                var obj8036 = {"val":f.call(null, v)};
                                return obj8036;
                              }(), k, function(c, inst_8009, state_val_8026, c__5710__auto__) {
                                return function() {
                                  return null;
                                };
                              }(c, inst_8009, state_val_8026, c__5710__auto__));
                            }
                          };
                        }(c, inst_8009, state_val_8026, c__5710__auto__);
                      }();
                      var inst_8011 = database.sf = inst_8010;
                      var inst_8012 = pouchDB.dbase.get(k, database.sf);
                      var inst_8013 = database.g.call(null, k);
                      var state_8025__$1 = function() {
                        var statearr_8037 = state_8025;
                        statearr_8037[8] = inst_8012;
                        statearr_8037[9] = inst_8011;
                        return statearr_8037;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8025__$1, 2, inst_8013);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8039 = [null, null, null, null, null, null, null, null, null, null];
              statearr_8039[0] = state_machine__5698__auto__;
              statearr_8039[1] = 1;
              return statearr_8039;
            };
            var state_machine__5698__auto____1 = function(state_8025) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8025);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8025) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8025);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8040 = f__5711__auto__.call(null);
        statearr_8040[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8040;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
database.g = function g(k) {
  logger.og.call(null, new cljs.core.Keyword(null, "dbget", "dbget", 1580666285), "getting from db ", k);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8089) {
            var state_val_8090 = state_8089[1];
            if (state_val_8090 === 5) {
              var inst_8087 = state_8089[2];
              var state_8089__$1 = state_8089;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8089__$1, inst_8087);
            } else {
              if (state_val_8090 === 4) {
                var state_8089__$1 = state_8089;
                var statearr_8091_8100 = state_8089__$1;
                statearr_8091_8100[2] = database.r;
                statearr_8091_8100[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_8090 === 3) {
                  var inst_8084 = database.r.val;
                  var state_8089__$1 = state_8089;
                  var statearr_8092_8101 = state_8089__$1;
                  statearr_8092_8101[2] = inst_8084;
                  statearr_8092_8101[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_8090 === 2) {
                    var inst_8079 = state_8089[2];
                    var inst_8080 = database.r = inst_8079;
                    var inst_8081 = "got from db " + k;
                    var inst_8082 = logger.og.call(null, new cljs.core.Keyword(null, "dbget", "dbget", 1580666285), inst_8081, database.r);
                    var state_8089__$1 = function() {
                      var statearr_8093 = state_8089;
                      statearr_8093[5] = inst_8082;
                      statearr_8093[6] = inst_8080;
                      return statearr_8093;
                    }();
                    if (cljs.core.truth_(database.r)) {
                      var statearr_8094_8102 = state_8089__$1;
                      statearr_8094_8102[1] = 3;
                    } else {
                      var statearr_8095_8103 = state_8089__$1;
                      statearr_8095_8103[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_8090 === 1) {
                      var inst_8073 = cljs.core.async.chan.call(null);
                      var inst_8074 = pouchDB.dbase.get(k);
                      var inst_8075 = function() {
                        var c = inst_8073;
                        return function(c, inst_8073, inst_8074, state_val_8090, c__5710__auto__) {
                          return function(p1__8045_SHARP_) {
                            return cljs.core.async.put_BANG_.call(null, c, p1__8045_SHARP_);
                          };
                        }(c, inst_8073, inst_8074, state_val_8090, c__5710__auto__);
                      }();
                      var inst_8076 = function() {
                        var c = inst_8073;
                        return function(c, inst_8073, inst_8074, inst_8075, state_val_8090, c__5710__auto__) {
                          return function() {
                            return cljs.core.async.put_BANG_.call(null, c, false);
                          };
                        }(c, inst_8073, inst_8074, inst_8075, state_val_8090, c__5710__auto__);
                      }();
                      var inst_8077 = inst_8074.then(inst_8075, inst_8076);
                      var state_8089__$1 = function() {
                        var statearr_8096 = state_8089;
                        statearr_8096[7] = inst_8077;
                        return statearr_8096;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8089__$1, 2, inst_8073);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8098 = [null, null, null, null, null, null, null, null];
              statearr_8098[0] = state_machine__5698__auto__;
              statearr_8098[1] = 1;
              return statearr_8098;
            };
            var state_machine__5698__auto____1 = function(state_8089) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8089);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8089) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8089);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8099 = f__5711__auto__.call(null);
        statearr_8099[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8099;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
database.ps = function ps(key, v) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8141) {
            var state_val_8142 = state_8141[1];
            if (state_val_8142 === 2) {
              var inst_8138 = state_8141[2];
              var inst_8139 = logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "just done put s ");
              var state_8141__$1 = function() {
                var statearr_8143 = state_8141;
                statearr_8143[5] = inst_8139;
                statearr_8143[6] = inst_8138;
                return statearr_8143;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8141__$1, 1);
            } else {
              if (state_val_8142 === 1) {
                var inst_8126 = cljs.core.async.chan.call(null);
                var inst_8127 = database.c = inst_8126;
                var inst_8128 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_8129 = [key, v];
                var inst_8130 = new cljs.core.PersistentVector(null, 2, 5, inst_8128, inst_8129, null);
                var inst_8131 = logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "putting from db ", inst_8130);
                var inst_8134 = {"_id":key, "val":v};
                var inst_8135 = function() {
                  return function(inst_8126, inst_8127, inst_8128, inst_8129, inst_8130, inst_8131, inst_8134, state_val_8142, c__5710__auto__) {
                    return function() {
                      return cljs.core.async.put_BANG_.call(null, database.c, 1);
                    };
                  }(inst_8126, inst_8127, inst_8128, inst_8129, inst_8130, inst_8131, inst_8134, state_val_8142, c__5710__auto__);
                }();
                var inst_8136 = pouchDB.dbase.put(inst_8134, inst_8135);
                var state_8141__$1 = function() {
                  var statearr_8144 = state_8141;
                  statearr_8144[7] = inst_8136;
                  statearr_8144[8] = inst_8131;
                  statearr_8144[9] = inst_8127;
                  return statearr_8144;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8141__$1, 2, database.c);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8146 = [null, null, null, null, null, null, null, null, null, null];
              statearr_8146[0] = state_machine__5698__auto__;
              statearr_8146[1] = 1;
              return statearr_8146;
            };
            var state_machine__5698__auto____1 = function(state_8141) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8141);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8141) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8141);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8147 = f__5711__auto__.call(null);
        statearr_8147[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8147;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
database.p = function p(key, v) {
  logger.og.call(null, new cljs.core.Keyword(null, "dbput", "dbput", 890434907), "putting from db ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, v], null));
  return pouchDB.dbase.put(function() {
    var obj8151 = {"_id":key, "val":v};
    return obj8151;
  }());
};
goog.provide("intercomMake");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("database");
goog.require("database");
goog.require("logger");
goog.require("logger");
intercomMake.makeInv = function makeInv(typ, message) {
  var obj10251 = {"type":"json", "data":JSON.stringify(function() {
    var obj10253 = {"type":"inv", "data":function() {
      var obj10255 = {"type":typ, "vector":message};
      return obj10255;
    }()};
    return obj10253;
  }())};
  return obj10251;
};
intercomMake.makeData = function makeData(typ, message) {
  return null;
};
intercomMake.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
intercomMake.makeVersion = function makeVersion(message) {
  var obj10259 = {"type":"version", "data":message};
  return obj10259;
};
intercomMake.makeConn = function makeConn(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj10263 = {"type":"conn", "data":conn};
  return obj10263;
};
intercomMake.makeGetBlock = function makeGetBlock(hash) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10369) {
            var state_val_10370 = state_10369[1];
            if (state_val_10370 === 7) {
              var state_10369__$1 = state_10369;
              var statearr_10371_10390 = state_10369__$1;
              statearr_10371_10390[2] = null;
              statearr_10371_10390[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10370 === 1) {
                var inst_10329 = [];
                var inst_10330 = {"count":0, "blocks":inst_10329};
                var inst_10331 = inst_10330[intercomMake.hash_stop] = 0;
                var inst_10332 = intercomMake.gtBlock = inst_10330;
                var inst_10333 = app.blockchain.blockchainHeight.call(null, 1);
                var state_10369__$1 = function() {
                  var statearr_10372 = state_10369;
                  statearr_10372[5] = inst_10331;
                  statearr_10372[6] = inst_10332;
                  return statearr_10372;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10369__$1, 2, inst_10333);
              } else {
                if (state_val_10370 === 4) {
                  var inst_10367 = state_10369[2];
                  var state_10369__$1 = function() {
                    var statearr_10373 = state_10369;
                    statearr_10373[7] = inst_10367;
                    return statearr_10373;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10369__$1, intercomMake.gtBlock);
                } else {
                  if (state_val_10370 === 6) {
                    var inst_10338 = state_10369[8];
                    var inst_10354 = inst_10338 < 10;
                    var state_10369__$1 = state_10369;
                    if (cljs.core.truth_(inst_10354)) {
                      var statearr_10374_10391 = state_10369__$1;
                      statearr_10374_10391[1] = 9;
                    } else {
                      var statearr_10375_10392 = state_10369__$1;
                      statearr_10375_10392[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10370 === 3) {
                      var inst_10337 = state_10369[9];
                      var inst_10338 = state_10369[8];
                      var inst_10340 = "new loop " + inst_10337;
                      var inst_10341 = inst_10340 + " ";
                      var inst_10342 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_10341, inst_10338);
                      var inst_10343 = "b" + inst_10337;
                      var inst_10344 = database.g.call(null, inst_10343);
                      var state_10369__$1 = function() {
                        var statearr_10376 = state_10369;
                        statearr_10376[10] = inst_10342;
                        return statearr_10376;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10369__$1, 5, inst_10344);
                    } else {
                      if (state_val_10370 === 2) {
                        var inst_10335 = state_10369[2];
                        var inst_10336 = intercomMake.heightForBlock = inst_10335;
                        var inst_10337 = intercomMake.heightForBlock;
                        var inst_10338 = 0;
                        var state_10369__$1 = function() {
                          var statearr_10377 = state_10369;
                          statearr_10377[11] = inst_10336;
                          statearr_10377[9] = inst_10337;
                          statearr_10377[8] = inst_10338;
                          return statearr_10377;
                        }();
                        var statearr_10378_10393 = state_10369__$1;
                        statearr_10378_10393[2] = null;
                        statearr_10378_10393[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10370 === 11) {
                          var inst_10338 = state_10369[8];
                          var inst_10360 = state_10369[2];
                          var inst_10361 = inst_10338 + 1;
                          var inst_10337 = inst_10360;
                          var inst_10338__$1 = inst_10361;
                          var state_10369__$1 = function() {
                            var statearr_10379 = state_10369;
                            statearr_10379[9] = inst_10337;
                            statearr_10379[8] = inst_10338__$1;
                            return statearr_10379;
                          }();
                          var statearr_10380_10394 = state_10369__$1;
                          statearr_10380_10394[2] = null;
                          statearr_10380_10394[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10370 === 9) {
                            var inst_10337 = state_10369[9];
                            var inst_10356 = inst_10337 - 1;
                            var state_10369__$1 = state_10369;
                            var statearr_10381_10395 = state_10369__$1;
                            statearr_10381_10395[2] = inst_10356;
                            statearr_10381_10395[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10370 === 5) {
                              var inst_10337 = state_10369[9];
                              var inst_10346 = state_10369[2];
                              var inst_10347 = intercomMake.blockg = inst_10346;
                              var inst_10348 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_10349 = intercomMake.gtBlock.count = inst_10337;
                              var inst_10350 = intercomMake.gtBlock.blocks;
                              var inst_10351 = inst_10350.push(intercomMake.blockg);
                              var inst_10352 = 0 < inst_10337;
                              var state_10369__$1 = function() {
                                var statearr_10382 = state_10369;
                                statearr_10382[12] = inst_10351;
                                statearr_10382[13] = inst_10348;
                                statearr_10382[14] = inst_10349;
                                statearr_10382[15] = inst_10347;
                                return statearr_10382;
                              }();
                              if (cljs.core.truth_(inst_10352)) {
                                var statearr_10383_10396 = state_10369__$1;
                                statearr_10383_10396[1] = 6;
                              } else {
                                var statearr_10384_10397 = state_10369__$1;
                                statearr_10384_10397[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10370 === 10) {
                                var inst_10337 = state_10369[9];
                                var inst_10358 = cljs.core.quot.call(null, inst_10337, 2);
                                var state_10369__$1 = state_10369;
                                var statearr_10385_10398 = state_10369__$1;
                                statearr_10385_10398[2] = inst_10358;
                                statearr_10385_10398[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10370 === 8) {
                                  var inst_10365 = state_10369[2];
                                  var state_10369__$1 = state_10369;
                                  var statearr_10386_10399 = state_10369__$1;
                                  statearr_10386_10399[2] = inst_10365;
                                  statearr_10386_10399[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10388 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10388[0] = state_machine__5698__auto__;
              statearr_10388[1] = 1;
              return statearr_10388;
            };
            var state_machine__5698__auto____1 = function(state_10369) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10369);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10369) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10369);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10389 = f__5711__auto__.call(null);
        statearr_10389[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10389;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
goog.provide("blockchain");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("database");
goog.require("database");
goog.require("crypto");
goog.require("logger");
goog.require("logger");
cljs.core.enable_console_print_BANG_.call(null);
blockchain.memPool = [];
blockchain.blockhainInfo = function() {
  var obj10672 = {};
  return obj10672;
}();
blockchain.blockhainInfo.dificulty = 5;
blockchain.addTransactionToMemPool = function addTransactionToMemPool(x) {
  blockchain.memPool.push(x);
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after adding ", blockchain.memPool);
};
blockchain.removeTransactionFromMemPool = function removeTransactionFromMemPool(x) {
  blockchain.memPool.splice(blockchain.memPool.indexOf(x));
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after remove ", blockchain.memPool);
};
blockchain.makeBlockHeader = function makeBlockHeader(version, previous, fmroot, timestamp, bits, nonce, txcount) {
  var obj10676 = {"version":1, "heightFromRoot":0, "previous":previous, "merkleRoot":fmroot, "timestamp":timestamp, "bits":bits, "nonce":nonce, "txcount":txcount};
  return obj10676;
};
blockchain.makeTransaction = function makeTransaction() {
  var obj10680 = {"":1};
  return obj10680;
};
blockchain.addTransactionToBlock = function addTransactionToBlock() {
  var obj10684 = {"":1};
  return obj10684;
};
blockchain.prevblk = function prevblk(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), "about to get prev blk ", blockk);
  return blockk.header.previous;
};
blockchain.blockKnown_QMARK_ = function blockKnown_QMARK_(blockk) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10762) {
            var state_val_10763 = state_10762[1];
            if (state_val_10763 === 7) {
              var inst_10756 = state_10762[2];
              var inst_10757 = blockchain.res = inst_10756;
              var state_10762__$1 = function() {
                var statearr_10764 = state_10762;
                statearr_10764[5] = inst_10757;
                return statearr_10764;
              }();
              var statearr_10765_10785 = state_10762__$1;
              statearr_10765_10785[2] = blockchain.res;
              statearr_10765_10785[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10763 === 1) {
                var state_10762__$1 = state_10762;
                if (cljs.core.truth_(blockk)) {
                  var statearr_10766_10786 = state_10762__$1;
                  statearr_10766_10786[1] = 2;
                } else {
                  var statearr_10767_10787 = state_10762__$1;
                  statearr_10767_10787[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10763 === 4) {
                  var inst_10760 = state_10762[2];
                  var state_10762__$1 = state_10762;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10762__$1, inst_10760);
                } else {
                  if (state_val_10763 === 15) {
                    var inst_10754 = state_10762[2];
                    var state_10762__$1 = state_10762;
                    var statearr_10768_10788 = state_10762__$1;
                    statearr_10768_10788[2] = inst_10754;
                    statearr_10768_10788[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10763 === 13) {
                      var state_10762__$1 = state_10762;
                      var statearr_10769_10789 = state_10762__$1;
                      statearr_10769_10789[2] = true;
                      statearr_10769_10789[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10763 === 6) {
                        var inst_10748 = database.g.call(null, blockk);
                        var state_10762__$1 = state_10762;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10762__$1, 12, inst_10748);
                      } else {
                        if (state_val_10763 === 3) {
                          var state_10762__$1 = state_10762;
                          var statearr_10770_10790 = state_10762__$1;
                          statearr_10770_10790[2] = false;
                          statearr_10770_10790[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10763 === 12) {
                            var inst_10750 = state_10762[2];
                            var state_10762__$1 = state_10762;
                            if (cljs.core.truth_(inst_10750)) {
                              var statearr_10771_10791 = state_10762__$1;
                              statearr_10771_10791[1] = 13;
                            } else {
                              var statearr_10772_10792 = state_10762__$1;
                              statearr_10772_10792[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10763 === 2) {
                              var inst_10736 = logger.og.call(null, new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), "block known? ", blockk);
                              var inst_10737 = blockk.hash;
                              var state_10762__$1 = function() {
                                var statearr_10773 = state_10762;
                                statearr_10773[6] = inst_10736;
                                return statearr_10773;
                              }();
                              if (cljs.core.truth_(inst_10737)) {
                                var statearr_10774_10793 = state_10762__$1;
                                statearr_10774_10793[1] = 5;
                              } else {
                                var statearr_10775_10794 = state_10762__$1;
                                statearr_10775_10794[1] = 6;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10763 === 11) {
                                var inst_10746 = state_10762[2];
                                var state_10762__$1 = state_10762;
                                var statearr_10776_10795 = state_10762__$1;
                                statearr_10776_10795[2] = inst_10746;
                                statearr_10776_10795[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10763 === 9) {
                                  var state_10762__$1 = state_10762;
                                  var statearr_10777_10796 = state_10762__$1;
                                  statearr_10777_10796[2] = true;
                                  statearr_10777_10796[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10763 === 5) {
                                    var inst_10739 = blockk.hash;
                                    var inst_10740 = database.g.call(null, inst_10739);
                                    var state_10762__$1 = state_10762;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10762__$1, 8, inst_10740);
                                  } else {
                                    if (state_val_10763 === 14) {
                                      var state_10762__$1 = state_10762;
                                      var statearr_10778_10797 = state_10762__$1;
                                      statearr_10778_10797[2] = false;
                                      statearr_10778_10797[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10763 === 10) {
                                        var state_10762__$1 = state_10762;
                                        var statearr_10779_10798 = state_10762__$1;
                                        statearr_10779_10798[2] = false;
                                        statearr_10779_10798[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10763 === 8) {
                                          var inst_10742 = state_10762[2];
                                          var state_10762__$1 = state_10762;
                                          if (cljs.core.truth_(inst_10742)) {
                                            var statearr_10780_10799 = state_10762__$1;
                                            statearr_10780_10799[1] = 9;
                                          } else {
                                            var statearr_10781_10800 = state_10762__$1;
                                            statearr_10781_10800[1] = 10;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10783 = [null, null, null, null, null, null, null];
              statearr_10783[0] = state_machine__5698__auto__;
              statearr_10783[1] = 1;
              return statearr_10783;
            };
            var state_machine__5698__auto____1 = function(state_10762) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10762);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10762) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10762);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10784 = f__5711__auto__.call(null);
        statearr_10784[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10784;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
blockchain.last_QMARK_ = function last_QMARK_(blockk) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10887) {
            var state_val_10888 = state_10887[1];
            if (state_val_10888 === 7) {
              var state_10887__$1 = state_10887;
              var statearr_10889_10907 = state_10887__$1;
              statearr_10889_10907[2] = true;
              statearr_10889_10907[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10888 === 1) {
                var inst_10854 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "block known? ", blockk);
                var inst_10855 = database.g.call(null, "last");
                var state_10887__$1 = function() {
                  var statearr_10890 = state_10887;
                  statearr_10890[5] = inst_10854;
                  return statearr_10890;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 2, inst_10855);
              } else {
                if (state_val_10888 === 4) {
                  var inst_10873 = database.g.call(null, blockk);
                  var state_10887__$1 = state_10887;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 10, inst_10873);
                } else {
                  if (state_val_10888 === 13) {
                    var inst_10882 = state_10887[2];
                    var state_10887__$1 = state_10887;
                    var statearr_10891_10908 = state_10887__$1;
                    statearr_10891_10908[2] = inst_10882;
                    statearr_10891_10908[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10888 === 6) {
                      var inst_10864 = state_10887[2];
                      var inst_10865 = inst_10864.hash;
                      var inst_10866 = blockchain.block.hash;
                      var inst_10867 = inst_10865 === inst_10866;
                      var state_10887__$1 = state_10887;
                      if (cljs.core.truth_(inst_10867)) {
                        var statearr_10892_10909 = state_10887__$1;
                        statearr_10892_10909[1] = 7;
                      } else {
                        var statearr_10893_10910 = state_10887__$1;
                        statearr_10893_10910[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10888 === 3) {
                        var inst_10861 = blockk.hash;
                        var inst_10862 = database.g.call(null, inst_10861);
                        var state_10887__$1 = state_10887;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10887__$1, 6, inst_10862);
                      } else {
                        if (state_val_10888 === 12) {
                          var state_10887__$1 = state_10887;
                          var statearr_10894_10911 = state_10887__$1;
                          statearr_10894_10911[2] = false;
                          statearr_10894_10911[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10888 === 2) {
                            var inst_10857 = state_10887[2];
                            var inst_10858 = blockchain.lastt = inst_10857;
                            var inst_10859 = blockk.hash;
                            var state_10887__$1 = function() {
                              var statearr_10895 = state_10887;
                              statearr_10895[6] = inst_10858;
                              return statearr_10895;
                            }();
                            if (cljs.core.truth_(inst_10859)) {
                              var statearr_10896_10912 = state_10887__$1;
                              statearr_10896_10912[1] = 3;
                            } else {
                              var statearr_10897_10913 = state_10887__$1;
                              statearr_10897_10913[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10888 === 11) {
                              var state_10887__$1 = state_10887;
                              var statearr_10898_10914 = state_10887__$1;
                              statearr_10898_10914[2] = true;
                              statearr_10898_10914[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10888 === 9) {
                                var inst_10871 = state_10887[2];
                                var state_10887__$1 = state_10887;
                                var statearr_10899_10915 = state_10887__$1;
                                statearr_10899_10915[2] = inst_10871;
                                statearr_10899_10915[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10888 === 5) {
                                  var inst_10884 = state_10887[2];
                                  var inst_10885 = blockchain.res = inst_10884;
                                  var state_10887__$1 = function() {
                                    var statearr_10900 = state_10887;
                                    statearr_10900[7] = inst_10885;
                                    return statearr_10900;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10887__$1, blockchain.res);
                                } else {
                                  if (state_val_10888 === 10) {
                                    var inst_10875 = state_10887[2];
                                    var inst_10876 = inst_10875.hash;
                                    var inst_10877 = blockchain.block.hash;
                                    var inst_10878 = inst_10876 === inst_10877;
                                    var state_10887__$1 = state_10887;
                                    if (cljs.core.truth_(inst_10878)) {
                                      var statearr_10901_10916 = state_10887__$1;
                                      statearr_10901_10916[1] = 11;
                                    } else {
                                      var statearr_10902_10917 = state_10887__$1;
                                      statearr_10902_10917[1] = 12;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10888 === 8) {
                                      var state_10887__$1 = state_10887;
                                      var statearr_10903_10918 = state_10887__$1;
                                      statearr_10903_10918[2] = false;
                                      statearr_10903_10918[1] = 9;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10905 = [null, null, null, null, null, null, null, null];
              statearr_10905[0] = state_machine__5698__auto__;
              statearr_10905[1] = 1;
              return statearr_10905;
            };
            var state_machine__5698__auto____1 = function(state_10887) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10887);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10887) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10887);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10906 = f__5711__auto__.call(null);
        statearr_10906[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10906;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
blockchain.heightFromBlock = function heightFromBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), "getting height from block ", blockk);
  return blockk.header.heightFromRoot;
};
blockchain.makeBlock = function makeBlock(work) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "about to make block ", work);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10989) {
            var state_val_10990 = state_10989[1];
            if (state_val_10990 === 4) {
              var inst_10984 = state_10989[2];
              var inst_10985 = {"header":blockchain.blockHeader, "hash":inst_10984, "transactions":blockchain.transactions};
              var inst_10986 = blockchain.blockk = inst_10985;
              var inst_10987 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "newly made block ", blockchain.blockk);
              var state_10989__$1 = function() {
                var statearr_10991 = state_10989;
                statearr_10991[5] = inst_10986;
                statearr_10991[6] = inst_10987;
                return statearr_10991;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10989__$1, blockchain.blockk);
            } else {
              if (state_val_10990 === 3) {
                var inst_10965 = state_10989[2];
                var inst_10966 = blockchain.transactions = inst_10965;
                var inst_10967 = blockchain.lastv = blockchain.lastt2;
                var inst_10968 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", blockchain.lastv);
                var inst_10969 = blockchain.lastv.hash;
                var inst_10970 = work.root;
                var inst_10971 = new Date;
                var inst_10972 = inst_10971.getTime();
                var inst_10973 = blockchain.blockhainInfo.dificulty;
                var inst_10974 = work.nonce;
                var inst_10975 = blockchain.transactions.lenght;
                var inst_10976 = blockchain.makeBlockHeader.call(null, "0", inst_10969, inst_10970, inst_10972, inst_10973, inst_10974, inst_10975);
                var inst_10977 = blockchain.blockHeader = inst_10976;
                var inst_10978 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "block header ", blockchain.blockHeader);
                var inst_10979 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "transactions when saving block ", blockchain.transactions);
                var inst_10982 = crypto.bHash.call(null, blockchain.blockHeader);
                var state_10989__$1 = function() {
                  var statearr_10992 = state_10989;
                  statearr_10992[7] = inst_10967;
                  statearr_10992[8] = inst_10979;
                  statearr_10992[9] = inst_10966;
                  statearr_10992[10] = inst_10968;
                  statearr_10992[11] = inst_10978;
                  statearr_10992[12] = inst_10977;
                  return statearr_10992;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10989__$1, 4, inst_10982);
              } else {
                if (state_val_10990 === 2) {
                  var inst_10960 = state_10989[2];
                  var inst_10961 = blockchain.lastt2 = inst_10960;
                  var inst_10962 = logger.og.call(null, new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426), "last ", blockchain.lastt2);
                  var inst_10963 = database.g.call(null, "txs");
                  var state_10989__$1 = function() {
                    var statearr_10993 = state_10989;
                    statearr_10993[13] = inst_10961;
                    statearr_10993[14] = inst_10962;
                    return statearr_10993;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10989__$1, 3, inst_10963);
                } else {
                  if (state_val_10990 === 1) {
                    var inst_10958 = database.g.call(null, "last");
                    var state_10989__$1 = state_10989;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10989__$1, 2, inst_10958);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10995 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10995[0] = state_machine__5698__auto__;
              statearr_10995[1] = 1;
              return statearr_10995;
            };
            var state_machine__5698__auto____1 = function(state_10989) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10989);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10989) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10989);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10996 = f__5711__auto__.call(null);
        statearr_10996[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10996;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
blockchain.saveBlock = function saveBlock(dbase, blockR) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_11043) {
            var state_val_11044 = state_11043[1];
            if (state_val_11044 === 4) {
              var inst_11041 = state_11043[2];
              var state_11043__$1 = state_11043;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11043__$1, inst_11041);
            } else {
              if (state_val_11044 === 3) {
                var inst_11037 = state_11043[2];
                var inst_11038 = "b" + blockchain.heightForBlock;
                var inst_11039 = database.ps.call(null, inst_11038, blockR);
                var state_11043__$1 = function() {
                  var statearr_11045 = state_11043;
                  statearr_11045[5] = inst_11037;
                  return statearr_11045;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11043__$1, 4, inst_11039);
              } else {
                if (state_val_11044 === 2) {
                  var inst_11027 = state_11043[2];
                  var inst_11028 = blockchain.heightForBlock = inst_11027;
                  var inst_11029 = blockR.header;
                  var inst_11030 = inst_11029.heightFromRoot = blockchain.heightForBlock;
                  var inst_11031 = function() {
                    return function(inst_11027, inst_11028, inst_11029, inst_11030, state_val_11044, c__5710__auto__) {
                      return function() {
                        return blockR;
                      };
                    }(inst_11027, inst_11028, inst_11029, inst_11030, state_val_11044, c__5710__auto__);
                  }();
                  var inst_11032 = blockchain.a = inst_11031;
                  var inst_11033 = database.update.call(null, "last", blockchain.a);
                  var inst_11034 = blockR.hash;
                  var inst_11035 = database.ps.call(null, inst_11034, blockR);
                  var state_11043__$1 = function() {
                    var statearr_11046 = state_11043;
                    statearr_11046[6] = inst_11032;
                    statearr_11046[7] = inst_11030;
                    statearr_11046[8] = inst_11033;
                    statearr_11046[9] = inst_11028;
                    return statearr_11046;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11043__$1, 3, inst_11035);
                } else {
                  if (state_val_11044 === 1) {
                    var inst_11024 = logger.og.call(null, new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), "saving ", blockR);
                    var inst_11025 = blockchain.blockchainHeight.call(null, 1);
                    var state_11043__$1 = function() {
                      var statearr_11047 = state_11043;
                      statearr_11047[10] = inst_11024;
                      return statearr_11047;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11043__$1, 2, inst_11025);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_11049 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11049[0] = state_machine__5698__auto__;
              statearr_11049[1] = 1;
              return statearr_11049;
            };
            var state_machine__5698__auto____1 = function(state_11043) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_11043);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_11043) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_11043);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_11050 = f__5711__auto__.call(null);
        statearr_11050[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_11050;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
blockchain.addToChain = function addToChain(schain) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_11130) {
            var state_val_11131 = state_11130[1];
            if (state_val_11131 === 7) {
              var inst_11102 = state_11130[5];
              var inst_11116 = state_11130[2];
              var inst_11117 = schain.length;
              var inst_11118 = inst_11102 < inst_11117;
              var state_11130__$1 = function() {
                var statearr_11132 = state_11130;
                statearr_11132[6] = inst_11116;
                return statearr_11132;
              }();
              if (cljs.core.truth_(inst_11118)) {
                var statearr_11133_11151 = state_11130__$1;
                statearr_11133_11151[1] = 8;
              } else {
                var statearr_11134_11152 = state_11130__$1;
                statearr_11134_11152[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11131 === 1) {
                var inst_11101 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to add to chain");
                var inst_11102 = 0;
                var state_11130__$1 = function() {
                  var statearr_11135 = state_11130;
                  statearr_11135[7] = inst_11101;
                  statearr_11135[5] = inst_11102;
                  return statearr_11135;
                }();
                var statearr_11136_11153 = state_11130__$1;
                statearr_11136_11153[2] = null;
                statearr_11136_11153[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11131 === 4) {
                  var inst_11109 = state_11130[2];
                  var state_11130__$1 = state_11130;
                  if (cljs.core.truth_(inst_11109)) {
                    var statearr_11137_11154 = state_11130__$1;
                    statearr_11137_11154[1] = 5;
                  } else {
                    var statearr_11138_11155 = state_11130__$1;
                    statearr_11138_11155[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11131 === 6) {
                    var inst_11102 = state_11130[5];
                    var inst_11113 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is not known ", inst_11102);
                    var inst_11114 = blockchain.saveBlock.call(null, inst_11102);
                    var state_11130__$1 = function() {
                      var statearr_11139 = state_11130;
                      statearr_11139[8] = inst_11113;
                      return statearr_11139;
                    }();
                    var statearr_11140_11156 = state_11130__$1;
                    statearr_11140_11156[2] = inst_11114;
                    statearr_11140_11156[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11131 === 3) {
                      var inst_11126 = state_11130[2];
                      var inst_11127 = cljs.core.last.call(null, schain);
                      var inst_11128 = database.update.call(null, "last", inst_11127);
                      var state_11130__$1 = function() {
                        var statearr_11141 = state_11130;
                        statearr_11141[9] = inst_11126;
                        return statearr_11141;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11130__$1, inst_11128);
                    } else {
                      if (state_val_11131 === 2) {
                        var inst_11102 = state_11130[5];
                        var inst_11104 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "itterating current step ", inst_11102);
                        var inst_11105 = schain[inst_11102];
                        var inst_11106 = blockchain.prevblk.call(null, inst_11105);
                        var inst_11107 = blockchain.blockKnown_QMARK_.call(null, inst_11106);
                        var state_11130__$1 = function() {
                          var statearr_11142 = state_11130;
                          statearr_11142[10] = inst_11104;
                          return statearr_11142;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11130__$1, 4, inst_11107);
                      } else {
                        if (state_val_11131 === 9) {
                          var state_11130__$1 = state_11130;
                          var statearr_11143_11157 = state_11130__$1;
                          statearr_11143_11157[2] = null;
                          statearr_11143_11157[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11131 === 5) {
                            var inst_11102 = state_11130[5];
                            var inst_11111 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ", inst_11102);
                            var state_11130__$1 = state_11130;
                            var statearr_11144_11158 = state_11130__$1;
                            statearr_11144_11158[2] = inst_11111;
                            statearr_11144_11158[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11131 === 10) {
                              var inst_11124 = state_11130[2];
                              var state_11130__$1 = state_11130;
                              var statearr_11145_11159 = state_11130__$1;
                              statearr_11145_11159[2] = inst_11124;
                              statearr_11145_11159[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11131 === 8) {
                                var inst_11102 = state_11130[5];
                                var inst_11120 = inst_11102 + 1;
                                var inst_11102__$1 = inst_11120;
                                var state_11130__$1 = function() {
                                  var statearr_11146 = state_11130;
                                  statearr_11146[5] = inst_11102__$1;
                                  return statearr_11146;
                                }();
                                var statearr_11147_11160 = state_11130__$1;
                                statearr_11147_11160[2] = null;
                                statearr_11147_11160[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_11149 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11149[0] = state_machine__5698__auto__;
              statearr_11149[1] = 1;
              return statearr_11149;
            };
            var state_machine__5698__auto____1 = function(state_11130) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_11130);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_11130) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_11130);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_11150 = f__5711__auto__.call(null);
        statearr_11150[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_11150;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
blockchain.blockchainHeight = function blockchainHeight(x) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_11199) {
            var state_val_11200 = state_11199[1];
            if (state_val_11200 === 6) {
              var inst_11194 = state_11199[2];
              var state_11199__$1 = state_11199;
              var statearr_11201_11209 = state_11199__$1;
              statearr_11201_11209[2] = inst_11194;
              statearr_11201_11209[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11200 === 5) {
                var inst_11197 = state_11199[2];
                var state_11199__$1 = state_11199;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11199__$1, inst_11197);
              } else {
                if (state_val_11200 === 4) {
                  var state_11199__$1 = state_11199;
                  var statearr_11202_11210 = state_11199__$1;
                  statearr_11202_11210[2] = blockchain.hght;
                  statearr_11202_11210[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11200 === 3) {
                    var inst_11191 = function() {
                      return function(state_val_11200, c__5710__auto__) {
                        return function(v) {
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "prev height ", v);
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "to add  ", x);
                          logger.og.call(null, new cljs.core.Keyword(null, "height", "height", 1025178622), "after addition  ", v + x);
                          return v + x;
                        };
                      }(state_val_11200, c__5710__auto__);
                    }();
                    var inst_11192 = database.update.call(null, "height", inst_11191);
                    var state_11199__$1 = state_11199;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11199__$1, 6, inst_11192);
                  } else {
                    if (state_val_11200 === 2) {
                      var inst_11187 = state_11199[2];
                      var inst_11188 = blockchain.hght = inst_11187;
                      var inst_11189 = logger.og.call(null, new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), "blockchain height ", blockchain.hght);
                      var state_11199__$1 = function() {
                        var statearr_11203 = state_11199;
                        statearr_11203[5] = inst_11188;
                        statearr_11203[6] = inst_11189;
                        return statearr_11203;
                      }();
                      if (cljs.core.truth_(x)) {
                        var statearr_11204_11211 = state_11199__$1;
                        statearr_11204_11211[1] = 3;
                      } else {
                        var statearr_11205_11212 = state_11199__$1;
                        statearr_11205_11212[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11200 === 1) {
                        var inst_11185 = database.g.call(null, "height");
                        var state_11199__$1 = state_11199;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11199__$1, 2, inst_11185);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_11207 = [null, null, null, null, null, null, null];
              statearr_11207[0] = state_machine__5698__auto__;
              statearr_11207[1] = 1;
              return statearr_11207;
            };
            var state_machine__5698__auto____1 = function(state_11199) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_11199);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_11199) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_11199);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_11208 = f__5711__auto__.call(null);
        statearr_11208[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_11208;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
blockchain.popA = function popA(a) {
  return a.splice(0, 1);
};
blockchain.log2 = function log2(n) {
  return Math.log.call(null, n) / Math.log.call(null, 2);
};
goog.provide("intercomTakeUtil");
goog.require("cljs.core");
goog.provide("intercomTake");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("blockchain");
goog.require("pubsub");
goog.require("intercomMake");
goog.require("intercomMake");
goog.require("database");
goog.require("database");
goog.require("logger");
goog.require("logger");
intercomTake.sendm = function sendm(peer, payload) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8602) {
            var state_val_8603 = state_8602[1];
            if (state_val_8603 === 2) {
              var inst_8600 = state_8602[2];
              var state_8602__$1 = state_8602;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8602__$1, inst_8600);
            } else {
              if (state_val_8603 === 1) {
                var state_8602__$1 = state_8602;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8602__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8605 = [null, null, null, null, null];
              statearr_8605[0] = state_machine__5698__auto__;
              statearr_8605[1] = 1;
              return statearr_8605;
            };
            var state_machine__5698__auto____1 = function(state_8602) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8602);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8602) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8602);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8606 = f__5711__auto__.call(null);
        statearr_8606[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8606;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
intercomTake.takeInv = function takeInv(fullMessage) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8736) {
            var state_val_8737 = state_8736[1];
            if (state_val_8737 === 7) {
              var inst_8703 = state_8736[2];
              var inst_8704 = intercomTake.heightFromBlock.call(null, inst_8703);
              var inst_8705 = intercomTake.blocks.vector;
              var inst_8706 = inst_8705.length;
              var inst_8707 = inst_8704 + inst_8706;
              var inst_8708 = inst_8707 + 1;
              var inst_8709 = intercomTake.newHeight = inst_8708;
              var inst_8710 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercomTake.newHeight);
              var inst_8711 = intercomTake.bchainHeight < intercomTake.newHeight;
              var state_8736__$1 = function() {
                var statearr_8738 = state_8736;
                statearr_8738[5] = inst_8710;
                statearr_8738[6] = inst_8709;
                return statearr_8738;
              }();
              if (cljs.core.truth_(inst_8711)) {
                var statearr_8739_8757 = state_8736__$1;
                statearr_8739_8757[1] = 8;
              } else {
                var statearr_8740_8758 = state_8736__$1;
                statearr_8740_8758[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_8737 === 1) {
                var inst_8682 = fullMessage.data;
                var inst_8683 = intercomTake.blocks = inst_8682;
                var inst_8684 = logger.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercomTake.blocks);
                var inst_8685 = intercomTake.blocks.vector;
                var inst_8686 = inst_8685[0];
                var inst_8687 = blockchain.prevblk.call(null, inst_8686);
                var inst_8688 = blockchain.blockKnown_QMARK_.call(null, inst_8687);
                var state_8736__$1 = function() {
                  var statearr_8741 = state_8736;
                  statearr_8741[7] = inst_8683;
                  statearr_8741[8] = inst_8684;
                  return statearr_8741;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8736__$1, 2, inst_8688);
              } else {
                if (state_val_8737 === 4) {
                  var inst_8720 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercomTake.blocks);
                  var inst_8721 = database.g.call(null, "last");
                  var state_8736__$1 = function() {
                    var statearr_8742 = state_8736;
                    statearr_8742[9] = inst_8720;
                    return statearr_8742;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8736__$1, 11, inst_8721);
                } else {
                  if (state_val_8737 === 13) {
                    var inst_8727 = state_8736[10];
                    var inst_8730 = state_8736[2];
                    var state_8736__$1 = state_8736;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8736__$1, 12, inst_8727, inst_8730);
                  } else {
                    if (state_val_8737 === 6) {
                      var inst_8695 = state_8736[2];
                      var inst_8696 = intercomTake.bchainHeight = inst_8695;
                      var inst_8697 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercomTake.bchainHeight);
                      var inst_8698 = intercomTake.blocks.vector;
                      var inst_8699 = inst_8698[0];
                      var inst_8700 = blockchain.prevblk.call(null, inst_8699);
                      var inst_8701 = database.g.call(null, inst_8700);
                      var state_8736__$1 = function() {
                        var statearr_8743 = state_8736;
                        statearr_8743[11] = inst_8696;
                        statearr_8743[12] = inst_8697;
                        return statearr_8743;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8736__$1, 7, inst_8701);
                    } else {
                      if (state_val_8737 === 3) {
                        var inst_8692 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                        var inst_8693 = blockchain.blockchainHeight.call(null);
                        var state_8736__$1 = function() {
                          var statearr_8744 = state_8736;
                          statearr_8744[13] = inst_8692;
                          return statearr_8744;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8736__$1, 6, inst_8693);
                      } else {
                        if (state_val_8737 === 12) {
                          var inst_8732 = state_8736[2];
                          var state_8736__$1 = state_8736;
                          var statearr_8745_8759 = state_8736__$1;
                          statearr_8745_8759[2] = inst_8732;
                          statearr_8745_8759[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_8737 === 2) {
                            var inst_8690 = state_8736[2];
                            var state_8736__$1 = state_8736;
                            if (cljs.core.truth_(inst_8690)) {
                              var statearr_8746_8760 = state_8736__$1;
                              statearr_8746_8760[1] = 3;
                            } else {
                              var statearr_8747_8761 = state_8736__$1;
                              statearr_8747_8761[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_8737 === 11) {
                              var inst_8723 = state_8736[2];
                              var inst_8724 = inst_8723.hash;
                              var inst_8725 = intercomTake.lblock = inst_8724;
                              var inst_8726 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercomTake.lblock);
                              var inst_8727 = fullMessage.peer;
                              var inst_8728 = intercomMake.makeGetBlock.call(null, intercomTake.lblock);
                              var state_8736__$1 = function() {
                                var statearr_8748 = state_8736;
                                statearr_8748[10] = inst_8727;
                                statearr_8748[14] = inst_8726;
                                statearr_8748[15] = inst_8725;
                                return statearr_8748;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8736__$1, 13, inst_8728);
                            } else {
                              if (state_val_8737 === 9) {
                                var inst_8716 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                var state_8736__$1 = state_8736;
                                var statearr_8749_8762 = state_8736__$1;
                                statearr_8749_8762[2] = inst_8716;
                                statearr_8749_8762[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_8737 === 5) {
                                  var inst_8734 = state_8736[2];
                                  var state_8736__$1 = function() {
                                    var statearr_8750 = state_8736;
                                    statearr_8750[16] = inst_8734;
                                    return statearr_8750;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8736__$1, "grind");
                                } else {
                                  if (state_val_8737 === 10) {
                                    var inst_8718 = state_8736[2];
                                    var state_8736__$1 = state_8736;
                                    var statearr_8751_8763 = state_8736__$1;
                                    statearr_8751_8763[2] = inst_8718;
                                    statearr_8751_8763[1] = 5;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_8737 === 8) {
                                      var inst_8713 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
                                      var inst_8714 = blockchain.addToChain.call(null, intercomTake.blocks);
                                      var state_8736__$1 = function() {
                                        var statearr_8752 = state_8736;
                                        statearr_8752[17] = inst_8713;
                                        return statearr_8752;
                                      }();
                                      var statearr_8753_8764 = state_8736__$1;
                                      statearr_8753_8764[2] = inst_8714;
                                      statearr_8753_8764[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8755 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_8755[0] = state_machine__5698__auto__;
              statearr_8755[1] = 1;
              return statearr_8755;
            };
            var state_machine__5698__auto____1 = function(state_8736) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8736);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8736) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8736);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8756 = f__5711__auto__.call(null);
        statearr_8756[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8756;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
intercomTake.takeData = function takeData(message) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8785) {
            var state_val_8786 = state_8785[1];
            if (state_val_8786 === 1) {
              var inst_8778 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_8779 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_8780 = intercomTake.v.data;
              var inst_8781 = it.handleInvBlock.call(null, inst_8780, intercomTake.v);
              var inst_8782 = intercomTake.tostate.call(null, "grind");
              var inst_8783 = intercomTake.tostate.call(null, "grind", intercomTake.handleInvBlock);
              var state_8785__$1 = function() {
                var statearr_8787 = state_8785;
                statearr_8787[5] = inst_8782;
                statearr_8787[6] = inst_8781;
                statearr_8787[7] = inst_8778;
                statearr_8787[8] = inst_8779;
                return statearr_8787;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8785__$1, inst_8783);
            } else {
              return null;
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8789 = [null, null, null, null, null, null, null, null, null];
              statearr_8789[0] = state_machine__5698__auto__;
              statearr_8789[1] = 1;
              return statearr_8789;
            };
            var state_machine__5698__auto____1 = function(state_8785) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8785);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8785) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8785);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8790 = f__5711__auto__.call(null);
        statearr_8790[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8790;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
intercomTake.takeGetVersion = function takeGetVersion(message) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8807) {
            var state_val_8808 = state_8807[1];
            if (state_val_8808 === 1) {
              var inst_8802 = intercomTake.v.peer;
              var inst_8803 = intercomTake.sendmsg.call(null, inst_8802, "version", "0");
              var inst_8804 = intercomTake.tostate.call(null, "grind");
              var inst_8805 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_8807__$1 = function() {
                var statearr_8809 = state_8807;
                statearr_8809[5] = inst_8803;
                statearr_8809[6] = inst_8804;
                return statearr_8809;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8807__$1, inst_8805);
            } else {
              return null;
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8811 = [null, null, null, null, null, null, null];
              statearr_8811[0] = state_machine__5698__auto__;
              statearr_8811[1] = 1;
              return statearr_8811;
            };
            var state_machine__5698__auto____1 = function(state_8807) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8807);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8807) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8807);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8812 = f__5711__auto__.call(null);
        statearr_8812[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8812;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
intercomTake.takeVersion = function takeVersion(message) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8823) {
            var state_val_8824 = state_8823[1];
            if (state_val_8824 === 1) {
              var inst_8821 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_8823__$1 = function() {
                var statearr_8825 = state_8823;
                statearr_8825[5] = inst_8821;
                return statearr_8825;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8823__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8827 = [null, null, null, null, null, null];
              statearr_8827[0] = state_machine__5698__auto__;
              statearr_8827[1] = 1;
              return statearr_8827;
            };
            var state_machine__5698__auto____1 = function(state_8823) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8823);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8823) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8823);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8828 = f__5711__auto__.call(null);
        statearr_8828[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8828;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
intercomTake.takeConn = function takeConn(conn) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8869) {
            var state_val_8870 = state_8869[1];
            if (state_val_8870 === 4) {
              var inst_8867 = state_8869[2];
              var state_8869__$1 = state_8869;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8869__$1, inst_8867);
            } else {
              if (state_val_8870 === 3) {
                var state_8869__$1 = state_8869;
                var statearr_8871_8879 = state_8869__$1;
                statearr_8871_8879[2] = "version";
                statearr_8871_8879[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_8870 === 2) {
                  var state_8869__$1 = state_8869;
                  var statearr_8872_8880 = state_8869__$1;
                  statearr_8872_8880[2] = "grind";
                  statearr_8872_8880[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_8870 === 1) {
                    var inst_8854 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_8855 = conn.data;
                    var inst_8856 = inst_8855.writec;
                    var inst_8857 = intercomMake.makeVersion.call(null, "0");
                    var inst_8858 = intercomTake.sendm.call(null, inst_8856, inst_8857);
                    var inst_8859 = conn.connType;
                    var inst_8860 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_8859);
                    var inst_8861 = conn.data;
                    var inst_8862 = inst_8861.connType;
                    var inst_8863 = inst_8862 === "saltan";
                    var state_8869__$1 = function() {
                      var statearr_8873 = state_8869;
                      statearr_8873[5] = inst_8854;
                      statearr_8873[6] = inst_8858;
                      statearr_8873[7] = inst_8860;
                      return statearr_8873;
                    }();
                    if (cljs.core.truth_(inst_8863)) {
                      var statearr_8874_8881 = state_8869__$1;
                      statearr_8874_8881[1] = 2;
                    } else {
                      var statearr_8875_8882 = state_8869__$1;
                      statearr_8875_8882[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8877 = [null, null, null, null, null, null, null, null];
              statearr_8877[0] = state_machine__5698__auto__;
              statearr_8877[1] = 1;
              return statearr_8877;
            };
            var state_machine__5698__auto____1 = function(state_8869) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8869);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8869) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8869);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8878 = f__5711__auto__.call(null);
        statearr_8878[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8878;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
intercomTake.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8903) {
            var state_val_8904 = state_8903[1];
            if (state_val_8904 === 2) {
              var inst_8900 = state_8903[2];
              var inst_8901 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_8900);
              var state_8903__$1 = state_8903;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8903__$1, inst_8901);
            } else {
              if (state_val_8904 === 1) {
                var inst_8896 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_8897 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_8898 = intercomTake.makeGetBlock.call(null, hash);
                var state_8903__$1 = function() {
                  var statearr_8905 = state_8903;
                  statearr_8905[5] = inst_8897;
                  statearr_8905[6] = inst_8896;
                  return statearr_8905;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8903__$1, 2, inst_8898);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8907 = [null, null, null, null, null, null, null];
              statearr_8907[0] = state_machine__5698__auto__;
              statearr_8907[1] = 1;
              return statearr_8907;
            };
            var state_machine__5698__auto____1 = function(state_8903) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8903);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8903) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8903);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8908 = f__5711__auto__.call(null);
        statearr_8908[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8908;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
goog.provide("intercom");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("intercomTake");
goog.require("intercomTake");
goog.require("intercomMake");
goog.require("intercomMake");
goog.require("logger");
goog.require("logger");
cljs.core.enable_console_print_BANG_.call(null);
intercom.intercomState = "start";
intercom.state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
intercom.inputch = cljs.core.async.chan.call(null);
intercom.outputch = cljs.core.async.chan.call(null);
intercom.statech = cljs.core.async.chan.call(null);
intercom.onMessage = function onMessage(wch, type, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), type + " message in intercom", data);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_9886) {
            var state_val_9887 = state_9886[1];
            if (state_val_9887 === 2) {
              var inst_9884 = state_9886[2];
              var state_9886__$1 = state_9886;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9886__$1, inst_9884);
            } else {
              if (state_val_9887 === 1) {
                var inst_9882 = {"type":type, "data":data, "peer":wch};
                var state_9886__$1 = state_9886;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9886__$1, 2, intercom.inputch, inst_9882);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9889 = [null, null, null, null, null];
              statearr_9889[0] = state_machine__5698__auto__;
              statearr_9889[1] = 1;
              return statearr_9889;
            };
            var state_machine__5698__auto____1 = function(state_9886) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9886);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9886) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9886);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_9890 = f__5711__auto__.call(null);
        statearr_9890[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_9890;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
intercom.setIntercomState = function setIntercomState(conn, state) {
  return conn.intercomstate = state;
};
intercom.getIntercomState = function getIntercomState(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "getIntercomState", "getIntercomState", -1128989799), "intercom state", conn);
  return conn["intercomstate"];
};
intercom.tostateu = function tostateu(conn, statename) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "changing state to: ", statename);
  return conn["intercomstate"] = statename;
};
intercom.typeof_QMARK_ = function typeof_QMARK_(message, type) {
  return message.type === type;
};
intercom.is_QMARK_ = function is_QMARK_(state, qstate) {
  return state === qstate;
};
intercom.intercomstatemachine = function intercomstatemachine(conn, message) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10120) {
            var state_val_10121 = state_10120[1];
            if (state_val_10121 === 7) {
              var inst_10063 = intercom.is_QMARK_.call(null, intercom.state, "grind");
              var state_10120__$1 = state_10120;
              if (inst_10063) {
                var statearr_10122_10171 = state_10120__$1;
                statearr_10122_10171[1] = 13;
              } else {
                var statearr_10123_10172 = state_10120__$1;
                statearr_10123_10172[1] = 14;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10121 === 20) {
                var inst_10075 = intercom.typeof_QMARK_.call(null, message, "getdata");
                var state_10120__$1 = state_10120;
                if (inst_10075) {
                  var statearr_10124_10173 = state_10120__$1;
                  statearr_10124_10173[1] = 22;
                } else {
                  var statearr_10125_10174 = state_10120__$1;
                  statearr_10125_10174[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10121 === 27) {
                  var inst_10105 = state_10120[2];
                  var state_10120__$1 = state_10120;
                  var statearr_10126_10175 = state_10120__$1;
                  statearr_10126_10175[2] = inst_10105;
                  statearr_10126_10175[1] = 24;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10121 === 1) {
                    var inst_10031 = cljs.core.partial.call(null, intercom.tostateu, conn);
                    var inst_10032 = intercom.tostate = inst_10031;
                    var inst_10033 = intercom.getIntercomState.call(null, conn);
                    var inst_10034 = intercom.state = inst_10033;
                    var inst_10035 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "starting loop in intercom");
                    var inst_10036 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state in intercom ", intercom.state);
                    var inst_10037 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message in intercom ", message);
                    var inst_10038 = message.data;
                    var inst_10039 = intercom.v = inst_10038;
                    var inst_10040 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state ", intercom.state);
                    var inst_10041 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message ", message);
                    var inst_10042 = intercom.is_QMARK_.call(null, intercom.state, "start");
                    var state_10120__$1 = function() {
                      var statearr_10127 = state_10120;
                      statearr_10127[5] = inst_10032;
                      statearr_10127[6] = inst_10040;
                      statearr_10127[7] = inst_10036;
                      statearr_10127[8] = inst_10041;
                      statearr_10127[9] = inst_10039;
                      statearr_10127[10] = inst_10034;
                      statearr_10127[11] = inst_10037;
                      statearr_10127[12] = inst_10035;
                      return statearr_10127;
                    }();
                    if (inst_10042) {
                      var statearr_10128_10176 = state_10120__$1;
                      statearr_10128_10176[1] = 2;
                    } else {
                      var statearr_10129_10177 = state_10120__$1;
                      statearr_10129_10177[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10121 === 24) {
                      var inst_10107 = state_10120[2];
                      var state_10120__$1 = state_10120;
                      var statearr_10130_10178 = state_10120__$1;
                      statearr_10130_10178[2] = inst_10107;
                      statearr_10130_10178[1] = 21;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10121 === 4) {
                        var inst_10118 = state_10120[2];
                        var state_10120__$1 = state_10120;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10120__$1, inst_10118);
                      } else {
                        if (state_val_10121 === 15) {
                          var inst_10114 = state_10120[2];
                          var state_10120__$1 = state_10120;
                          var statearr_10131_10179 = state_10120__$1;
                          statearr_10131_10179[2] = inst_10114;
                          statearr_10131_10179[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10121 === 21) {
                            var inst_10109 = state_10120[2];
                            var state_10120__$1 = state_10120;
                            var statearr_10132_10180 = state_10120__$1;
                            statearr_10132_10180[2] = inst_10109;
                            statearr_10132_10180[1] = 18;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10121 === 31) {
                              var inst_10092 = intercomTake.takeData.call(null, message);
                              var inst_10093 = intercom.tostate.call(null, inst_10092);
                              var state_10120__$1 = state_10120;
                              var statearr_10133_10181 = state_10120__$1;
                              statearr_10133_10181[2] = inst_10093;
                              statearr_10133_10181[1] = 33;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10121 === 32) {
                                var state_10120__$1 = state_10120;
                                var statearr_10134_10182 = state_10120__$1;
                                statearr_10134_10182[1] = 34;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10121 === 33) {
                                  var inst_10101 = state_10120[2];
                                  var state_10120__$1 = state_10120;
                                  var statearr_10136_10183 = state_10120__$1;
                                  statearr_10136_10183[2] = inst_10101;
                                  statearr_10136_10183[1] = 30;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10121 === 13) {
                                    var inst_10065 = intercom.typeof_QMARK_.call(null, message, "conn");
                                    var state_10120__$1 = state_10120;
                                    if (inst_10065) {
                                      var statearr_10137_10184 = state_10120__$1;
                                      statearr_10137_10184[1] = 16;
                                    } else {
                                      var statearr_10138_10185 = state_10120__$1;
                                      statearr_10138_10185[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10121 === 22) {
                                      var inst_10077 = intercomTake.takeGetData.call(null, message);
                                      var inst_10078 = intercom.tostate.call(null, inst_10077);
                                      var state_10120__$1 = state_10120;
                                      var statearr_10139_10186 = state_10120__$1;
                                      statearr_10139_10186[2] = inst_10078;
                                      statearr_10139_10186[1] = 24;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10121 === 36) {
                                        var inst_10099 = state_10120[2];
                                        var state_10120__$1 = state_10120;
                                        var statearr_10140_10187 = state_10120__$1;
                                        statearr_10140_10187[2] = inst_10099;
                                        statearr_10140_10187[1] = 33;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10121 === 29) {
                                          var inst_10090 = intercom.typeof_QMARK_.call(null, message, "data");
                                          var state_10120__$1 = state_10120;
                                          if (inst_10090) {
                                            var statearr_10141_10188 = state_10120__$1;
                                            statearr_10141_10188[1] = 31;
                                          } else {
                                            var statearr_10142_10189 = state_10120__$1;
                                            statearr_10142_10189[1] = 32;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10121 === 6) {
                                            var inst_10053 = intercom.typeof_QMARK_.call(null, message, "version");
                                            var state_10120__$1 = state_10120;
                                            if (inst_10053) {
                                              var statearr_10143_10190 = state_10120__$1;
                                              statearr_10143_10190[1] = 9;
                                            } else {
                                              var statearr_10144_10191 = state_10120__$1;
                                              statearr_10144_10191[1] = 10;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_10121 === 28) {
                                              var inst_10087 = intercomTake.takeTx.call(null, message);
                                              var inst_10088 = intercom.tostate.call(null, inst_10087);
                                              var state_10120__$1 = state_10120;
                                              var statearr_10145_10192 = state_10120__$1;
                                              statearr_10145_10192[2] = inst_10088;
                                              statearr_10145_10192[1] = 30;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_10121 === 25) {
                                                var inst_10082 = intercomTake.takeGetTx.call(null, message);
                                                var inst_10083 = intercom.tostate.call(null, inst_10082);
                                                var state_10120__$1 = state_10120;
                                                var statearr_10146_10193 = state_10120__$1;
                                                statearr_10146_10193[2] = inst_10083;
                                                statearr_10146_10193[1] = 27;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_10121 === 34) {
                                                  var inst_10096 = intercom.tostate.call(null, "grind");
                                                  var state_10120__$1 = state_10120;
                                                  var statearr_10147_10194 = state_10120__$1;
                                                  statearr_10147_10194[2] = inst_10096;
                                                  statearr_10147_10194[1] = 36;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_10121 === 17) {
                                                    var inst_10070 = intercom.typeof_QMARK_.call(null, message, "inv");
                                                    var state_10120__$1 = state_10120;
                                                    if (inst_10070) {
                                                      var statearr_10148_10195 = state_10120__$1;
                                                      statearr_10148_10195[1] = 19;
                                                    } else {
                                                      var statearr_10149_10196 = state_10120__$1;
                                                      statearr_10149_10196[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_10121 === 3) {
                                                      var inst_10051 = intercom.is_QMARK_.call(null, intercom.state, "version");
                                                      var state_10120__$1 = state_10120;
                                                      if (inst_10051) {
                                                        var statearr_10150_10197 = state_10120__$1;
                                                        statearr_10150_10197[1] = 6;
                                                      } else {
                                                        var statearr_10151_10198 = state_10120__$1;
                                                        statearr_10151_10198[1] = 7;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_10121 === 12) {
                                                        var inst_10057 = state_10120[2];
                                                        var inst_10058 = intercom.tostate.call(null, inst_10057);
                                                        var state_10120__$1 = state_10120;
                                                        var statearr_10152_10199 = state_10120__$1;
                                                        statearr_10152_10199[2] = inst_10058;
                                                        statearr_10152_10199[1] = 11;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_10121 === 2) {
                                                          var inst_10044 = intercomTake.takeConn.call(null, message);
                                                          var state_10120__$1 = state_10120;
                                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10120__$1, 5, inst_10044);
                                                        } else {
                                                          if (state_val_10121 === 23) {
                                                            var inst_10080 = intercom.typeof_QMARK_.call(null, message, "gettx");
                                                            var state_10120__$1 = state_10120;
                                                            if (inst_10080) {
                                                              var statearr_10153_10200 = state_10120__$1;
                                                              statearr_10153_10200[1] = 25;
                                                            } else {
                                                              var statearr_10154_10201 = state_10120__$1;
                                                              statearr_10154_10201[1] = 26;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_10121 === 35) {
                                                              var state_10120__$1 = state_10120;
                                                              var statearr_10155_10202 = state_10120__$1;
                                                              statearr_10155_10202[2] = null;
                                                              statearr_10155_10202[1] = 36;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_10121 === 19) {
                                                                var inst_10072 = intercomTake.takeInv.call(null, message);
                                                                var inst_10073 = intercom.tostate.call(null, inst_10072);
                                                                var state_10120__$1 = state_10120;
                                                                var statearr_10156_10203 = state_10120__$1;
                                                                statearr_10156_10203[2] = inst_10073;
                                                                statearr_10156_10203[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_10121 === 11) {
                                                                  var inst_10061 = state_10120[2];
                                                                  var state_10120__$1 = state_10120;
                                                                  var statearr_10157_10204 = state_10120__$1;
                                                                  statearr_10157_10204[2] = inst_10061;
                                                                  statearr_10157_10204[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_10121 === 9) {
                                                                    var inst_10055 = intercomTake.takeVersion.call(null, message);
                                                                    var state_10120__$1 = state_10120;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10120__$1, 12, inst_10055);
                                                                  } else {
                                                                    if (state_val_10121 === 5) {
                                                                      var inst_10046 = state_10120[2];
                                                                      var inst_10047 = intercom.newstate = inst_10046;
                                                                      var inst_10048 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "start -\x3e ", intercom.newstate);
                                                                      var inst_10049 = intercom.tostate.call(null, intercom.newstate);
                                                                      var state_10120__$1 = function() {
                                                                        var statearr_10158 = state_10120;
                                                                        statearr_10158[13] = inst_10048;
                                                                        statearr_10158[14] = inst_10047;
                                                                        return statearr_10158;
                                                                      }();
                                                                      var statearr_10159_10205 = state_10120__$1;
                                                                      statearr_10159_10205[2] = inst_10049;
                                                                      statearr_10159_10205[1] = 4;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_10121 === 14) {
                                                                        var state_10120__$1 = state_10120;
                                                                        var statearr_10160_10206 = state_10120__$1;
                                                                        statearr_10160_10206[2] = null;
                                                                        statearr_10160_10206[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_10121 === 26) {
                                                                          var inst_10085 = intercom.typeof_QMARK_.call(null, message, "tx");
                                                                          var state_10120__$1 = state_10120;
                                                                          if (inst_10085) {
                                                                            var statearr_10161_10207 = state_10120__$1;
                                                                            statearr_10161_10207[1] = 28;
                                                                          } else {
                                                                            var statearr_10162_10208 = state_10120__$1;
                                                                            statearr_10162_10208[1] = 29;
                                                                          }
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_10121 === 16) {
                                                                            var inst_10067 = intercomTake.takeConn.call(null, message);
                                                                            var inst_10068 = intercom.tostate.call(null, inst_10067);
                                                                            var state_10120__$1 = state_10120;
                                                                            var statearr_10163_10209 = state_10120__$1;
                                                                            statearr_10163_10209[2] = inst_10068;
                                                                            statearr_10163_10209[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_10121 === 30) {
                                                                              var inst_10103 = state_10120[2];
                                                                              var state_10120__$1 = state_10120;
                                                                              var statearr_10164_10210 = state_10120__$1;
                                                                              statearr_10164_10210[2] = inst_10103;
                                                                              statearr_10164_10210[1] = 27;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_10121 === 10) {
                                                                                var state_10120__$1 = state_10120;
                                                                                var statearr_10165_10211 = state_10120__$1;
                                                                                statearr_10165_10211[2] = null;
                                                                                statearr_10165_10211[1] = 11;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_10121 === 18) {
                                                                                  var inst_10111 = state_10120[2];
                                                                                  var state_10120__$1 = state_10120;
                                                                                  var statearr_10166_10212 = state_10120__$1;
                                                                                  statearr_10166_10212[2] = inst_10111;
                                                                                  statearr_10166_10212[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_10121 === 8) {
                                                                                    var inst_10116 = state_10120[2];
                                                                                    var state_10120__$1 = state_10120;
                                                                                    var statearr_10167_10213 = state_10120__$1;
                                                                                    statearr_10167_10213[2] = inst_10116;
                                                                                    statearr_10167_10213[1] = 4;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    return null;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10169 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10169[0] = state_machine__5698__auto__;
              statearr_10169[1] = 1;
              return statearr_10169;
            };
            var state_machine__5698__auto____1 = function(state_10120) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10120);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10120) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10120);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10170 = f__5711__auto__.call(null);
        statearr_10170[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10170;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
goog.provide("communications");
goog.require("cljs.core");
goog.require("crypto");
goog.require("mining");
goog.require("peerjs");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("intercom");
goog.require("intercomMake");
goog.require("intercom");
goog.require("intercomMake");
goog.require("pubsub");
goog.require("blockchain");
goog.require("peerjs");
goog.require("cljs.core.async");
goog.require("database");
goog.require("logger");
goog.require("mining");
goog.require("logger");
goog.require("blockchain");
goog.require("database");
goog.require("crypto");
communications.intercomMeta = function() {
  var obj9325 = {"id":1, "knownPeers":cljs.core.PersistentVector.EMPTY, "knownPeersChannels":cljs.core.PersistentVector.EMPTY, "p2pchans":cljs.core.PersistentVector.EMPTY};
  return obj9325;
}();
communications.peers = cljs.core.PersistentVector.EMPTY;
communications.connectionch = cljs.core.async.chan.call(null);
communications.broadcastNewBlock = function broadcastNewBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block", blockk);
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block to ", communications.intercomMeta.knownPeersChannels);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_9471) {
            var state_val_9472 = state_9471[1];
            if (state_val_9472 === 7) {
              var inst_9421 = state_9471[5];
              var inst_9419 = state_9471[6];
              var inst_9420 = state_9471[7];
              var inst_9422 = state_9471[8];
              var inst_9436 = state_9471[2];
              var inst_9437 = inst_9422 + 1;
              var tmp9473 = inst_9421;
              var tmp9474 = inst_9419;
              var tmp9475 = inst_9420;
              var inst_9419__$1 = tmp9474;
              var inst_9420__$1 = tmp9475;
              var inst_9421__$1 = tmp9473;
              var inst_9422__$1 = inst_9437;
              var state_9471__$1 = function() {
                var statearr_9476 = state_9471;
                statearr_9476[5] = inst_9421__$1;
                statearr_9476[9] = inst_9436;
                statearr_9476[6] = inst_9419__$1;
                statearr_9476[7] = inst_9420__$1;
                statearr_9476[8] = inst_9422__$1;
                return statearr_9476;
              }();
              var statearr_9477_9500 = state_9471__$1;
              statearr_9477_9500[2] = null;
              statearr_9477_9500[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9472 === 1) {
                var inst_9417 = communications.intercomMeta.knownPeersChannels;
                var inst_9418 = cljs.core.seq.call(null, inst_9417);
                var inst_9419 = inst_9418;
                var inst_9420 = null;
                var inst_9421 = 0;
                var inst_9422 = 0;
                var state_9471__$1 = function() {
                  var statearr_9478 = state_9471;
                  statearr_9478[5] = inst_9421;
                  statearr_9478[6] = inst_9419;
                  statearr_9478[7] = inst_9420;
                  statearr_9478[8] = inst_9422;
                  return statearr_9478;
                }();
                var statearr_9479_9501 = state_9471__$1;
                statearr_9479_9501[2] = null;
                statearr_9479_9501[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9472 === 4) {
                  var inst_9420 = state_9471[7];
                  var inst_9422 = state_9471[8];
                  var inst_9427 = cljs.core._nth.call(null, inst_9420, inst_9422);
                  var inst_9428 = "broadsacting new block to peer " + inst_9427;
                  var inst_9429 = inst_9428 + " ";
                  var inst_9430 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_9429, blockk);
                  var inst_9431 = [];
                  var inst_9432 = communications.vectoR = inst_9431;
                  var inst_9433 = communications.vectoR.push(blockk);
                  var inst_9434 = intercomMake.makeInv.call(null, "block", communications.vectoR);
                  var state_9471__$1 = function() {
                    var statearr_9480 = state_9471;
                    statearr_9480[10] = inst_9433;
                    statearr_9480[11] = inst_9432;
                    statearr_9480[12] = inst_9430;
                    return statearr_9480;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9471__$1, 7, inst_9427, inst_9434);
                } else {
                  if (state_val_9472 === 13) {
                    var inst_9462 = state_9471[2];
                    var state_9471__$1 = state_9471;
                    var statearr_9481_9502 = state_9471__$1;
                    statearr_9481_9502[2] = inst_9462;
                    statearr_9481_9502[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9472 === 6) {
                      var inst_9467 = state_9471[2];
                      var state_9471__$1 = state_9471;
                      var statearr_9482_9503 = state_9471__$1;
                      statearr_9482_9503[2] = inst_9467;
                      statearr_9482_9503[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9472 === 3) {
                        var inst_9469 = state_9471[2];
                        var state_9471__$1 = state_9471;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9471__$1, inst_9469);
                      } else {
                        if (state_val_9472 === 12) {
                          var inst_9440 = state_9471[13];
                          var inst_9449 = cljs.core.first.call(null, inst_9440);
                          var inst_9450 = "broadsacting new block to peer " + inst_9449;
                          var inst_9451 = inst_9450 + " ";
                          var inst_9452 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_9451, blockk);
                          var inst_9453 = [];
                          var inst_9454 = communications.vectoR = inst_9453;
                          var inst_9455 = communications.vectoR.push(blockk);
                          var inst_9456 = intercomMake.makeInv.call(null, "block", communications.vectoR);
                          var state_9471__$1 = function() {
                            var statearr_9483 = state_9471;
                            statearr_9483[14] = inst_9452;
                            statearr_9483[15] = inst_9455;
                            statearr_9483[16] = inst_9454;
                            return statearr_9483;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9471__$1, 14, inst_9449, inst_9456);
                        } else {
                          if (state_val_9472 === 2) {
                            var inst_9421 = state_9471[5];
                            var inst_9422 = state_9471[8];
                            var inst_9424 = inst_9422 < inst_9421;
                            var inst_9425 = inst_9424;
                            var state_9471__$1 = state_9471;
                            if (cljs.core.truth_(inst_9425)) {
                              var statearr_9484_9504 = state_9471__$1;
                              statearr_9484_9504[1] = 4;
                            } else {
                              var statearr_9485_9505 = state_9471__$1;
                              statearr_9485_9505[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9472 === 11) {
                              var inst_9440 = state_9471[13];
                              var inst_9444 = cljs.core.chunk_first.call(null, inst_9440);
                              var inst_9445 = cljs.core.chunk_rest.call(null, inst_9440);
                              var inst_9446 = cljs.core.count.call(null, inst_9444);
                              var inst_9419 = inst_9445;
                              var inst_9420 = inst_9444;
                              var inst_9421 = inst_9446;
                              var inst_9422 = 0;
                              var state_9471__$1 = function() {
                                var statearr_9486 = state_9471;
                                statearr_9486[5] = inst_9421;
                                statearr_9486[6] = inst_9419;
                                statearr_9486[7] = inst_9420;
                                statearr_9486[8] = inst_9422;
                                return statearr_9486;
                              }();
                              var statearr_9487_9506 = state_9471__$1;
                              statearr_9487_9506[2] = null;
                              statearr_9487_9506[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9472 === 9) {
                                var state_9471__$1 = state_9471;
                                var statearr_9488_9507 = state_9471__$1;
                                statearr_9488_9507[2] = null;
                                statearr_9488_9507[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9472 === 5) {
                                  var inst_9419 = state_9471[6];
                                  var inst_9440 = state_9471[13];
                                  var inst_9440__$1 = cljs.core.seq.call(null, inst_9419);
                                  var state_9471__$1 = function() {
                                    var statearr_9489 = state_9471;
                                    statearr_9489[13] = inst_9440__$1;
                                    return statearr_9489;
                                  }();
                                  if (inst_9440__$1) {
                                    var statearr_9490_9508 = state_9471__$1;
                                    statearr_9490_9508[1] = 8;
                                  } else {
                                    var statearr_9491_9509 = state_9471__$1;
                                    statearr_9491_9509[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9472 === 14) {
                                    var inst_9440 = state_9471[13];
                                    var inst_9458 = state_9471[2];
                                    var inst_9459 = cljs.core.next.call(null, inst_9440);
                                    var inst_9419 = inst_9459;
                                    var inst_9420 = null;
                                    var inst_9421 = 0;
                                    var inst_9422 = 0;
                                    var state_9471__$1 = function() {
                                      var statearr_9492 = state_9471;
                                      statearr_9492[5] = inst_9421;
                                      statearr_9492[6] = inst_9419;
                                      statearr_9492[7] = inst_9420;
                                      statearr_9492[17] = inst_9458;
                                      statearr_9492[8] = inst_9422;
                                      return statearr_9492;
                                    }();
                                    var statearr_9493_9510 = state_9471__$1;
                                    statearr_9493_9510[2] = null;
                                    statearr_9493_9510[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9472 === 10) {
                                      var inst_9465 = state_9471[2];
                                      var state_9471__$1 = state_9471;
                                      var statearr_9494_9511 = state_9471__$1;
                                      statearr_9494_9511[2] = inst_9465;
                                      statearr_9494_9511[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9472 === 8) {
                                        var inst_9440 = state_9471[13];
                                        var inst_9442 = cljs.core.chunked_seq_QMARK_.call(null, inst_9440);
                                        var state_9471__$1 = state_9471;
                                        if (inst_9442) {
                                          var statearr_9495_9512 = state_9471__$1;
                                          statearr_9495_9512[1] = 11;
                                        } else {
                                          var statearr_9496_9513 = state_9471__$1;
                                          statearr_9496_9513[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9498 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_9498[0] = state_machine__5698__auto__;
              statearr_9498[1] = 1;
              return statearr_9498;
            };
            var state_machine__5698__auto____1 = function(state_9471) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9471);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9471) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9471);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_9499 = f__5711__auto__.call(null);
        statearr_9499[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_9499;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
communications.sendmsg = function sendmsg(peer, type, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "sending " + type, msg);
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "peer ", peer);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_9531) {
            var state_val_9532 = state_9531[1];
            if (state_val_9532 === 2) {
              var inst_9529 = state_9531[2];
              var state_9531__$1 = state_9531;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9531__$1, inst_9529);
            } else {
              if (state_val_9532 === 1) {
                var inst_9527 = {"type":type, "msg":msg};
                var state_9531__$1 = state_9531;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9531__$1, 2, peer, inst_9527);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9534 = [null, null, null, null, null];
              statearr_9534[0] = state_machine__5698__auto__;
              statearr_9534[1] = 1;
              return statearr_9534;
            };
            var state_machine__5698__auto____1 = function(state_9531) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9531);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9531) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9531);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_9535 = f__5711__auto__.call(null);
        statearr_9535[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_9535;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
communications.onOpen = function onOpen(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection opened trying to send data trough");
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), conn);
  conn.connType = "saltan";
  var c__5710__auto___9552 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___9552) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___9552) {
          return function(state_9547) {
            var state_val_9548 = state_9547[1];
            if (state_val_9548 === 2) {
              var inst_9545 = state_9547[2];
              var state_9547__$1 = state_9547;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9547__$1, inst_9545);
            } else {
              if (state_val_9548 === 1) {
                var state_9547__$1 = state_9547;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9547__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto___9552);
        return function(switch__5697__auto__, c__5710__auto___9552) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9550 = [null, null, null, null, null];
              statearr_9550[0] = state_machine__5698__auto__;
              statearr_9550[1] = 1;
              return statearr_9550;
            };
            var state_machine__5698__auto____1 = function(state_9547) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9547);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9547) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9547);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___9552);
      }();
      var state__5712__auto__ = function() {
        var statearr_9551 = f__5711__auto__.call(null);
        statearr_9551[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___9552;
        return statearr_9551;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___9552));
  return logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "conn: ", conn);
};
communications.onConnection = function onConnection(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection is opened now try to send something");
  conn.connType = "tsaritsa";
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_9564) {
            var state_val_9565 = state_9564[1];
            if (state_val_9565 === 2) {
              var inst_9562 = state_9564[2];
              var state_9564__$1 = state_9564;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9564__$1, inst_9562);
            } else {
              if (state_val_9565 === 1) {
                var state_9564__$1 = state_9564;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9564__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9567 = [null, null, null, null, null];
              statearr_9567[0] = state_machine__5698__auto__;
              statearr_9567[1] = 1;
              return statearr_9567;
            };
            var state_machine__5698__auto____1 = function(state_9564) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9564);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9564) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9564);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_9568 = f__5711__auto__.call(null);
        statearr_9568[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_9568;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
communications.onData = function onData(read, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "data recieved", data);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_9580) {
            var state_val_9581 = state_9580[1];
            if (state_val_9581 === 2) {
              var inst_9578 = state_9580[2];
              var state_9580__$1 = state_9580;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9580__$1, inst_9578);
            } else {
              if (state_val_9581 === 1) {
                var state_9580__$1 = state_9580;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9580__$1, 2, read, data);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9583 = [null, null, null, null, null];
              statearr_9583[0] = state_machine__5698__auto__;
              statearr_9583[1] = 1;
              return statearr_9583;
            };
            var state_machine__5698__auto____1 = function(state_9580) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9580);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9580) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9580);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_9584 = f__5711__auto__.call(null);
        statearr_9584[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_9584;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
communications.channelsFromConnection = function channelsFromConnection(conn) {
  communications.readc = cljs.core.async.chan.call(null, 10);
  communications.writec = cljs.core.async.chan.call(null, 10);
  communications.readc.writec = communications.writec;
  communications.readc.type = "readch";
  communications.writec.type = "writech";
  conn.writec = communications.writec;
  conn.readc = communications.readc;
  communications.readc.conn = conn;
  communications.writec.conn = conn;
  conn.on("data", cljs.core.partial.call(null, communications.onData, communications.readc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.readc, communications.writec], null);
};
communications.startP2PCommLoop = function startP2PCommLoop() {
  communications.stated = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.connectionch], null);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_9739) {
            var state_val_9740 = state_9739[1];
            if (state_val_9740 === 7) {
              var inst_9734 = state_9739[2];
              var state_9739__$1 = function() {
                var statearr_9741 = state_9739;
                statearr_9741[5] = inst_9734;
                return statearr_9741;
              }();
              var statearr_9742_9769 = state_9739__$1;
              statearr_9742_9769[2] = null;
              statearr_9742_9769[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_9740 === 1) {
                var state_9739__$1 = state_9739;
                var statearr_9743_9770 = state_9739__$1;
                statearr_9743_9770[2] = null;
                statearr_9743_9770[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9740 === 4) {
                  var inst_9681 = state_9739[2];
                  var inst_9682 = communications.v = inst_9681;
                  var inst_9683 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got from state", communications.v);
                  var inst_9684 = cljs.core.nth.call(null, communications.v, 0);
                  var inst_9685 = communications.vrecieved = inst_9684;
                  var inst_9686 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_9687 = communications.ch2 = inst_9686;
                  var inst_9688 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_9689 = inst_9688 === communications.connectionch;
                  var state_9739__$1 = function() {
                    var statearr_9744 = state_9739;
                    statearr_9744[6] = inst_9687;
                    statearr_9744[7] = inst_9685;
                    statearr_9744[8] = inst_9683;
                    statearr_9744[9] = inst_9682;
                    return statearr_9744;
                  }();
                  if (cljs.core.truth_(inst_9689)) {
                    var statearr_9745_9771 = state_9739__$1;
                    statearr_9745_9771[1] = 5;
                  } else {
                    var statearr_9746_9772 = state_9739__$1;
                    statearr_9746_9772[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9740 === 15) {
                    var state_9739__$1 = state_9739;
                    var statearr_9747_9773 = state_9739__$1;
                    statearr_9747_9773[2] = null;
                    statearr_9747_9773[1] = 16;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9740 === 13) {
                      var inst_9714 = state_9739[2];
                      var inst_9715 = communications.ch2.writec;
                      var inst_9716 = communications.vrecieved.peer = inst_9715;
                      var inst_9717 = communications.ch2.conn;
                      var inst_9718 = intercom.intercomstatemachine.call(null, inst_9717, communications.vrecieved);
                      var state_9739__$1 = function() {
                        var statearr_9748 = state_9739;
                        statearr_9748[10] = inst_9716;
                        statearr_9748[11] = inst_9714;
                        return statearr_9748;
                      }();
                      var statearr_9749_9774 = state_9739__$1;
                      statearr_9749_9774[2] = inst_9718;
                      statearr_9749_9774[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9740 === 6) {
                        var inst_9702 = communications.ch2.type;
                        var inst_9703 = inst_9702 === "readch";
                        var state_9739__$1 = state_9739;
                        if (cljs.core.truth_(inst_9703)) {
                          var statearr_9750_9775 = state_9739__$1;
                          statearr_9750_9775[1] = 8;
                        } else {
                          var statearr_9751_9776 = state_9739__$1;
                          statearr_9751_9776[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_9740 === 3) {
                          var inst_9737 = state_9739[2];
                          var state_9739__$1 = state_9739;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9739__$1, inst_9737);
                        } else {
                          if (state_val_9740 === 12) {
                            var state_9739__$1 = state_9739;
                            var statearr_9752_9777 = state_9739__$1;
                            statearr_9752_9777[2] = null;
                            statearr_9752_9777[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9740 === 2) {
                              var inst_9678 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "new iteration with state");
                              var inst_9679 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "state ", communications.stated);
                              var state_9739__$1 = function() {
                                var statearr_9753 = state_9739;
                                statearr_9753[12] = inst_9679;
                                statearr_9753[13] = inst_9678;
                                return statearr_9753;
                              }();
                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_9739__$1, 4, communications.stated);
                            } else {
                              if (state_val_9740 === 11) {
                                var inst_9709 = communications.vrecieved.data;
                                var inst_9710 = JSON.parse(inst_9709);
                                var inst_9711 = communications.vrecieved = inst_9710;
                                var state_9739__$1 = state_9739;
                                var statearr_9754_9778 = state_9739__$1;
                                statearr_9754_9778[2] = inst_9711;
                                statearr_9754_9778[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9740 === 9) {
                                  var inst_9720 = communications.ch2.type;
                                  var inst_9721 = inst_9720 === "writech";
                                  var state_9739__$1 = state_9739;
                                  if (cljs.core.truth_(inst_9721)) {
                                    var statearr_9755_9779 = state_9739__$1;
                                    statearr_9755_9779[1] = 14;
                                  } else {
                                    var statearr_9756_9780 = state_9739__$1;
                                    statearr_9756_9780[1] = 15;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9740 === 5) {
                                    var inst_9691 = cljs.core.PersistentVector.EMPTY;
                                    var inst_9692 = communications.onNewConnection.call(null, communications.vrecieved);
                                    var inst_9693 = cljs.core.concat.call(null, communications.stated, inst_9692);
                                    var inst_9694 = cljs.core.into.call(null, inst_9691, inst_9693);
                                    var inst_9695 = communications.stated = inst_9694;
                                    var inst_9696 = intercom.getIntercomState.call(null, communications.vrecieved);
                                    var inst_9697 = communications.stat = inst_9696;
                                    var inst_9698 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "intercom state", communications.stat);
                                    var inst_9699 = intercomMake.makeConn.call(null, communications.vrecieved);
                                    var inst_9700 = intercom.intercomstatemachine.call(null, communications.vrecieved, inst_9699);
                                    var state_9739__$1 = function() {
                                      var statearr_9757 = state_9739;
                                      statearr_9757[14] = inst_9695;
                                      statearr_9757[15] = inst_9698;
                                      statearr_9757[16] = inst_9697;
                                      return statearr_9757;
                                    }();
                                    var statearr_9758_9781 = state_9739__$1;
                                    statearr_9758_9781[2] = inst_9700;
                                    statearr_9758_9781[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9740 === 14) {
                                      var inst_9723 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "sending to peer ", communications.vrecieved);
                                      var inst_9724 = communications.ch2.conn;
                                      var inst_9725 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "connection being sent to ", inst_9724);
                                      var inst_9726 = communications.ch2.conn;
                                      var inst_9727 = inst_9726.send(communications.vrecieved);
                                      var state_9739__$1 = function() {
                                        var statearr_9759 = state_9739;
                                        statearr_9759[17] = inst_9725;
                                        statearr_9759[18] = inst_9723;
                                        return statearr_9759;
                                      }();
                                      var statearr_9760_9782 = state_9739__$1;
                                      statearr_9760_9782[2] = inst_9727;
                                      statearr_9760_9782[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9740 === 16) {
                                        var inst_9730 = state_9739[2];
                                        var state_9739__$1 = state_9739;
                                        var statearr_9761_9783 = state_9739__$1;
                                        statearr_9761_9783[2] = inst_9730;
                                        statearr_9761_9783[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_9740 === 10) {
                                          var inst_9732 = state_9739[2];
                                          var state_9739__$1 = state_9739;
                                          var statearr_9762_9784 = state_9739__$1;
                                          statearr_9762_9784[2] = inst_9732;
                                          statearr_9762_9784[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_9740 === 8) {
                                            var inst_9705 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "recieved from peer ", communications.vrecieved);
                                            var inst_9706 = communications.vrecieved.type;
                                            var inst_9707 = inst_9706 === "json";
                                            var state_9739__$1 = function() {
                                              var statearr_9763 = state_9739;
                                              statearr_9763[19] = inst_9705;
                                              return statearr_9763;
                                            }();
                                            if (cljs.core.truth_(inst_9707)) {
                                              var statearr_9764_9785 = state_9739__$1;
                                              statearr_9764_9785[1] = 11;
                                            } else {
                                              var statearr_9765_9786 = state_9739__$1;
                                              statearr_9765_9786[1] = 12;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9767 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_9767[0] = state_machine__5698__auto__;
              statearr_9767[1] = 1;
              return statearr_9767;
            };
            var state_machine__5698__auto____1 = function(state_9739) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9739);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9739) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9739);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_9768 = f__5711__auto__.call(null);
        statearr_9768[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_9768;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
communications.onNewConnection = function onNewConnection(message) {
  communications.gconn = message;
  intercom.setIntercomState.call(null, message, "start");
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "got new connection", message);
  communications.peerChannels = communications.channelsFromConnection.call(null, message);
  communications.intercomMeta.knownPeers = cljs.core.conj.call(null, communications.intercomMeta.knownPeers, message.peer);
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "adding w channel to kpeers ", cljs.core.nth.call(null, communications.peerChannels, 1));
  communications.intercomMeta.p2pchans = cljs.core.concat.call(null, communications.intercomMeta.p2pchans, communications.peerChannels);
  communications.intercomMeta.knownPeersChannels = cljs.core.conj.call(null, communications.intercomMeta.knownPeersChannels, cljs.core.nth.call(null, communications.peerChannels, 1));
  logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "new state");
  return communications.peerChannels;
};
communications.onBlockMined = function onBlockMined(message) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_9834) {
            var state_val_9835 = state_9834[1];
            if (state_val_9835 === 4) {
              var inst_9829 = state_9834[2];
              var inst_9830 = communications.gotFromHash = inst_9829;
              var inst_9831 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got from hash ", communications.gotFromHash);
              var inst_9832 = communications.broadcastNewBlock.call(null, communications.gotFromHash);
              var state_9834__$1 = function() {
                var statearr_9836 = state_9834;
                statearr_9836[5] = inst_9830;
                statearr_9836[6] = inst_9831;
                return statearr_9836;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9834__$1, inst_9832);
            } else {
              if (state_val_9835 === 3) {
                var inst_9825 = state_9834[2];
                var inst_9826 = communications.blockk.hash;
                var inst_9827 = database.g.call(null, inst_9826);
                var state_9834__$1 = function() {
                  var statearr_9837 = state_9834;
                  statearr_9837[7] = inst_9825;
                  return statearr_9837;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9834__$1, 4, inst_9827);
              } else {
                if (state_val_9835 === 2) {
                  var inst_9818 = state_9834[2];
                  var inst_9819 = communications.blockk = inst_9818;
                  var inst_9820 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "just made new block ", communications.blockk);
                  var inst_9821 = communications.blockk.hash;
                  var inst_9822 = logger.og.call(null, new cljs.core.Keyword(null, "message", "message", -406056002), "hash to get ", inst_9821);
                  var inst_9823 = blockchain.saveBlock.call(null, app.pouchDB.dbase, communications.blockk);
                  var state_9834__$1 = function() {
                    var statearr_9838 = state_9834;
                    statearr_9838[8] = inst_9820;
                    statearr_9838[9] = inst_9819;
                    statearr_9838[10] = inst_9822;
                    return statearr_9838;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9834__$1, 3, inst_9823);
                } else {
                  if (state_val_9835 === 1) {
                    var inst_9815 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "recieved from worker ", message);
                    var inst_9816 = blockchain.makeBlock.call(null, message);
                    var state_9834__$1 = function() {
                      var statearr_9839 = state_9834;
                      statearr_9839[11] = inst_9815;
                      return statearr_9839;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9834__$1, 2, inst_9816);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_9841 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_9841[0] = state_machine__5698__auto__;
              statearr_9841[1] = 1;
              return statearr_9841;
            };
            var state_machine__5698__auto____1 = function(state_9834) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_9834);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_9834) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_9834);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_9842 = f__5711__auto__.call(null);
        statearr_9842[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_9842;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
communications.onTransaction = function onTransaction(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onTransaction", "onTransaction", 1991881135), "recieved new transaction ", message);
  return crypto.sha256.call(null, message);
};
communications.onCrypto = function onCrypto(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "recieved from crypto ", message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "mempoll \x3d ", blockchain.memPool);
  blockchain.addTransactionToMemPool.call(null, message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), message["type"]);
  if (message["type"] === "fmr") {
    logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "merkle root ", message);
    mining.mine.call(null, message["value"]);
  } else {
  }
  if (cljs.core.count.call(null, blockchain.memPool) > 3) {
    var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
      return function() {
        var f__5711__auto__ = function() {
          var switch__5697__auto__ = function(c__5710__auto__) {
            return function(state_9863) {
              var state_val_9864 = state_9863[1];
              if (state_val_9864 === 2) {
                var inst_9858 = state_9863[2];
                var inst_9859 = communications.fmroot = inst_9858;
                var inst_9860 = logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "calculating hash of transactions %s", communications.fmroot);
                var inst_9861 = mining.mine.call(null, communications.fmroot);
                var state_9863__$1 = function() {
                  var statearr_9865 = state_9863;
                  statearr_9865[5] = inst_9860;
                  statearr_9865[6] = inst_9859;
                  return statearr_9865;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9863__$1, inst_9861);
              } else {
                if (state_val_9864 === 1) {
                  var inst_9856 = crypto.merkleRoot.call(null, blockchain.memPool);
                  var state_9863__$1 = state_9863;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9863__$1, 2, inst_9856);
                } else {
                  return null;
                }
              }
            };
          }(c__5710__auto__);
          return function(switch__5697__auto__, c__5710__auto__) {
            return function() {
              var state_machine__5698__auto__ = null;
              var state_machine__5698__auto____0 = function() {
                var statearr_9867 = [null, null, null, null, null, null, null];
                statearr_9867[0] = state_machine__5698__auto__;
                statearr_9867[1] = 1;
                return statearr_9867;
              };
              var state_machine__5698__auto____1 = function(state_9863) {
                while (true) {
                  var result__5699__auto__ = switch__5697__auto__.call(null, state_9863);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__5699__auto__;
                  }
                  break;
                }
              };
              state_machine__5698__auto__ = function(state_9863) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5698__auto____0.call(this);
                  case 1:
                    return state_machine__5698__auto____1.call(this, state_9863);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
              state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
              return state_machine__5698__auto__;
            }();
          }(switch__5697__auto__, c__5710__auto__);
        }();
        var state__5712__auto__ = function() {
          var statearr_9868 = f__5711__auto__.call(null);
          statearr_9868[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
          return statearr_9868;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
      };
    }(c__5710__auto__));
    return c__5710__auto__;
  } else {
    return null;
  }
};
communications.setupComm = function setupComm() {
  pubsub.sub.call(null, "blockMined", communications.onBlockMined);
  pubsub.sub.call(null, "crypto", communications.onCrypto);
  pubsub.sub.call(null, "transaction", communications.onTransaction);
  return pubsub.sub.call(null, "newConnection", communications.onNewConnection);
};
goog.provide("app.crypto");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("logger");
goog.require("database");
goog.require("database");
app.crypto.bHash = function bHash(blockHeader) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8190) {
            var state_val_8191 = state_8190[1];
            if (state_val_8191 === 2) {
              var inst_8187 = state_8190[2];
              var inst_8188 = app.crypto.blockHash = inst_8187;
              var state_8190__$1 = function() {
                var statearr_8192 = state_8190;
                statearr_8192[5] = inst_8188;
                return statearr_8192;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8190__$1, app.crypto.blockHash);
            } else {
              if (state_val_8191 === 1) {
                var inst_8182 = JSON.stringify(blockHeader);
                var inst_8183 = app.crypto.stringified = inst_8182;
                var inst_8184 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "stringified", app.crypto.stringified);
                var inst_8185 = app.crypto.s256.call(null, app.crypto.stringified);
                var state_8190__$1 = function() {
                  var statearr_8193 = state_8190;
                  statearr_8193[6] = inst_8183;
                  statearr_8193[7] = inst_8184;
                  return statearr_8193;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8190__$1, 2, inst_8185);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8195 = [null, null, null, null, null, null, null, null];
              statearr_8195[0] = state_machine__5698__auto__;
              statearr_8195[1] = 1;
              return statearr_8195;
            };
            var state_machine__5698__auto____1 = function(state_8190) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8190);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8190) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8190);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8196 = f__5711__auto__.call(null);
        statearr_8196[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8196;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
app.crypto.arraybtostring = function arraybtostring(buff) {
  return arrayBToString(buff);
};
app.crypto.encode = function encode(x) {
  return(new TextEncoder("utf-8")).encode(x);
};
app.crypto.merkleRoot = function merkleRoot(transactions) {
  logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions ", transactions);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8338) {
            var state_val_8339 = state_8338[1];
            if (state_val_8339 === 9) {
              var inst_8330 = state_8338[2];
              var inst_8331 = app.crypto.fromC = inst_8330;
              var inst_8332 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "from ch ", app.crypto.fromC);
              var inst_8333 = app.crypto.fromC.type = "fmr";
              var inst_8336 = {"value":app.crypto.fromC, "type":"fmr"};
              var state_8338__$1 = function() {
                var statearr_8341 = state_8338;
                statearr_8341[5] = inst_8331;
                statearr_8341[6] = inst_8332;
                statearr_8341[7] = inst_8333;
                return statearr_8341;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8338__$1, inst_8336);
            } else {
              if (state_val_8339 === 8) {
                var inst_8326 = state_8338[2];
                var state_8338__$1 = state_8338;
                var statearr_8342_8361 = state_8338__$1;
                statearr_8342_8361[2] = inst_8326;
                statearr_8342_8361[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_8339 === 7) {
                  var inst_8304 = state_8338[8];
                  var inst_8322 = inst_8304.shift();
                  var inst_8323 = inst_8304.length;
                  var tmp8340 = inst_8304;
                  var inst_8302 = inst_8322;
                  var inst_8303 = inst_8323;
                  var inst_8304__$1 = tmp8340;
                  var state_8338__$1 = function() {
                    var statearr_8343 = state_8338;
                    statearr_8343[8] = inst_8304__$1;
                    statearr_8343[9] = inst_8302;
                    statearr_8343[10] = inst_8303;
                    return statearr_8343;
                  }();
                  var statearr_8344_8362 = state_8338__$1;
                  statearr_8344_8362[2] = null;
                  statearr_8344_8362[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_8339 === 6) {
                    var inst_8304 = state_8338[8];
                    var inst_8302 = state_8338[9];
                    var inst_8303 = state_8338[10];
                    var inst_8318 = cljs.core.async.chan.call(null, 1);
                    var inst_8319 = function() {
                      var c__5710__auto____$1 = inst_8318;
                      var next = inst_8302;
                      var cnt = inst_8303;
                      var txs = inst_8304;
                      return function(c__5710__auto____$1, next, cnt, txs, inst_8304, inst_8302, inst_8303, inst_8318, state_val_8339, c__5710__auto__) {
                        return function() {
                          var f__5711__auto__ = function() {
                            var switch__5697__auto__ = function(c__5710__auto____$1, next, cnt, txs, inst_8304, inst_8302, inst_8303, inst_8318, state_val_8339, c__5710__auto__) {
                              return function(state_8316) {
                                var state_val_8317 = state_8316[1];
                                if (state_val_8317 === 1) {
                                  var state_8316__$1 = state_8316;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8316__$1, null);
                                } else {
                                  return null;
                                }
                              };
                            }(c__5710__auto____$1, next, cnt, txs, inst_8304, inst_8302, inst_8303, inst_8318, state_val_8339, c__5710__auto__);
                            return function(switch__5697__auto__, c__5710__auto____$1, next, cnt, txs, inst_8304, inst_8302, inst_8303, inst_8318, state_val_8339, c__5710__auto__) {
                              return function() {
                                var state_machine__5698__auto__ = null;
                                var state_machine__5698__auto____0 = function() {
                                  var statearr_8346 = [null, null, null, null, null];
                                  statearr_8346[0] = state_machine__5698__auto__;
                                  statearr_8346[1] = 1;
                                  return statearr_8346;
                                };
                                var state_machine__5698__auto____1 = function(state_8316) {
                                  while (true) {
                                    var result__5699__auto__ = switch__5697__auto__.call(null, state_8316);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__5699__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__5698__auto__ = function(state_8316) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__5698__auto____0.call(this);
                                    case 1:
                                      return state_machine__5698__auto____1.call(this, state_8316);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
                                state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
                                return state_machine__5698__auto__;
                              }();
                            }(switch__5697__auto__, c__5710__auto____$1, next, cnt, txs, inst_8304, inst_8302, inst_8303, inst_8318, state_val_8339, c__5710__auto__);
                          }();
                          var state__5712__auto__ = function() {
                            var statearr_8347 = f__5711__auto__.call(null);
                            statearr_8347[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto____$1;
                            return statearr_8347;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
                        };
                      }(c__5710__auto____$1, next, cnt, txs, inst_8304, inst_8302, inst_8303, inst_8318, state_val_8339, c__5710__auto__);
                    }();
                    var inst_8320 = cljs.core.async.impl.dispatch.run.call(null, inst_8319);
                    var state_8338__$1 = function() {
                      var statearr_8348 = state_8338;
                      statearr_8348[11] = inst_8320;
                      return statearr_8348;
                    }();
                    var statearr_8349_8363 = state_8338__$1;
                    statearr_8349_8363[2] = inst_8318;
                    statearr_8349_8363[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_8339 === 5) {
                      var inst_8302 = state_8338[9];
                      var inst_8303 = state_8338[10];
                      var inst_8308 = state_8338[2];
                      var inst_8309 = app.crypto.tx = inst_8308;
                      var inst_8310 = cljs.core.partial.call(null, app.crypto.resultToCh, app.crypto.shaC);
                      var inst_8311 = app.crypto.tx + inst_8302;
                      var inst_8312 = app.crypto.sha256c.call(null, inst_8310, inst_8311);
                      var inst_8313 = 0 === inst_8303;
                      var state_8338__$1 = function() {
                        var statearr_8350 = state_8338;
                        statearr_8350[12] = inst_8312;
                        statearr_8350[13] = inst_8309;
                        return statearr_8350;
                      }();
                      if (cljs.core.truth_(inst_8313)) {
                        var statearr_8351_8364 = state_8338__$1;
                        statearr_8351_8364[1] = 6;
                      } else {
                        var statearr_8352_8365 = state_8338__$1;
                        statearr_8352_8365[1] = 7;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_8339 === 4) {
                        var inst_8328 = state_8338[2];
                        var state_8338__$1 = function() {
                          var statearr_8353 = state_8338;
                          statearr_8353[14] = inst_8328;
                          return statearr_8353;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8338__$1, 9, app.crypto.shaC);
                      } else {
                        if (state_val_8339 === 3) {
                          var inst_8303 = state_8338[10];
                          var inst_8306 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "count  %s", inst_8303);
                          var state_8338__$1 = function() {
                            var statearr_8354 = state_8338;
                            statearr_8354[15] = inst_8306;
                            return statearr_8354;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8338__$1, 5, app.crypto.shaC);
                        } else {
                          if (state_val_8339 === 2) {
                            var inst_8287 = state_8338[2];
                            var inst_8288 = cljs.core.async.chan.call(null);
                            var inst_8289 = app.crypto.shaC = inst_8288;
                            var inst_8290 = transactions.length;
                            var inst_8291 = app.crypto.originl = inst_8290;
                            var inst_8292 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions length ", app.crypto.originl);
                            var inst_8293 = transactions.shift();
                            var inst_8294 = app.crypto.tx = inst_8293;
                            var inst_8295 = transactions.shift();
                            var inst_8296 = app.crypto.next = inst_8295;
                            var inst_8297 = cljs.core.partial.call(null, app.crypto.resultToCh, app.crypto.shaC);
                            var inst_8298 = app.crypto.tx + cljs.core.next;
                            var inst_8299 = app.crypto.sha256c.call(null, inst_8297, inst_8298);
                            var inst_8300 = transactions.shift();
                            var inst_8301 = transactions.length;
                            var inst_8302 = inst_8300;
                            var inst_8303 = inst_8301;
                            var inst_8304 = transactions;
                            var state_8338__$1 = function() {
                              var statearr_8355 = state_8338;
                              statearr_8355[8] = inst_8304;
                              statearr_8355[9] = inst_8302;
                              statearr_8355[16] = inst_8296;
                              statearr_8355[17] = inst_8292;
                              statearr_8355[10] = inst_8303;
                              statearr_8355[18] = inst_8294;
                              statearr_8355[19] = inst_8299;
                              statearr_8355[20] = inst_8291;
                              statearr_8355[21] = inst_8289;
                              statearr_8355[22] = inst_8287;
                              return statearr_8355;
                            }();
                            var statearr_8356_8366 = state_8338__$1;
                            statearr_8356_8366[2] = null;
                            statearr_8356_8366[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_8339 === 1) {
                              var inst_8279 = logger.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions2 ", transactions);
                              var inst_8280 = app.crypto.tr = transactions;
                              var inst_8281 = function() {
                                return function(inst_8279, inst_8280, state_val_8339, c__5710__auto__) {
                                  return function(x) {
                                    console.log("OLD : ", x);
                                    console.log("NEW : ", app.crypto.tr);
                                    return app.crypto.tr;
                                  };
                                }(inst_8279, inst_8280, state_val_8339, c__5710__auto__);
                              }();
                              var inst_8282 = app.crypto.a = inst_8281;
                              var inst_8283 = function() {
                                return function(inst_8279, inst_8280, inst_8281, inst_8282, state_val_8339, c__5710__auto__) {
                                  return function() {
                                    return database.update.call(null, "txs", app.crypto.a);
                                  };
                                }(inst_8279, inst_8280, inst_8281, inst_8282, state_val_8339, c__5710__auto__);
                              }();
                              var inst_8284 = app.crypto.utx = inst_8283;
                              var inst_8285 = database.update.call(null, "txs", app.crypto.a);
                              var state_8338__$1 = function() {
                                var statearr_8357 = state_8338;
                                statearr_8357[23] = inst_8284;
                                statearr_8357[24] = inst_8280;
                                statearr_8357[25] = inst_8279;
                                statearr_8357[26] = inst_8282;
                                return statearr_8357;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8338__$1, 2, inst_8285);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8359 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_8359[0] = state_machine__5698__auto__;
              statearr_8359[1] = 1;
              return statearr_8359;
            };
            var state_machine__5698__auto____1 = function(state_8338) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8338);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8338) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8338);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8360 = f__5711__auto__.call(null);
        statearr_8360[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8360;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
app.crypto.shaC = cljs.core.async.chan.call(null);
app.crypto.resultToCh = function resultToCh(chan, digest) {
  app.crypto.m = app.crypto.arraybtostring.call(null, digest);
  logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "to channel: %s", app.crypto.m);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8378) {
            var state_val_8379 = state_8378[1];
            if (state_val_8379 === 2) {
              var inst_8376 = state_8378[2];
              var state_8378__$1 = state_8378;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8378__$1, inst_8376);
            } else {
              if (state_val_8379 === 1) {
                var state_8378__$1 = state_8378;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_8378__$1, 2, chan, app.crypto.m);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8381 = [null, null, null, null, null];
              statearr_8381[0] = state_machine__5698__auto__;
              statearr_8381[1] = 1;
              return statearr_8381;
            };
            var state_machine__5698__auto____1 = function(state_8378) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8378);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8378) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8378);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8382 = f__5711__auto__.call(null);
        statearr_8382[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8382;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
app.crypto.sha256 = function sha256(x) {
  logger.og.call(null, new cljs.core.Keyword(null, "sha256", "sha256", 1890611800), "sha256 %s", x);
  return crypto.subtle.digest(function() {
    var obj8386 = {"name":"SHA-256"};
    return obj8386;
  }(), app.crypto.encode.call(null, x)).then(app.crypto.shaCallb);
};
app.crypto.sha256c = function sha256c(c, x) {
  return crypto.subtle.digest(function() {
    var obj8390 = {"name":"SHA-256"};
    return obj8390;
  }(), app.crypto.encode.call(null, x)).then(c);
};
app.crypto.s256 = function s256(k) {
  logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "about to sha256 ", k);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_8429) {
            var state_val_8430 = state_8429[1];
            if (state_val_8430 === 2) {
              var inst_8423 = state_8429[2];
              var inst_8424 = app.crypto.arraybtostring.call(null, inst_8423);
              var inst_8425 = app.crypto.r = inst_8424;
              var inst_8426 = "got from sha256 " + k;
              var inst_8427 = logger.og.call(null, new cljs.core.Keyword(null, "s256", "s256", -1445609188), inst_8426, app.crypto.r);
              var state_8429__$1 = function() {
                var statearr_8431 = state_8429;
                statearr_8431[5] = inst_8427;
                statearr_8431[6] = inst_8425;
                return statearr_8431;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8429__$1, app.crypto.r);
            } else {
              if (state_val_8430 === 1) {
                var inst_8414 = cljs.core.async.chan.call(null);
                var inst_8417 = {"name":"SHA-256"};
                var inst_8418 = app.crypto.encode.call(null, k);
                var inst_8419 = crypto.subtle.digest(inst_8417, inst_8418);
                var inst_8420 = function() {
                  var c = inst_8414;
                  return function(c, inst_8414, inst_8417, inst_8418, inst_8419, state_val_8430, c__5710__auto__) {
                    return function(p1__8391_SHARP_) {
                      return cljs.core.async.put_BANG_.call(null, c, p1__8391_SHARP_);
                    };
                  }(c, inst_8414, inst_8417, inst_8418, inst_8419, state_val_8430, c__5710__auto__);
                }();
                var inst_8421 = inst_8419.then(inst_8420);
                var state_8429__$1 = function() {
                  var statearr_8432 = state_8429;
                  statearr_8432[7] = inst_8421;
                  return statearr_8432;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8429__$1, 2, inst_8414);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_8434 = [null, null, null, null, null, null, null, null];
              statearr_8434[0] = state_machine__5698__auto__;
              statearr_8434[1] = 1;
              return statearr_8434;
            };
            var state_machine__5698__auto____1 = function(state_8429) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_8429);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_8429) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_8429);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_8435 = f__5711__auto__.call(null);
        statearr_8435[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_8435;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
app.crypto.shaCallb = function shaCallb(digest) {
  logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "%s", "about to do hash2");
  app.crypto.h = app.crypto.arraybtostring.call(null, digest);
  logger.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), app.crypto.h);
  return pubsub.pub.call(null, "crypto", app.crypto.h);
};
goog.provide("intercomMakeUtil");
goog.require("cljs.core");
goog.provide("app.main");
goog.require("cljs.core");
goog.require("pouchDB");
goog.require("peerjs");
goog.require("blockchain");
goog.require("database");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("intercom");
goog.require("intercom");
goog.require("pubsub");
goog.require("blockchain");
goog.require("peerjs");
goog.require("cljs.core.async");
goog.require("communications");
goog.require("communications");
goog.require("logger");
goog.require("logger");
goog.require("pouchDB");
goog.require("database");
goog.require("crypto");
cljs.core.enable_console_print_BANG_.call(null);
app.main.initDBase = function initDBase(dbase) {
  var c = cljs.core.async.chan.call(null);
  var c__5710__auto___10508 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto___10508, c) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto___10508, c) {
          return function(state_10493) {
            var state_val_10494 = state_10493[1];
            if (state_val_10494 === 7) {
              var inst_10469 = state_10493[5];
              var inst_10472 = state_10493[2];
              var inst_10473 = cljs.core.PersistentVector.EMPTY;
              var inst_10474 = {"header":inst_10469, "hash":inst_10472, "transactions":inst_10473};
              var inst_10475 = app.main.blck = inst_10474;
              var inst_10476 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "saving ", app.main.blck);
              var inst_10477 = app.main.blck.header;
              var inst_10478 = inst_10477.heightFromRoot = 0;
              var inst_10479 = database.ps.call(null, "last", app.main.blck);
              var state_10493__$1 = function() {
                var statearr_10495 = state_10493;
                statearr_10495[6] = inst_10476;
                statearr_10495[7] = inst_10475;
                statearr_10495[8] = inst_10478;
                return statearr_10495;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10493__$1, 8, inst_10479);
            } else {
              if (state_val_10494 === 1) {
                var inst_10454 = database.g.call(null, "last");
                var state_10493__$1 = state_10493;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10493__$1, 2, inst_10454);
              } else {
                if (state_val_10494 === 4) {
                  var inst_10463 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "nothing in database");
                  var inst_10464 = database.ps.call(null, "height", 0);
                  var state_10493__$1 = function() {
                    var statearr_10496 = state_10493;
                    statearr_10496[9] = inst_10463;
                    return statearr_10496;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10493__$1, 6, inst_10464);
                } else {
                  if (state_val_10494 === 6) {
                    var inst_10466 = state_10493[2];
                    var inst_10469 = blockchain.makeBlockHeader.call(null, 0, 0, 0, 0, 0, 0, 0);
                    var inst_10470 = crypto.bHash.call(null, 0);
                    var state_10493__$1 = function() {
                      var statearr_10497 = state_10493;
                      statearr_10497[5] = inst_10469;
                      statearr_10497[10] = inst_10466;
                      return statearr_10497;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10493__$1, 7, inst_10470);
                  } else {
                    if (state_val_10494 === 3) {
                      var inst_10461 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database is ", app.main.lastone);
                      var state_10493__$1 = state_10493;
                      var statearr_10498_10509 = state_10493__$1;
                      statearr_10498_10509[2] = inst_10461;
                      statearr_10498_10509[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10494 === 2) {
                        var inst_10456 = state_10493[2];
                        var inst_10457 = app.main.lastone = inst_10456;
                        var inst_10458 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "about to init");
                        var inst_10459 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database ", app.main.lastone);
                        var state_10493__$1 = function() {
                          var statearr_10499 = state_10493;
                          statearr_10499[11] = inst_10457;
                          statearr_10499[12] = inst_10458;
                          statearr_10499[13] = inst_10459;
                          return statearr_10499;
                        }();
                        if (cljs.core.truth_(app.main.lastone)) {
                          var statearr_10500_10510 = state_10493__$1;
                          statearr_10500_10510[1] = 3;
                        } else {
                          var statearr_10501_10511 = state_10493__$1;
                          statearr_10501_10511[1] = 4;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10494 === 9) {
                          var inst_10485 = state_10493[2];
                          var inst_10486 = "b" + 0;
                          var inst_10487 = database.ps.call(null, inst_10486, app.main.blck);
                          var state_10493__$1 = function() {
                            var statearr_10502 = state_10493;
                            statearr_10502[14] = inst_10485;
                            return statearr_10502;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10493__$1, 10, inst_10487);
                        } else {
                          if (state_val_10494 === 5) {
                            var inst_10491 = state_10493[2];
                            var state_10493__$1 = state_10493;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10493__$1, inst_10491);
                          } else {
                            if (state_val_10494 === 10) {
                              var inst_10489 = state_10493[2];
                              var state_10493__$1 = state_10493;
                              var statearr_10503_10512 = state_10493__$1;
                              statearr_10503_10512[2] = inst_10489;
                              statearr_10503_10512[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10494 === 8) {
                                var inst_10481 = state_10493[2];
                                var inst_10482 = app.main.blck.hash;
                                var inst_10483 = database.ps.call(null, inst_10482, app.main.blck);
                                var state_10493__$1 = function() {
                                  var statearr_10504 = state_10493;
                                  statearr_10504[15] = inst_10481;
                                  return statearr_10504;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10493__$1, 9, inst_10483);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto___10508, c);
        return function(switch__5697__auto__, c__5710__auto___10508, c) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10506 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10506[0] = state_machine__5698__auto__;
              statearr_10506[1] = 1;
              return statearr_10506;
            };
            var state_machine__5698__auto____1 = function(state_10493) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10493);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10493) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10493);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto___10508, c);
      }();
      var state__5712__auto__ = function() {
        var statearr_10507 = f__5711__auto__.call(null);
        statearr_10507[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto___10508;
        return statearr_10507;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto___10508, c));
  return 1;
};
app.main.start = cljs.core.async.chan.call(null);
app.main.transactionch = cljs.core.async.chan.call(null);
app.main.transactionch.type = "transactionch";
app.main.cryptoCh = cljs.core.async.chan.call(null);
app.main.cryptoCh.type = "cryptoch";
$(document).on("transaction", function(a1, a2) {
  return pubsub.pub.call(null, "transaction", a2);
});
app.main.connectTo = function connectTo(ev, id) {
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10555) {
            var state_val_10556 = state_10555[1];
            if (state_val_10556 === 4) {
              var inst_10550 = state_10555[2];
              var inst_10551 = inst_10550.connect(id);
              var inst_10552 = cljs.core.partial.call(null, communications.onOpen, inst_10551);
              var inst_10553 = inst_10551.on("open", inst_10552);
              var state_10555__$1 = state_10555;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10555__$1, inst_10553);
            } else {
              if (state_val_10556 === 3) {
                var inst_10546 = state_10555[2];
                var inst_10547 = logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_10546);
                var inst_10548 = pubsub.get.call(null);
                var state_10555__$1 = function() {
                  var statearr_10557 = state_10555;
                  statearr_10557[5] = inst_10547;
                  return statearr_10557;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10555__$1, 4, inst_10548);
              } else {
                if (state_val_10556 === 2) {
                  var inst_10542 = state_10555[2];
                  var inst_10543 = logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_10542);
                  var inst_10544 = pubsub.get.call(null);
                  var state_10555__$1 = function() {
                    var statearr_10558 = state_10555;
                    statearr_10558[6] = inst_10543;
                    return statearr_10558;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10555__$1, 3, inst_10544);
                } else {
                  if (state_val_10556 === 1) {
                    var inst_10538 = cljs.core.first.call(null, id);
                    var inst_10539 = logger.og.call(null, new cljs.core.Keyword(null, "connectTo", "connectTo", 1625853527), inst_10538);
                    var inst_10540 = pubsub.get.call(null);
                    var state_10555__$1 = function() {
                      var statearr_10559 = state_10555;
                      statearr_10559[7] = inst_10539;
                      return statearr_10559;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10555__$1, 2, inst_10540);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10561 = [null, null, null, null, null, null, null, null];
              statearr_10561[0] = state_machine__5698__auto__;
              statearr_10561[1] = 1;
              return statearr_10561;
            };
            var state_machine__5698__auto____1 = function(state_10555) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10555);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10555) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10555);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10562 = f__5711__auto__.call(null);
        statearr_10562[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10562;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
$(document).on("connectTo", app.main.connectTo);
app.main.empty_string = "";
app.main.setID = function setID(ev, id) {
  cljs.core.println.call(null, id);
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10590) {
            var state_val_10591 = state_10590[1];
            if (state_val_10591 === 2) {
              var inst_10583 = state_10590[2];
              var inst_10584 = console.log(inst_10583);
              var inst_10585 = new Peer(id, peerjs.peerParams);
              var inst_10586 = app.main.peerjs = inst_10585;
              var inst_10587 = pubsub.init.call(null, app.main.peerjs);
              var inst_10588 = app.main.peerjs.on("connection", communications.onConnection);
              var state_10590__$1 = function() {
                var statearr_10592 = state_10590;
                statearr_10592[5] = inst_10586;
                statearr_10592[6] = inst_10584;
                statearr_10592[7] = inst_10587;
                return statearr_10592;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10590__$1, inst_10588);
            } else {
              if (state_val_10591 === 1) {
                var inst_10580 = database.p.call(null, "lid", id);
                var inst_10581 = database.g.call(null, "lid");
                var state_10590__$1 = function() {
                  var statearr_10593 = state_10590;
                  statearr_10593[8] = inst_10580;
                  return statearr_10593;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10590__$1, 2, inst_10581);
              } else {
                return null;
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10595 = [null, null, null, null, null, null, null, null, null];
              statearr_10595[0] = state_machine__5698__auto__;
              statearr_10595[1] = 1;
              return statearr_10595;
            };
            var state_machine__5698__auto____1 = function(state_10590) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10590);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10590) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10590);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10596 = f__5711__auto__.call(null);
        statearr_10596[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10596;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
$(document).on("setid", app.main.setID);
app.main.entryy = function entryy() {
  logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "Hello wor 32 d rdaldad!");
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "about to connect from heere");
  var c__5710__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5710__auto__) {
    return function() {
      var f__5711__auto__ = function() {
        var switch__5697__auto__ = function(c__5710__auto__) {
          return function(state_10655) {
            var state_val_10656 = state_10655[1];
            if (state_val_10656 === 6) {
              var inst_10648 = state_10655[2];
              var state_10655__$1 = state_10655;
              var statearr_10657_10667 = state_10655__$1;
              statearr_10657_10667[2] = inst_10648;
              statearr_10657_10667[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10656 === 5) {
                var inst_10650 = state_10655[2];
                var inst_10651 = pubsub.initpubsub.call(null);
                var inst_10652 = communications.setupComm.call(null);
                var inst_10653 = communications.startP2PCommLoop.call(null);
                var state_10655__$1 = function() {
                  var statearr_10658 = state_10655;
                  statearr_10658[5] = inst_10652;
                  statearr_10658[6] = inst_10650;
                  statearr_10658[7] = inst_10651;
                  return statearr_10658;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10655__$1, inst_10653);
              } else {
                if (state_val_10656 === 4) {
                  var inst_10646 = app.main.initDBase.call(null);
                  var state_10655__$1 = state_10655;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10655__$1, 6, inst_10646);
                } else {
                  if (state_val_10656 === 3) {
                    var inst_10638 = console.log(app.main.id);
                    var inst_10639 = $("#id");
                    var inst_10640 = inst_10639.val(app.main.id);
                    var inst_10641 = new Peer(app.main.id, peerjs.peerParams);
                    var inst_10642 = app.main.peerjs = inst_10641;
                    var inst_10643 = pubsub.init.call(null, app.main.peerjs);
                    var inst_10644 = app.main.peerjs.on("connection", communications.onConnection);
                    var state_10655__$1 = function() {
                      var statearr_10659 = state_10655;
                      statearr_10659[8] = inst_10643;
                      statearr_10659[9] = inst_10638;
                      statearr_10659[10] = inst_10642;
                      statearr_10659[11] = inst_10640;
                      return statearr_10659;
                    }();
                    var statearr_10660_10668 = state_10655__$1;
                    statearr_10660_10668[2] = inst_10644;
                    statearr_10660_10668[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10656 === 2) {
                      var inst_10634 = state_10655[2];
                      var inst_10635 = app.main.id = inst_10634;
                      var inst_10636 = logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", app.main.id);
                      var state_10655__$1 = function() {
                        var statearr_10661 = state_10655;
                        statearr_10661[12] = inst_10635;
                        statearr_10661[13] = inst_10636;
                        return statearr_10661;
                      }();
                      if (cljs.core.truth_(app.main.id)) {
                        var statearr_10662_10669 = state_10655__$1;
                        statearr_10662_10669[1] = 3;
                      } else {
                        var statearr_10663_10670 = state_10655__$1;
                        statearr_10663_10670[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10656 === 1) {
                        var inst_10632 = database.g.call(null, "lid");
                        var state_10655__$1 = state_10655;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10655__$1, 2, inst_10632);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5710__auto__);
        return function(switch__5697__auto__, c__5710__auto__) {
          return function() {
            var state_machine__5698__auto__ = null;
            var state_machine__5698__auto____0 = function() {
              var statearr_10665 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10665[0] = state_machine__5698__auto__;
              statearr_10665[1] = 1;
              return statearr_10665;
            };
            var state_machine__5698__auto____1 = function(state_10655) {
              while (true) {
                var result__5699__auto__ = switch__5697__auto__.call(null, state_10655);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5699__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__5699__auto__;
                }
                break;
              }
            };
            state_machine__5698__auto__ = function(state_10655) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5698__auto____0.call(this);
                case 1:
                  return state_machine__5698__auto____1.call(this, state_10655);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5698__auto____0;
            state_machine__5698__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5698__auto____1;
            return state_machine__5698__auto__;
          }();
        }(switch__5697__auto__, c__5710__auto__);
      }();
      var state__5712__auto__ = function() {
        var statearr_10666 = f__5711__auto__.call(null);
        statearr_10666[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5710__auto__;
        return statearr_10666;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5712__auto__);
    };
  }(c__5710__auto__));
  return c__5710__auto__;
};
window.onload = app.main.entryy;
goog.provide("mockdatabase");
goog.require("cljs.core");
mockdatabase.mdbase = function() {
  var obj15417 = {};
  return obj15417;
}();
mockdatabase.g = function g(kie) {
  return mockdatabase.mdbase[kie];
};
mockdatabase.p = function p(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.ps = function ps(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.update = function update(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
