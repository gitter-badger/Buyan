if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2913";
cljs.core._STAR_unchecked_if_STAR_ = false;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__19262__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__19261 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__19261) : cljs.core.into_array.call(null, G__19261);
      }());
    };
    var G__19262 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__19263__i = 0, G__19263__a = new Array(arguments.length - 0);
        while (G__19263__i < G__19263__a.length) {
          G__19263__a[G__19263__i] = arguments[G__19263__i + 0];
          ++G__19263__i;
        }
        args = new cljs.core.IndexedSeq(G__19263__a, 0);
      }
      return G__19262__delegate.call(this, args);
    };
    G__19262.cljs$lang$maxFixedArity = 0;
    G__19262.cljs$lang$applyTo = function(arglist__19264) {
      var args = cljs.core.seq(arglist__19264);
      return G__19262__delegate(args);
    };
    G__19262.cljs$core$IFn$_invoke$arity$variadic = G__19262__delegate;
    return G__19262;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var G__19266 = x;
  return goog.isString(G__19266);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__19268 = x__$1;
    return goog.typeOf(G__19268);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3969__auto__ = ty;
    if (cljs.core.truth_(and__3969__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3969__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__19270 = obj;
    return goog.typeOf(G__19270);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.importScript_(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__19272 = Symbol;
  return goog.typeOf(G__19272);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4868__auto___19274 = len;
  var i_19275 = 0;
  while (true) {
    if (i_19275 < n__4868__auto___19274) {
      new_arr[i_19275] = arr[i_19275];
      var G__19276 = i_19275 + 1;
      i_19275 = G__19276;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__19277 = i + 1;
      i = G__19277;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__19286__delegate = function(array, i, idxs) {
      var G__19283 = aget;
      var G__19284 = aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__19285 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__19283, G__19284, G__19285) : cljs.core.apply.call(null, G__19283, G__19284, G__19285);
    };
    var G__19286 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__19287__i = 0, G__19287__a = new Array(arguments.length - 2);
        while (G__19287__i < G__19287__a.length) {
          G__19287__a[G__19287__i] = arguments[G__19287__i + 2];
          ++G__19287__i;
        }
        idxs = new cljs.core.IndexedSeq(G__19287__a, 0);
      }
      return G__19286__delegate.call(this, array, i, idxs);
    };
    G__19286.cljs$lang$maxFixedArity = 2;
    G__19286.cljs$lang$applyTo = function(arglist__19288) {
      var array = cljs.core.first(arglist__19288);
      arglist__19288 = cljs.core.next(arglist__19288);
      var i = cljs.core.first(arglist__19288);
      var idxs = cljs.core.rest(arglist__19288);
      return G__19286__delegate(array, i, idxs);
    };
    G__19286.cljs$core$IFn$_invoke$arity$variadic = G__19286__delegate;
    return G__19286;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        var G__19289 = null;
        if (arguments.length > 2) {
          var G__19290__i = 0, G__19290__a = new Array(arguments.length - 2);
          while (G__19290__i < G__19290__a.length) {
            G__19290__a[G__19290__i] = arguments[G__19290__i + 2];
            ++G__19290__i;
          }
          G__19289 = new cljs.core.IndexedSeq(G__19290__a, 0);
        }
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__19289);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__19299__delegate = function(array, idx, idx2, idxv) {
      var G__19295 = aset;
      var G__19296 = array[idx];
      var G__19297 = idx2;
      var G__19298 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__19295, G__19296, G__19297, G__19298) : cljs.core.apply.call(null, G__19295, G__19296, G__19297, G__19298);
    };
    var G__19299 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__19300__i = 0, G__19300__a = new Array(arguments.length - 3);
        while (G__19300__i < G__19300__a.length) {
          G__19300__a[G__19300__i] = arguments[G__19300__i + 3];
          ++G__19300__i;
        }
        idxv = new cljs.core.IndexedSeq(G__19300__a, 0);
      }
      return G__19299__delegate.call(this, array, idx, idx2, idxv);
    };
    G__19299.cljs$lang$maxFixedArity = 3;
    G__19299.cljs$lang$applyTo = function(arglist__19301) {
      var array = cljs.core.first(arglist__19301);
      arglist__19301 = cljs.core.next(arglist__19301);
      var idx = cljs.core.first(arglist__19301);
      arglist__19301 = cljs.core.next(arglist__19301);
      var idx2 = cljs.core.first(arglist__19301);
      var idxv = cljs.core.rest(arglist__19301);
      return G__19299__delegate(array, idx, idx2, idxv);
    };
    G__19299.cljs$core$IFn$_invoke$arity$variadic = G__19299__delegate;
    return G__19299;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        var G__19302 = null;
        if (arguments.length > 3) {
          var G__19303__i = 0, G__19303__a = new Array(arguments.length - 3);
          while (G__19303__i < G__19303__a.length) {
            G__19303__a[G__19303__i] = arguments[G__19303__i + 3];
            ++G__19303__i;
          }
          G__19302 = new cljs.core.IndexedSeq(G__19303__a, 0);
        }
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__19302);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    var G__19309 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__19310 = [];
    var G__19311 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__19309, G__19310, G__19311) : cljs.core.reduce.call(null, G__19309, G__19310, G__19311);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.js_invoke = function() {
  var js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__19312__i = 0, G__19312__a = new Array(arguments.length - 2);
      while (G__19312__i < G__19312__a.length) {
        G__19312__a[G__19312__i] = arguments[G__19312__i + 2];
        ++G__19312__i;
      }
      args = new cljs.core.IndexedSeq(G__19312__a, 0);
    }
    return js_invoke__delegate.call(this, obj, s, args);
  };
  js_invoke.cljs$lang$maxFixedArity = 2;
  js_invoke.cljs$lang$applyTo = function(arglist__19313) {
    var obj = cljs.core.first(arglist__19313);
    arglist__19313 = cljs.core.next(arglist__19313);
    var s = cljs.core.first(arglist__19313);
    var args = cljs.core.rest(arglist__19313);
    return js_invoke__delegate(obj, s, args);
  };
  js_invoke.cljs$core$IFn$_invoke$arity$variadic = js_invoke__delegate;
  return js_invoke;
}();
cljs.core.Fn = function() {
  var obj19315 = {};
  return obj19315;
}();
cljs.core.IFn = function() {
  var obj19317 = {};
  return obj19317;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19363 = x__4625__auto__;
          return goog.typeOf(G__19363);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19365 = x__4625__auto__;
          return goog.typeOf(G__19365);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19367 = x__4625__auto__;
          return goog.typeOf(G__19367);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19369 = x__4625__auto__;
          return goog.typeOf(G__19369);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19371 = x__4625__auto__;
          return goog.typeOf(G__19371);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19373 = x__4625__auto__;
          return goog.typeOf(G__19373);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19375 = x__4625__auto__;
          return goog.typeOf(G__19375);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19377 = x__4625__auto__;
          return goog.typeOf(G__19377);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19379 = x__4625__auto__;
          return goog.typeOf(G__19379);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19381 = x__4625__auto__;
          return goog.typeOf(G__19381);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19383 = x__4625__auto__;
          return goog.typeOf(G__19383);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19385 = x__4625__auto__;
          return goog.typeOf(G__19385);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19387 = x__4625__auto__;
          return goog.typeOf(G__19387);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19389 = x__4625__auto__;
          return goog.typeOf(G__19389);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19391 = x__4625__auto__;
          return goog.typeOf(G__19391);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19393 = x__4625__auto__;
          return goog.typeOf(G__19393);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19395 = x__4625__auto__;
          return goog.typeOf(G__19395);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19397 = x__4625__auto__;
          return goog.typeOf(G__19397);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19399 = x__4625__auto__;
          return goog.typeOf(G__19399);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19401 = x__4625__auto__;
          return goog.typeOf(G__19401);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19403 = x__4625__auto__;
          return goog.typeOf(G__19403);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__19405 = x__4625__auto__;
          return goog.typeOf(G__19405);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj19407 = {};
  return obj19407;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3969__auto__ = value;
    if (and__3969__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4625__auto__ = value == null ? null : value;
    return function() {
      var or__3981__auto__ = cljs.core._clone[function() {
        var G__19411 = x__4625__auto__;
        return goog.typeOf(G__19411);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._clone["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj19413 = {};
  return obj19413;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._count[function() {
        var G__19417 = x__4625__auto__;
        return goog.typeOf(G__19417);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._count["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj19419 = {};
  return obj19419;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._empty[function() {
        var G__19423 = x__4625__auto__;
        return goog.typeOf(G__19423);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._empty["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj19425 = {};
  return obj19425;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._conj[function() {
        var G__19429 = x__4625__auto__;
        return goog.typeOf(G__19429);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._conj["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj19431 = {};
  return obj19431;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._nth[function() {
          var G__19437 = x__4625__auto__;
          return goog.typeOf(G__19437);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._nth["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._nth[function() {
          var G__19439 = x__4625__auto__;
          return goog.typeOf(G__19439);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._nth["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj19441 = {};
  return obj19441;
}();
cljs.core.ISeq = function() {
  var obj19443 = {};
  return obj19443;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._first[function() {
        var G__19447 = x__4625__auto__;
        return goog.typeOf(G__19447);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._rest[function() {
        var G__19451 = x__4625__auto__;
        return goog.typeOf(G__19451);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._rest["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj19453 = {};
  return obj19453;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._next[function() {
        var G__19457 = x__4625__auto__;
        return goog.typeOf(G__19457);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._next["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj19459 = {};
  return obj19459;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._lookup[function() {
          var G__19465 = x__4625__auto__;
          return goog.typeOf(G__19465);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._lookup["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._lookup[function() {
          var G__19467 = x__4625__auto__;
          return goog.typeOf(G__19467);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._lookup["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj19469 = {};
  return obj19469;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__19473 = x__4625__auto__;
        return goog.typeOf(G__19473);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc[function() {
        var G__19477 = x__4625__auto__;
        return goog.typeOf(G__19477);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj19479 = {};
  return obj19479;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._dissoc[function() {
        var G__19483 = x__4625__auto__;
        return goog.typeOf(G__19483);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._dissoc["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj19485 = {};
  return obj19485;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._key[function() {
        var G__19489 = x__4625__auto__;
        return goog.typeOf(G__19489);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._key["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._val[function() {
        var G__19493 = x__4625__auto__;
        return goog.typeOf(G__19493);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._val["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj19495 = {};
  return obj19495;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._disjoin[function() {
        var G__19499 = x__4625__auto__;
        return goog.typeOf(G__19499);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._disjoin["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj19501 = {};
  return obj19501;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._peek[function() {
        var G__19505 = x__4625__auto__;
        return goog.typeOf(G__19505);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._peek["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._pop[function() {
        var G__19509 = x__4625__auto__;
        return goog.typeOf(G__19509);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pop["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj19511 = {};
  return obj19511;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_n[function() {
        var G__19515 = x__4625__auto__;
        return goog.typeOf(G__19515);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj19517 = {};
  return obj19517;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._deref[function() {
        var G__19521 = x__4625__auto__;
        return goog.typeOf(G__19521);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._deref["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj19523 = {};
  return obj19523;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._deref_with_timeout[function() {
        var G__19527 = x__4625__auto__;
        return goog.typeOf(G__19527);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj19529 = {};
  return obj19529;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._meta[function() {
        var G__19533 = x__4625__auto__;
        return goog.typeOf(G__19533);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._meta["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj19535 = {};
  return obj19535;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._with_meta[function() {
        var G__19539 = x__4625__auto__;
        return goog.typeOf(G__19539);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._with_meta["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj19541 = {};
  return obj19541;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._reduce[function() {
          var G__19547 = x__4625__auto__;
          return goog.typeOf(G__19547);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._reduce["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._reduce[function() {
          var G__19549 = x__4625__auto__;
          return goog.typeOf(G__19549);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._reduce["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj19551 = {};
  return obj19551;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._kv_reduce[function() {
        var G__19555 = x__4625__auto__;
        return goog.typeOf(G__19555);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj19557 = {};
  return obj19557;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._equiv[function() {
        var G__19561 = x__4625__auto__;
        return goog.typeOf(G__19561);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._equiv["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj19563 = {};
  return obj19563;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._hash[function() {
        var G__19567 = x__4625__auto__;
        return goog.typeOf(G__19567);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._hash["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj19569 = {};
  return obj19569;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._seq[function() {
        var G__19573 = x__4625__auto__;
        return goog.typeOf(G__19573);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._seq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj19575 = {};
  return obj19575;
}();
cljs.core.IList = function() {
  var obj19577 = {};
  return obj19577;
}();
cljs.core.IRecord = function() {
  var obj19579 = {};
  return obj19579;
}();
cljs.core.IReversible = function() {
  var obj19581 = {};
  return obj19581;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._rseq[function() {
        var G__19585 = x__4625__auto__;
        return goog.typeOf(G__19585);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._rseq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj19587 = {};
  return obj19587;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._sorted_seq[function() {
        var G__19591 = x__4625__auto__;
        return goog.typeOf(G__19591);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._sorted_seq_from[function() {
        var G__19595 = x__4625__auto__;
        return goog.typeOf(G__19595);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._entry_key[function() {
        var G__19599 = x__4625__auto__;
        return goog.typeOf(G__19599);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._entry_key["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._comparator[function() {
        var G__19603 = x__4625__auto__;
        return goog.typeOf(G__19603);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._comparator["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj19605 = {};
  return obj19605;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3969__auto__ = writer;
    if (and__3969__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4625__auto__ = writer == null ? null : writer;
    return function() {
      var or__3981__auto__ = cljs.core._write[function() {
        var G__19609 = x__4625__auto__;
        return goog.typeOf(G__19609);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._write["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3969__auto__ = writer;
    if (and__3969__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4625__auto__ = writer == null ? null : writer;
    return function() {
      var or__3981__auto__ = cljs.core._flush[function() {
        var G__19613 = x__4625__auto__;
        return goog.typeOf(G__19613);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._flush["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj19615 = {};
  return obj19615;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._pr_writer[function() {
        var G__19619 = x__4625__auto__;
        return goog.typeOf(G__19619);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj19621 = {};
  return obj19621;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3969__auto__ = d;
    if (and__3969__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4625__auto__ = d == null ? null : d;
    return function() {
      var or__3981__auto__ = cljs.core._realized_QMARK_[function() {
        var G__19625 = x__4625__auto__;
        return goog.typeOf(G__19625);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj19627 = {};
  return obj19627;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._notify_watches[function() {
        var G__19631 = x__4625__auto__;
        return goog.typeOf(G__19631);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._add_watch[function() {
        var G__19635 = x__4625__auto__;
        return goog.typeOf(G__19635);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._add_watch["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._remove_watch[function() {
        var G__19639 = x__4625__auto__;
        return goog.typeOf(G__19639);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj19641 = {};
  return obj19641;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._as_transient[function() {
        var G__19645 = x__4625__auto__;
        return goog.typeOf(G__19645);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._as_transient["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj19647 = {};
  return obj19647;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._conj_BANG_[function() {
        var G__19651 = x__4625__auto__;
        return goog.typeOf(G__19651);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._persistent_BANG_[function() {
        var G__19655 = x__4625__auto__;
        return goog.typeOf(G__19655);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj19657 = {};
  return obj19657;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_BANG_[function() {
        var G__19661 = x__4625__auto__;
        return goog.typeOf(G__19661);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj19663 = {};
  return obj19663;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__19667 = x__4625__auto__;
        return goog.typeOf(G__19667);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj19669 = {};
  return obj19669;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__19673 = x__4625__auto__;
        return goog.typeOf(G__19673);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._pop_BANG_[function() {
        var G__19677 = x__4625__auto__;
        return goog.typeOf(G__19677);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj19679 = {};
  return obj19679;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__19683 = x__4625__auto__;
        return goog.typeOf(G__19683);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj19685 = {};
  return obj19685;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._compare[function() {
        var G__19689 = x__4625__auto__;
        return goog.typeOf(G__19689);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._compare["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj19691 = {};
  return obj19691;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._drop_first[function() {
        var G__19695 = x__4625__auto__;
        return goog.typeOf(G__19695);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._drop_first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj19697 = {};
  return obj19697;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_first[function() {
        var G__19701 = x__4625__auto__;
        return goog.typeOf(G__19701);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_rest[function() {
        var G__19705 = x__4625__auto__;
        return goog.typeOf(G__19705);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj19707 = {};
  return obj19707;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_next[function() {
        var G__19711 = x__4625__auto__;
        return goog.typeOf(G__19711);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj19713 = {};
  return obj19713;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._name[function() {
        var G__19717 = x__4625__auto__;
        return goog.typeOf(G__19717);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._name["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._namespace[function() {
        var G__19721 = x__4625__auto__;
        return goog.typeOf(G__19721);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._namespace["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj19723 = {};
  return obj19723;
}();
cljs.core.IReset = function() {
  var obj19725 = {};
  return obj19725;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._reset_BANG_[function() {
        var G__19729 = x__4625__auto__;
        return goog.typeOf(G__19729);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj19731 = {};
  return obj19731;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__19741 = x__4625__auto__;
          return goog.typeOf(G__19741);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__19743 = x__4625__auto__;
          return goog.typeOf(G__19743);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__19745 = x__4625__auto__;
          return goog.typeOf(G__19745);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__19747 = x__4625__auto__;
          return goog.typeOf(G__19747);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj19749 = {};
  return obj19749;
}();
cljs.core._vreset_BANG_ = function _vreset_BANG_(o, new_value) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._vreset_BANG_[function() {
        var G__19753 = x__4625__auto__;
        return goog.typeOf(G__19753);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj19755 = {};
  return obj19755;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._iterator[function() {
        var G__19759 = x__4625__auto__;
        return goog.typeOf(G__19759);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._iterator["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__19762 = 4294967295;
  var G__19763 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__19762, G__19763) : Math.imul.call(null, G__19762, G__19763);
}() === 0)) {
  cljs.core.imul = function imul(a, b) {
    var G__19766 = a;
    var G__19767 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__19766, G__19767) : Math.imul.call(null, G__19766, G__19767);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__19768 = i + 2;
        var G__19769 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__19768;
        h1 = G__19769;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj19771 = {};
  return obj19771;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__19772 = i + 1;
          var G__19773 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__19772;
          hash = G__19773;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj19777 = {};
      return obj19777;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__19780 = o;
    if (G__19780) {
      var bit__4655__auto__ = G__19780.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4655__auto__ || G__19780.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__19781 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__19781) : Math.floor.call(null, G__19781);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = cljs.core.not(a.ns);
      if (and__3969__auto__) {
        return b.ns;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__19788 = a.ns;
            var G__19789 = b.ns;
            return goog.array.defaultCompare(G__19788, G__19789);
          }();
          if (0 === nsc) {
            var G__19790 = a.name;
            var G__19791 = b.name;
            return goog.array.defaultCompare(G__19790, G__19791);
          } else {
            return nsc;
          }
        }
      } else {
        var G__19792 = a.name;
        var G__19793 = b.name;
        return goog.array.defaultCompare(G__19792, G__19793);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4402__auto__ = self__._hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__19795 = null;
  var G__19795__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__19795__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__19795 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19795__2.call(this, self__, coll);
      case 3:
        return G__19795__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19795.cljs$core$IFn$_invoke$arity$2 = G__19795__2;
  G__19795.cljs$core$IFn$_invoke$arity$3 = G__19795__3;
  return G__19795;
}();
cljs.core.Symbol.prototype.apply = function(self__, args19794) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19794)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__19843 = null;
  var G__19843__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__19843__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__19843__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__19843__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__19843__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__19843__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__19843__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__19843__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__19843__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__19843__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__19843__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__19843__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__19843__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__19843__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__19843__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__19843__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__19843__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__19843__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__19843__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__19843__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__19843__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__19843__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__19799 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__19800 = a;
    var G__19801 = b;
    var G__19802 = c;
    var G__19803 = d;
    var G__19804 = e;
    var G__19805 = f;
    var G__19806 = g;
    var G__19807 = h;
    var G__19808 = i;
    var G__19809 = j;
    var G__19810 = k;
    var G__19811 = l;
    var G__19812 = m;
    var G__19813 = n;
    var G__19814 = o;
    var G__19815 = p;
    var G__19816 = q;
    var G__19817 = r;
    var G__19818 = s;
    var G__19819 = t;
    var G__19820 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__19799, G__19800, G__19801, G__19802, G__19803, G__19804, G__19805, G__19806, G__19807, G__19808, G__19809, G__19810, G__19811, G__19812, G__19813, G__19814, G__19815, G__19816, G__19817, G__19818, G__19819, G__19820) : cljs.core.apply.call(null, G__19799, G__19800, G__19801, G__19802, G__19803, G__19804, G__19805, G__19806, G__19807, G__19808, G__19809, G__19810, G__19811, G__19812, G__19813, 
    G__19814, G__19815, G__19816, G__19817, G__19818, G__19819, G__19820);
  };
  G__19843 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__19843__1.call(this, self__);
      case 2:
        return G__19843__2.call(this, self__, a);
      case 3:
        return G__19843__3.call(this, self__, a, b);
      case 4:
        return G__19843__4.call(this, self__, a, b, c);
      case 5:
        return G__19843__5.call(this, self__, a, b, c, d);
      case 6:
        return G__19843__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__19843__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__19843__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__19843__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__19843__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__19843__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__19843__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__19843__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__19843__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__19843__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__19843__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__19843__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__19843__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__19843__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__19843__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__19843__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__19843__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19843.cljs$core$IFn$_invoke$arity$1 = G__19843__1;
  G__19843.cljs$core$IFn$_invoke$arity$2 = G__19843__2;
  G__19843.cljs$core$IFn$_invoke$arity$3 = G__19843__3;
  G__19843.cljs$core$IFn$_invoke$arity$4 = G__19843__4;
  G__19843.cljs$core$IFn$_invoke$arity$5 = G__19843__5;
  G__19843.cljs$core$IFn$_invoke$arity$6 = G__19843__6;
  G__19843.cljs$core$IFn$_invoke$arity$7 = G__19843__7;
  G__19843.cljs$core$IFn$_invoke$arity$8 = G__19843__8;
  G__19843.cljs$core$IFn$_invoke$arity$9 = G__19843__9;
  G__19843.cljs$core$IFn$_invoke$arity$10 = G__19843__10;
  G__19843.cljs$core$IFn$_invoke$arity$11 = G__19843__11;
  G__19843.cljs$core$IFn$_invoke$arity$12 = G__19843__12;
  G__19843.cljs$core$IFn$_invoke$arity$13 = G__19843__13;
  G__19843.cljs$core$IFn$_invoke$arity$14 = G__19843__14;
  G__19843.cljs$core$IFn$_invoke$arity$15 = G__19843__15;
  G__19843.cljs$core$IFn$_invoke$arity$16 = G__19843__16;
  G__19843.cljs$core$IFn$_invoke$arity$17 = G__19843__17;
  G__19843.cljs$core$IFn$_invoke$arity$18 = G__19843__18;
  G__19843.cljs$core$IFn$_invoke$arity$19 = G__19843__19;
  G__19843.cljs$core$IFn$_invoke$arity$20 = G__19843__20;
  G__19843.cljs$core$IFn$_invoke$arity$21 = G__19843__21;
  G__19843.cljs$core$IFn$_invoke$arity$22 = G__19843__22;
  return G__19843;
}();
cljs.core.Var.prototype.apply = function(self__, args19798) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19798)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__19821 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__19822 = a;
  var G__19823 = b;
  var G__19824 = c;
  var G__19825 = d;
  var G__19826 = e;
  var G__19827 = f;
  var G__19828 = g;
  var G__19829 = h;
  var G__19830 = i;
  var G__19831 = j;
  var G__19832 = k;
  var G__19833 = l;
  var G__19834 = m;
  var G__19835 = n;
  var G__19836 = o;
  var G__19837 = p;
  var G__19838 = q;
  var G__19839 = r;
  var G__19840 = s;
  var G__19841 = t;
  var G__19842 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__19821, G__19822, G__19823, G__19824, G__19825, G__19826, G__19827, G__19828, G__19829, G__19830, G__19831, G__19832, G__19833, G__19834, G__19835, G__19836, G__19837, G__19838, G__19839, G__19840, G__19841, G__19842) : cljs.core.apply.call(null, G__19821, G__19822, G__19823, G__19824, G__19825, G__19826, G__19827, G__19828, G__19829, G__19830, G__19831, G__19832, G__19833, G__19834, G__19835, 
  G__19836, G__19837, G__19838, G__19839, G__19840, G__19841, G__19842);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function __GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__19845 = x;
  if (G__19845) {
    var bit__4662__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = bit__4662__auto__;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return G__19845.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__19845.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__19845);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__19845);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__19847 = value;
  if (G__19847) {
    var bit__4662__auto__ = G__19847.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4662__auto__ || G__19847.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__19847.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__19847);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__19847);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__19849 = coll;
      if (G__19849) {
        var bit__4655__auto__ = G__19849.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4655__auto__ || G__19849.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__19851 = coll;
      if (G__19851) {
        var bit__4655__auto__ = G__19851.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__19851.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__19853 = coll;
      if (G__19853) {
        var bit__4655__auto__ = G__19853.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__19853.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__19855 = coll;
      if (G__19855) {
        var bit__4655__auto__ = G__19855.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4655__auto__ || G__19855.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var _EQ___3 = function() {
    var G__19860__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__19861 = y;
            var G__19862 = cljs.core.first(more);
            var G__19863 = cljs.core.next(more);
            x = G__19861;
            y = G__19862;
            more = G__19863;
            continue;
          } else {
            return _EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__19860 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__19864__i = 0, G__19864__a = new Array(arguments.length - 2);
        while (G__19864__i < G__19864__a.length) {
          G__19864__a[G__19864__i] = arguments[G__19864__i + 2];
          ++G__19864__i;
        }
        more = new cljs.core.IndexedSeq(G__19864__a, 0);
      }
      return G__19860__delegate.call(this, x, y, more);
    };
    G__19860.cljs$lang$maxFixedArity = 2;
    G__19860.cljs$lang$applyTo = function(arglist__19865) {
      var x = cljs.core.first(arglist__19865);
      arglist__19865 = cljs.core.next(arglist__19865);
      var y = cljs.core.first(arglist__19865);
      var more = cljs.core.rest(arglist__19865);
      return G__19860__delegate(x, y, more);
    };
    G__19860.cljs$core$IFn$_invoke$arity$variadic = G__19860__delegate;
    return G__19860;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        var G__19866 = null;
        if (arguments.length > 2) {
          var G__19867__i = 0, G__19867__a = new Array(arguments.length - 2);
          while (G__19867__i < G__19867__a.length) {
            G__19867__a[G__19867__i] = arguments[G__19867__i + 2];
            ++G__19867__i;
          }
          G__19866 = new cljs.core.IndexedSeq(G__19867__a, 0);
        }
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__19866);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__19868 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__19868) : cljs.core.es6_iterator_seq.call(null, G__19868);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function __GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__19869 = n + 1;
      var G__19870 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__19871 = cljs.core.next(coll__$1);
      n = G__19869;
      hash_code = G__19870;
      coll__$1 = G__19871;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__19872 = n + 1;
      var G__19873 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__19874 = cljs.core.next(coll__$1);
      n = G__19872;
      hash_code = G__19873;
      coll__$1 = G__19874;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__19875 = o;
  return goog.getUid(G__19875);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__19877 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19877) : cljs.core.deref.call(null, G__19877);
  } else {
    return x;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__19884 = val;
            var G__19885 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19884, G__19885) : f.call(null, G__19884, G__19885);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__19890 = nval;
            var G__19891 = n + 1;
            val = G__19890;
            n = G__19891;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__19886 = val__$1;
          var G__19887 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19886, G__19887) : f.call(null, G__19886, G__19887);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__19892 = nval;
          var G__19893 = n + 1;
          val__$1 = G__19892;
          n = G__19893;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__19888 = val__$1;
          var G__19889 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19888, G__19889) : f.call(null, G__19888, G__19889);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__19894 = nval;
          var G__19895 = n + 1;
          val__$1 = G__19894;
          n = G__19895;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__19902 = val;
            var G__19903 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19902, G__19903) : f.call(null, G__19902, G__19903);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__19908 = nval;
            var G__19909 = n + 1;
            val = G__19908;
            n = G__19909;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__19904 = val__$1;
          var G__19905 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19904, G__19905) : f.call(null, G__19904, G__19905);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__19910 = nval;
          var G__19911 = n + 1;
          val__$1 = G__19910;
          n = G__19911;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__19906 = val__$1;
          var G__19907 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19906, G__19907) : f.call(null, G__19906, G__19907);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__19912 = nval;
          var G__19913 = n + 1;
          val__$1 = G__19912;
          n = G__19913;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__19915 = x;
  if (G__19915) {
    var bit__4662__auto__ = G__19915.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4662__auto__ || G__19915.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__19915.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__19915);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__19915);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__19917 = x;
  if (G__19917) {
    var bit__4662__auto__ = G__19917.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4662__auto__ || G__19917.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__19917.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__19917);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__19917);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__19918 = coll__$1;
  var G__19919 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__19918, G__19919) : cljs.core.equiv_sequential.call(null, G__19918, G__19919);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__19920 = o;
  var G__19921 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__19920, G__19921) : cljs.core.cons.call(null, G__19920, G__19921);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__19924 = coll__$1;
  var G__19925 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__19924, G__19925) : cljs.core.equiv_sequential.call(null, G__19924, G__19925);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__19926 = cljs.core.List.EMPTY;
  var G__19927 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__19926, G__19927) : cljs.core.with_meta.call(null, G__19926, G__19927);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__19928 = f;
  var G__19929 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__19928, G__19929) : cljs.core.seq_reduce.call(null, G__19928, G__19929);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__19930 = f;
  var G__19931 = start;
  var G__19932 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__19930, G__19931, G__19932) : cljs.core.seq_reduce.call(null, G__19930, G__19931, G__19932);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__19933 = o;
  var G__19934 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__19933, G__19934) : cljs.core.cons.call(null, G__19933, G__19934);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.second = function second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__19935 = sn;
      s = G__19935;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__19940__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__19941 = conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__19942 = cljs.core.first(xs);
          var G__19943 = cljs.core.next(xs);
          coll = G__19941;
          x = G__19942;
          xs = G__19943;
          continue;
        } else {
          return conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__19940 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__19944__i = 0, G__19944__a = new Array(arguments.length - 2);
        while (G__19944__i < G__19944__a.length) {
          G__19944__a[G__19944__i] = arguments[G__19944__i + 2];
          ++G__19944__i;
        }
        xs = new cljs.core.IndexedSeq(G__19944__a, 0);
      }
      return G__19940__delegate.call(this, coll, x, xs);
    };
    G__19940.cljs$lang$maxFixedArity = 2;
    G__19940.cljs$lang$applyTo = function(arglist__19945) {
      var coll = cljs.core.first(arglist__19945);
      arglist__19945 = cljs.core.next(arglist__19945);
      var x = cljs.core.first(arglist__19945);
      var xs = cljs.core.rest(arglist__19945);
      return G__19940__delegate(coll, x, xs);
    };
    G__19940.cljs$core$IFn$_invoke$arity$variadic = G__19940__delegate;
    return G__19940;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        var G__19946 = null;
        if (arguments.length > 2) {
          var G__19947__i = 0, G__19947__a = new Array(arguments.length - 2);
          while (G__19947__i < G__19947__a.length) {
            G__19947__a[G__19947__i] = arguments[G__19947__i + 2];
            ++G__19947__i;
          }
          G__19946 = new cljs.core.IndexedSeq(G__19947__a, 0);
        }
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__19946);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__19948 = cljs.core.next(s);
      var G__19949 = acc + 1;
      s = G__19948;
      acc = G__19949;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__19951 = coll;
      if (G__19951) {
        var bit__4655__auto__ = G__19951.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4655__auto__ || G__19951.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__19952 = cljs.core.next(coll);
              var G__19953 = n - 1;
              coll = G__19952;
              n = G__19953;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__19954 = cljs.core.next(coll);
              var G__19955 = n - 1;
              var G__19956 = not_found;
              coll = G__19954;
              n = G__19955;
              not_found = G__19956;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__19961 = coll;
          if (G__19961) {
            var bit__4655__auto__ = G__19961.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4655__auto__ || G__19961.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__19962 = coll;
                  if (G__19962) {
                    var bit__4662__auto__ = G__19962.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4662__auto__ || G__19962.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__19962.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__19962);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__19962);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__19963 = coll;
          if (G__19963) {
            var bit__4655__auto__ = G__19963.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4655__auto__ || G__19963.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__19964 = coll;
                  if (G__19964) {
                    var bit__4662__auto__ = G__19964.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4662__auto__ || G__19964.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__19964.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__19964);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__19964);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.nthrest = function nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__19965 = n__$1 - 1;
      var G__19966 = cljs.core.rest(xs);
      n__$1 = G__19965;
      xs = G__19966;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__19969 = o;
        if (G__19969) {
          var bit__4655__auto__ = G__19969.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4655__auto__ || G__19969.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__19970 = o;
        if (G__19970) {
          var bit__4655__auto__ = G__19970.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4655__auto__ || G__19970.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__19974__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__19975 = ret;
          var G__19976 = cljs.core.first(kvs);
          var G__19977 = cljs.core.second(kvs);
          var G__19978 = cljs.core.nnext(kvs);
          coll = G__19975;
          k = G__19976;
          v = G__19977;
          kvs = G__19978;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__19974 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__19979__i = 0, G__19979__a = new Array(arguments.length - 3);
        while (G__19979__i < G__19979__a.length) {
          G__19979__a[G__19979__i] = arguments[G__19979__i + 3];
          ++G__19979__i;
        }
        kvs = new cljs.core.IndexedSeq(G__19979__a, 0);
      }
      return G__19974__delegate.call(this, coll, k, v, kvs);
    };
    G__19974.cljs$lang$maxFixedArity = 3;
    G__19974.cljs$lang$applyTo = function(arglist__19980) {
      var coll = cljs.core.first(arglist__19980);
      arglist__19980 = cljs.core.next(arglist__19980);
      var k = cljs.core.first(arglist__19980);
      arglist__19980 = cljs.core.next(arglist__19980);
      var v = cljs.core.first(arglist__19980);
      var kvs = cljs.core.rest(arglist__19980);
      return G__19974__delegate(coll, k, v, kvs);
    };
    G__19974.cljs$core$IFn$_invoke$arity$variadic = G__19974__delegate;
    return G__19974;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        var G__19981 = null;
        if (arguments.length > 3) {
          var G__19982__i = 0, G__19982__a = new Array(arguments.length - 3);
          while (G__19982__i < G__19982__a.length) {
            G__19982__a[G__19982__i] = arguments[G__19982__i + 3];
            ++G__19982__i;
          }
          G__19981 = new cljs.core.IndexedSeq(G__19982__a, 0);
        }
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__19981);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__19985__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__19986 = ret;
            var G__19987 = cljs.core.first(ks);
            var G__19988 = cljs.core.next(ks);
            coll = G__19986;
            k = G__19987;
            ks = G__19988;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__19985 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__19989__i = 0, G__19989__a = new Array(arguments.length - 2);
        while (G__19989__i < G__19989__a.length) {
          G__19989__a[G__19989__i] = arguments[G__19989__i + 2];
          ++G__19989__i;
        }
        ks = new cljs.core.IndexedSeq(G__19989__a, 0);
      }
      return G__19985__delegate.call(this, coll, k, ks);
    };
    G__19985.cljs$lang$maxFixedArity = 2;
    G__19985.cljs$lang$applyTo = function(arglist__19990) {
      var coll = cljs.core.first(arglist__19990);
      arglist__19990 = cljs.core.next(arglist__19990);
      var k = cljs.core.first(arglist__19990);
      var ks = cljs.core.rest(arglist__19990);
      return G__19985__delegate(coll, k, ks);
    };
    G__19985.cljs$core$IFn$_invoke$arity$variadic = G__19985__delegate;
    return G__19985;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        var G__19991 = null;
        if (arguments.length > 2) {
          var G__19992__i = 0, G__19992__a = new Array(arguments.length - 2);
          while (G__19992__i < G__19992__a.length) {
            G__19992__a[G__19992__i] = arguments[G__19992__i + 2];
            ++G__19992__i;
          }
          G__19991 = new cljs.core.IndexedSeq(G__19992__a, 0);
        }
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__19991);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3981__auto__ = function() {
    var G__19997 = f;
    return goog.isFunction(G__19997);
  }();
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var G__19998 = f;
    if (G__19998) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto____$1 = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto____$1)) {
          return or__3981__auto____$1;
        } else {
          return G__19998.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__19998.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__19998);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__19998);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__20464 = null;
  var G__20464__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__20464__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20000 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__20000) : self__.afn.call(null, G__20000);
  };
  var G__20464__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20001 = a;
    var G__20002 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__20001, G__20002) : self__.afn.call(null, G__20001, G__20002);
  };
  var G__20464__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20003 = a;
    var G__20004 = b;
    var G__20005 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__20003, G__20004, G__20005) : self__.afn.call(null, G__20003, G__20004, G__20005);
  };
  var G__20464__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20006 = a;
    var G__20007 = b;
    var G__20008 = c;
    var G__20009 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__20006, G__20007, G__20008, G__20009) : self__.afn.call(null, G__20006, G__20007, G__20008, G__20009);
  };
  var G__20464__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20010 = a;
    var G__20011 = b;
    var G__20012 = c;
    var G__20013 = d;
    var G__20014 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__20010, G__20011, G__20012, G__20013, G__20014) : self__.afn.call(null, G__20010, G__20011, G__20012, G__20013, G__20014);
  };
  var G__20464__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20015 = a;
    var G__20016 = b;
    var G__20017 = c;
    var G__20018 = d;
    var G__20019 = e;
    var G__20020 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__20015, G__20016, G__20017, G__20018, G__20019, G__20020) : self__.afn.call(null, G__20015, G__20016, G__20017, G__20018, G__20019, G__20020);
  };
  var G__20464__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20021 = a;
    var G__20022 = b;
    var G__20023 = c;
    var G__20024 = d;
    var G__20025 = e;
    var G__20026 = f;
    var G__20027 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__20021, G__20022, G__20023, G__20024, G__20025, G__20026, G__20027) : self__.afn.call(null, G__20021, G__20022, G__20023, G__20024, G__20025, G__20026, G__20027);
  };
  var G__20464__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20028 = a;
    var G__20029 = b;
    var G__20030 = c;
    var G__20031 = d;
    var G__20032 = e;
    var G__20033 = f;
    var G__20034 = g;
    var G__20035 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__20028, G__20029, G__20030, G__20031, G__20032, G__20033, G__20034, G__20035) : self__.afn.call(null, G__20028, G__20029, G__20030, G__20031, G__20032, G__20033, G__20034, G__20035);
  };
  var G__20464__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20036 = a;
    var G__20037 = b;
    var G__20038 = c;
    var G__20039 = d;
    var G__20040 = e;
    var G__20041 = f;
    var G__20042 = g;
    var G__20043 = h;
    var G__20044 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__20036, G__20037, G__20038, G__20039, G__20040, G__20041, G__20042, G__20043, G__20044) : self__.afn.call(null, G__20036, G__20037, G__20038, G__20039, G__20040, G__20041, G__20042, G__20043, G__20044);
  };
  var G__20464__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20045 = a;
    var G__20046 = b;
    var G__20047 = c;
    var G__20048 = d;
    var G__20049 = e;
    var G__20050 = f;
    var G__20051 = g;
    var G__20052 = h;
    var G__20053 = i;
    var G__20054 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__20045, G__20046, G__20047, G__20048, G__20049, G__20050, G__20051, G__20052, G__20053, G__20054) : self__.afn.call(null, G__20045, G__20046, G__20047, G__20048, G__20049, G__20050, G__20051, G__20052, G__20053, G__20054);
  };
  var G__20464__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20055 = a;
    var G__20056 = b;
    var G__20057 = c;
    var G__20058 = d;
    var G__20059 = e;
    var G__20060 = f;
    var G__20061 = g;
    var G__20062 = h;
    var G__20063 = i;
    var G__20064 = j;
    var G__20065 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__20055, G__20056, G__20057, G__20058, G__20059, G__20060, G__20061, G__20062, G__20063, G__20064, G__20065) : self__.afn.call(null, G__20055, G__20056, G__20057, G__20058, G__20059, G__20060, G__20061, G__20062, G__20063, G__20064, G__20065);
  };
  var G__20464__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20066 = a;
    var G__20067 = b;
    var G__20068 = c;
    var G__20069 = d;
    var G__20070 = e;
    var G__20071 = f;
    var G__20072 = g;
    var G__20073 = h;
    var G__20074 = i;
    var G__20075 = j;
    var G__20076 = k;
    var G__20077 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__20066, G__20067, G__20068, G__20069, G__20070, G__20071, G__20072, G__20073, G__20074, G__20075, G__20076, G__20077) : self__.afn.call(null, G__20066, G__20067, G__20068, G__20069, G__20070, G__20071, G__20072, G__20073, G__20074, G__20075, G__20076, G__20077);
  };
  var G__20464__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20078 = a;
    var G__20079 = b;
    var G__20080 = c;
    var G__20081 = d;
    var G__20082 = e;
    var G__20083 = f;
    var G__20084 = g;
    var G__20085 = h;
    var G__20086 = i;
    var G__20087 = j;
    var G__20088 = k;
    var G__20089 = l;
    var G__20090 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__20078, G__20079, G__20080, G__20081, G__20082, G__20083, G__20084, G__20085, G__20086, G__20087, G__20088, G__20089, G__20090) : self__.afn.call(null, G__20078, G__20079, G__20080, G__20081, G__20082, G__20083, G__20084, G__20085, G__20086, G__20087, G__20088, G__20089, G__20090);
  };
  var G__20464__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20091 = a;
    var G__20092 = b;
    var G__20093 = c;
    var G__20094 = d;
    var G__20095 = e;
    var G__20096 = f;
    var G__20097 = g;
    var G__20098 = h;
    var G__20099 = i;
    var G__20100 = j;
    var G__20101 = k;
    var G__20102 = l;
    var G__20103 = m;
    var G__20104 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__20091, G__20092, G__20093, G__20094, G__20095, G__20096, G__20097, G__20098, G__20099, G__20100, G__20101, G__20102, G__20103, G__20104) : self__.afn.call(null, G__20091, G__20092, G__20093, G__20094, G__20095, G__20096, G__20097, G__20098, G__20099, G__20100, G__20101, G__20102, G__20103, G__20104);
  };
  var G__20464__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20105 = a;
    var G__20106 = b;
    var G__20107 = c;
    var G__20108 = d;
    var G__20109 = e;
    var G__20110 = f;
    var G__20111 = g;
    var G__20112 = h;
    var G__20113 = i;
    var G__20114 = j;
    var G__20115 = k;
    var G__20116 = l;
    var G__20117 = m;
    var G__20118 = n;
    var G__20119 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__20105, G__20106, G__20107, G__20108, G__20109, G__20110, G__20111, G__20112, G__20113, G__20114, G__20115, G__20116, G__20117, G__20118, G__20119) : self__.afn.call(null, G__20105, G__20106, G__20107, G__20108, G__20109, G__20110, G__20111, G__20112, G__20113, G__20114, G__20115, G__20116, G__20117, G__20118, G__20119);
  };
  var G__20464__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20120 = a;
    var G__20121 = b;
    var G__20122 = c;
    var G__20123 = d;
    var G__20124 = e;
    var G__20125 = f;
    var G__20126 = g;
    var G__20127 = h;
    var G__20128 = i;
    var G__20129 = j;
    var G__20130 = k;
    var G__20131 = l;
    var G__20132 = m;
    var G__20133 = n;
    var G__20134 = o;
    var G__20135 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__20120, G__20121, G__20122, G__20123, G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132, G__20133, G__20134, G__20135) : self__.afn.call(null, G__20120, G__20121, G__20122, G__20123, G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132, G__20133, G__20134, G__20135);
  };
  var G__20464__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20136 = a;
    var G__20137 = b;
    var G__20138 = c;
    var G__20139 = d;
    var G__20140 = e;
    var G__20141 = f;
    var G__20142 = g;
    var G__20143 = h;
    var G__20144 = i;
    var G__20145 = j;
    var G__20146 = k;
    var G__20147 = l;
    var G__20148 = m;
    var G__20149 = n;
    var G__20150 = o;
    var G__20151 = p;
    var G__20152 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__20136, G__20137, G__20138, G__20139, G__20140, G__20141, G__20142, G__20143, G__20144, G__20145, G__20146, G__20147, G__20148, G__20149, G__20150, G__20151, G__20152) : self__.afn.call(null, G__20136, G__20137, G__20138, G__20139, G__20140, G__20141, G__20142, G__20143, G__20144, G__20145, G__20146, G__20147, G__20148, G__20149, G__20150, G__20151, G__20152);
  };
  var G__20464__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20153 = a;
    var G__20154 = b;
    var G__20155 = c;
    var G__20156 = d;
    var G__20157 = e;
    var G__20158 = f;
    var G__20159 = g;
    var G__20160 = h;
    var G__20161 = i;
    var G__20162 = j;
    var G__20163 = k;
    var G__20164 = l;
    var G__20165 = m;
    var G__20166 = n;
    var G__20167 = o;
    var G__20168 = p;
    var G__20169 = q;
    var G__20170 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__20153, G__20154, G__20155, G__20156, G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165, G__20166, G__20167, G__20168, G__20169, G__20170) : self__.afn.call(null, G__20153, G__20154, G__20155, G__20156, G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165, G__20166, G__20167, G__20168, G__20169, G__20170);
  };
  var G__20464__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20171 = a;
    var G__20172 = b;
    var G__20173 = c;
    var G__20174 = d;
    var G__20175 = e;
    var G__20176 = f;
    var G__20177 = g;
    var G__20178 = h;
    var G__20179 = i;
    var G__20180 = j;
    var G__20181 = k;
    var G__20182 = l;
    var G__20183 = m;
    var G__20184 = n;
    var G__20185 = o;
    var G__20186 = p;
    var G__20187 = q;
    var G__20188 = r;
    var G__20189 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__20171, G__20172, G__20173, G__20174, G__20175, G__20176, G__20177, G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184, G__20185, G__20186, G__20187, G__20188, G__20189) : self__.afn.call(null, G__20171, G__20172, G__20173, G__20174, G__20175, G__20176, G__20177, G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184, G__20185, G__20186, G__20187, G__20188, G__20189);
  };
  var G__20464__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20190 = a;
    var G__20191 = b;
    var G__20192 = c;
    var G__20193 = d;
    var G__20194 = e;
    var G__20195 = f;
    var G__20196 = g;
    var G__20197 = h;
    var G__20198 = i;
    var G__20199 = j;
    var G__20200 = k;
    var G__20201 = l;
    var G__20202 = m;
    var G__20203 = n;
    var G__20204 = o;
    var G__20205 = p;
    var G__20206 = q;
    var G__20207 = r;
    var G__20208 = s;
    var G__20209 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__20190, G__20191, G__20192, G__20193, G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202, G__20203, G__20204, G__20205, G__20206, G__20207, G__20208, G__20209) : self__.afn.call(null, G__20190, G__20191, G__20192, G__20193, G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202, G__20203, G__20204, G__20205, G__20206, G__20207, 
    G__20208, G__20209);
  };
  var G__20464__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__20210 = self__.afn;
    var G__20211 = a;
    var G__20212 = b;
    var G__20213 = c;
    var G__20214 = d;
    var G__20215 = e;
    var G__20216 = f;
    var G__20217 = g;
    var G__20218 = h;
    var G__20219 = i;
    var G__20220 = j;
    var G__20221 = k;
    var G__20222 = l;
    var G__20223 = m;
    var G__20224 = n;
    var G__20225 = o;
    var G__20226 = p;
    var G__20227 = q;
    var G__20228 = r;
    var G__20229 = s;
    var G__20230 = t;
    var G__20231 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__20210, G__20211, G__20212, G__20213, G__20214, G__20215, G__20216, G__20217, G__20218, G__20219, G__20220, G__20221, G__20222, G__20223, G__20224, G__20225, G__20226, G__20227, G__20228, G__20229, G__20230, G__20231) : cljs.core.apply.call(null, G__20210, G__20211, G__20212, G__20213, G__20214, G__20215, G__20216, G__20217, G__20218, G__20219, G__20220, G__20221, G__20222, G__20223, G__20224, 
    G__20225, G__20226, G__20227, G__20228, G__20229, G__20230, G__20231);
  };
  G__20464 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__20464__1.call(this, self__);
      case 2:
        return G__20464__2.call(this, self__, a);
      case 3:
        return G__20464__3.call(this, self__, a, b);
      case 4:
        return G__20464__4.call(this, self__, a, b, c);
      case 5:
        return G__20464__5.call(this, self__, a, b, c, d);
      case 6:
        return G__20464__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__20464__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__20464__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__20464__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__20464__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__20464__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__20464__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__20464__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__20464__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__20464__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__20464__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__20464__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__20464__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__20464__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__20464__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__20464__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__20464__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20464.cljs$core$IFn$_invoke$arity$1 = G__20464__1;
  G__20464.cljs$core$IFn$_invoke$arity$2 = G__20464__2;
  G__20464.cljs$core$IFn$_invoke$arity$3 = G__20464__3;
  G__20464.cljs$core$IFn$_invoke$arity$4 = G__20464__4;
  G__20464.cljs$core$IFn$_invoke$arity$5 = G__20464__5;
  G__20464.cljs$core$IFn$_invoke$arity$6 = G__20464__6;
  G__20464.cljs$core$IFn$_invoke$arity$7 = G__20464__7;
  G__20464.cljs$core$IFn$_invoke$arity$8 = G__20464__8;
  G__20464.cljs$core$IFn$_invoke$arity$9 = G__20464__9;
  G__20464.cljs$core$IFn$_invoke$arity$10 = G__20464__10;
  G__20464.cljs$core$IFn$_invoke$arity$11 = G__20464__11;
  G__20464.cljs$core$IFn$_invoke$arity$12 = G__20464__12;
  G__20464.cljs$core$IFn$_invoke$arity$13 = G__20464__13;
  G__20464.cljs$core$IFn$_invoke$arity$14 = G__20464__14;
  G__20464.cljs$core$IFn$_invoke$arity$15 = G__20464__15;
  G__20464.cljs$core$IFn$_invoke$arity$16 = G__20464__16;
  G__20464.cljs$core$IFn$_invoke$arity$17 = G__20464__17;
  G__20464.cljs$core$IFn$_invoke$arity$18 = G__20464__18;
  G__20464.cljs$core$IFn$_invoke$arity$19 = G__20464__19;
  G__20464.cljs$core$IFn$_invoke$arity$20 = G__20464__20;
  G__20464.cljs$core$IFn$_invoke$arity$21 = G__20464__21;
  G__20464.cljs$core$IFn$_invoke$arity$22 = G__20464__22;
  return G__20464;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args19999) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19999)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__20232 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__20232) : self__.afn.call(null, G__20232);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__20233 = a;
  var G__20234 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__20233, G__20234) : self__.afn.call(null, G__20233, G__20234);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__20235 = a;
  var G__20236 = b;
  var G__20237 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__20235, G__20236, G__20237) : self__.afn.call(null, G__20235, G__20236, G__20237);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__20238 = a;
  var G__20239 = b;
  var G__20240 = c;
  var G__20241 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__20238, G__20239, G__20240, G__20241) : self__.afn.call(null, G__20238, G__20239, G__20240, G__20241);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__20242 = a;
  var G__20243 = b;
  var G__20244 = c;
  var G__20245 = d;
  var G__20246 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__20242, G__20243, G__20244, G__20245, G__20246) : self__.afn.call(null, G__20242, G__20243, G__20244, G__20245, G__20246);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__20247 = a;
  var G__20248 = b;
  var G__20249 = c;
  var G__20250 = d;
  var G__20251 = e;
  var G__20252 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__20247, G__20248, G__20249, G__20250, G__20251, G__20252) : self__.afn.call(null, G__20247, G__20248, G__20249, G__20250, G__20251, G__20252);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__20253 = a;
  var G__20254 = b;
  var G__20255 = c;
  var G__20256 = d;
  var G__20257 = e;
  var G__20258 = f;
  var G__20259 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__20253, G__20254, G__20255, G__20256, G__20257, G__20258, G__20259) : self__.afn.call(null, G__20253, G__20254, G__20255, G__20256, G__20257, G__20258, G__20259);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__20260 = a;
  var G__20261 = b;
  var G__20262 = c;
  var G__20263 = d;
  var G__20264 = e;
  var G__20265 = f;
  var G__20266 = g;
  var G__20267 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__20260, G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267) : self__.afn.call(null, G__20260, G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__20268 = a;
  var G__20269 = b;
  var G__20270 = c;
  var G__20271 = d;
  var G__20272 = e;
  var G__20273 = f;
  var G__20274 = g;
  var G__20275 = h;
  var G__20276 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__20268, G__20269, G__20270, G__20271, G__20272, G__20273, G__20274, G__20275, G__20276) : self__.afn.call(null, G__20268, G__20269, G__20270, G__20271, G__20272, G__20273, G__20274, G__20275, G__20276);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__20277 = a;
  var G__20278 = b;
  var G__20279 = c;
  var G__20280 = d;
  var G__20281 = e;
  var G__20282 = f;
  var G__20283 = g;
  var G__20284 = h;
  var G__20285 = i;
  var G__20286 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__20277, G__20278, G__20279, G__20280, G__20281, G__20282, G__20283, G__20284, G__20285, G__20286) : self__.afn.call(null, G__20277, G__20278, G__20279, G__20280, G__20281, G__20282, G__20283, G__20284, G__20285, G__20286);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__20287 = a;
  var G__20288 = b;
  var G__20289 = c;
  var G__20290 = d;
  var G__20291 = e;
  var G__20292 = f;
  var G__20293 = g;
  var G__20294 = h;
  var G__20295 = i;
  var G__20296 = j;
  var G__20297 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__20287, G__20288, G__20289, G__20290, G__20291, G__20292, G__20293, G__20294, G__20295, G__20296, G__20297) : self__.afn.call(null, G__20287, G__20288, G__20289, G__20290, G__20291, G__20292, G__20293, G__20294, G__20295, G__20296, G__20297);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__20298 = a;
  var G__20299 = b;
  var G__20300 = c;
  var G__20301 = d;
  var G__20302 = e;
  var G__20303 = f;
  var G__20304 = g;
  var G__20305 = h;
  var G__20306 = i;
  var G__20307 = j;
  var G__20308 = k;
  var G__20309 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__20298, G__20299, G__20300, G__20301, G__20302, G__20303, G__20304, G__20305, G__20306, G__20307, G__20308, G__20309) : self__.afn.call(null, G__20298, G__20299, G__20300, G__20301, G__20302, G__20303, G__20304, G__20305, G__20306, G__20307, G__20308, G__20309);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__20310 = a;
  var G__20311 = b;
  var G__20312 = c;
  var G__20313 = d;
  var G__20314 = e;
  var G__20315 = f;
  var G__20316 = g;
  var G__20317 = h;
  var G__20318 = i;
  var G__20319 = j;
  var G__20320 = k;
  var G__20321 = l;
  var G__20322 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__20310, G__20311, G__20312, G__20313, G__20314, G__20315, G__20316, G__20317, G__20318, G__20319, G__20320, G__20321, G__20322) : self__.afn.call(null, G__20310, G__20311, G__20312, G__20313, G__20314, G__20315, G__20316, G__20317, G__20318, G__20319, G__20320, G__20321, G__20322);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__20323 = a;
  var G__20324 = b;
  var G__20325 = c;
  var G__20326 = d;
  var G__20327 = e;
  var G__20328 = f;
  var G__20329 = g;
  var G__20330 = h;
  var G__20331 = i;
  var G__20332 = j;
  var G__20333 = k;
  var G__20334 = l;
  var G__20335 = m;
  var G__20336 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329, G__20330, G__20331, G__20332, G__20333, G__20334, G__20335, G__20336) : self__.afn.call(null, G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329, G__20330, G__20331, G__20332, G__20333, G__20334, G__20335, G__20336);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__20337 = a;
  var G__20338 = b;
  var G__20339 = c;
  var G__20340 = d;
  var G__20341 = e;
  var G__20342 = f;
  var G__20343 = g;
  var G__20344 = h;
  var G__20345 = i;
  var G__20346 = j;
  var G__20347 = k;
  var G__20348 = l;
  var G__20349 = m;
  var G__20350 = n;
  var G__20351 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__20337, G__20338, G__20339, G__20340, G__20341, G__20342, G__20343, G__20344, G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351) : self__.afn.call(null, G__20337, G__20338, G__20339, G__20340, G__20341, G__20342, G__20343, G__20344, G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__20352 = a;
  var G__20353 = b;
  var G__20354 = c;
  var G__20355 = d;
  var G__20356 = e;
  var G__20357 = f;
  var G__20358 = g;
  var G__20359 = h;
  var G__20360 = i;
  var G__20361 = j;
  var G__20362 = k;
  var G__20363 = l;
  var G__20364 = m;
  var G__20365 = n;
  var G__20366 = o;
  var G__20367 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__20352, G__20353, G__20354, G__20355, G__20356, G__20357, G__20358, G__20359, G__20360, G__20361, G__20362, G__20363, G__20364, G__20365, G__20366, G__20367) : self__.afn.call(null, G__20352, G__20353, G__20354, G__20355, G__20356, G__20357, G__20358, G__20359, G__20360, G__20361, G__20362, G__20363, G__20364, G__20365, G__20366, G__20367);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__20368 = a;
  var G__20369 = b;
  var G__20370 = c;
  var G__20371 = d;
  var G__20372 = e;
  var G__20373 = f;
  var G__20374 = g;
  var G__20375 = h;
  var G__20376 = i;
  var G__20377 = j;
  var G__20378 = k;
  var G__20379 = l;
  var G__20380 = m;
  var G__20381 = n;
  var G__20382 = o;
  var G__20383 = p;
  var G__20384 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__20368, G__20369, G__20370, G__20371, G__20372, G__20373, G__20374, G__20375, G__20376, G__20377, G__20378, G__20379, G__20380, G__20381, G__20382, G__20383, G__20384) : self__.afn.call(null, G__20368, G__20369, G__20370, G__20371, G__20372, G__20373, G__20374, G__20375, G__20376, G__20377, G__20378, G__20379, G__20380, G__20381, G__20382, G__20383, G__20384);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__20385 = a;
  var G__20386 = b;
  var G__20387 = c;
  var G__20388 = d;
  var G__20389 = e;
  var G__20390 = f;
  var G__20391 = g;
  var G__20392 = h;
  var G__20393 = i;
  var G__20394 = j;
  var G__20395 = k;
  var G__20396 = l;
  var G__20397 = m;
  var G__20398 = n;
  var G__20399 = o;
  var G__20400 = p;
  var G__20401 = q;
  var G__20402 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__20385, G__20386, G__20387, G__20388, G__20389, G__20390, G__20391, G__20392, G__20393, G__20394, G__20395, G__20396, G__20397, G__20398, G__20399, G__20400, G__20401, G__20402) : self__.afn.call(null, G__20385, G__20386, G__20387, G__20388, G__20389, G__20390, G__20391, G__20392, G__20393, G__20394, G__20395, G__20396, G__20397, G__20398, G__20399, G__20400, G__20401, G__20402);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__20403 = a;
  var G__20404 = b;
  var G__20405 = c;
  var G__20406 = d;
  var G__20407 = e;
  var G__20408 = f;
  var G__20409 = g;
  var G__20410 = h;
  var G__20411 = i;
  var G__20412 = j;
  var G__20413 = k;
  var G__20414 = l;
  var G__20415 = m;
  var G__20416 = n;
  var G__20417 = o;
  var G__20418 = p;
  var G__20419 = q;
  var G__20420 = r;
  var G__20421 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412, G__20413, G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421) : self__.afn.call(null, G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412, G__20413, G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__20422 = a;
  var G__20423 = b;
  var G__20424 = c;
  var G__20425 = d;
  var G__20426 = e;
  var G__20427 = f;
  var G__20428 = g;
  var G__20429 = h;
  var G__20430 = i;
  var G__20431 = j;
  var G__20432 = k;
  var G__20433 = l;
  var G__20434 = m;
  var G__20435 = n;
  var G__20436 = o;
  var G__20437 = p;
  var G__20438 = q;
  var G__20439 = r;
  var G__20440 = s;
  var G__20441 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__20422, G__20423, G__20424, G__20425, G__20426, G__20427, G__20428, G__20429, G__20430, G__20431, G__20432, G__20433, G__20434, G__20435, G__20436, G__20437, G__20438, G__20439, G__20440, G__20441) : self__.afn.call(null, G__20422, G__20423, G__20424, G__20425, G__20426, G__20427, G__20428, G__20429, G__20430, G__20431, G__20432, G__20433, G__20434, G__20435, G__20436, G__20437, G__20438, G__20439, G__20440, 
  G__20441);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__20442 = self__.afn;
  var G__20443 = a;
  var G__20444 = b;
  var G__20445 = c;
  var G__20446 = d;
  var G__20447 = e;
  var G__20448 = f;
  var G__20449 = g;
  var G__20450 = h;
  var G__20451 = i;
  var G__20452 = j;
  var G__20453 = k;
  var G__20454 = l;
  var G__20455 = m;
  var G__20456 = n;
  var G__20457 = o;
  var G__20458 = p;
  var G__20459 = q;
  var G__20460 = r;
  var G__20461 = s;
  var G__20462 = t;
  var G__20463 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__20442, G__20443, G__20444, G__20445, G__20446, G__20447, G__20448, G__20449, G__20450, G__20451, G__20452, G__20453, G__20454, G__20455, G__20456, G__20457, G__20458, G__20459, G__20460, G__20461, G__20462, G__20463) : cljs.core.apply.call(null, G__20442, G__20443, G__20444, G__20445, G__20446, G__20447, G__20448, G__20449, G__20450, G__20451, G__20452, G__20453, G__20454, G__20455, G__20456, 
  G__20457, G__20458, G__20459, G__20460, G__20461, G__20462, G__20463);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__20468 = o;
    if (G__20468) {
      var bit__4662__auto__ = G__20468.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4662__auto__ || G__20468.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__20468.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__20468);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__20468);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3969__auto__ = !(o == null);
    if (and__3969__auto__) {
      var G__20472 = o;
      if (G__20472) {
        var bit__4662__auto__ = G__20472.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4662__auto__ || G__20472.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__20472.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__20472);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__20472);
      }
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var disj__3 = function() {
    var G__20475__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__20476 = ret;
            var G__20477 = cljs.core.first(ks);
            var G__20478 = cljs.core.next(ks);
            coll = G__20476;
            k = G__20477;
            ks = G__20478;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__20475 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__20479__i = 0, G__20479__a = new Array(arguments.length - 2);
        while (G__20479__i < G__20479__a.length) {
          G__20479__a[G__20479__i] = arguments[G__20479__i + 2];
          ++G__20479__i;
        }
        ks = new cljs.core.IndexedSeq(G__20479__a, 0);
      }
      return G__20475__delegate.call(this, coll, k, ks);
    };
    G__20475.cljs$lang$maxFixedArity = 2;
    G__20475.cljs$lang$applyTo = function(arglist__20480) {
      var coll = cljs.core.first(arglist__20480);
      arglist__20480 = cljs.core.next(arglist__20480);
      var k = cljs.core.first(arglist__20480);
      var ks = cljs.core.rest(arglist__20480);
      return G__20475__delegate(coll, k, ks);
    };
    G__20475.cljs$core$IFn$_invoke$arity$variadic = G__20475__delegate;
    return G__20475;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        var G__20481 = null;
        if (arguments.length > 2) {
          var G__20482__i = 0, G__20482__a = new Array(arguments.length - 2);
          while (G__20482__i < G__20482__a.length) {
            G__20482__a[G__20482__i] = arguments[G__20482__i + 2];
            ++G__20482__i;
          }
          G__20481 = new cljs.core.IndexedSeq(G__20482__a, 0);
        }
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__20481);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__20484 = x;
    if (G__20484) {
      var bit__4662__auto__ = G__20484.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4662__auto__ || G__20484.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__20484.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__20484);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__20484);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__20486 = x;
    if (G__20486) {
      var bit__4662__auto__ = G__20486.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4662__auto__ || G__20486.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__20486.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__20486);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__20486);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__20488 = x;
  if (G__20488) {
    var bit__4662__auto__ = G__20488.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4662__auto__ || G__20488.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__20488.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__20488);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__20488);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__20490 = x;
  if (G__20490) {
    var bit__4662__auto__ = G__20490.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4662__auto__ || G__20490.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__20490.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__20490);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__20490);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__20492 = x;
  if (G__20492) {
    var bit__4662__auto__ = G__20492.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4662__auto__ || G__20492.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__20492.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__20492);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__20492);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__20494 = x;
  if (G__20494) {
    var bit__4662__auto__ = G__20494.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4662__auto__ || G__20494.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__20494.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__20494);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__20494);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__20496 = x;
    if (G__20496) {
      var bit__4662__auto__ = G__20496.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4662__auto__ || G__20496.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__20496.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__20496);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__20496);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__20498 = x;
  if (G__20498) {
    var bit__4662__auto__ = G__20498.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4662__auto__ || G__20498.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__20498.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__20498);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__20498);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__20500 = x;
  if (G__20500) {
    var bit__4655__auto__ = G__20500.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4655__auto__ || G__20500.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj20506 = {};
    return obj20506;
  };
  var js_obj__1 = function() {
    var G__20509__delegate = function(keyvals) {
      var G__20507 = goog.object.create;
      var G__20508 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__20507, G__20508) : cljs.core.apply.call(null, G__20507, G__20508);
    };
    var G__20509 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__20510__i = 0, G__20510__a = new Array(arguments.length - 0);
        while (G__20510__i < G__20510__a.length) {
          G__20510__a[G__20510__i] = arguments[G__20510__i + 0];
          ++G__20510__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__20510__a, 0);
      }
      return G__20509__delegate.call(this, keyvals);
    };
    G__20509.cljs$lang$maxFixedArity = 0;
    G__20509.cljs$lang$applyTo = function(arglist__20511) {
      var keyvals = cljs.core.seq(arglist__20511);
      return G__20509__delegate(keyvals);
    };
    G__20509.cljs$core$IFn$_invoke$arity$variadic = G__20509__delegate;
    return G__20509;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        var G__20512 = null;
        if (arguments.length > 0) {
          var G__20513__i = 0, G__20513__a = new Array(arguments.length - 0);
          while (G__20513__i < G__20513__a.length) {
            G__20513__a[G__20513__i] = arguments[G__20513__i + 0];
            ++G__20513__i;
          }
          G__20512 = new cljs.core.IndexedSeq(G__20513__a, 0);
        }
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__20512);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  var G__20516_20518 = obj;
  var G__20517_20519 = function(G__20516_20518, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__20516_20518, keys);
  goog.object.forEach(G__20516_20518, G__20517_20519);
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__20520 = i__$1 + 1;
      var G__20521 = j__$1 + 1;
      var G__20522 = len__$1 - 1;
      i__$1 = G__20520;
      j__$1 = G__20521;
      len__$1 = G__20522;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__20523 = i__$1 - 1;
      var G__20524 = j__$1 - 1;
      var G__20525 = len__$1 - 1;
      i__$1 = G__20523;
      j__$1 = G__20524;
      len__$1 = G__20525;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj20527 = {};
  return obj20527;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__20529 = s;
    if (G__20529) {
      var bit__4662__auto__ = G__20529.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4662__auto__ || G__20529.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__20529.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__20529);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__20529);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__20531 = s;
  if (G__20531) {
    var bit__4662__auto__ = G__20531.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4662__auto__ || G__20531.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__20531.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__20531);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__20531);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3981__auto__ = cljs.core.fn_QMARK_(f);
  if (or__3981__auto__) {
    return or__3981__auto__;
  } else {
    var G__20535 = f;
    if (G__20535) {
      var bit__4662__auto__ = G__20535.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4662__auto__ || G__20535.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__20535.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__20535);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__20535);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__20548 = n;
    return isNaN(G__20548);
  }()) && !(n === Infinity) && function() {
    var G__20549 = n;
    return parseFloat(G__20549);
  }() === function() {
    var G__20550 = n;
    var G__20551 = 10;
    return parseInt(G__20550, G__20551);
  }();
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__20552__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__20553 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__20554 = etc;
              s = G__20553;
              xs = G__20554;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__20552 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20555__i = 0, G__20555__a = new Array(arguments.length - 2);
        while (G__20555__i < G__20555__a.length) {
          G__20555__a[G__20555__i] = arguments[G__20555__i + 2];
          ++G__20555__i;
        }
        more = new cljs.core.IndexedSeq(G__20555__a, 0);
      }
      return G__20552__delegate.call(this, x, y, more);
    };
    G__20552.cljs$lang$maxFixedArity = 2;
    G__20552.cljs$lang$applyTo = function(arglist__20556) {
      var x = cljs.core.first(arglist__20556);
      arglist__20556 = cljs.core.next(arglist__20556);
      var y = cljs.core.first(arglist__20556);
      var more = cljs.core.rest(arglist__20556);
      return G__20552__delegate(x, y, more);
    };
    G__20552.cljs$core$IFn$_invoke$arity$variadic = G__20552__delegate;
    return G__20552;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        var G__20557 = null;
        if (arguments.length > 2) {
          var G__20558__i = 0, G__20558__a = new Array(arguments.length - 2);
          while (G__20558__i < G__20558__a.length) {
            G__20558__a[G__20558__i] = arguments[G__20558__i + 2];
            ++G__20558__i;
          }
          G__20557 = new cljs.core.IndexedSeq(G__20558__a, 0);
        }
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20557);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__20562 = x;
            if (G__20562) {
              var bit__4655__auto__ = G__20562.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4655__auto__ || G__20562.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__20563 = x;
            var G__20564 = y;
            return goog.array.defaultCompare(G__20563, G__20564);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__20569 = xs;
        var G__20570 = ys;
        var G__20571 = len;
        var G__20572 = n + 1;
        xs = G__20569;
        ys = G__20570;
        len = G__20571;
        n = G__20572;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__20577 = x;
        var G__20578 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20577, G__20578) : f.call(null, G__20577, G__20578);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__20579 = y;
            var G__20580 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20579, G__20580) : f.call(null, G__20579, G__20580);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__20586 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__20586) : cljs.core.to_array.call(null, G__20586);
      }();
      var G__20587_20589 = a;
      var G__20588_20590 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__20587_20589, G__20588_20590);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__20596 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__20596) : keyfn.call(null, G__20596);
      }(), function() {
        var G__20597 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__20597) : keyfn.call(null, G__20597);
      }());
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__20603 = f;
      var G__20604 = cljs.core.first(s);
      var G__20605 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__20603, G__20604, G__20605) : cljs.core.reduce.call(null, G__20603, G__20604, G__20605);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__20606 = val__$1;
          var G__20607 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20606, G__20607) : f.call(null, G__20606, G__20607);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__20608 = nval;
          var G__20609 = cljs.core.next(coll__$1);
          val__$1 = G__20608;
          coll__$1 = G__20609;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = function() {
    var G__20613 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__20613) : cljs.core.to_array.call(null, G__20613);
  }();
  var G__20614_20616 = a;
  goog.array.shuffle(G__20614_20616);
  var G__20615 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__20615) : cljs.core.vec.call(null, G__20615);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__20619 = coll;
      if (G__20619) {
        var bit__4655__auto__ = G__20619.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4655__auto__ || G__20619.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__20620 = coll;
      if (G__20620) {
        var bit__4655__auto__ = G__20620.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4655__auto__ || G__20620.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__20629 = null;
      var G__20629__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__20629__1 = function(x) {
        var G__20626 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__20626) : cf.call(null, G__20626);
      };
      var G__20629__2 = function(x, y) {
        var G__20627 = x;
        var G__20628 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20627, G__20628) : f.call(null, G__20627, G__20628);
      };
      G__20629 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__20629__0.call(this);
          case 1:
            return G__20629__1.call(this, x);
          case 2:
            return G__20629__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20629.cljs$core$IFn$_invoke$arity$0 = G__20629__0;
      G__20629.cljs$core$IFn$_invoke$arity$1 = G__20629__1;
      G__20629.cljs$core$IFn$_invoke$arity$2 = G__20629__2;
      return G__20629;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__20636 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__20636) : xform.call(null, G__20636);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__20637 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__20637) : f__$1.call(null, G__20637);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__20638__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_PLUS_, x + y, more);
    };
    var G__20638 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20639__i = 0, G__20639__a = new Array(arguments.length - 2);
        while (G__20639__i < G__20639__a.length) {
          G__20639__a[G__20639__i] = arguments[G__20639__i + 2];
          ++G__20639__i;
        }
        more = new cljs.core.IndexedSeq(G__20639__a, 0);
      }
      return G__20638__delegate.call(this, x, y, more);
    };
    G__20638.cljs$lang$maxFixedArity = 2;
    G__20638.cljs$lang$applyTo = function(arglist__20640) {
      var x = cljs.core.first(arglist__20640);
      arglist__20640 = cljs.core.next(arglist__20640);
      var y = cljs.core.first(arglist__20640);
      var more = cljs.core.rest(arglist__20640);
      return G__20638__delegate(x, y, more);
    };
    G__20638.cljs$core$IFn$_invoke$arity$variadic = G__20638__delegate;
    return G__20638;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        var G__20641 = null;
        if (arguments.length > 2) {
          var G__20642__i = 0, G__20642__a = new Array(arguments.length - 2);
          while (G__20642__i < G__20642__a.length) {
            G__20642__a[G__20642__i] = arguments[G__20642__i + 2];
            ++G__20642__i;
          }
          G__20641 = new cljs.core.IndexedSeq(G__20642__a, 0);
        }
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20641);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__20643__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_, x - y, more);
    };
    var G__20643 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20644__i = 0, G__20644__a = new Array(arguments.length - 2);
        while (G__20644__i < G__20644__a.length) {
          G__20644__a[G__20644__i] = arguments[G__20644__i + 2];
          ++G__20644__i;
        }
        more = new cljs.core.IndexedSeq(G__20644__a, 0);
      }
      return G__20643__delegate.call(this, x, y, more);
    };
    G__20643.cljs$lang$maxFixedArity = 2;
    G__20643.cljs$lang$applyTo = function(arglist__20645) {
      var x = cljs.core.first(arglist__20645);
      arglist__20645 = cljs.core.next(arglist__20645);
      var y = cljs.core.first(arglist__20645);
      var more = cljs.core.rest(arglist__20645);
      return G__20643__delegate(x, y, more);
    };
    G__20643.cljs$core$IFn$_invoke$arity$variadic = G__20643__delegate;
    return G__20643;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        var G__20646 = null;
        if (arguments.length > 2) {
          var G__20647__i = 0, G__20647__a = new Array(arguments.length - 2);
          while (G__20647__i < G__20647__a.length) {
            G__20647__a[G__20647__i] = arguments[G__20647__i + 2];
            ++G__20647__i;
          }
          G__20646 = new cljs.core.IndexedSeq(G__20647__a, 0);
        }
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20646);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__20648__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_STAR_, x * y, more);
    };
    var G__20648 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20649__i = 0, G__20649__a = new Array(arguments.length - 2);
        while (G__20649__i < G__20649__a.length) {
          G__20649__a[G__20649__i] = arguments[G__20649__i + 2];
          ++G__20649__i;
        }
        more = new cljs.core.IndexedSeq(G__20649__a, 0);
      }
      return G__20648__delegate.call(this, x, y, more);
    };
    G__20648.cljs$lang$maxFixedArity = 2;
    G__20648.cljs$lang$applyTo = function(arglist__20650) {
      var x = cljs.core.first(arglist__20650);
      arglist__20650 = cljs.core.next(arglist__20650);
      var y = cljs.core.first(arglist__20650);
      var more = cljs.core.rest(arglist__20650);
      return G__20648__delegate(x, y, more);
    };
    G__20648.cljs$core$IFn$_invoke$arity$variadic = G__20648__delegate;
    return G__20648;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        var G__20651 = null;
        if (arguments.length > 2) {
          var G__20652__i = 0, G__20652__a = new Array(arguments.length - 2);
          while (G__20652__i < G__20652__a.length) {
            G__20652__a[G__20652__i] = arguments[G__20652__i + 2];
            ++G__20652__i;
          }
          G__20651 = new cljs.core.IndexedSeq(G__20652__a, 0);
        }
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20651);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__20657__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_SLASH_, _SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__20657 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20658__i = 0, G__20658__a = new Array(arguments.length - 2);
        while (G__20658__i < G__20658__a.length) {
          G__20658__a[G__20658__i] = arguments[G__20658__i + 2];
          ++G__20658__i;
        }
        more = new cljs.core.IndexedSeq(G__20658__a, 0);
      }
      return G__20657__delegate.call(this, x, y, more);
    };
    G__20657.cljs$lang$maxFixedArity = 2;
    G__20657.cljs$lang$applyTo = function(arglist__20659) {
      var x = cljs.core.first(arglist__20659);
      arglist__20659 = cljs.core.next(arglist__20659);
      var y = cljs.core.first(arglist__20659);
      var more = cljs.core.rest(arglist__20659);
      return G__20657__delegate(x, y, more);
    };
    G__20657.cljs$core$IFn$_invoke$arity$variadic = G__20657__delegate;
    return G__20657;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        var G__20660 = null;
        if (arguments.length > 2) {
          var G__20661__i = 0, G__20661__a = new Array(arguments.length - 2);
          while (G__20661__i < G__20661__a.length) {
            G__20661__a[G__20661__i] = arguments[G__20661__i + 2];
            ++G__20661__i;
          }
          G__20660 = new cljs.core.IndexedSeq(G__20661__a, 0);
        }
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20660);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__20662__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__20663 = y;
            var G__20664 = cljs.core.first(more);
            var G__20665 = cljs.core.next(more);
            x = G__20663;
            y = G__20664;
            more = G__20665;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20662 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20666__i = 0, G__20666__a = new Array(arguments.length - 2);
        while (G__20666__i < G__20666__a.length) {
          G__20666__a[G__20666__i] = arguments[G__20666__i + 2];
          ++G__20666__i;
        }
        more = new cljs.core.IndexedSeq(G__20666__a, 0);
      }
      return G__20662__delegate.call(this, x, y, more);
    };
    G__20662.cljs$lang$maxFixedArity = 2;
    G__20662.cljs$lang$applyTo = function(arglist__20667) {
      var x = cljs.core.first(arglist__20667);
      arglist__20667 = cljs.core.next(arglist__20667);
      var y = cljs.core.first(arglist__20667);
      var more = cljs.core.rest(arglist__20667);
      return G__20662__delegate(x, y, more);
    };
    G__20662.cljs$core$IFn$_invoke$arity$variadic = G__20662__delegate;
    return G__20662;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        var G__20668 = null;
        if (arguments.length > 2) {
          var G__20669__i = 0, G__20669__a = new Array(arguments.length - 2);
          while (G__20669__i < G__20669__a.length) {
            G__20669__a[G__20669__i] = arguments[G__20669__i + 2];
            ++G__20669__i;
          }
          G__20668 = new cljs.core.IndexedSeq(G__20669__a, 0);
        }
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20668);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__20670__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__20671 = y;
            var G__20672 = cljs.core.first(more);
            var G__20673 = cljs.core.next(more);
            x = G__20671;
            y = G__20672;
            more = G__20673;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20670 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20674__i = 0, G__20674__a = new Array(arguments.length - 2);
        while (G__20674__i < G__20674__a.length) {
          G__20674__a[G__20674__i] = arguments[G__20674__i + 2];
          ++G__20674__i;
        }
        more = new cljs.core.IndexedSeq(G__20674__a, 0);
      }
      return G__20670__delegate.call(this, x, y, more);
    };
    G__20670.cljs$lang$maxFixedArity = 2;
    G__20670.cljs$lang$applyTo = function(arglist__20675) {
      var x = cljs.core.first(arglist__20675);
      arglist__20675 = cljs.core.next(arglist__20675);
      var y = cljs.core.first(arglist__20675);
      var more = cljs.core.rest(arglist__20675);
      return G__20670__delegate(x, y, more);
    };
    G__20670.cljs$core$IFn$_invoke$arity$variadic = G__20670__delegate;
    return G__20670;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        var G__20676 = null;
        if (arguments.length > 2) {
          var G__20677__i = 0, G__20677__a = new Array(arguments.length - 2);
          while (G__20677__i < G__20677__a.length) {
            G__20677__a[G__20677__i] = arguments[G__20677__i + 2];
            ++G__20677__i;
          }
          G__20676 = new cljs.core.IndexedSeq(G__20677__a, 0);
        }
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20676);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__20678__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__20679 = y;
            var G__20680 = cljs.core.first(more);
            var G__20681 = cljs.core.next(more);
            x = G__20679;
            y = G__20680;
            more = G__20681;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20678 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20682__i = 0, G__20682__a = new Array(arguments.length - 2);
        while (G__20682__i < G__20682__a.length) {
          G__20682__a[G__20682__i] = arguments[G__20682__i + 2];
          ++G__20682__i;
        }
        more = new cljs.core.IndexedSeq(G__20682__a, 0);
      }
      return G__20678__delegate.call(this, x, y, more);
    };
    G__20678.cljs$lang$maxFixedArity = 2;
    G__20678.cljs$lang$applyTo = function(arglist__20683) {
      var x = cljs.core.first(arglist__20683);
      arglist__20683 = cljs.core.next(arglist__20683);
      var y = cljs.core.first(arglist__20683);
      var more = cljs.core.rest(arglist__20683);
      return G__20678__delegate(x, y, more);
    };
    G__20678.cljs$core$IFn$_invoke$arity$variadic = G__20678__delegate;
    return G__20678;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        var G__20684 = null;
        if (arguments.length > 2) {
          var G__20685__i = 0, G__20685__a = new Array(arguments.length - 2);
          while (G__20685__i < G__20685__a.length) {
            G__20685__a[G__20685__i] = arguments[G__20685__i + 2];
            ++G__20685__i;
          }
          G__20684 = new cljs.core.IndexedSeq(G__20685__a, 0);
        }
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20684);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__20686__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__20687 = y;
            var G__20688 = cljs.core.first(more);
            var G__20689 = cljs.core.next(more);
            x = G__20687;
            y = G__20688;
            more = G__20689;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20686 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20690__i = 0, G__20690__a = new Array(arguments.length - 2);
        while (G__20690__i < G__20690__a.length) {
          G__20690__a[G__20690__i] = arguments[G__20690__i + 2];
          ++G__20690__i;
        }
        more = new cljs.core.IndexedSeq(G__20690__a, 0);
      }
      return G__20686__delegate.call(this, x, y, more);
    };
    G__20686.cljs$lang$maxFixedArity = 2;
    G__20686.cljs$lang$applyTo = function(arglist__20691) {
      var x = cljs.core.first(arglist__20691);
      arglist__20691 = cljs.core.next(arglist__20691);
      var y = cljs.core.first(arglist__20691);
      var more = cljs.core.rest(arglist__20691);
      return G__20686__delegate(x, y, more);
    };
    G__20686.cljs$core$IFn$_invoke$arity$variadic = G__20686__delegate;
    return G__20686;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        var G__20692 = null;
        if (arguments.length > 2) {
          var G__20693__i = 0, G__20693__a = new Array(arguments.length - 2);
          while (G__20693__i < G__20693__a.length) {
            G__20693__a[G__20693__i] = arguments[G__20693__i + 2];
            ++G__20693__i;
          }
          G__20692 = new cljs.core.IndexedSeq(G__20693__a, 0);
        }
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20692);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4298__auto__ = x;
    var y__4299__auto__ = y;
    return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
  };
  var max__3 = function() {
    var G__20694__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(max, function() {
        var x__4298__auto__ = x;
        var y__4299__auto__ = y;
        return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
      }(), more);
    };
    var G__20694 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20695__i = 0, G__20695__a = new Array(arguments.length - 2);
        while (G__20695__i < G__20695__a.length) {
          G__20695__a[G__20695__i] = arguments[G__20695__i + 2];
          ++G__20695__i;
        }
        more = new cljs.core.IndexedSeq(G__20695__a, 0);
      }
      return G__20694__delegate.call(this, x, y, more);
    };
    G__20694.cljs$lang$maxFixedArity = 2;
    G__20694.cljs$lang$applyTo = function(arglist__20696) {
      var x = cljs.core.first(arglist__20696);
      arglist__20696 = cljs.core.next(arglist__20696);
      var y = cljs.core.first(arglist__20696);
      var more = cljs.core.rest(arglist__20696);
      return G__20694__delegate(x, y, more);
    };
    G__20694.cljs$core$IFn$_invoke$arity$variadic = G__20694__delegate;
    return G__20694;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        var G__20697 = null;
        if (arguments.length > 2) {
          var G__20698__i = 0, G__20698__a = new Array(arguments.length - 2);
          while (G__20698__i < G__20698__a.length) {
            G__20698__a[G__20698__i] = arguments[G__20698__i + 2];
            ++G__20698__i;
          }
          G__20697 = new cljs.core.IndexedSeq(G__20698__a, 0);
        }
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20697);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4305__auto__ = x;
    var y__4306__auto__ = y;
    return x__4305__auto__ < y__4306__auto__ ? x__4305__auto__ : y__4306__auto__;
  };
  var min__3 = function() {
    var G__20699__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(min, function() {
        var x__4305__auto__ = x;
        var y__4306__auto__ = y;
        return x__4305__auto__ < y__4306__auto__ ? x__4305__auto__ : y__4306__auto__;
      }(), more);
    };
    var G__20699 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20700__i = 0, G__20700__a = new Array(arguments.length - 2);
        while (G__20700__i < G__20700__a.length) {
          G__20700__a[G__20700__i] = arguments[G__20700__i + 2];
          ++G__20700__i;
        }
        more = new cljs.core.IndexedSeq(G__20700__a, 0);
      }
      return G__20699__delegate.call(this, x, y, more);
    };
    G__20699.cljs$lang$maxFixedArity = 2;
    G__20699.cljs$lang$applyTo = function(arglist__20701) {
      var x = cljs.core.first(arglist__20701);
      arglist__20701 = cljs.core.next(arglist__20701);
      var y = cljs.core.first(arglist__20701);
      var more = cljs.core.rest(arglist__20701);
      return G__20699__delegate(x, y, more);
    };
    G__20699.cljs$core$IFn$_invoke$arity$variadic = G__20699__delegate;
    return G__20699;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        var G__20702 = null;
        if (arguments.length > 2) {
          var G__20703__i = 0, G__20703__a = new Array(arguments.length - 2);
          while (G__20703__i < G__20703__a.length) {
            G__20703__a[G__20703__i] = arguments[G__20703__i + 2];
            ++G__20703__i;
          }
          G__20702 = new cljs.core.IndexedSeq(G__20703__a, 0);
        }
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20702);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__20704__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add, x + y, more);
    };
    var G__20704 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20705__i = 0, G__20705__a = new Array(arguments.length - 2);
        while (G__20705__i < G__20705__a.length) {
          G__20705__a[G__20705__i] = arguments[G__20705__i + 2];
          ++G__20705__i;
        }
        more = new cljs.core.IndexedSeq(G__20705__a, 0);
      }
      return G__20704__delegate.call(this, x, y, more);
    };
    G__20704.cljs$lang$maxFixedArity = 2;
    G__20704.cljs$lang$applyTo = function(arglist__20706) {
      var x = cljs.core.first(arglist__20706);
      arglist__20706 = cljs.core.next(arglist__20706);
      var y = cljs.core.first(arglist__20706);
      var more = cljs.core.rest(arglist__20706);
      return G__20704__delegate(x, y, more);
    };
    G__20704.cljs$core$IFn$_invoke$arity$variadic = G__20704__delegate;
    return G__20704;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        var G__20707 = null;
        if (arguments.length > 2) {
          var G__20708__i = 0, G__20708__a = new Array(arguments.length - 2);
          while (G__20708__i < G__20708__a.length) {
            G__20708__a[G__20708__i] = arguments[G__20708__i + 2];
            ++G__20708__i;
          }
          G__20707 = new cljs.core.IndexedSeq(G__20708__a, 0);
        }
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20707);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__20709__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add_int, x + y, more);
    };
    var G__20709 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20710__i = 0, G__20710__a = new Array(arguments.length - 2);
        while (G__20710__i < G__20710__a.length) {
          G__20710__a[G__20710__i] = arguments[G__20710__i + 2];
          ++G__20710__i;
        }
        more = new cljs.core.IndexedSeq(G__20710__a, 0);
      }
      return G__20709__delegate.call(this, x, y, more);
    };
    G__20709.cljs$lang$maxFixedArity = 2;
    G__20709.cljs$lang$applyTo = function(arglist__20711) {
      var x = cljs.core.first(arglist__20711);
      arglist__20711 = cljs.core.next(arglist__20711);
      var y = cljs.core.first(arglist__20711);
      var more = cljs.core.rest(arglist__20711);
      return G__20709__delegate(x, y, more);
    };
    G__20709.cljs$core$IFn$_invoke$arity$variadic = G__20709__delegate;
    return G__20709;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        var G__20712 = null;
        if (arguments.length > 2) {
          var G__20713__i = 0, G__20713__a = new Array(arguments.length - 2);
          while (G__20713__i < G__20713__a.length) {
            G__20713__a[G__20713__i] = arguments[G__20713__i + 2];
            ++G__20713__i;
          }
          G__20712 = new cljs.core.IndexedSeq(G__20713__a, 0);
        }
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20712);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__20718__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_divide_int, unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__20718 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20719__i = 0, G__20719__a = new Array(arguments.length - 2);
        while (G__20719__i < G__20719__a.length) {
          G__20719__a[G__20719__i] = arguments[G__20719__i + 2];
          ++G__20719__i;
        }
        more = new cljs.core.IndexedSeq(G__20719__a, 0);
      }
      return G__20718__delegate.call(this, x, y, more);
    };
    G__20718.cljs$lang$maxFixedArity = 2;
    G__20718.cljs$lang$applyTo = function(arglist__20720) {
      var x = cljs.core.first(arglist__20720);
      arglist__20720 = cljs.core.next(arglist__20720);
      var y = cljs.core.first(arglist__20720);
      var more = cljs.core.rest(arglist__20720);
      return G__20718__delegate(x, y, more);
    };
    G__20718.cljs$core$IFn$_invoke$arity$variadic = G__20718__delegate;
    return G__20718;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        var G__20721 = null;
        if (arguments.length > 2) {
          var G__20722__i = 0, G__20722__a = new Array(arguments.length - 2);
          while (G__20722__i < G__20722__a.length) {
            G__20722__a[G__20722__i] = arguments[G__20722__i + 2];
            ++G__20722__i;
          }
          G__20721 = new cljs.core.IndexedSeq(G__20722__a, 0);
        }
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20721);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__20723__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply, x * y, more);
    };
    var G__20723 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20724__i = 0, G__20724__a = new Array(arguments.length - 2);
        while (G__20724__i < G__20724__a.length) {
          G__20724__a[G__20724__i] = arguments[G__20724__i + 2];
          ++G__20724__i;
        }
        more = new cljs.core.IndexedSeq(G__20724__a, 0);
      }
      return G__20723__delegate.call(this, x, y, more);
    };
    G__20723.cljs$lang$maxFixedArity = 2;
    G__20723.cljs$lang$applyTo = function(arglist__20725) {
      var x = cljs.core.first(arglist__20725);
      arglist__20725 = cljs.core.next(arglist__20725);
      var y = cljs.core.first(arglist__20725);
      var more = cljs.core.rest(arglist__20725);
      return G__20723__delegate(x, y, more);
    };
    G__20723.cljs$core$IFn$_invoke$arity$variadic = G__20723__delegate;
    return G__20723;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        var G__20726 = null;
        if (arguments.length > 2) {
          var G__20727__i = 0, G__20727__a = new Array(arguments.length - 2);
          while (G__20727__i < G__20727__a.length) {
            G__20727__a[G__20727__i] = arguments[G__20727__i + 2];
            ++G__20727__i;
          }
          G__20726 = new cljs.core.IndexedSeq(G__20727__a, 0);
        }
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20726);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__20728__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply_int, x * y, more);
    };
    var G__20728 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20729__i = 0, G__20729__a = new Array(arguments.length - 2);
        while (G__20729__i < G__20729__a.length) {
          G__20729__a[G__20729__i] = arguments[G__20729__i + 2];
          ++G__20729__i;
        }
        more = new cljs.core.IndexedSeq(G__20729__a, 0);
      }
      return G__20728__delegate.call(this, x, y, more);
    };
    G__20728.cljs$lang$maxFixedArity = 2;
    G__20728.cljs$lang$applyTo = function(arglist__20730) {
      var x = cljs.core.first(arglist__20730);
      arglist__20730 = cljs.core.next(arglist__20730);
      var y = cljs.core.first(arglist__20730);
      var more = cljs.core.rest(arglist__20730);
      return G__20728__delegate(x, y, more);
    };
    G__20728.cljs$core$IFn$_invoke$arity$variadic = G__20728__delegate;
    return G__20728;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__20731 = null;
        if (arguments.length > 2) {
          var G__20732__i = 0, G__20732__a = new Array(arguments.length - 2);
          while (G__20732__i < G__20732__a.length) {
            G__20732__a[G__20732__i] = arguments[G__20732__i + 2];
            ++G__20732__i;
          }
          G__20731 = new cljs.core.IndexedSeq(G__20732__a, 0);
        }
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20731);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  var G__20735 = x;
  var G__20736 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__20735, G__20736) : cljs.core.mod.call(null, G__20735, G__20736);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__20737__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract, x - y, more);
    };
    var G__20737 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20738__i = 0, G__20738__a = new Array(arguments.length - 2);
        while (G__20738__i < G__20738__a.length) {
          G__20738__a[G__20738__i] = arguments[G__20738__i + 2];
          ++G__20738__i;
        }
        more = new cljs.core.IndexedSeq(G__20738__a, 0);
      }
      return G__20737__delegate.call(this, x, y, more);
    };
    G__20737.cljs$lang$maxFixedArity = 2;
    G__20737.cljs$lang$applyTo = function(arglist__20739) {
      var x = cljs.core.first(arglist__20739);
      arglist__20739 = cljs.core.next(arglist__20739);
      var y = cljs.core.first(arglist__20739);
      var more = cljs.core.rest(arglist__20739);
      return G__20737__delegate(x, y, more);
    };
    G__20737.cljs$core$IFn$_invoke$arity$variadic = G__20737__delegate;
    return G__20737;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        var G__20740 = null;
        if (arguments.length > 2) {
          var G__20741__i = 0, G__20741__a = new Array(arguments.length - 2);
          while (G__20741__i < G__20741__a.length) {
            G__20741__a[G__20741__i] = arguments[G__20741__i + 2];
            ++G__20741__i;
          }
          G__20740 = new cljs.core.IndexedSeq(G__20741__a, 0);
        }
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20740);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__20742__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract_int, x - y, more);
    };
    var G__20742 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20743__i = 0, G__20743__a = new Array(arguments.length - 2);
        while (G__20743__i < G__20743__a.length) {
          G__20743__a[G__20743__i] = arguments[G__20743__i + 2];
          ++G__20743__i;
        }
        more = new cljs.core.IndexedSeq(G__20743__a, 0);
      }
      return G__20742__delegate.call(this, x, y, more);
    };
    G__20742.cljs$lang$maxFixedArity = 2;
    G__20742.cljs$lang$applyTo = function(arglist__20744) {
      var x = cljs.core.first(arglist__20744);
      arglist__20744 = cljs.core.next(arglist__20744);
      var y = cljs.core.first(arglist__20744);
      var more = cljs.core.rest(arglist__20744);
      return G__20742__delegate(x, y, more);
    };
    G__20742.cljs$core$IFn$_invoke$arity$variadic = G__20742__delegate;
    return G__20742;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__20745 = null;
        if (arguments.length > 2) {
          var G__20746__i = 0, G__20746__a = new Array(arguments.length - 2);
          while (G__20746__i < G__20746__a.length) {
            G__20746__a[G__20746__i] = arguments[G__20746__i + 2];
            ++G__20746__i;
          }
          G__20745 = new cljs.core.IndexedSeq(G__20746__a, 0);
        }
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20745);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    var G__20749 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__20749) : Math.floor.call(null, G__20749);
  } else {
    var G__20750 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__20750) : Math.ceil.call(null, G__20750);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var bit_xor = null;
  var bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var bit_xor__3 = function() {
    var G__20751__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_xor, x ^ y, more);
    };
    var G__20751 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20752__i = 0, G__20752__a = new Array(arguments.length - 2);
        while (G__20752__i < G__20752__a.length) {
          G__20752__a[G__20752__i] = arguments[G__20752__i + 2];
          ++G__20752__i;
        }
        more = new cljs.core.IndexedSeq(G__20752__a, 0);
      }
      return G__20751__delegate.call(this, x, y, more);
    };
    G__20751.cljs$lang$maxFixedArity = 2;
    G__20751.cljs$lang$applyTo = function(arglist__20753) {
      var x = cljs.core.first(arglist__20753);
      arglist__20753 = cljs.core.next(arglist__20753);
      var y = cljs.core.first(arglist__20753);
      var more = cljs.core.rest(arglist__20753);
      return G__20751__delegate(x, y, more);
    };
    G__20751.cljs$core$IFn$_invoke$arity$variadic = G__20751__delegate;
    return G__20751;
  }();
  bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_xor__2.call(this, x, y);
      default:
        var G__20754 = null;
        if (arguments.length > 2) {
          var G__20755__i = 0, G__20755__a = new Array(arguments.length - 2);
          while (G__20755__i < G__20755__a.length) {
            G__20755__a[G__20755__i] = arguments[G__20755__i + 2];
            ++G__20755__i;
          }
          G__20754 = new cljs.core.IndexedSeq(G__20755__a, 0);
        }
        return bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20754);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_xor.cljs$lang$maxFixedArity = 2;
  bit_xor.cljs$lang$applyTo = bit_xor__3.cljs$lang$applyTo;
  bit_xor.cljs$core$IFn$_invoke$arity$2 = bit_xor__2;
  bit_xor.cljs$core$IFn$_invoke$arity$variadic = bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_xor;
}();
cljs.core.bit_and = function() {
  var bit_and = null;
  var bit_and__2 = function(x, y) {
    return x & y;
  };
  var bit_and__3 = function() {
    var G__20756__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and, x & y, more);
    };
    var G__20756 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20757__i = 0, G__20757__a = new Array(arguments.length - 2);
        while (G__20757__i < G__20757__a.length) {
          G__20757__a[G__20757__i] = arguments[G__20757__i + 2];
          ++G__20757__i;
        }
        more = new cljs.core.IndexedSeq(G__20757__a, 0);
      }
      return G__20756__delegate.call(this, x, y, more);
    };
    G__20756.cljs$lang$maxFixedArity = 2;
    G__20756.cljs$lang$applyTo = function(arglist__20758) {
      var x = cljs.core.first(arglist__20758);
      arglist__20758 = cljs.core.next(arglist__20758);
      var y = cljs.core.first(arglist__20758);
      var more = cljs.core.rest(arglist__20758);
      return G__20756__delegate(x, y, more);
    };
    G__20756.cljs$core$IFn$_invoke$arity$variadic = G__20756__delegate;
    return G__20756;
  }();
  bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and__2.call(this, x, y);
      default:
        var G__20759 = null;
        if (arguments.length > 2) {
          var G__20760__i = 0, G__20760__a = new Array(arguments.length - 2);
          while (G__20760__i < G__20760__a.length) {
            G__20760__a[G__20760__i] = arguments[G__20760__i + 2];
            ++G__20760__i;
          }
          G__20759 = new cljs.core.IndexedSeq(G__20760__a, 0);
        }
        return bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20759);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and.cljs$lang$maxFixedArity = 2;
  bit_and.cljs$lang$applyTo = bit_and__3.cljs$lang$applyTo;
  bit_and.cljs$core$IFn$_invoke$arity$2 = bit_and__2;
  bit_and.cljs$core$IFn$_invoke$arity$variadic = bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and;
}();
cljs.core.bit_or = function() {
  var bit_or = null;
  var bit_or__2 = function(x, y) {
    return x | y;
  };
  var bit_or__3 = function() {
    var G__20761__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_or, x | y, more);
    };
    var G__20761 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20762__i = 0, G__20762__a = new Array(arguments.length - 2);
        while (G__20762__i < G__20762__a.length) {
          G__20762__a[G__20762__i] = arguments[G__20762__i + 2];
          ++G__20762__i;
        }
        more = new cljs.core.IndexedSeq(G__20762__a, 0);
      }
      return G__20761__delegate.call(this, x, y, more);
    };
    G__20761.cljs$lang$maxFixedArity = 2;
    G__20761.cljs$lang$applyTo = function(arglist__20763) {
      var x = cljs.core.first(arglist__20763);
      arglist__20763 = cljs.core.next(arglist__20763);
      var y = cljs.core.first(arglist__20763);
      var more = cljs.core.rest(arglist__20763);
      return G__20761__delegate(x, y, more);
    };
    G__20761.cljs$core$IFn$_invoke$arity$variadic = G__20761__delegate;
    return G__20761;
  }();
  bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_or__2.call(this, x, y);
      default:
        var G__20764 = null;
        if (arguments.length > 2) {
          var G__20765__i = 0, G__20765__a = new Array(arguments.length - 2);
          while (G__20765__i < G__20765__a.length) {
            G__20765__a[G__20765__i] = arguments[G__20765__i + 2];
            ++G__20765__i;
          }
          G__20764 = new cljs.core.IndexedSeq(G__20765__a, 0);
        }
        return bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20764);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_or.cljs$lang$maxFixedArity = 2;
  bit_or.cljs$lang$applyTo = bit_or__3.cljs$lang$applyTo;
  bit_or.cljs$core$IFn$_invoke$arity$2 = bit_or__2;
  bit_or.cljs$core$IFn$_invoke$arity$variadic = bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_or;
}();
cljs.core.bit_and_not = function() {
  var bit_and_not = null;
  var bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var bit_and_not__3 = function() {
    var G__20766__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and_not, x & ~y, more);
    };
    var G__20766 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20767__i = 0, G__20767__a = new Array(arguments.length - 2);
        while (G__20767__i < G__20767__a.length) {
          G__20767__a[G__20767__i] = arguments[G__20767__i + 2];
          ++G__20767__i;
        }
        more = new cljs.core.IndexedSeq(G__20767__a, 0);
      }
      return G__20766__delegate.call(this, x, y, more);
    };
    G__20766.cljs$lang$maxFixedArity = 2;
    G__20766.cljs$lang$applyTo = function(arglist__20768) {
      var x = cljs.core.first(arglist__20768);
      arglist__20768 = cljs.core.next(arglist__20768);
      var y = cljs.core.first(arglist__20768);
      var more = cljs.core.rest(arglist__20768);
      return G__20766__delegate(x, y, more);
    };
    G__20766.cljs$core$IFn$_invoke$arity$variadic = G__20766__delegate;
    return G__20766;
  }();
  bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and_not__2.call(this, x, y);
      default:
        var G__20769 = null;
        if (arguments.length > 2) {
          var G__20770__i = 0, G__20770__a = new Array(arguments.length - 2);
          while (G__20770__i < G__20770__a.length) {
            G__20770__a[G__20770__i] = arguments[G__20770__i + 2];
            ++G__20770__i;
          }
          G__20769 = new cljs.core.IndexedSeq(G__20770__a, 0);
        }
        return bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20769);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and_not.cljs$lang$maxFixedArity = 2;
  bit_and_not.cljs$lang$applyTo = bit_and_not__3.cljs$lang$applyTo;
  bit_and_not.cljs$core$IFn$_invoke$arity$2 = bit_and_not__2;
  bit_and_not.cljs$core$IFn$_invoke$arity$variadic = bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and_not;
}();
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__20775__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__20776 = y;
            var G__20777 = cljs.core.first(more);
            var G__20778 = cljs.core.next(more);
            x = G__20776;
            y = G__20777;
            more = G__20778;
            continue;
          } else {
            return _EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20775 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__20779__i = 0, G__20779__a = new Array(arguments.length - 2);
        while (G__20779__i < G__20779__a.length) {
          G__20779__a[G__20779__i] = arguments[G__20779__i + 2];
          ++G__20779__i;
        }
        more = new cljs.core.IndexedSeq(G__20779__a, 0);
      }
      return G__20775__delegate.call(this, x, y, more);
    };
    G__20775.cljs$lang$maxFixedArity = 2;
    G__20775.cljs$lang$applyTo = function(arglist__20780) {
      var x = cljs.core.first(arglist__20780);
      arglist__20780 = cljs.core.next(arglist__20780);
      var y = cljs.core.first(arglist__20780);
      var more = cljs.core.rest(arglist__20780);
      return G__20775__delegate(x, y, more);
    };
    G__20775.cljs$core$IFn$_invoke$arity$variadic = G__20775__delegate;
    return G__20775;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        var G__20781 = null;
        if (arguments.length > 2) {
          var G__20782__i = 0, G__20782__a = new Array(arguments.length - 2);
          while (G__20782__i < G__20782__a.length) {
            G__20782__a[G__20782__i] = arguments[G__20782__i + 2];
            ++G__20782__i;
          }
          G__20781 = new cljs.core.IndexedSeq(G__20782__a, 0);
        }
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20781);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__20783 = n__$1 - 1;
      var G__20784 = cljs.core.next(xs);
      n__$1 = G__20783;
      xs = G__20784;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__20788 = x;
      return goog.string.buildString(G__20788);
    }
  };
  var str__2 = function() {
    var G__20789__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__20790 = sb.append(str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__20791 = cljs.core.next(more);
          sb = G__20790;
          more = G__20791;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__20789 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__20792__i = 0, G__20792__a = new Array(arguments.length - 1);
        while (G__20792__i < G__20792__a.length) {
          G__20792__a[G__20792__i] = arguments[G__20792__i + 1];
          ++G__20792__i;
        }
        ys = new cljs.core.IndexedSeq(G__20792__a, 0);
      }
      return G__20789__delegate.call(this, x, ys);
    };
    G__20789.cljs$lang$maxFixedArity = 1;
    G__20789.cljs$lang$applyTo = function(arglist__20793) {
      var x = cljs.core.first(arglist__20793);
      var ys = cljs.core.rest(arglist__20793);
      return G__20789__delegate(x, ys);
    };
    G__20789.cljs$core$IFn$_invoke$arity$variadic = G__20789__delegate;
    return G__20789;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        var G__20794 = null;
        if (arguments.length > 1) {
          var G__20795__i = 0, G__20795__a = new Array(arguments.length - 1);
          while (G__20795__i < G__20795__a.length) {
            G__20795__a[G__20795__i] = arguments[G__20795__i + 1];
            ++G__20795__i;
          }
          G__20794 = new cljs.core.IndexedSeq(G__20795__a, 0);
        }
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__20794);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__20796 = cljs.core.next(xs);
            var G__20797 = cljs.core.next(ys);
            xs = G__20796;
            ys = G__20797;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__20798 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__20799 = cljs.core.next(s);
        res = G__20798;
        s = G__20799;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__20804 = (h + (cljs.core.hash(function() {
        var G__20802 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20802) : cljs.core.key.call(null, G__20802);
      }()) ^ cljs.core.hash(function() {
        var G__20803 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__20803) : cljs.core.val.call(null, G__20803);
      }()))) % 4503599627370496;
      var G__20805 = cljs.core.next(s);
      h = G__20804;
      s = G__20805;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__20806 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__20807 = cljs.core.next(s__$1);
      h = G__20806;
      s__$1 = G__20807;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__20818_20828 = cljs.core.seq(fn_map);
  var chunk__20819_20829 = null;
  var count__20820_20830 = 0;
  var i__20821_20831 = 0;
  while (true) {
    if (i__20821_20831 < count__20820_20830) {
      var vec__20822_20832 = chunk__20819_20829.cljs$core$IIndexed$_nth$arity$2(null, i__20821_20831);
      var key_name_20833 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20822_20832, 0, null);
      var f_20834 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20822_20832, 1, null);
      var str_name_20835 = function() {
        var G__20823 = key_name_20833;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__20823) : cljs.core.name.call(null, G__20823);
      }();
      obj[str_name_20835] = f_20834;
      var G__20836 = seq__20818_20828;
      var G__20837 = chunk__20819_20829;
      var G__20838 = count__20820_20830;
      var G__20839 = i__20821_20831 + 1;
      seq__20818_20828 = G__20836;
      chunk__20819_20829 = G__20837;
      count__20820_20830 = G__20838;
      i__20821_20831 = G__20839;
      continue;
    } else {
      var temp__4126__auto___20840 = cljs.core.seq(seq__20818_20828);
      if (temp__4126__auto___20840) {
        var seq__20818_20841__$1 = temp__4126__auto___20840;
        if (cljs.core.chunked_seq_QMARK_(seq__20818_20841__$1)) {
          var c__4768__auto___20842 = function() {
            var G__20824 = seq__20818_20841__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__20824) : cljs.core.chunk_first.call(null, G__20824);
          }();
          var G__20843 = function() {
            var G__20825 = seq__20818_20841__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__20825) : cljs.core.chunk_rest.call(null, G__20825);
          }();
          var G__20844 = c__4768__auto___20842;
          var G__20845 = cljs.core.count(c__4768__auto___20842);
          var G__20846 = 0;
          seq__20818_20828 = G__20843;
          chunk__20819_20829 = G__20844;
          count__20820_20830 = G__20845;
          i__20821_20831 = G__20846;
          continue;
        } else {
          var vec__20826_20847 = cljs.core.first(seq__20818_20841__$1);
          var key_name_20848 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20826_20847, 0, null);
          var f_20849 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20826_20847, 1, null);
          var str_name_20850 = function() {
            var G__20827 = key_name_20848;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__20827) : cljs.core.name.call(null, G__20827);
          }();
          obj[str_name_20850] = f_20849;
          var G__20851 = cljs.core.next(seq__20818_20841__$1);
          var G__20852 = null;
          var G__20853 = 0;
          var G__20854 = 0;
          seq__20818_20828 = G__20851;
          chunk__20819_20829 = G__20852;
          count__20820_20830 = G__20853;
          i__20821_20831 = G__20854;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__20856 = coll;
  if (G__20856) {
    var bit__4662__auto__ = G__20856.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4662__auto__ || G__20856.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__20856.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__20856);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__20856);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__20857 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__20857;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__20858 = i - 1;
        var G__20859 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__20858;
        r = G__20859;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__20860__i = 0, G__20860__a = new Array(arguments.length - 0);
      while (G__20860__i < G__20860__a.length) {
        G__20860__a[G__20860__i] = arguments[G__20860__i + 0];
        ++G__20860__i;
      }
      xs = new cljs.core.IndexedSeq(G__20860__a, 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__20861) {
    var xs = cljs.core.seq(arglist__20861);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3981__auto__ = coll == null;
    if (or__3981__auto__) {
      return or__3981__auto__;
    } else {
      var G__20865 = coll;
      if (G__20865) {
        var bit__4655__auto__ = G__20865.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__20865.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__20867 = x;
  if (G__20867) {
    var bit__4662__auto__ = G__20867.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4662__auto__ || G__20867.cljs$core$IList$) {
      return true;
    } else {
      if (!G__20867.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__20867);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__20867);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = cljs.core.not(a.ns);
      if (and__3969__auto__) {
        return b.ns;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__20874 = a.ns;
            var G__20875 = b.ns;
            return goog.array.defaultCompare(G__20874, G__20875);
          }();
          if (0 === nsc) {
            var G__20876 = a.name;
            var G__20877 = b.name;
            return goog.array.defaultCompare(G__20876, G__20877);
          } else {
            return nsc;
          }
        }
      } else {
        var G__20878 = a.name;
        var G__20879 = b.name;
        return goog.array.defaultCompare(G__20878, G__20879);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4402__auto__ = self__._hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__20881 = null;
  var G__20881__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__20881__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__20881 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20881__2.call(this, self__, coll);
      case 3:
        return G__20881__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20881.cljs$core$IFn$_invoke$arity$2 = G__20881__2;
  G__20881.cljs$core$IFn$_invoke$arity$3 = G__20881__3;
  return G__20881;
}();
cljs.core.Keyword.prototype.apply = function(self__, args20880) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20880)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__20883 = x;
    if (G__20883) {
      var bit__4655__auto__ = G__20883.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4655__auto__ || G__20883.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__20885 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__20885) : cljs.core.name.call(null, G__20885);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__20886 = ls.sval();
        ls = G__20886;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__20888 = s;
    if (G__20888) {
      var bit__4655__auto__ = G__20888.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4655__auto__ || G__20888.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__20889 = cljs.core.next(s__$1);
      s__$1 = G__20889;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_20890 = 0;
  var xs_20891 = cljs.core.seq(coll);
  while (true) {
    if (xs_20891) {
      ret[i_20890] = cljs.core.to_array(cljs.core.first(xs_20891));
      var G__20892 = i_20890 + 1;
      var G__20893 = cljs.core.next(xs_20891);
      i_20890 = G__20892;
      xs_20891 = G__20893;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__20896 = i + 1;
          var G__20897 = cljs.core.next(s__$1);
          i = G__20896;
          s__$1 = G__20897;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___20898 = size;
      var i_20899 = 0;
      while (true) {
        if (i_20899 < n__4868__auto___20898) {
          a[i_20899] = init_val_or_seq;
          var G__20900 = i_20899 + 1;
          i_20899 = G__20900;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__20903 = i + 1;
          var G__20904 = cljs.core.next(s__$1);
          i = G__20903;
          s__$1 = G__20904;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___20905 = size;
      var i_20906 = 0;
      while (true) {
        if (i_20906 < n__4868__auto___20905) {
          a[i_20906] = init_val_or_seq;
          var G__20907 = i_20906 + 1;
          i_20906 = G__20907;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__20910 = i + 1;
          var G__20911 = cljs.core.next(s__$1);
          i = G__20910;
          s__$1 = G__20911;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___20912 = size;
      var i_20913 = 0;
      while (true) {
        if (i_20913 < n__4868__auto___20912) {
          a[i_20913] = init_val_or_seq;
          var G__20914 = i_20913 + 1;
          i_20913 = G__20914;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__20917 = i + 1;
          var G__20918 = cljs.core.next(s__$1);
          i = G__20917;
          s__$1 = G__20918;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___20919 = size;
      var i_20920 = 0;
      while (true) {
        if (i_20920 < n__4868__auto___20919) {
          a[i_20920] = init_val_or_seq;
          var G__20921 = i_20920 + 1;
          i_20920 = G__20921;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__20922 = cljs.core.next(s__$1);
        var G__20923 = i - 1;
        var G__20924 = sum + 1;
        s__$1 = G__20922;
        i = G__20923;
        sum = G__20924;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__20944__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__20944 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__20945__i = 0, G__20945__a = new Array(arguments.length - 2);
        while (G__20945__i < G__20945__a.length) {
          G__20945__a[G__20945__i] = arguments[G__20945__i + 2];
          ++G__20945__i;
        }
        zs = new cljs.core.IndexedSeq(G__20945__a, 0);
      }
      return G__20944__delegate.call(this, x, y, zs);
    };
    G__20944.cljs$lang$maxFixedArity = 2;
    G__20944.cljs$lang$applyTo = function(arglist__20946) {
      var x = cljs.core.first(arglist__20946);
      arglist__20946 = cljs.core.next(arglist__20946);
      var y = cljs.core.first(arglist__20946);
      var zs = cljs.core.rest(arglist__20946);
      return G__20944__delegate(x, y, zs);
    };
    G__20944.cljs$core$IFn$_invoke$arity$variadic = G__20944__delegate;
    return G__20944;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        var G__20947 = null;
        if (arguments.length > 2) {
          var G__20948__i = 0, G__20948__a = new Array(arguments.length - 2);
          while (G__20948__i < G__20948__a.length) {
            G__20948__a[G__20948__i] = arguments[G__20948__i + 2];
            ++G__20948__i;
          }
          G__20947 = new cljs.core.IndexedSeq(G__20948__a, 0);
        }
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__20947);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var list_STAR___5 = function() {
    var G__20949__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__20949 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__20950__i = 0, G__20950__a = new Array(arguments.length - 4);
        while (G__20950__i < G__20950__a.length) {
          G__20950__a[G__20950__i] = arguments[G__20950__i + 4];
          ++G__20950__i;
        }
        more = new cljs.core.IndexedSeq(G__20950__a, 0);
      }
      return G__20949__delegate.call(this, a, b, c, d, more);
    };
    G__20949.cljs$lang$maxFixedArity = 4;
    G__20949.cljs$lang$applyTo = function(arglist__20951) {
      var a = cljs.core.first(arglist__20951);
      arglist__20951 = cljs.core.next(arglist__20951);
      var b = cljs.core.first(arglist__20951);
      arglist__20951 = cljs.core.next(arglist__20951);
      var c = cljs.core.first(arglist__20951);
      arglist__20951 = cljs.core.next(arglist__20951);
      var d = cljs.core.first(arglist__20951);
      var more = cljs.core.rest(arglist__20951);
      return G__20949__delegate(a, b, c, d, more);
    };
    G__20949.cljs$core$IFn$_invoke$arity$variadic = G__20949__delegate;
    return G__20949;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        var G__20952 = null;
        if (arguments.length > 4) {
          var G__20953__i = 0, G__20953__a = new Array(arguments.length - 4);
          while (G__20953__i < G__20953__a.length) {
            G__20953__a[G__20953__i] = arguments[G__20953__i + 4];
            ++G__20953__i;
          }
          G__20952 = new cljs.core.IndexedSeq(G__20953__a, 0);
        }
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__20952);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__20954__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__20955 = ntcoll;
          var G__20956 = cljs.core.first(vals);
          var G__20957 = cljs.core.next(vals);
          tcoll = G__20955;
          val = G__20956;
          vals = G__20957;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20954 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__20958__i = 0, G__20958__a = new Array(arguments.length - 2);
        while (G__20958__i < G__20958__a.length) {
          G__20958__a[G__20958__i] = arguments[G__20958__i + 2];
          ++G__20958__i;
        }
        vals = new cljs.core.IndexedSeq(G__20958__a, 0);
      }
      return G__20954__delegate.call(this, tcoll, val, vals);
    };
    G__20954.cljs$lang$maxFixedArity = 2;
    G__20954.cljs$lang$applyTo = function(arglist__20959) {
      var tcoll = cljs.core.first(arglist__20959);
      arglist__20959 = cljs.core.next(arglist__20959);
      var val = cljs.core.first(arglist__20959);
      var vals = cljs.core.rest(arglist__20959);
      return G__20954__delegate(tcoll, val, vals);
    };
    G__20954.cljs$core$IFn$_invoke$arity$variadic = G__20954__delegate;
    return G__20954;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        var G__20960 = null;
        if (arguments.length > 2) {
          var G__20961__i = 0, G__20961__a = new Array(arguments.length - 2);
          while (G__20961__i < G__20961__a.length) {
            G__20961__a[G__20961__i] = arguments[G__20961__i + 2];
            ++G__20961__i;
          }
          G__20960 = new cljs.core.IndexedSeq(G__20961__a, 0);
        }
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__20960);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__20962__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__20963 = ntcoll;
          var G__20964 = cljs.core.first(kvs);
          var G__20965 = cljs.core.second(kvs);
          var G__20966 = cljs.core.nnext(kvs);
          tcoll = G__20963;
          key = G__20964;
          val = G__20965;
          kvs = G__20966;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20962 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__20967__i = 0, G__20967__a = new Array(arguments.length - 3);
        while (G__20967__i < G__20967__a.length) {
          G__20967__a[G__20967__i] = arguments[G__20967__i + 3];
          ++G__20967__i;
        }
        kvs = new cljs.core.IndexedSeq(G__20967__a, 0);
      }
      return G__20962__delegate.call(this, tcoll, key, val, kvs);
    };
    G__20962.cljs$lang$maxFixedArity = 3;
    G__20962.cljs$lang$applyTo = function(arglist__20968) {
      var tcoll = cljs.core.first(arglist__20968);
      arglist__20968 = cljs.core.next(arglist__20968);
      var key = cljs.core.first(arglist__20968);
      arglist__20968 = cljs.core.next(arglist__20968);
      var val = cljs.core.first(arglist__20968);
      var kvs = cljs.core.rest(arglist__20968);
      return G__20962__delegate(tcoll, key, val, kvs);
    };
    G__20962.cljs$core$IFn$_invoke$arity$variadic = G__20962__delegate;
    return G__20962;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__20969 = null;
        if (arguments.length > 3) {
          var G__20970__i = 0, G__20970__a = new Array(arguments.length - 3);
          while (G__20970__i < G__20970__a.length) {
            G__20970__a[G__20970__i] = arguments[G__20970__i + 3];
            ++G__20970__i;
          }
          G__20969 = new cljs.core.IndexedSeq(G__20970__a, 0);
        }
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__20969);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__20971__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__20972 = ntcoll;
          var G__20973 = cljs.core.first(ks);
          var G__20974 = cljs.core.next(ks);
          tcoll = G__20972;
          key = G__20973;
          ks = G__20974;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20971 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__20975__i = 0, G__20975__a = new Array(arguments.length - 2);
        while (G__20975__i < G__20975__a.length) {
          G__20975__a[G__20975__i] = arguments[G__20975__i + 2];
          ++G__20975__i;
        }
        ks = new cljs.core.IndexedSeq(G__20975__a, 0);
      }
      return G__20971__delegate.call(this, tcoll, key, ks);
    };
    G__20971.cljs$lang$maxFixedArity = 2;
    G__20971.cljs$lang$applyTo = function(arglist__20976) {
      var tcoll = cljs.core.first(arglist__20976);
      arglist__20976 = cljs.core.next(arglist__20976);
      var key = cljs.core.first(arglist__20976);
      var ks = cljs.core.rest(arglist__20976);
      return G__20971__delegate(tcoll, key, ks);
    };
    G__20971.cljs$core$IFn$_invoke$arity$variadic = G__20971__delegate;
    return G__20971;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__20977 = null;
        if (arguments.length > 2) {
          var G__20978__i = 0, G__20978__a = new Array(arguments.length - 2);
          while (G__20978__i < G__20978__a.length) {
            G__20978__a[G__20978__i] = arguments[G__20978__i + 2];
            ++G__20978__i;
          }
          G__20977 = new cljs.core.IndexedSeq(G__20978__a, 0);
        }
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__20977);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__20979__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__20980 = ntcoll;
          var G__20981 = cljs.core.first(vals);
          var G__20982 = cljs.core.next(vals);
          tcoll = G__20980;
          val = G__20981;
          vals = G__20982;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20979 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__20983__i = 0, G__20983__a = new Array(arguments.length - 2);
        while (G__20983__i < G__20983__a.length) {
          G__20983__a[G__20983__i] = arguments[G__20983__i + 2];
          ++G__20983__i;
        }
        vals = new cljs.core.IndexedSeq(G__20983__a, 0);
      }
      return G__20979__delegate.call(this, tcoll, val, vals);
    };
    G__20979.cljs$lang$maxFixedArity = 2;
    G__20979.cljs$lang$applyTo = function(arglist__20984) {
      var tcoll = cljs.core.first(arglist__20984);
      arglist__20984 = cljs.core.next(arglist__20984);
      var val = cljs.core.first(arglist__20984);
      var vals = cljs.core.rest(arglist__20984);
      return G__20979__delegate(tcoll, val, vals);
    };
    G__20979.cljs$core$IFn$_invoke$arity$variadic = G__20979__delegate;
    return G__20979;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        var G__20985 = null;
        if (arguments.length > 2) {
          var G__20986__i = 0, G__20986__a = new Array(arguments.length - 2);
          while (G__20986__i < G__20986__a.length) {
            G__20986__a[G__20986__i] = arguments[G__20986__i + 2];
            ++G__20986__i;
          }
          G__20985 = new cljs.core.IndexedSeq(G__20986__a, 0);
        }
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__20985);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a4912 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4912);
      } else {
        var G__21197 = a4912;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21197) : f.call(null, G__21197);
      }
    } else {
      var b4913 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4912, b4913);
        } else {
          var G__21198 = a4912;
          var G__21199 = b4913;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21198, G__21199) : f.call(null, G__21198, G__21199);
        }
      } else {
        var c4914 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4912, b4913, c4914);
          } else {
            var G__21200 = a4912;
            var G__21201 = b4913;
            var G__21202 = c4914;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21200, G__21201, G__21202) : f.call(null, G__21200, G__21201, G__21202);
          }
        } else {
          var d4915 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4912, b4913, c4914, d4915);
            } else {
              var G__21203 = a4912;
              var G__21204 = b4913;
              var G__21205 = c4914;
              var G__21206 = d4915;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21203, G__21204, G__21205, G__21206) : f.call(null, G__21203, G__21204, G__21205, G__21206);
            }
          } else {
            var e4916 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4912, b4913, c4914, d4915, e4916);
              } else {
                var G__21207 = a4912;
                var G__21208 = b4913;
                var G__21209 = c4914;
                var G__21210 = d4915;
                var G__21211 = e4916;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__21207, G__21208, G__21209, G__21210, G__21211) : f.call(null, G__21207, G__21208, G__21209, G__21210, G__21211);
              }
            } else {
              var f4917 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4912, b4913, c4914, d4915, e4916, f4917);
                } else {
                  var G__21212 = a4912;
                  var G__21213 = b4913;
                  var G__21214 = c4914;
                  var G__21215 = d4915;
                  var G__21216 = e4916;
                  var G__21217 = f4917;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__21212, G__21213, G__21214, G__21215, G__21216, G__21217) : f.call(null, G__21212, G__21213, G__21214, G__21215, G__21216, G__21217);
                }
              } else {
                var g4918 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4912, b4913, c4914, d4915, e4916, f4917, g4918);
                  } else {
                    var G__21218 = a4912;
                    var G__21219 = b4913;
                    var G__21220 = c4914;
                    var G__21221 = d4915;
                    var G__21222 = e4916;
                    var G__21223 = f4917;
                    var G__21224 = g4918;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__21218, G__21219, G__21220, G__21221, G__21222, G__21223, G__21224) : f.call(null, G__21218, G__21219, G__21220, G__21221, G__21222, G__21223, G__21224);
                  }
                } else {
                  var h4919 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919);
                    } else {
                      var G__21225 = a4912;
                      var G__21226 = b4913;
                      var G__21227 = c4914;
                      var G__21228 = d4915;
                      var G__21229 = e4916;
                      var G__21230 = f4917;
                      var G__21231 = g4918;
                      var G__21232 = h4919;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__21225, G__21226, G__21227, G__21228, G__21229, G__21230, G__21231, G__21232) : f.call(null, G__21225, G__21226, G__21227, G__21228, G__21229, G__21230, G__21231, G__21232);
                    }
                  } else {
                    var i4920 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920);
                      } else {
                        var G__21233 = a4912;
                        var G__21234 = b4913;
                        var G__21235 = c4914;
                        var G__21236 = d4915;
                        var G__21237 = e4916;
                        var G__21238 = f4917;
                        var G__21239 = g4918;
                        var G__21240 = h4919;
                        var G__21241 = i4920;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__21233, G__21234, G__21235, G__21236, G__21237, G__21238, G__21239, G__21240, G__21241) : f.call(null, G__21233, G__21234, G__21235, G__21236, G__21237, G__21238, G__21239, G__21240, G__21241);
                      }
                    } else {
                      var j4921 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921);
                        } else {
                          var G__21242 = a4912;
                          var G__21243 = b4913;
                          var G__21244 = c4914;
                          var G__21245 = d4915;
                          var G__21246 = e4916;
                          var G__21247 = f4917;
                          var G__21248 = g4918;
                          var G__21249 = h4919;
                          var G__21250 = i4920;
                          var G__21251 = j4921;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__21242, G__21243, G__21244, G__21245, G__21246, G__21247, G__21248, G__21249, G__21250, G__21251) : f.call(null, G__21242, G__21243, G__21244, G__21245, G__21246, G__21247, G__21248, G__21249, G__21250, G__21251);
                        }
                      } else {
                        var k4922 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922);
                          } else {
                            var G__21252 = a4912;
                            var G__21253 = b4913;
                            var G__21254 = c4914;
                            var G__21255 = d4915;
                            var G__21256 = e4916;
                            var G__21257 = f4917;
                            var G__21258 = g4918;
                            var G__21259 = h4919;
                            var G__21260 = i4920;
                            var G__21261 = j4921;
                            var G__21262 = k4922;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__21252, G__21253, G__21254, G__21255, G__21256, G__21257, G__21258, G__21259, G__21260, G__21261, G__21262) : f.call(null, G__21252, G__21253, G__21254, G__21255, G__21256, G__21257, G__21258, G__21259, G__21260, G__21261, G__21262);
                          }
                        } else {
                          var l4923 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923);
                            } else {
                              var G__21263 = a4912;
                              var G__21264 = b4913;
                              var G__21265 = c4914;
                              var G__21266 = d4915;
                              var G__21267 = e4916;
                              var G__21268 = f4917;
                              var G__21269 = g4918;
                              var G__21270 = h4919;
                              var G__21271 = i4920;
                              var G__21272 = j4921;
                              var G__21273 = k4922;
                              var G__21274 = l4923;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__21263, G__21264, G__21265, G__21266, G__21267, G__21268, G__21269, G__21270, G__21271, G__21272, G__21273, G__21274) : f.call(null, G__21263, G__21264, G__21265, G__21266, G__21267, G__21268, G__21269, G__21270, G__21271, G__21272, G__21273, G__21274);
                            }
                          } else {
                            var m4924 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924);
                              } else {
                                var G__21275 = a4912;
                                var G__21276 = b4913;
                                var G__21277 = c4914;
                                var G__21278 = d4915;
                                var G__21279 = e4916;
                                var G__21280 = f4917;
                                var G__21281 = g4918;
                                var G__21282 = h4919;
                                var G__21283 = i4920;
                                var G__21284 = j4921;
                                var G__21285 = k4922;
                                var G__21286 = l4923;
                                var G__21287 = m4924;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__21275, G__21276, G__21277, G__21278, G__21279, G__21280, G__21281, G__21282, G__21283, G__21284, G__21285, G__21286, G__21287) : f.call(null, G__21275, G__21276, G__21277, G__21278, G__21279, G__21280, G__21281, G__21282, G__21283, G__21284, G__21285, G__21286, G__21287);
                              }
                            } else {
                              var n4925 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925);
                                } else {
                                  var G__21288 = a4912;
                                  var G__21289 = b4913;
                                  var G__21290 = c4914;
                                  var G__21291 = d4915;
                                  var G__21292 = e4916;
                                  var G__21293 = f4917;
                                  var G__21294 = g4918;
                                  var G__21295 = h4919;
                                  var G__21296 = i4920;
                                  var G__21297 = j4921;
                                  var G__21298 = k4922;
                                  var G__21299 = l4923;
                                  var G__21300 = m4924;
                                  var G__21301 = n4925;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__21288, G__21289, G__21290, G__21291, G__21292, G__21293, G__21294, G__21295, G__21296, G__21297, G__21298, G__21299, G__21300, G__21301) : f.call(null, G__21288, G__21289, G__21290, G__21291, G__21292, G__21293, G__21294, G__21295, G__21296, G__21297, G__21298, G__21299, G__21300, G__21301);
                                }
                              } else {
                                var o4926 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926);
                                  } else {
                                    var G__21302 = a4912;
                                    var G__21303 = b4913;
                                    var G__21304 = c4914;
                                    var G__21305 = d4915;
                                    var G__21306 = e4916;
                                    var G__21307 = f4917;
                                    var G__21308 = g4918;
                                    var G__21309 = h4919;
                                    var G__21310 = i4920;
                                    var G__21311 = j4921;
                                    var G__21312 = k4922;
                                    var G__21313 = l4923;
                                    var G__21314 = m4924;
                                    var G__21315 = n4925;
                                    var G__21316 = o4926;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__21302, G__21303, G__21304, G__21305, G__21306, G__21307, G__21308, G__21309, G__21310, G__21311, G__21312, G__21313, G__21314, G__21315, G__21316) : f.call(null, G__21302, G__21303, G__21304, G__21305, G__21306, G__21307, G__21308, G__21309, G__21310, G__21311, G__21312, G__21313, G__21314, G__21315, G__21316);
                                  }
                                } else {
                                  var p4927 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927);
                                    } else {
                                      var G__21317 = a4912;
                                      var G__21318 = b4913;
                                      var G__21319 = c4914;
                                      var G__21320 = d4915;
                                      var G__21321 = e4916;
                                      var G__21322 = f4917;
                                      var G__21323 = g4918;
                                      var G__21324 = h4919;
                                      var G__21325 = i4920;
                                      var G__21326 = j4921;
                                      var G__21327 = k4922;
                                      var G__21328 = l4923;
                                      var G__21329 = m4924;
                                      var G__21330 = n4925;
                                      var G__21331 = o4926;
                                      var G__21332 = p4927;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__21317, G__21318, G__21319, G__21320, G__21321, G__21322, G__21323, G__21324, G__21325, G__21326, G__21327, G__21328, G__21329, G__21330, G__21331, G__21332) : f.call(null, G__21317, G__21318, G__21319, G__21320, G__21321, G__21322, G__21323, G__21324, G__21325, G__21326, G__21327, G__21328, G__21329, G__21330, G__21331, G__21332);
                                    }
                                  } else {
                                    var q4928 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928);
                                      } else {
                                        var G__21333 = a4912;
                                        var G__21334 = b4913;
                                        var G__21335 = c4914;
                                        var G__21336 = d4915;
                                        var G__21337 = e4916;
                                        var G__21338 = f4917;
                                        var G__21339 = g4918;
                                        var G__21340 = h4919;
                                        var G__21341 = i4920;
                                        var G__21342 = j4921;
                                        var G__21343 = k4922;
                                        var G__21344 = l4923;
                                        var G__21345 = m4924;
                                        var G__21346 = n4925;
                                        var G__21347 = o4926;
                                        var G__21348 = p4927;
                                        var G__21349 = q4928;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__21333, G__21334, G__21335, G__21336, G__21337, G__21338, G__21339, G__21340, G__21341, G__21342, G__21343, G__21344, G__21345, G__21346, G__21347, G__21348, G__21349) : f.call(null, G__21333, G__21334, G__21335, G__21336, G__21337, G__21338, G__21339, G__21340, G__21341, G__21342, G__21343, G__21344, G__21345, G__21346, G__21347, G__21348, G__21349);
                                      }
                                    } else {
                                      var r4929 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929);
                                        } else {
                                          var G__21350 = a4912;
                                          var G__21351 = b4913;
                                          var G__21352 = c4914;
                                          var G__21353 = d4915;
                                          var G__21354 = e4916;
                                          var G__21355 = f4917;
                                          var G__21356 = g4918;
                                          var G__21357 = h4919;
                                          var G__21358 = i4920;
                                          var G__21359 = j4921;
                                          var G__21360 = k4922;
                                          var G__21361 = l4923;
                                          var G__21362 = m4924;
                                          var G__21363 = n4925;
                                          var G__21364 = o4926;
                                          var G__21365 = p4927;
                                          var G__21366 = q4928;
                                          var G__21367 = r4929;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__21350, G__21351, G__21352, G__21353, G__21354, G__21355, G__21356, G__21357, G__21358, G__21359, G__21360, G__21361, G__21362, G__21363, G__21364, G__21365, G__21366, G__21367) : f.call(null, G__21350, G__21351, G__21352, G__21353, G__21354, G__21355, G__21356, G__21357, G__21358, G__21359, G__21360, G__21361, G__21362, G__21363, G__21364, G__21365, G__21366, G__21367);
                                        }
                                      } else {
                                        var s4930 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929, s4930);
                                          } else {
                                            var G__21368 = a4912;
                                            var G__21369 = b4913;
                                            var G__21370 = c4914;
                                            var G__21371 = d4915;
                                            var G__21372 = e4916;
                                            var G__21373 = f4917;
                                            var G__21374 = g4918;
                                            var G__21375 = h4919;
                                            var G__21376 = i4920;
                                            var G__21377 = j4921;
                                            var G__21378 = k4922;
                                            var G__21379 = l4923;
                                            var G__21380 = m4924;
                                            var G__21381 = n4925;
                                            var G__21382 = o4926;
                                            var G__21383 = p4927;
                                            var G__21384 = q4928;
                                            var G__21385 = r4929;
                                            var G__21386 = s4930;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__21368, G__21369, G__21370, G__21371, G__21372, G__21373, G__21374, G__21375, G__21376, G__21377, G__21378, G__21379, G__21380, G__21381, G__21382, G__21383, G__21384, G__21385, G__21386) : f.call(null, G__21368, G__21369, G__21370, G__21371, G__21372, G__21373, G__21374, G__21375, G__21376, G__21377, G__21378, G__21379, G__21380, G__21381, G__21382, G__21383, G__21384, G__21385, 
                                            G__21386);
                                          }
                                        } else {
                                          var t4931 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929, s4930, t4931);
                                            } else {
                                              var G__21387 = a4912;
                                              var G__21388 = b4913;
                                              var G__21389 = c4914;
                                              var G__21390 = d4915;
                                              var G__21391 = e4916;
                                              var G__21392 = f4917;
                                              var G__21393 = g4918;
                                              var G__21394 = h4919;
                                              var G__21395 = i4920;
                                              var G__21396 = j4921;
                                              var G__21397 = k4922;
                                              var G__21398 = l4923;
                                              var G__21399 = m4924;
                                              var G__21400 = n4925;
                                              var G__21401 = o4926;
                                              var G__21402 = p4927;
                                              var G__21403 = q4928;
                                              var G__21404 = r4929;
                                              var G__21405 = s4930;
                                              var G__21406 = t4931;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__21387, G__21388, G__21389, G__21390, G__21391, G__21392, G__21393, G__21394, G__21395, G__21396, G__21397, G__21398, G__21399, G__21400, G__21401, G__21402, G__21403, G__21404, G__21405, G__21406) : f.call(null, G__21387, G__21388, G__21389, G__21390, G__21391, G__21392, G__21393, G__21394, G__21395, G__21396, G__21397, G__21398, G__21399, G__21400, G__21401, G__21402, G__21403, 
                                              G__21404, G__21405, G__21406);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__6 = function() {
    var G__21407__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__21407 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__21408__i = 0, G__21408__a = new Array(arguments.length - 5);
        while (G__21408__i < G__21408__a.length) {
          G__21408__a[G__21408__i] = arguments[G__21408__i + 5];
          ++G__21408__i;
        }
        args = new cljs.core.IndexedSeq(G__21408__a, 0);
      }
      return G__21407__delegate.call(this, f, a, b, c, d, args);
    };
    G__21407.cljs$lang$maxFixedArity = 5;
    G__21407.cljs$lang$applyTo = function(arglist__21409) {
      var f = cljs.core.first(arglist__21409);
      arglist__21409 = cljs.core.next(arglist__21409);
      var a = cljs.core.first(arglist__21409);
      arglist__21409 = cljs.core.next(arglist__21409);
      var b = cljs.core.first(arglist__21409);
      arglist__21409 = cljs.core.next(arglist__21409);
      var c = cljs.core.first(arglist__21409);
      arglist__21409 = cljs.core.next(arglist__21409);
      var d = cljs.core.first(arglist__21409);
      var args = cljs.core.rest(arglist__21409);
      return G__21407__delegate(f, a, b, c, d, args);
    };
    G__21407.cljs$core$IFn$_invoke$arity$variadic = G__21407__delegate;
    return G__21407;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        var G__21410 = null;
        if (arguments.length > 5) {
          var G__21411__i = 0, G__21411__a = new Array(arguments.length - 5);
          while (G__21411__i < G__21411__a.length) {
            G__21411__a[G__21411__i] = arguments[G__21411__i + 5];
            ++G__21411__i;
          }
          G__21410 = new cljs.core.IndexedSeq(G__21411__a, 0);
        }
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__21410);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__21427 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21427) : f.call(null, G__21427);
    }());
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__21428 = cljs.core.meta(obj);
      var G__21429 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21428, G__21429) : f.call(null, G__21428, G__21429);
    }());
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__21430 = cljs.core.meta(obj);
      var G__21431 = a;
      var G__21432 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21430, G__21431, G__21432) : f.call(null, G__21430, G__21431, G__21432);
    }());
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__21433 = cljs.core.meta(obj);
      var G__21434 = a;
      var G__21435 = b;
      var G__21436 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21433, G__21434, G__21435, G__21436) : f.call(null, G__21433, G__21434, G__21435, G__21436);
    }());
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__21437 = cljs.core.meta(obj);
      var G__21438 = a;
      var G__21439 = b;
      var G__21440 = c;
      var G__21441 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__21437, G__21438, G__21439, G__21440, G__21441) : f.call(null, G__21437, G__21438, G__21439, G__21440, G__21441);
    }());
  };
  var vary_meta__7 = function() {
    var G__21442__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__21442 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__21443__i = 0, G__21443__a = new Array(arguments.length - 6);
        while (G__21443__i < G__21443__a.length) {
          G__21443__a[G__21443__i] = arguments[G__21443__i + 6];
          ++G__21443__i;
        }
        args = new cljs.core.IndexedSeq(G__21443__a, 0);
      }
      return G__21442__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__21442.cljs$lang$maxFixedArity = 6;
    G__21442.cljs$lang$applyTo = function(arglist__21444) {
      var obj = cljs.core.first(arglist__21444);
      arglist__21444 = cljs.core.next(arglist__21444);
      var f = cljs.core.first(arglist__21444);
      arglist__21444 = cljs.core.next(arglist__21444);
      var a = cljs.core.first(arglist__21444);
      arglist__21444 = cljs.core.next(arglist__21444);
      var b = cljs.core.first(arglist__21444);
      arglist__21444 = cljs.core.next(arglist__21444);
      var c = cljs.core.first(arglist__21444);
      arglist__21444 = cljs.core.next(arglist__21444);
      var d = cljs.core.first(arglist__21444);
      var args = cljs.core.rest(arglist__21444);
      return G__21442__delegate(obj, f, a, b, c, d, args);
    };
    G__21442.cljs$core$IFn$_invoke$arity$variadic = G__21442__delegate;
    return G__21442;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__21445 = null;
        if (arguments.length > 6) {
          var G__21446__i = 0, G__21446__a = new Array(arguments.length - 6);
          while (G__21446__i < G__21446__a.length) {
            G__21446__a[G__21446__i] = arguments[G__21446__i + 6];
            ++G__21446__i;
          }
          G__21445 = new cljs.core.IndexedSeq(G__21446__a, 0);
        }
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__21445);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var not_EQ___3 = function() {
    var G__21447__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__21447 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__21448__i = 0, G__21448__a = new Array(arguments.length - 2);
        while (G__21448__i < G__21448__a.length) {
          G__21448__a[G__21448__i] = arguments[G__21448__i + 2];
          ++G__21448__i;
        }
        more = new cljs.core.IndexedSeq(G__21448__a, 0);
      }
      return G__21447__delegate.call(this, x, y, more);
    };
    G__21447.cljs$lang$maxFixedArity = 2;
    G__21447.cljs$lang$applyTo = function(arglist__21449) {
      var x = cljs.core.first(arglist__21449);
      arglist__21449 = cljs.core.next(arglist__21449);
      var y = cljs.core.first(arglist__21449);
      var more = cljs.core.rest(arglist__21449);
      return G__21447__delegate(x, y, more);
    };
    G__21447.cljs$core$IFn$_invoke$arity$variadic = G__21447__delegate;
    return G__21447;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        var G__21450 = null;
        if (arguments.length > 2) {
          var G__21451__i = 0, G__21451__a = new Array(arguments.length - 2);
          while (G__21451__i < G__21451__a.length) {
            G__21451__a[G__21451__i] = arguments[G__21451__i + 2];
            ++G__21451__i;
          }
          G__21450 = new cljs.core.IndexedSeq(G__21451__a, 0);
        }
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__21450);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t21455 !== "undefined") {
  } else {
    cljs.core.t21455 = function(nil_iter, meta21456) {
      this.nil_iter = nil_iter;
      this.meta21456 = meta21456;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t21455.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t21455.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t21455.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t21455.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21457) {
      var self__ = this;
      var _21457__$1 = this;
      return self__.meta21456;
    };
    cljs.core.t21455.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21457, meta21456__$1) {
      var self__ = this;
      var _21457__$1 = this;
      return new cljs.core.t21455(self__.nil_iter, meta21456__$1);
    };
    cljs.core.t21455.cljs$lang$type = true;
    cljs.core.t21455.cljs$lang$ctorStr = "cljs.core/t21455";
    cljs.core.t21455.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write(writer__4569__auto__, "cljs.core/t21455");
    };
    cljs.core.__GT_t21455 = function __GT_t21455(nil_iter__$1, meta21456) {
      return new cljs.core.t21455(nil_iter__$1, meta21456);
    };
  }
  return new cljs.core.t21455(nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = !(lt.stepper == null);
      if (and__3969__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__21458 = lt;
        var G__21459 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__21458, G__21459) : self__.xform.call(null, G__21458, G__21459);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__21460 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__21460) : self__.xform.call(null, G__21460);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__21462 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__21462) : xform.call(null, G__21462);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__21464 = cljs.core.next(iters__$1);
        iters__$1 = G__21464;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4868__auto___21465 = self__.iters.length;
  var i_21466 = 0;
  while (true) {
    if (i_21466 < n__4868__auto___21465) {
      self__.nexts[i_21466] = self__.iters[i_21466].next();
      var G__21467 = i_21466 + 1;
      i_21466 = G__21467;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = !(lt.stepper == null);
      if (and__3969__auto__) {
        return this$.hasNext();
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__21463 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__21463) : self__.xform.call(null, G__21463);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__21472 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__21472) : xform.call(null, G__21472);
    }(), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__21473_21477 = cljs.core.seq(colls);
  var chunk__21474_21478 = null;
  var count__21475_21479 = 0;
  var i__21476_21480 = 0;
  while (true) {
    if (i__21476_21480 < count__21475_21479) {
      var coll_21481 = chunk__21474_21478.cljs$core$IIndexed$_nth$arity$2(null, i__21476_21480);
      iters.push(cljs.core.iter(coll_21481));
      var G__21482 = seq__21473_21477;
      var G__21483 = chunk__21474_21478;
      var G__21484 = count__21475_21479;
      var G__21485 = i__21476_21480 + 1;
      seq__21473_21477 = G__21482;
      chunk__21474_21478 = G__21483;
      count__21475_21479 = G__21484;
      i__21476_21480 = G__21485;
      continue;
    } else {
      var temp__4126__auto___21486 = cljs.core.seq(seq__21473_21477);
      if (temp__4126__auto___21486) {
        var seq__21473_21487__$1 = temp__4126__auto___21486;
        if (cljs.core.chunked_seq_QMARK_(seq__21473_21487__$1)) {
          var c__4768__auto___21488 = cljs.core.chunk_first(seq__21473_21487__$1);
          var G__21489 = cljs.core.chunk_rest(seq__21473_21487__$1);
          var G__21490 = c__4768__auto___21488;
          var G__21491 = cljs.core.count(c__4768__auto___21488);
          var G__21492 = 0;
          seq__21473_21477 = G__21489;
          chunk__21474_21478 = G__21490;
          count__21475_21479 = G__21491;
          i__21476_21480 = G__21492;
          continue;
        } else {
          var coll_21493 = cljs.core.first(seq__21473_21487__$1);
          iters.push(cljs.core.iter(coll_21493));
          var G__21494 = cljs.core.next(seq__21473_21487__$1);
          var G__21495 = null;
          var G__21496 = 0;
          var G__21497 = 0;
          seq__21473_21477 = G__21494;
          chunk__21474_21478 = G__21495;
          count__21475_21479 = G__21496;
          i__21476_21480 = G__21497;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__3981__auto__ = cljs.core.seq(coll);
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__21498__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__21498 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__21499__i = 0, G__21499__a = new Array(arguments.length - 2);
        while (G__21499__i < G__21499__a.length) {
          G__21499__a[G__21499__i] = arguments[G__21499__i + 2];
          ++G__21499__i;
        }
        colls = new cljs.core.IndexedSeq(G__21499__a, 0);
      }
      return G__21498__delegate.call(this, xform, coll, colls);
    };
    G__21498.cljs$lang$maxFixedArity = 2;
    G__21498.cljs$lang$applyTo = function(arglist__21500) {
      var xform = cljs.core.first(arglist__21500);
      arglist__21500 = cljs.core.next(arglist__21500);
      var coll = cljs.core.first(arglist__21500);
      var colls = cljs.core.rest(arglist__21500);
      return G__21498__delegate(xform, coll, colls);
    };
    G__21498.cljs$core$IFn$_invoke$arity$variadic = G__21498__delegate;
    return G__21498;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        var G__21501 = null;
        if (arguments.length > 2) {
          var G__21502__i = 0, G__21502__a = new Array(arguments.length - 2);
          while (G__21502__i < G__21502__a.length) {
            G__21502__a[G__21502__i] = arguments[G__21502__i + 2];
            ++G__21502__i;
          }
          G__21501 = new cljs.core.IndexedSeq(G__21502__a, 0);
        }
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__21501);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__21504 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21504) : pred.call(null, G__21504);
      }())) {
        var G__21505 = pred;
        var G__21506 = cljs.core.next(coll);
        pred = G__21505;
        coll = G__21506;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__3981__auto__ = function() {
        var G__21510 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21510) : pred.call(null, G__21510);
      }();
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        var G__21511 = pred;
        var G__21512 = cljs.core.next(coll);
        pred = G__21511;
        coll = G__21512;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__21519 = null;
    var G__21519__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__21519__1 = function(x) {
      return cljs.core.not(function() {
        var G__21516 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21516) : f.call(null, G__21516);
      }());
    };
    var G__21519__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__21517 = x;
        var G__21518 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21517, G__21518) : f.call(null, G__21517, G__21518);
      }());
    };
    var G__21519__3 = function() {
      var G__21520__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__21520 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__21521__i = 0, G__21521__a = new Array(arguments.length - 2);
          while (G__21521__i < G__21521__a.length) {
            G__21521__a[G__21521__i] = arguments[G__21521__i + 2];
            ++G__21521__i;
          }
          zs = new cljs.core.IndexedSeq(G__21521__a, 0);
        }
        return G__21520__delegate.call(this, x, y, zs);
      };
      G__21520.cljs$lang$maxFixedArity = 2;
      G__21520.cljs$lang$applyTo = function(arglist__21522) {
        var x = cljs.core.first(arglist__21522);
        arglist__21522 = cljs.core.next(arglist__21522);
        var y = cljs.core.first(arglist__21522);
        var zs = cljs.core.rest(arglist__21522);
        return G__21520__delegate(x, y, zs);
      };
      G__21520.cljs$core$IFn$_invoke$arity$variadic = G__21520__delegate;
      return G__21520;
    }();
    G__21519 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__21519__0.call(this);
        case 1:
          return G__21519__1.call(this, x);
        case 2:
          return G__21519__2.call(this, x, y);
        default:
          var G__21523 = null;
          if (arguments.length > 2) {
            var G__21524__i = 0, G__21524__a = new Array(arguments.length - 2);
            while (G__21524__i < G__21524__a.length) {
              G__21524__a[G__21524__i] = arguments[G__21524__i + 2];
              ++G__21524__i;
            }
            G__21523 = new cljs.core.IndexedSeq(G__21524__a, 0);
          }
          return G__21519__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__21523);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__21519.cljs$lang$maxFixedArity = 2;
    G__21519.cljs$lang$applyTo = G__21519__3.cljs$lang$applyTo;
    G__21519.cljs$core$IFn$_invoke$arity$0 = G__21519__0;
    G__21519.cljs$core$IFn$_invoke$arity$1 = G__21519__1;
    G__21519.cljs$core$IFn$_invoke$arity$2 = G__21519__2;
    G__21519.cljs$core$IFn$_invoke$arity$variadic = G__21519__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__21519;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__21525__delegate = function(args) {
      return x;
    };
    var G__21525 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__21526__i = 0, G__21526__a = new Array(arguments.length - 0);
        while (G__21526__i < G__21526__a.length) {
          G__21526__a[G__21526__i] = arguments[G__21526__i + 0];
          ++G__21526__i;
        }
        args = new cljs.core.IndexedSeq(G__21526__a, 0);
      }
      return G__21525__delegate.call(this, args);
    };
    G__21525.cljs$lang$maxFixedArity = 0;
    G__21525.cljs$lang$applyTo = function(arglist__21527) {
      var args = cljs.core.seq(arglist__21527);
      return G__21525__delegate(args);
    };
    G__21525.cljs$core$IFn$_invoke$arity$variadic = G__21525__delegate;
    return G__21525;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__21582 = null;
      var G__21582__0 = function() {
        var G__21555 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21555) : f.call(null, G__21555);
      };
      var G__21582__1 = function(x) {
        var G__21556 = function() {
          var G__21557 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21557) : g.call(null, G__21557);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21556) : f.call(null, G__21556);
      };
      var G__21582__2 = function(x, y) {
        var G__21558 = function() {
          var G__21559 = x;
          var G__21560 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__21559, G__21560) : g.call(null, G__21559, G__21560);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21558) : f.call(null, G__21558);
      };
      var G__21582__3 = function(x, y, z) {
        var G__21561 = function() {
          var G__21562 = x;
          var G__21563 = y;
          var G__21564 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__21562, G__21563, G__21564) : g.call(null, G__21562, G__21563, G__21564);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21561) : f.call(null, G__21561);
      };
      var G__21582__4 = function() {
        var G__21583__delegate = function(x, y, z, args) {
          var G__21565 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21565) : f.call(null, G__21565);
        };
        var G__21583 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21584__i = 0, G__21584__a = new Array(arguments.length - 3);
            while (G__21584__i < G__21584__a.length) {
              G__21584__a[G__21584__i] = arguments[G__21584__i + 3];
              ++G__21584__i;
            }
            args = new cljs.core.IndexedSeq(G__21584__a, 0);
          }
          return G__21583__delegate.call(this, x, y, z, args);
        };
        G__21583.cljs$lang$maxFixedArity = 3;
        G__21583.cljs$lang$applyTo = function(arglist__21585) {
          var x = cljs.core.first(arglist__21585);
          arglist__21585 = cljs.core.next(arglist__21585);
          var y = cljs.core.first(arglist__21585);
          arglist__21585 = cljs.core.next(arglist__21585);
          var z = cljs.core.first(arglist__21585);
          var args = cljs.core.rest(arglist__21585);
          return G__21583__delegate(x, y, z, args);
        };
        G__21583.cljs$core$IFn$_invoke$arity$variadic = G__21583__delegate;
        return G__21583;
      }();
      G__21582 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21582__0.call(this);
          case 1:
            return G__21582__1.call(this, x);
          case 2:
            return G__21582__2.call(this, x, y);
          case 3:
            return G__21582__3.call(this, x, y, z);
          default:
            var G__21586 = null;
            if (arguments.length > 3) {
              var G__21587__i = 0, G__21587__a = new Array(arguments.length - 3);
              while (G__21587__i < G__21587__a.length) {
                G__21587__a[G__21587__i] = arguments[G__21587__i + 3];
                ++G__21587__i;
              }
              G__21586 = new cljs.core.IndexedSeq(G__21587__a, 0);
            }
            return G__21582__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21586);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21582.cljs$lang$maxFixedArity = 3;
      G__21582.cljs$lang$applyTo = G__21582__4.cljs$lang$applyTo;
      G__21582.cljs$core$IFn$_invoke$arity$0 = G__21582__0;
      G__21582.cljs$core$IFn$_invoke$arity$1 = G__21582__1;
      G__21582.cljs$core$IFn$_invoke$arity$2 = G__21582__2;
      G__21582.cljs$core$IFn$_invoke$arity$3 = G__21582__3;
      G__21582.cljs$core$IFn$_invoke$arity$variadic = G__21582__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21582;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__21588 = null;
      var G__21588__0 = function() {
        var G__21566 = function() {
          var G__21567 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21567) : g.call(null, G__21567);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21566) : f.call(null, G__21566);
      };
      var G__21588__1 = function(x) {
        var G__21568 = function() {
          var G__21569 = function() {
            var G__21570 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__21570) : h.call(null, G__21570);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21569) : g.call(null, G__21569);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21568) : f.call(null, G__21568);
      };
      var G__21588__2 = function(x, y) {
        var G__21571 = function() {
          var G__21572 = function() {
            var G__21573 = x;
            var G__21574 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__21573, G__21574) : h.call(null, G__21573, G__21574);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21572) : g.call(null, G__21572);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21571) : f.call(null, G__21571);
      };
      var G__21588__3 = function(x, y, z) {
        var G__21575 = function() {
          var G__21576 = function() {
            var G__21577 = x;
            var G__21578 = y;
            var G__21579 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__21577, G__21578, G__21579) : h.call(null, G__21577, G__21578, G__21579);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21576) : g.call(null, G__21576);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21575) : f.call(null, G__21575);
      };
      var G__21588__4 = function() {
        var G__21589__delegate = function(x, y, z, args) {
          var G__21580 = function() {
            var G__21581 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21581) : g.call(null, G__21581);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21580) : f.call(null, G__21580);
        };
        var G__21589 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21590__i = 0, G__21590__a = new Array(arguments.length - 3);
            while (G__21590__i < G__21590__a.length) {
              G__21590__a[G__21590__i] = arguments[G__21590__i + 3];
              ++G__21590__i;
            }
            args = new cljs.core.IndexedSeq(G__21590__a, 0);
          }
          return G__21589__delegate.call(this, x, y, z, args);
        };
        G__21589.cljs$lang$maxFixedArity = 3;
        G__21589.cljs$lang$applyTo = function(arglist__21591) {
          var x = cljs.core.first(arglist__21591);
          arglist__21591 = cljs.core.next(arglist__21591);
          var y = cljs.core.first(arglist__21591);
          arglist__21591 = cljs.core.next(arglist__21591);
          var z = cljs.core.first(arglist__21591);
          var args = cljs.core.rest(arglist__21591);
          return G__21589__delegate(x, y, z, args);
        };
        G__21589.cljs$core$IFn$_invoke$arity$variadic = G__21589__delegate;
        return G__21589;
      }();
      G__21588 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21588__0.call(this);
          case 1:
            return G__21588__1.call(this, x);
          case 2:
            return G__21588__2.call(this, x, y);
          case 3:
            return G__21588__3.call(this, x, y, z);
          default:
            var G__21592 = null;
            if (arguments.length > 3) {
              var G__21593__i = 0, G__21593__a = new Array(arguments.length - 3);
              while (G__21593__i < G__21593__a.length) {
                G__21593__a[G__21593__i] = arguments[G__21593__i + 3];
                ++G__21593__i;
              }
              G__21592 = new cljs.core.IndexedSeq(G__21593__a, 0);
            }
            return G__21588__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21592);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21588.cljs$lang$maxFixedArity = 3;
      G__21588.cljs$lang$applyTo = G__21588__4.cljs$lang$applyTo;
      G__21588.cljs$core$IFn$_invoke$arity$0 = G__21588__0;
      G__21588.cljs$core$IFn$_invoke$arity$1 = G__21588__1;
      G__21588.cljs$core$IFn$_invoke$arity$2 = G__21588__2;
      G__21588.cljs$core$IFn$_invoke$arity$3 = G__21588__3;
      G__21588.cljs$core$IFn$_invoke$arity$variadic = G__21588__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21588;
    }();
  };
  var comp__4 = function() {
    var G__21594__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__21595__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__21596 = cljs.core.first(fs__$2).call(null, ret);
                var G__21597 = cljs.core.next(fs__$2);
                ret = G__21596;
                fs__$2 = G__21597;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__21595 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__21598__i = 0, G__21598__a = new Array(arguments.length - 0);
              while (G__21598__i < G__21598__a.length) {
                G__21598__a[G__21598__i] = arguments[G__21598__i + 0];
                ++G__21598__i;
              }
              args = new cljs.core.IndexedSeq(G__21598__a, 0);
            }
            return G__21595__delegate.call(this, args);
          };
          G__21595.cljs$lang$maxFixedArity = 0;
          G__21595.cljs$lang$applyTo = function(arglist__21599) {
            var args = cljs.core.seq(arglist__21599);
            return G__21595__delegate(args);
          };
          G__21595.cljs$core$IFn$_invoke$arity$variadic = G__21595__delegate;
          return G__21595;
        }();
      }(fs__$1);
    };
    var G__21594 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__21600__i = 0, G__21600__a = new Array(arguments.length - 3);
        while (G__21600__i < G__21600__a.length) {
          G__21600__a[G__21600__i] = arguments[G__21600__i + 3];
          ++G__21600__i;
        }
        fs = new cljs.core.IndexedSeq(G__21600__a, 0);
      }
      return G__21594__delegate.call(this, f1, f2, f3, fs);
    };
    G__21594.cljs$lang$maxFixedArity = 3;
    G__21594.cljs$lang$applyTo = function(arglist__21601) {
      var f1 = cljs.core.first(arglist__21601);
      arglist__21601 = cljs.core.next(arglist__21601);
      var f2 = cljs.core.first(arglist__21601);
      arglist__21601 = cljs.core.next(arglist__21601);
      var f3 = cljs.core.first(arglist__21601);
      var fs = cljs.core.rest(arglist__21601);
      return G__21594__delegate(f1, f2, f3, fs);
    };
    G__21594.cljs$core$IFn$_invoke$arity$variadic = G__21594__delegate;
    return G__21594;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        var G__21602 = null;
        if (arguments.length > 3) {
          var G__21603__i = 0, G__21603__a = new Array(arguments.length - 3);
          while (G__21603__i < G__21603__a.length) {
            G__21603__a[G__21603__i] = arguments[G__21603__i + 3];
            ++G__21603__i;
          }
          G__21602 = new cljs.core.IndexedSeq(G__21603__a, 0);
        }
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__21602);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__21688 = null;
      var G__21688__0 = function() {
        var G__21646 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21646) : f.call(null, G__21646);
      };
      var G__21688__1 = function(x) {
        var G__21647 = arg1;
        var G__21648 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21647, G__21648) : f.call(null, G__21647, G__21648);
      };
      var G__21688__2 = function(x, y) {
        var G__21649 = arg1;
        var G__21650 = x;
        var G__21651 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21649, G__21650, G__21651) : f.call(null, G__21649, G__21650, G__21651);
      };
      var G__21688__3 = function(x, y, z) {
        var G__21652 = arg1;
        var G__21653 = x;
        var G__21654 = y;
        var G__21655 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21652, G__21653, G__21654, G__21655) : f.call(null, G__21652, G__21653, G__21654, G__21655);
      };
      var G__21688__4 = function() {
        var G__21689__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__21689 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21690__i = 0, G__21690__a = new Array(arguments.length - 3);
            while (G__21690__i < G__21690__a.length) {
              G__21690__a[G__21690__i] = arguments[G__21690__i + 3];
              ++G__21690__i;
            }
            args = new cljs.core.IndexedSeq(G__21690__a, 0);
          }
          return G__21689__delegate.call(this, x, y, z, args);
        };
        G__21689.cljs$lang$maxFixedArity = 3;
        G__21689.cljs$lang$applyTo = function(arglist__21691) {
          var x = cljs.core.first(arglist__21691);
          arglist__21691 = cljs.core.next(arglist__21691);
          var y = cljs.core.first(arglist__21691);
          arglist__21691 = cljs.core.next(arglist__21691);
          var z = cljs.core.first(arglist__21691);
          var args = cljs.core.rest(arglist__21691);
          return G__21689__delegate(x, y, z, args);
        };
        G__21689.cljs$core$IFn$_invoke$arity$variadic = G__21689__delegate;
        return G__21689;
      }();
      G__21688 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21688__0.call(this);
          case 1:
            return G__21688__1.call(this, x);
          case 2:
            return G__21688__2.call(this, x, y);
          case 3:
            return G__21688__3.call(this, x, y, z);
          default:
            var G__21692 = null;
            if (arguments.length > 3) {
              var G__21693__i = 0, G__21693__a = new Array(arguments.length - 3);
              while (G__21693__i < G__21693__a.length) {
                G__21693__a[G__21693__i] = arguments[G__21693__i + 3];
                ++G__21693__i;
              }
              G__21692 = new cljs.core.IndexedSeq(G__21693__a, 0);
            }
            return G__21688__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21692);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21688.cljs$lang$maxFixedArity = 3;
      G__21688.cljs$lang$applyTo = G__21688__4.cljs$lang$applyTo;
      G__21688.cljs$core$IFn$_invoke$arity$0 = G__21688__0;
      G__21688.cljs$core$IFn$_invoke$arity$1 = G__21688__1;
      G__21688.cljs$core$IFn$_invoke$arity$2 = G__21688__2;
      G__21688.cljs$core$IFn$_invoke$arity$3 = G__21688__3;
      G__21688.cljs$core$IFn$_invoke$arity$variadic = G__21688__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21688;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__21694 = null;
      var G__21694__0 = function() {
        var G__21656 = arg1;
        var G__21657 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21656, G__21657) : f.call(null, G__21656, G__21657);
      };
      var G__21694__1 = function(x) {
        var G__21658 = arg1;
        var G__21659 = arg2;
        var G__21660 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21658, G__21659, G__21660) : f.call(null, G__21658, G__21659, G__21660);
      };
      var G__21694__2 = function(x, y) {
        var G__21661 = arg1;
        var G__21662 = arg2;
        var G__21663 = x;
        var G__21664 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21661, G__21662, G__21663, G__21664) : f.call(null, G__21661, G__21662, G__21663, G__21664);
      };
      var G__21694__3 = function(x, y, z) {
        var G__21665 = arg1;
        var G__21666 = arg2;
        var G__21667 = x;
        var G__21668 = y;
        var G__21669 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__21665, G__21666, G__21667, G__21668, G__21669) : f.call(null, G__21665, G__21666, G__21667, G__21668, G__21669);
      };
      var G__21694__4 = function() {
        var G__21695__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__21695 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21696__i = 0, G__21696__a = new Array(arguments.length - 3);
            while (G__21696__i < G__21696__a.length) {
              G__21696__a[G__21696__i] = arguments[G__21696__i + 3];
              ++G__21696__i;
            }
            args = new cljs.core.IndexedSeq(G__21696__a, 0);
          }
          return G__21695__delegate.call(this, x, y, z, args);
        };
        G__21695.cljs$lang$maxFixedArity = 3;
        G__21695.cljs$lang$applyTo = function(arglist__21697) {
          var x = cljs.core.first(arglist__21697);
          arglist__21697 = cljs.core.next(arglist__21697);
          var y = cljs.core.first(arglist__21697);
          arglist__21697 = cljs.core.next(arglist__21697);
          var z = cljs.core.first(arglist__21697);
          var args = cljs.core.rest(arglist__21697);
          return G__21695__delegate(x, y, z, args);
        };
        G__21695.cljs$core$IFn$_invoke$arity$variadic = G__21695__delegate;
        return G__21695;
      }();
      G__21694 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21694__0.call(this);
          case 1:
            return G__21694__1.call(this, x);
          case 2:
            return G__21694__2.call(this, x, y);
          case 3:
            return G__21694__3.call(this, x, y, z);
          default:
            var G__21698 = null;
            if (arguments.length > 3) {
              var G__21699__i = 0, G__21699__a = new Array(arguments.length - 3);
              while (G__21699__i < G__21699__a.length) {
                G__21699__a[G__21699__i] = arguments[G__21699__i + 3];
                ++G__21699__i;
              }
              G__21698 = new cljs.core.IndexedSeq(G__21699__a, 0);
            }
            return G__21694__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21698);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21694.cljs$lang$maxFixedArity = 3;
      G__21694.cljs$lang$applyTo = G__21694__4.cljs$lang$applyTo;
      G__21694.cljs$core$IFn$_invoke$arity$0 = G__21694__0;
      G__21694.cljs$core$IFn$_invoke$arity$1 = G__21694__1;
      G__21694.cljs$core$IFn$_invoke$arity$2 = G__21694__2;
      G__21694.cljs$core$IFn$_invoke$arity$3 = G__21694__3;
      G__21694.cljs$core$IFn$_invoke$arity$variadic = G__21694__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21694;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__21700 = null;
      var G__21700__0 = function() {
        var G__21670 = arg1;
        var G__21671 = arg2;
        var G__21672 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21670, G__21671, G__21672) : f.call(null, G__21670, G__21671, G__21672);
      };
      var G__21700__1 = function(x) {
        var G__21673 = arg1;
        var G__21674 = arg2;
        var G__21675 = arg3;
        var G__21676 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21673, G__21674, G__21675, G__21676) : f.call(null, G__21673, G__21674, G__21675, G__21676);
      };
      var G__21700__2 = function(x, y) {
        var G__21677 = arg1;
        var G__21678 = arg2;
        var G__21679 = arg3;
        var G__21680 = x;
        var G__21681 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__21677, G__21678, G__21679, G__21680, G__21681) : f.call(null, G__21677, G__21678, G__21679, G__21680, G__21681);
      };
      var G__21700__3 = function(x, y, z) {
        var G__21682 = arg1;
        var G__21683 = arg2;
        var G__21684 = arg3;
        var G__21685 = x;
        var G__21686 = y;
        var G__21687 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__21682, G__21683, G__21684, G__21685, G__21686, G__21687) : f.call(null, G__21682, G__21683, G__21684, G__21685, G__21686, G__21687);
      };
      var G__21700__4 = function() {
        var G__21701__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__21701 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21702__i = 0, G__21702__a = new Array(arguments.length - 3);
            while (G__21702__i < G__21702__a.length) {
              G__21702__a[G__21702__i] = arguments[G__21702__i + 3];
              ++G__21702__i;
            }
            args = new cljs.core.IndexedSeq(G__21702__a, 0);
          }
          return G__21701__delegate.call(this, x, y, z, args);
        };
        G__21701.cljs$lang$maxFixedArity = 3;
        G__21701.cljs$lang$applyTo = function(arglist__21703) {
          var x = cljs.core.first(arglist__21703);
          arglist__21703 = cljs.core.next(arglist__21703);
          var y = cljs.core.first(arglist__21703);
          arglist__21703 = cljs.core.next(arglist__21703);
          var z = cljs.core.first(arglist__21703);
          var args = cljs.core.rest(arglist__21703);
          return G__21701__delegate(x, y, z, args);
        };
        G__21701.cljs$core$IFn$_invoke$arity$variadic = G__21701__delegate;
        return G__21701;
      }();
      G__21700 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21700__0.call(this);
          case 1:
            return G__21700__1.call(this, x);
          case 2:
            return G__21700__2.call(this, x, y);
          case 3:
            return G__21700__3.call(this, x, y, z);
          default:
            var G__21704 = null;
            if (arguments.length > 3) {
              var G__21705__i = 0, G__21705__a = new Array(arguments.length - 3);
              while (G__21705__i < G__21705__a.length) {
                G__21705__a[G__21705__i] = arguments[G__21705__i + 3];
                ++G__21705__i;
              }
              G__21704 = new cljs.core.IndexedSeq(G__21705__a, 0);
            }
            return G__21700__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21704);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21700.cljs$lang$maxFixedArity = 3;
      G__21700.cljs$lang$applyTo = G__21700__4.cljs$lang$applyTo;
      G__21700.cljs$core$IFn$_invoke$arity$0 = G__21700__0;
      G__21700.cljs$core$IFn$_invoke$arity$1 = G__21700__1;
      G__21700.cljs$core$IFn$_invoke$arity$2 = G__21700__2;
      G__21700.cljs$core$IFn$_invoke$arity$3 = G__21700__3;
      G__21700.cljs$core$IFn$_invoke$arity$variadic = G__21700__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21700;
    }();
  };
  var partial__5 = function() {
    var G__21706__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__21707__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__21707 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__21708__i = 0, G__21708__a = new Array(arguments.length - 0);
            while (G__21708__i < G__21708__a.length) {
              G__21708__a[G__21708__i] = arguments[G__21708__i + 0];
              ++G__21708__i;
            }
            args = new cljs.core.IndexedSeq(G__21708__a, 0);
          }
          return G__21707__delegate.call(this, args);
        };
        G__21707.cljs$lang$maxFixedArity = 0;
        G__21707.cljs$lang$applyTo = function(arglist__21709) {
          var args = cljs.core.seq(arglist__21709);
          return G__21707__delegate(args);
        };
        G__21707.cljs$core$IFn$_invoke$arity$variadic = G__21707__delegate;
        return G__21707;
      }();
    };
    var G__21706 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__21710__i = 0, G__21710__a = new Array(arguments.length - 4);
        while (G__21710__i < G__21710__a.length) {
          G__21710__a[G__21710__i] = arguments[G__21710__i + 4];
          ++G__21710__i;
        }
        more = new cljs.core.IndexedSeq(G__21710__a, 0);
      }
      return G__21706__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__21706.cljs$lang$maxFixedArity = 4;
    G__21706.cljs$lang$applyTo = function(arglist__21711) {
      var f = cljs.core.first(arglist__21711);
      arglist__21711 = cljs.core.next(arglist__21711);
      var arg1 = cljs.core.first(arglist__21711);
      arglist__21711 = cljs.core.next(arglist__21711);
      var arg2 = cljs.core.first(arglist__21711);
      arglist__21711 = cljs.core.next(arglist__21711);
      var arg3 = cljs.core.first(arglist__21711);
      var more = cljs.core.rest(arglist__21711);
      return G__21706__delegate(f, arg1, arg2, arg3, more);
    };
    G__21706.cljs$core$IFn$_invoke$arity$variadic = G__21706__delegate;
    return G__21706;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__21712 = null;
        if (arguments.length > 4) {
          var G__21713__i = 0, G__21713__a = new Array(arguments.length - 4);
          while (G__21713__i < G__21713__a.length) {
            G__21713__a[G__21713__i] = arguments[G__21713__i + 4];
            ++G__21713__i;
          }
          G__21712 = new cljs.core.IndexedSeq(G__21713__a, 0);
        }
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__21712);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__21746 = null;
      var G__21746__1 = function(a) {
        var G__21730 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21730) : f.call(null, G__21730);
      };
      var G__21746__2 = function(a, b) {
        var G__21731 = a == null ? x : a;
        var G__21732 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21731, G__21732) : f.call(null, G__21731, G__21732);
      };
      var G__21746__3 = function(a, b, c) {
        var G__21733 = a == null ? x : a;
        var G__21734 = b;
        var G__21735 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21733, G__21734, G__21735) : f.call(null, G__21733, G__21734, G__21735);
      };
      var G__21746__4 = function() {
        var G__21747__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__21747 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__21748__i = 0, G__21748__a = new Array(arguments.length - 3);
            while (G__21748__i < G__21748__a.length) {
              G__21748__a[G__21748__i] = arguments[G__21748__i + 3];
              ++G__21748__i;
            }
            ds = new cljs.core.IndexedSeq(G__21748__a, 0);
          }
          return G__21747__delegate.call(this, a, b, c, ds);
        };
        G__21747.cljs$lang$maxFixedArity = 3;
        G__21747.cljs$lang$applyTo = function(arglist__21749) {
          var a = cljs.core.first(arglist__21749);
          arglist__21749 = cljs.core.next(arglist__21749);
          var b = cljs.core.first(arglist__21749);
          arglist__21749 = cljs.core.next(arglist__21749);
          var c = cljs.core.first(arglist__21749);
          var ds = cljs.core.rest(arglist__21749);
          return G__21747__delegate(a, b, c, ds);
        };
        G__21747.cljs$core$IFn$_invoke$arity$variadic = G__21747__delegate;
        return G__21747;
      }();
      G__21746 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__21746__1.call(this, a);
          case 2:
            return G__21746__2.call(this, a, b);
          case 3:
            return G__21746__3.call(this, a, b, c);
          default:
            var G__21750 = null;
            if (arguments.length > 3) {
              var G__21751__i = 0, G__21751__a = new Array(arguments.length - 3);
              while (G__21751__i < G__21751__a.length) {
                G__21751__a[G__21751__i] = arguments[G__21751__i + 3];
                ++G__21751__i;
              }
              G__21750 = new cljs.core.IndexedSeq(G__21751__a, 0);
            }
            return G__21746__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__21750);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21746.cljs$lang$maxFixedArity = 3;
      G__21746.cljs$lang$applyTo = G__21746__4.cljs$lang$applyTo;
      G__21746.cljs$core$IFn$_invoke$arity$1 = G__21746__1;
      G__21746.cljs$core$IFn$_invoke$arity$2 = G__21746__2;
      G__21746.cljs$core$IFn$_invoke$arity$3 = G__21746__3;
      G__21746.cljs$core$IFn$_invoke$arity$variadic = G__21746__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21746;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__21752 = null;
      var G__21752__2 = function(a, b) {
        var G__21736 = a == null ? x : a;
        var G__21737 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21736, G__21737) : f.call(null, G__21736, G__21737);
      };
      var G__21752__3 = function(a, b, c) {
        var G__21738 = a == null ? x : a;
        var G__21739 = b == null ? y : b;
        var G__21740 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21738, G__21739, G__21740) : f.call(null, G__21738, G__21739, G__21740);
      };
      var G__21752__4 = function() {
        var G__21753__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__21753 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__21754__i = 0, G__21754__a = new Array(arguments.length - 3);
            while (G__21754__i < G__21754__a.length) {
              G__21754__a[G__21754__i] = arguments[G__21754__i + 3];
              ++G__21754__i;
            }
            ds = new cljs.core.IndexedSeq(G__21754__a, 0);
          }
          return G__21753__delegate.call(this, a, b, c, ds);
        };
        G__21753.cljs$lang$maxFixedArity = 3;
        G__21753.cljs$lang$applyTo = function(arglist__21755) {
          var a = cljs.core.first(arglist__21755);
          arglist__21755 = cljs.core.next(arglist__21755);
          var b = cljs.core.first(arglist__21755);
          arglist__21755 = cljs.core.next(arglist__21755);
          var c = cljs.core.first(arglist__21755);
          var ds = cljs.core.rest(arglist__21755);
          return G__21753__delegate(a, b, c, ds);
        };
        G__21753.cljs$core$IFn$_invoke$arity$variadic = G__21753__delegate;
        return G__21753;
      }();
      G__21752 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__21752__2.call(this, a, b);
          case 3:
            return G__21752__3.call(this, a, b, c);
          default:
            var G__21756 = null;
            if (arguments.length > 3) {
              var G__21757__i = 0, G__21757__a = new Array(arguments.length - 3);
              while (G__21757__i < G__21757__a.length) {
                G__21757__a[G__21757__i] = arguments[G__21757__i + 3];
                ++G__21757__i;
              }
              G__21756 = new cljs.core.IndexedSeq(G__21757__a, 0);
            }
            return G__21752__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__21756);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21752.cljs$lang$maxFixedArity = 3;
      G__21752.cljs$lang$applyTo = G__21752__4.cljs$lang$applyTo;
      G__21752.cljs$core$IFn$_invoke$arity$2 = G__21752__2;
      G__21752.cljs$core$IFn$_invoke$arity$3 = G__21752__3;
      G__21752.cljs$core$IFn$_invoke$arity$variadic = G__21752__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21752;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__21758 = null;
      var G__21758__2 = function(a, b) {
        var G__21741 = a == null ? x : a;
        var G__21742 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21741, G__21742) : f.call(null, G__21741, G__21742);
      };
      var G__21758__3 = function(a, b, c) {
        var G__21743 = a == null ? x : a;
        var G__21744 = b == null ? y : b;
        var G__21745 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21743, G__21744, G__21745) : f.call(null, G__21743, G__21744, G__21745);
      };
      var G__21758__4 = function() {
        var G__21759__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__21759 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__21760__i = 0, G__21760__a = new Array(arguments.length - 3);
            while (G__21760__i < G__21760__a.length) {
              G__21760__a[G__21760__i] = arguments[G__21760__i + 3];
              ++G__21760__i;
            }
            ds = new cljs.core.IndexedSeq(G__21760__a, 0);
          }
          return G__21759__delegate.call(this, a, b, c, ds);
        };
        G__21759.cljs$lang$maxFixedArity = 3;
        G__21759.cljs$lang$applyTo = function(arglist__21761) {
          var a = cljs.core.first(arglist__21761);
          arglist__21761 = cljs.core.next(arglist__21761);
          var b = cljs.core.first(arglist__21761);
          arglist__21761 = cljs.core.next(arglist__21761);
          var c = cljs.core.first(arglist__21761);
          var ds = cljs.core.rest(arglist__21761);
          return G__21759__delegate(a, b, c, ds);
        };
        G__21759.cljs$core$IFn$_invoke$arity$variadic = G__21759__delegate;
        return G__21759;
      }();
      G__21758 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__21758__2.call(this, a, b);
          case 3:
            return G__21758__3.call(this, a, b, c);
          default:
            var G__21762 = null;
            if (arguments.length > 3) {
              var G__21763__i = 0, G__21763__a = new Array(arguments.length - 3);
              while (G__21763__i < G__21763__a.length) {
                G__21763__a[G__21763__i] = arguments[G__21763__i + 3];
                ++G__21763__i;
              }
              G__21762 = new cljs.core.IndexedSeq(G__21763__a, 0);
            }
            return G__21758__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__21762);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21758.cljs$lang$maxFixedArity = 3;
      G__21758.cljs$lang$applyTo = G__21758__4.cljs$lang$applyTo;
      G__21758.cljs$core$IFn$_invoke$arity$2 = G__21758__2;
      G__21758.cljs$core$IFn$_invoke$arity$3 = G__21758__3;
      G__21758.cljs$core$IFn$_invoke$arity$variadic = G__21758__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21758;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function() {
  var map_indexed = null;
  var map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__21794 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__21794) : cljs.core.volatile_BANG_.call(null, G__21794);
      }();
      return function(i) {
        return function() {
          var G__21824 = null;
          var G__21824__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__21824__1 = function(result) {
            var G__21795 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21795) : rf.call(null, G__21795);
          };
          var G__21824__2 = function(result, input) {
            var G__21796 = result;
            var G__21797 = function() {
              var G__21798 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__21799 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21798, G__21799) : f.call(null, G__21798, G__21799);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21796, G__21797) : rf.call(null, G__21796, G__21797);
          };
          G__21824 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__21824__0.call(this);
              case 1:
                return G__21824__1.call(this, result);
              case 2:
                return G__21824__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21824.cljs$core$IFn$_invoke$arity$0 = G__21824__0;
          G__21824.cljs$core$IFn$_invoke$arity$1 = G__21824__1;
          G__21824.cljs$core$IFn$_invoke$arity$2 = G__21824__2;
          return G__21824;
        }();
      }(i);
    };
  };
  var map_indexed__2 = function(f, coll) {
    var mapi = function mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4868__auto___21825 = size;
            var i_21826 = 0;
            while (true) {
              if (i_21826 < n__4868__auto___21825) {
                cljs.core.chunk_append(b, function() {
                  var G__21820 = idx + i_21826;
                  var G__21821 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_21826);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21820, G__21821) : f.call(null, G__21820, G__21821);
                }());
                var G__21827 = i_21826 + 1;
                i_21826 = G__21827;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__21822 = idx;
              var G__21823 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21822, G__21823) : f.call(null, G__21822, G__21823);
            }(), mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return map_indexed__1.call(this, f);
      case 2:
        return map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map_indexed.cljs$core$IFn$_invoke$arity$1 = map_indexed__1;
  map_indexed.cljs$core$IFn$_invoke$arity$2 = map_indexed__2;
  return map_indexed;
}();
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__21846 = null;
        var G__21846__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21846__1 = function(result) {
          var G__21840 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21840) : rf.call(null, G__21840);
        };
        var G__21846__2 = function(result, input) {
          var v = function() {
            var G__21841 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21841) : f.call(null, G__21841);
          }();
          if (v == null) {
            return result;
          } else {
            var G__21842 = result;
            var G__21843 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21842, G__21843) : rf.call(null, G__21842, G__21843);
          }
        };
        G__21846 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21846__0.call(this);
            case 1:
              return G__21846__1.call(this, result);
            case 2:
              return G__21846__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21846.cljs$core$IFn$_invoke$arity$0 = G__21846__0;
        G__21846.cljs$core$IFn$_invoke$arity$1 = G__21846__1;
        G__21846.cljs$core$IFn$_invoke$arity$2 = G__21846__2;
        return G__21846;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___21847 = size;
          var i_21848 = 0;
          while (true) {
            if (i_21848 < n__4868__auto___21847) {
              var x_21849 = function() {
                var G__21844 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_21848);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21844) : f.call(null, G__21844);
              }();
              if (x_21849 == null) {
              } else {
                cljs.core.chunk_append(b, x_21849);
              }
              var G__21850 = i_21848 + 1;
              i_21848 = G__21850;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__21845 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21845) : f.call(null, G__21845);
          }();
          if (x == null) {
            return keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__21851 = this$__$1;
  return goog.getUid(G__21851);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__21852 = cljs.core.seq(self__.watches);
  var chunk__21853 = null;
  var count__21854 = 0;
  var i__21855 = 0;
  while (true) {
    if (i__21855 < count__21854) {
      var vec__21856 = chunk__21853.cljs$core$IIndexed$_nth$arity$2(null, i__21855);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21856, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21856, 1, null);
      var G__21857_21866 = key;
      var G__21858_21867 = this$__$1;
      var G__21859_21868 = oldval;
      var G__21860_21869 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21857_21866, G__21858_21867, G__21859_21868, G__21860_21869) : f.call(null, G__21857_21866, G__21858_21867, G__21859_21868, G__21860_21869);
      var G__21870 = seq__21852;
      var G__21871 = chunk__21853;
      var G__21872 = count__21854;
      var G__21873 = i__21855 + 1;
      seq__21852 = G__21870;
      chunk__21853 = G__21871;
      count__21854 = G__21872;
      i__21855 = G__21873;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__21852);
      if (temp__4126__auto__) {
        var seq__21852__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21852__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__21852__$1);
          var G__21874 = cljs.core.chunk_rest(seq__21852__$1);
          var G__21875 = c__4768__auto__;
          var G__21876 = cljs.core.count(c__4768__auto__);
          var G__21877 = 0;
          seq__21852 = G__21874;
          chunk__21853 = G__21875;
          count__21854 = G__21876;
          i__21855 = G__21877;
          continue;
        } else {
          var vec__21861 = cljs.core.first(seq__21852__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21861, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21861, 1, null);
          var G__21862_21878 = key;
          var G__21863_21879 = this$__$1;
          var G__21864_21880 = oldval;
          var G__21865_21881 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__21862_21878, G__21863_21879, G__21864_21880, G__21865_21881) : f.call(null, G__21862_21878, G__21863_21879, G__21864_21880, G__21865_21881);
          var G__21882 = cljs.core.next(seq__21852__$1);
          var G__21883 = null;
          var G__21884 = 0;
          var G__21885 = 0;
          seq__21852 = G__21882;
          chunk__21853 = G__21883;
          count__21854 = G__21884;
          i__21855 = G__21885;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__21889__delegate = function(x, p__21886) {
      var map__21888 = p__21886;
      var map__21888__$1 = cljs.core.seq_QMARK_(map__21888) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__21888) : map__21888;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21888__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21888__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__21889 = function(x, var_args) {
      var p__21886 = null;
      if (arguments.length > 1) {
        var G__21890__i = 0, G__21890__a = new Array(arguments.length - 1);
        while (G__21890__i < G__21890__a.length) {
          G__21890__a[G__21890__i] = arguments[G__21890__i + 1];
          ++G__21890__i;
        }
        p__21886 = new cljs.core.IndexedSeq(G__21890__a, 0);
      }
      return G__21889__delegate.call(this, x, p__21886);
    };
    G__21889.cljs$lang$maxFixedArity = 1;
    G__21889.cljs$lang$applyTo = function(arglist__21891) {
      var x = cljs.core.first(arglist__21891);
      var p__21886 = cljs.core.rest(arglist__21891);
      return G__21889__delegate(x, p__21886);
    };
    G__21889.cljs$core$IFn$_invoke$arity$variadic = G__21889__delegate;
    return G__21889;
  }();
  atom = function(x, var_args) {
    var p__21886 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__21892 = null;
        if (arguments.length > 1) {
          var G__21893__i = 0, G__21893__a = new Array(arguments.length - 1);
          while (G__21893__i < G__21893__a.length) {
            G__21893__a[G__21893__i] = arguments[G__21893__i + 1];
            ++G__21893__i;
          }
          G__21892 = new cljs.core.IndexedSeq(G__21893__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__21892);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__21896 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__21896) : validate.call(null, G__21896);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__21897 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__21897) : cljs.core.pr_str.call(null, G__21897);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__21904 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21904) : f.call(null, G__21904);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__21905 = a.state;
        var G__21906 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21905, G__21906) : f.call(null, G__21905, G__21906);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__21907 = a.state;
        var G__21908 = x;
        var G__21909 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21907, G__21908, G__21909) : f.call(null, G__21907, G__21908, G__21909);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__21910__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__21910 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__21911__i = 0, G__21911__a = new Array(arguments.length - 4);
        while (G__21911__i < G__21911__a.length) {
          G__21911__a[G__21911__i] = arguments[G__21911__i + 4];
          ++G__21911__i;
        }
        more = new cljs.core.IndexedSeq(G__21911__a, 0);
      }
      return G__21910__delegate.call(this, a, f, x, y, more);
    };
    G__21910.cljs$lang$maxFixedArity = 4;
    G__21910.cljs$lang$applyTo = function(arglist__21912) {
      var a = cljs.core.first(arglist__21912);
      arglist__21912 = cljs.core.next(arglist__21912);
      var f = cljs.core.first(arglist__21912);
      arglist__21912 = cljs.core.next(arglist__21912);
      var x = cljs.core.first(arglist__21912);
      arglist__21912 = cljs.core.next(arglist__21912);
      var y = cljs.core.first(arglist__21912);
      var more = cljs.core.rest(arglist__21912);
      return G__21910__delegate(a, f, x, y, more);
    };
    G__21910.cljs$core$IFn$_invoke$arity$variadic = G__21910__delegate;
    return G__21910;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__21913 = null;
        if (arguments.length > 4) {
          var G__21914__i = 0, G__21914__a = new Array(arguments.length - 4);
          while (G__21914__i < G__21914__a.length) {
            G__21914__a[G__21914__i] = arguments[G__21914__i + 4];
            ++G__21914__i;
          }
          G__21913 = new cljs.core.IndexedSeq(G__21914__a, 0);
        }
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__21913);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function __GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__21981 = null;
          var G__21981__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__21981__1 = function(result) {
            var G__21948 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21948) : rf.call(null, G__21948);
          };
          var G__21981__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__21949 = i;
              var G__21950 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21949, G__21950) : f.call(null, G__21949, G__21950);
            }();
            if (v == null) {
              return result;
            } else {
              var G__21951 = result;
              var G__21952 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21951, G__21952) : rf.call(null, G__21951, G__21952);
            }
          };
          G__21981 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__21981__0.call(this);
              case 1:
                return G__21981__1.call(this, result);
              case 2:
                return G__21981__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21981.cljs$core$IFn$_invoke$arity$0 = G__21981__0;
          G__21981.cljs$core$IFn$_invoke$arity$1 = G__21981__1;
          G__21981.cljs$core$IFn$_invoke$arity$2 = G__21981__2;
          return G__21981;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4868__auto___21982 = size;
            var i_21983 = 0;
            while (true) {
              if (i_21983 < n__4868__auto___21982) {
                var x_21984 = function() {
                  var G__21977 = idx + i_21983;
                  var G__21978 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_21983);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21977, G__21978) : f.call(null, G__21977, G__21978);
                }();
                if (x_21984 == null) {
                } else {
                  cljs.core.chunk_append(b, x_21984);
                }
                var G__21985 = i_21983 + 1;
                i_21983 = G__21985;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__21979 = idx;
              var G__21980 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21979, G__21980) : f.call(null, G__21979, G__21980);
            }();
            if (x == null) {
              return keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__22199 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22199) : p.call(null, G__22199);
        }());
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22201 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22201) : p.call(null, G__22201);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var G__22202 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22202) : p.call(null, G__22202);
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22204 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22204) : p.call(null, G__22204);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__22206 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22206) : p.call(null, G__22206);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var G__22207 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22207) : p.call(null, G__22207);
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__22376__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__22376 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__22377__i = 0, G__22377__a = new Array(arguments.length - 3);
            while (G__22377__i < G__22377__a.length) {
              G__22377__a[G__22377__i] = arguments[G__22377__i + 3];
              ++G__22377__i;
            }
            args = new cljs.core.IndexedSeq(G__22377__a, 0);
          }
          return G__22376__delegate.call(this, x, y, z, args);
        };
        G__22376.cljs$lang$maxFixedArity = 3;
        G__22376.cljs$lang$applyTo = function(arglist__22378) {
          var x = cljs.core.first(arglist__22378);
          arglist__22378 = cljs.core.next(arglist__22378);
          var y = cljs.core.first(arglist__22378);
          arglist__22378 = cljs.core.next(arglist__22378);
          var z = cljs.core.first(arglist__22378);
          var args = cljs.core.rest(arglist__22378);
          return G__22376__delegate(x, y, z, args);
        };
        G__22376.cljs$core$IFn$_invoke$arity$variadic = G__22376__delegate;
        return G__22376;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            var G__22379 = null;
            if (arguments.length > 3) {
              var G__22380__i = 0, G__22380__a = new Array(arguments.length - 3);
              while (G__22380__i < G__22380__a.length) {
                G__22380__a[G__22380__i] = arguments[G__22380__i + 3];
                ++G__22380__i;
              }
              G__22379 = new cljs.core.IndexedSeq(G__22380__a, 0);
            }
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22379);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22239 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22239) : p1.call(null, G__22239);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var G__22240 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22240) : p2.call(null, G__22240);
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22242 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22242) : p1.call(null, G__22242);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__22244 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22244) : p1.call(null, G__22244);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__22246 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22246) : p2.call(null, G__22246);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var G__22247 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22247) : p2.call(null, G__22247);
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22249 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22249) : p1.call(null, G__22249);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__22251 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22251) : p1.call(null, G__22251);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__22253 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22253) : p1.call(null, G__22253);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__22255 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22255) : p2.call(null, G__22255);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__22257 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22257) : p2.call(null, G__22257);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var G__22258 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22258) : p2.call(null, G__22258);
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__22381__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__21986_SHARP_) {
            var and__3969__auto__ = function() {
              var G__22263 = p1__21986_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22263) : p1.call(null, G__22263);
            }();
            if (cljs.core.truth_(and__3969__auto__)) {
              var G__22264 = p1__21986_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22264) : p2.call(null, G__22264);
            } else {
              return and__3969__auto__;
            }
          }, args));
        };
        var G__22381 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__22382__i = 0, G__22382__a = new Array(arguments.length - 3);
            while (G__22382__i < G__22382__a.length) {
              G__22382__a[G__22382__i] = arguments[G__22382__i + 3];
              ++G__22382__i;
            }
            args = new cljs.core.IndexedSeq(G__22382__a, 0);
          }
          return G__22381__delegate.call(this, x, y, z, args);
        };
        G__22381.cljs$lang$maxFixedArity = 3;
        G__22381.cljs$lang$applyTo = function(arglist__22383) {
          var x = cljs.core.first(arglist__22383);
          arglist__22383 = cljs.core.next(arglist__22383);
          var y = cljs.core.first(arglist__22383);
          arglist__22383 = cljs.core.next(arglist__22383);
          var z = cljs.core.first(arglist__22383);
          var args = cljs.core.rest(arglist__22383);
          return G__22381__delegate(x, y, z, args);
        };
        G__22381.cljs$core$IFn$_invoke$arity$variadic = G__22381__delegate;
        return G__22381;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            var G__22384 = null;
            if (arguments.length > 3) {
              var G__22385__i = 0, G__22385__a = new Array(arguments.length - 3);
              while (G__22385__i < G__22385__a.length) {
                G__22385__a[G__22385__i] = arguments[G__22385__i + 3];
                ++G__22385__i;
              }
              G__22384 = new cljs.core.IndexedSeq(G__22385__a, 0);
            }
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22384);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22310 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22310) : p1.call(null, G__22310);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__22312 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22312) : p2.call(null, G__22312);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var G__22313 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22313) : p3.call(null, G__22313);
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22315 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22315) : p1.call(null, G__22315);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__22317 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22317) : p2.call(null, G__22317);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__22319 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22319) : p3.call(null, G__22319);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__22321 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22321) : p1.call(null, G__22321);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__22323 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22323) : p2.call(null, G__22323);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var G__22324 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22324) : p3.call(null, G__22324);
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__22326 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22326) : p1.call(null, G__22326);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__22328 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22328) : p2.call(null, G__22328);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__22330 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22330) : p3.call(null, G__22330);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__22332 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22332) : p1.call(null, G__22332);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__22334 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22334) : p2.call(null, G__22334);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var and__3969__auto____$5 = function() {
                      var G__22336 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22336) : p3.call(null, G__22336);
                    }();
                    if (cljs.core.truth_(and__3969__auto____$5)) {
                      var and__3969__auto____$6 = function() {
                        var G__22338 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22338) : p1.call(null, G__22338);
                      }();
                      if (cljs.core.truth_(and__3969__auto____$6)) {
                        var and__3969__auto____$7 = function() {
                          var G__22340 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22340) : p2.call(null, G__22340);
                        }();
                        if (cljs.core.truth_(and__3969__auto____$7)) {
                          var G__22341 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22341) : p3.call(null, G__22341);
                        } else {
                          return and__3969__auto____$7;
                        }
                      } else {
                        return and__3969__auto____$6;
                      }
                    } else {
                      return and__3969__auto____$5;
                    }
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__22386__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__21987_SHARP_) {
            var and__3969__auto__ = function() {
              var G__22348 = p1__21987_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22348) : p1.call(null, G__22348);
            }();
            if (cljs.core.truth_(and__3969__auto__)) {
              var and__3969__auto____$1 = function() {
                var G__22350 = p1__21987_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22350) : p2.call(null, G__22350);
              }();
              if (cljs.core.truth_(and__3969__auto____$1)) {
                var G__22351 = p1__21987_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22351) : p3.call(null, G__22351);
              } else {
                return and__3969__auto____$1;
              }
            } else {
              return and__3969__auto__;
            }
          }, args));
        };
        var G__22386 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__22387__i = 0, G__22387__a = new Array(arguments.length - 3);
            while (G__22387__i < G__22387__a.length) {
              G__22387__a[G__22387__i] = arguments[G__22387__i + 3];
              ++G__22387__i;
            }
            args = new cljs.core.IndexedSeq(G__22387__a, 0);
          }
          return G__22386__delegate.call(this, x, y, z, args);
        };
        G__22386.cljs$lang$maxFixedArity = 3;
        G__22386.cljs$lang$applyTo = function(arglist__22388) {
          var x = cljs.core.first(arglist__22388);
          arglist__22388 = cljs.core.next(arglist__22388);
          var y = cljs.core.first(arglist__22388);
          arglist__22388 = cljs.core.next(arglist__22388);
          var z = cljs.core.first(arglist__22388);
          var args = cljs.core.rest(arglist__22388);
          return G__22386__delegate(x, y, z, args);
        };
        G__22386.cljs$core$IFn$_invoke$arity$variadic = G__22386__delegate;
        return G__22386;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            var G__22389 = null;
            if (arguments.length > 3) {
              var G__22390__i = 0, G__22390__a = new Array(arguments.length - 3);
              while (G__22390__i < G__22390__a.length) {
                G__22390__a[G__22390__i] = arguments[G__22390__i + 3];
                ++G__22390__i;
              }
              G__22389 = new cljs.core.IndexedSeq(G__22390__a, 0);
            }
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22389);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__22391__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__21988_SHARP_) {
                var G__22367 = x;
                return p1__21988_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__21988_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22367) : p1__21988_SHARP_.call(null, G__22367);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__21989_SHARP_) {
                var and__3969__auto__ = function() {
                  var G__22369 = x;
                  return p1__21989_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__21989_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22369) : p1__21989_SHARP_.call(null, G__22369);
                }();
                if (cljs.core.truth_(and__3969__auto__)) {
                  var G__22370 = y;
                  return p1__21989_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__21989_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22370) : p1__21989_SHARP_.call(null, G__22370);
                } else {
                  return and__3969__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__21990_SHARP_) {
                var and__3969__auto__ = function() {
                  var G__22372 = x;
                  return p1__21990_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__21990_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22372) : p1__21990_SHARP_.call(null, G__22372);
                }();
                if (cljs.core.truth_(and__3969__auto__)) {
                  var and__3969__auto____$1 = function() {
                    var G__22374 = y;
                    return p1__21990_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__21990_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22374) : p1__21990_SHARP_.call(null, G__22374);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$1)) {
                    var G__22375 = z;
                    return p1__21990_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__21990_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22375) : p1__21990_SHARP_.call(null, G__22375);
                  } else {
                    return and__3969__auto____$1;
                  }
                } else {
                  return and__3969__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__22392__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__21991_SHARP_) {
                  return cljs.core.every_QMARK_(p1__21991_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__22392 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__22393__i = 0, G__22393__a = new Array(arguments.length - 3);
                while (G__22393__i < G__22393__a.length) {
                  G__22393__a[G__22393__i] = arguments[G__22393__i + 3];
                  ++G__22393__i;
                }
                args = new cljs.core.IndexedSeq(G__22393__a, 0);
              }
              return G__22392__delegate.call(this, x, y, z, args);
            };
            G__22392.cljs$lang$maxFixedArity = 3;
            G__22392.cljs$lang$applyTo = function(arglist__22394) {
              var x = cljs.core.first(arglist__22394);
              arglist__22394 = cljs.core.next(arglist__22394);
              var y = cljs.core.first(arglist__22394);
              arglist__22394 = cljs.core.next(arglist__22394);
              var z = cljs.core.first(arglist__22394);
              var args = cljs.core.rest(arglist__22394);
              return G__22392__delegate(x, y, z, args);
            };
            G__22392.cljs$core$IFn$_invoke$arity$variadic = G__22392__delegate;
            return G__22392;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                var G__22395 = null;
                if (arguments.length > 3) {
                  var G__22396__i = 0, G__22396__a = new Array(arguments.length - 3);
                  while (G__22396__i < G__22396__a.length) {
                    G__22396__a[G__22396__i] = arguments[G__22396__i + 3];
                    ++G__22396__i;
                  }
                  G__22395 = new cljs.core.IndexedSeq(G__22396__a, 0);
                }
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22395);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__22391 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__22397__i = 0, G__22397__a = new Array(arguments.length - 3);
        while (G__22397__i < G__22397__a.length) {
          G__22397__a[G__22397__i] = arguments[G__22397__i + 3];
          ++G__22397__i;
        }
        ps = new cljs.core.IndexedSeq(G__22397__a, 0);
      }
      return G__22391__delegate.call(this, p1, p2, p3, ps);
    };
    G__22391.cljs$lang$maxFixedArity = 3;
    G__22391.cljs$lang$applyTo = function(arglist__22398) {
      var p1 = cljs.core.first(arglist__22398);
      arglist__22398 = cljs.core.next(arglist__22398);
      var p2 = cljs.core.first(arglist__22398);
      arglist__22398 = cljs.core.next(arglist__22398);
      var p3 = cljs.core.first(arglist__22398);
      var ps = cljs.core.rest(arglist__22398);
      return G__22391__delegate(p1, p2, p3, ps);
    };
    G__22391.cljs$core$IFn$_invoke$arity$variadic = G__22391__delegate;
    return G__22391;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        var G__22399 = null;
        if (arguments.length > 3) {
          var G__22400__i = 0, G__22400__a = new Array(arguments.length - 3);
          while (G__22400__i < G__22400__a.length) {
            G__22400__a[G__22400__i] = arguments[G__22400__i + 3];
            ++G__22400__i;
          }
          G__22399 = new cljs.core.IndexedSeq(G__22400__a, 0);
        }
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__22399);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        var G__22606 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22606) : p.call(null, G__22606);
      };
      var sp1__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__22608 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22608) : p.call(null, G__22608);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var G__22609 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22609) : p.call(null, G__22609);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__22611 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22611) : p.call(null, G__22611);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__22613 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22613) : p.call(null, G__22613);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var G__22614 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__22614) : p.call(null, G__22614);
          }
        }
      };
      var sp1__4 = function() {
        var G__22775__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__22775 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__22776__i = 0, G__22776__a = new Array(arguments.length - 3);
            while (G__22776__i < G__22776__a.length) {
              G__22776__a[G__22776__i] = arguments[G__22776__i + 3];
              ++G__22776__i;
            }
            args = new cljs.core.IndexedSeq(G__22776__a, 0);
          }
          return G__22775__delegate.call(this, x, y, z, args);
        };
        G__22775.cljs$lang$maxFixedArity = 3;
        G__22775.cljs$lang$applyTo = function(arglist__22777) {
          var x = cljs.core.first(arglist__22777);
          arglist__22777 = cljs.core.next(arglist__22777);
          var y = cljs.core.first(arglist__22777);
          arglist__22777 = cljs.core.next(arglist__22777);
          var z = cljs.core.first(arglist__22777);
          var args = cljs.core.rest(arglist__22777);
          return G__22775__delegate(x, y, z, args);
        };
        G__22775.cljs$core$IFn$_invoke$arity$variadic = G__22775__delegate;
        return G__22775;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            var G__22778 = null;
            if (arguments.length > 3) {
              var G__22779__i = 0, G__22779__a = new Array(arguments.length - 3);
              while (G__22779__i < G__22779__a.length) {
                G__22779__a[G__22779__i] = arguments[G__22779__i + 3];
                ++G__22779__i;
              }
              G__22778 = new cljs.core.IndexedSeq(G__22779__a, 0);
            }
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22778);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3981__auto__ = function() {
          var G__22646 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22646) : p1.call(null, G__22646);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var G__22647 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22647) : p2.call(null, G__22647);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__22649 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22649) : p1.call(null, G__22649);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__22651 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22651) : p1.call(null, G__22651);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__22653 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22653) : p2.call(null, G__22653);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var G__22654 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22654) : p2.call(null, G__22654);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__22656 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22656) : p1.call(null, G__22656);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__22658 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22658) : p1.call(null, G__22658);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__22660 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22660) : p1.call(null, G__22660);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__22662 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22662) : p2.call(null, G__22662);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__22664 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22664) : p2.call(null, G__22664);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var G__22665 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22665) : p2.call(null, G__22665);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__22780__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(function(or__3981__auto__) {
              return function(p1__22401_SHARP_) {
                var or__3981__auto____$1 = function() {
                  var G__22667 = p1__22401_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22667) : p1.call(null, G__22667);
                }();
                if (cljs.core.truth_(or__3981__auto____$1)) {
                  return or__3981__auto____$1;
                } else {
                  var G__22668 = p1__22401_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22668) : p2.call(null, G__22668);
                }
              };
            }(or__3981__auto__), args);
          }
        };
        var G__22780 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__22781__i = 0, G__22781__a = new Array(arguments.length - 3);
            while (G__22781__i < G__22781__a.length) {
              G__22781__a[G__22781__i] = arguments[G__22781__i + 3];
              ++G__22781__i;
            }
            args = new cljs.core.IndexedSeq(G__22781__a, 0);
          }
          return G__22780__delegate.call(this, x, y, z, args);
        };
        G__22780.cljs$lang$maxFixedArity = 3;
        G__22780.cljs$lang$applyTo = function(arglist__22782) {
          var x = cljs.core.first(arglist__22782);
          arglist__22782 = cljs.core.next(arglist__22782);
          var y = cljs.core.first(arglist__22782);
          arglist__22782 = cljs.core.next(arglist__22782);
          var z = cljs.core.first(arglist__22782);
          var args = cljs.core.rest(arglist__22782);
          return G__22780__delegate(x, y, z, args);
        };
        G__22780.cljs$core$IFn$_invoke$arity$variadic = G__22780__delegate;
        return G__22780;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            var G__22783 = null;
            if (arguments.length > 3) {
              var G__22784__i = 0, G__22784__a = new Array(arguments.length - 3);
              while (G__22784__i < G__22784__a.length) {
                G__22784__a[G__22784__i] = arguments[G__22784__i + 3];
                ++G__22784__i;
              }
              G__22783 = new cljs.core.IndexedSeq(G__22784__a, 0);
            }
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22783);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3981__auto__ = function() {
          var G__22714 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22714) : p1.call(null, G__22714);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__22716 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22716) : p2.call(null, G__22716);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var G__22717 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22717) : p3.call(null, G__22717);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__22719 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22719) : p1.call(null, G__22719);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__22721 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22721) : p2.call(null, G__22721);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__22723 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22723) : p3.call(null, G__22723);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__22725 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22725) : p1.call(null, G__22725);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__22727 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22727) : p2.call(null, G__22727);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var G__22728 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22728) : p3.call(null, G__22728);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__22730 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22730) : p1.call(null, G__22730);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__22732 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22732) : p2.call(null, G__22732);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__22734 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22734) : p3.call(null, G__22734);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__22736 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22736) : p1.call(null, G__22736);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__22738 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22738) : p2.call(null, G__22738);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var or__3981__auto____$5 = function() {
                    var G__22740 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22740) : p3.call(null, G__22740);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$5)) {
                    return or__3981__auto____$5;
                  } else {
                    var or__3981__auto____$6 = function() {
                      var G__22742 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22742) : p1.call(null, G__22742);
                    }();
                    if (cljs.core.truth_(or__3981__auto____$6)) {
                      return or__3981__auto____$6;
                    } else {
                      var or__3981__auto____$7 = function() {
                        var G__22744 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22744) : p2.call(null, G__22744);
                      }();
                      if (cljs.core.truth_(or__3981__auto____$7)) {
                        return or__3981__auto____$7;
                      } else {
                        var G__22745 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22745) : p3.call(null, G__22745);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__22785__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(function(or__3981__auto__) {
              return function(p1__22402_SHARP_) {
                var or__3981__auto____$1 = function() {
                  var G__22747 = p1__22402_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__22747) : p1.call(null, G__22747);
                }();
                if (cljs.core.truth_(or__3981__auto____$1)) {
                  return or__3981__auto____$1;
                } else {
                  var or__3981__auto____$2 = function() {
                    var G__22749 = p1__22402_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__22749) : p2.call(null, G__22749);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$2)) {
                    return or__3981__auto____$2;
                  } else {
                    var G__22750 = p1__22402_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__22750) : p3.call(null, G__22750);
                  }
                }
              };
            }(or__3981__auto__), args);
          }
        };
        var G__22785 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__22786__i = 0, G__22786__a = new Array(arguments.length - 3);
            while (G__22786__i < G__22786__a.length) {
              G__22786__a[G__22786__i] = arguments[G__22786__i + 3];
              ++G__22786__i;
            }
            args = new cljs.core.IndexedSeq(G__22786__a, 0);
          }
          return G__22785__delegate.call(this, x, y, z, args);
        };
        G__22785.cljs$lang$maxFixedArity = 3;
        G__22785.cljs$lang$applyTo = function(arglist__22787) {
          var x = cljs.core.first(arglist__22787);
          arglist__22787 = cljs.core.next(arglist__22787);
          var y = cljs.core.first(arglist__22787);
          arglist__22787 = cljs.core.next(arglist__22787);
          var z = cljs.core.first(arglist__22787);
          var args = cljs.core.rest(arglist__22787);
          return G__22785__delegate(x, y, z, args);
        };
        G__22785.cljs$core$IFn$_invoke$arity$variadic = G__22785__delegate;
        return G__22785;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            var G__22788 = null;
            if (arguments.length > 3) {
              var G__22789__i = 0, G__22789__a = new Array(arguments.length - 3);
              while (G__22789__i < G__22789__a.length) {
                G__22789__a[G__22789__i] = arguments[G__22789__i + 3];
                ++G__22789__i;
              }
              G__22788 = new cljs.core.IndexedSeq(G__22789__a, 0);
            }
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22788);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__22790__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__22403_SHARP_) {
                var G__22766 = x;
                return p1__22403_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__22403_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22766) : p1__22403_SHARP_.call(null, G__22766);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__22404_SHARP_) {
                var or__3981__auto__ = function() {
                  var G__22768 = x;
                  return p1__22404_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__22404_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22768) : p1__22404_SHARP_.call(null, G__22768);
                }();
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  var G__22769 = y;
                  return p1__22404_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__22404_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22769) : p1__22404_SHARP_.call(null, G__22769);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__22405_SHARP_) {
                var or__3981__auto__ = function() {
                  var G__22771 = x;
                  return p1__22405_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__22405_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22771) : p1__22405_SHARP_.call(null, G__22771);
                }();
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  var or__3981__auto____$1 = function() {
                    var G__22773 = y;
                    return p1__22405_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__22405_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22773) : p1__22405_SHARP_.call(null, G__22773);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$1)) {
                    return or__3981__auto____$1;
                  } else {
                    var G__22774 = z;
                    return p1__22405_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__22405_SHARP_.cljs$core$IFn$_invoke$arity$1(G__22774) : p1__22405_SHARP_.call(null, G__22774);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__22791__delegate = function(x, y, z, args) {
              var or__3981__auto__ = spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__3981__auto__)) {
                return or__3981__auto__;
              } else {
                return cljs.core.some(function(or__3981__auto__, ps__$1) {
                  return function(p1__22406_SHARP_) {
                    return cljs.core.some(p1__22406_SHARP_, args);
                  };
                }(or__3981__auto__, ps__$1), ps__$1);
              }
            };
            var G__22791 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__22792__i = 0, G__22792__a = new Array(arguments.length - 3);
                while (G__22792__i < G__22792__a.length) {
                  G__22792__a[G__22792__i] = arguments[G__22792__i + 3];
                  ++G__22792__i;
                }
                args = new cljs.core.IndexedSeq(G__22792__a, 0);
              }
              return G__22791__delegate.call(this, x, y, z, args);
            };
            G__22791.cljs$lang$maxFixedArity = 3;
            G__22791.cljs$lang$applyTo = function(arglist__22793) {
              var x = cljs.core.first(arglist__22793);
              arglist__22793 = cljs.core.next(arglist__22793);
              var y = cljs.core.first(arglist__22793);
              arglist__22793 = cljs.core.next(arglist__22793);
              var z = cljs.core.first(arglist__22793);
              var args = cljs.core.rest(arglist__22793);
              return G__22791__delegate(x, y, z, args);
            };
            G__22791.cljs$core$IFn$_invoke$arity$variadic = G__22791__delegate;
            return G__22791;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                var G__22794 = null;
                if (arguments.length > 3) {
                  var G__22795__i = 0, G__22795__a = new Array(arguments.length - 3);
                  while (G__22795__i < G__22795__a.length) {
                    G__22795__a[G__22795__i] = arguments[G__22795__i + 3];
                    ++G__22795__i;
                  }
                  G__22794 = new cljs.core.IndexedSeq(G__22795__a, 0);
                }
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__22794);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__22790 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__22796__i = 0, G__22796__a = new Array(arguments.length - 3);
        while (G__22796__i < G__22796__a.length) {
          G__22796__a[G__22796__i] = arguments[G__22796__i + 3];
          ++G__22796__i;
        }
        ps = new cljs.core.IndexedSeq(G__22796__a, 0);
      }
      return G__22790__delegate.call(this, p1, p2, p3, ps);
    };
    G__22790.cljs$lang$maxFixedArity = 3;
    G__22790.cljs$lang$applyTo = function(arglist__22797) {
      var p1 = cljs.core.first(arglist__22797);
      arglist__22797 = cljs.core.next(arglist__22797);
      var p2 = cljs.core.first(arglist__22797);
      arglist__22797 = cljs.core.next(arglist__22797);
      var p3 = cljs.core.first(arglist__22797);
      var ps = cljs.core.rest(arglist__22797);
      return G__22790__delegate(p1, p2, p3, ps);
    };
    G__22790.cljs$core$IFn$_invoke$arity$variadic = G__22790__delegate;
    return G__22790;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        var G__22798 = null;
        if (arguments.length > 3) {
          var G__22799__i = 0, G__22799__a = new Array(arguments.length - 3);
          while (G__22799__i < G__22799__a.length) {
            G__22799__a[G__22799__i] = arguments[G__22799__i + 3];
            ++G__22799__i;
          }
          G__22798 = new cljs.core.IndexedSeq(G__22799__a, 0);
        }
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__22798);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__22854 = null;
        var G__22854__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__22854__1 = function(result) {
          var G__22840 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22840) : rf.call(null, G__22840);
        };
        var G__22854__2 = function(result, input) {
          var G__22841 = result;
          var G__22842 = function() {
            var G__22843 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22843) : f.call(null, G__22843);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22841, G__22842) : rf.call(null, G__22841, G__22842);
        };
        var G__22854__3 = function() {
          var G__22855__delegate = function(result, input, inputs) {
            var G__22844 = result;
            var G__22845 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22844, G__22845) : rf.call(null, G__22844, G__22845);
          };
          var G__22855 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__22856__i = 0, G__22856__a = new Array(arguments.length - 2);
              while (G__22856__i < G__22856__a.length) {
                G__22856__a[G__22856__i] = arguments[G__22856__i + 2];
                ++G__22856__i;
              }
              inputs = new cljs.core.IndexedSeq(G__22856__a, 0);
            }
            return G__22855__delegate.call(this, result, input, inputs);
          };
          G__22855.cljs$lang$maxFixedArity = 2;
          G__22855.cljs$lang$applyTo = function(arglist__22857) {
            var result = cljs.core.first(arglist__22857);
            arglist__22857 = cljs.core.next(arglist__22857);
            var input = cljs.core.first(arglist__22857);
            var inputs = cljs.core.rest(arglist__22857);
            return G__22855__delegate(result, input, inputs);
          };
          G__22855.cljs$core$IFn$_invoke$arity$variadic = G__22855__delegate;
          return G__22855;
        }();
        G__22854 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__22854__0.call(this);
            case 1:
              return G__22854__1.call(this, result);
            case 2:
              return G__22854__2.call(this, result, input);
            default:
              var G__22858 = null;
              if (arguments.length > 2) {
                var G__22859__i = 0, G__22859__a = new Array(arguments.length - 2);
                while (G__22859__i < G__22859__a.length) {
                  G__22859__a[G__22859__i] = arguments[G__22859__i + 2];
                  ++G__22859__i;
                }
                G__22858 = new cljs.core.IndexedSeq(G__22859__a, 0);
              }
              return G__22854__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__22858);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__22854.cljs$lang$maxFixedArity = 2;
        G__22854.cljs$lang$applyTo = G__22854__3.cljs$lang$applyTo;
        G__22854.cljs$core$IFn$_invoke$arity$0 = G__22854__0;
        G__22854.cljs$core$IFn$_invoke$arity$1 = G__22854__1;
        G__22854.cljs$core$IFn$_invoke$arity$2 = G__22854__2;
        G__22854.cljs$core$IFn$_invoke$arity$variadic = G__22854__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__22854;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___22860 = size;
          var i_22861 = 0;
          while (true) {
            if (i_22861 < n__4868__auto___22860) {
              cljs.core.chunk_append(b, function() {
                var G__22846 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_22861);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22846) : f.call(null, G__22846);
              }());
              var G__22862 = i_22861 + 1;
              i_22861 = G__22862;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__22847 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22847) : f.call(null, G__22847);
          }(), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__22848 = cljs.core.first(s1);
          var G__22849 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__22848, G__22849) : f.call(null, G__22848, G__22849);
        }(), map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__22850 = cljs.core.first(s1);
          var G__22851 = cljs.core.first(s2);
          var G__22852 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__22850, G__22851, G__22852) : f.call(null, G__22850, G__22851, G__22852);
        }(), map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__22863__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), step(map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__22800_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__22800_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__22863 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__22864__i = 0, G__22864__a = new Array(arguments.length - 4);
        while (G__22864__i < G__22864__a.length) {
          G__22864__a[G__22864__i] = arguments[G__22864__i + 4];
          ++G__22864__i;
        }
        colls = new cljs.core.IndexedSeq(G__22864__a, 0);
      }
      return G__22863__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__22863.cljs$lang$maxFixedArity = 4;
    G__22863.cljs$lang$applyTo = function(arglist__22865) {
      var f = cljs.core.first(arglist__22865);
      arglist__22865 = cljs.core.next(arglist__22865);
      var c1 = cljs.core.first(arglist__22865);
      arglist__22865 = cljs.core.next(arglist__22865);
      var c2 = cljs.core.first(arglist__22865);
      arglist__22865 = cljs.core.next(arglist__22865);
      var c3 = cljs.core.first(arglist__22865);
      var colls = cljs.core.rest(arglist__22865);
      return G__22863__delegate(f, c1, c2, c3, colls);
    };
    G__22863.cljs$core$IFn$_invoke$arity$variadic = G__22863__delegate;
    return G__22863;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        var G__22866 = null;
        if (arguments.length > 4) {
          var G__22867__i = 0, G__22867__a = new Array(arguments.length - 4);
          while (G__22867__i < G__22867__a.length) {
            G__22867__a[G__22867__i] = arguments[G__22867__i + 4];
            ++G__22867__i;
          }
          G__22866 = new cljs.core.IndexedSeq(G__22867__a, 0);
        }
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__22866);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__22876 = null;
          var G__22876__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__22876__1 = function(result) {
            var G__22873 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22873) : rf.call(null, G__22873);
          };
          var G__22876__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__22874 = result;
              var G__22875 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22874, G__22875) : rf.call(null, G__22874, G__22875);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__22876 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__22876__0.call(this);
              case 1:
                return G__22876__1.call(this, result);
              case 2:
                return G__22876__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__22876.cljs$core$IFn$_invoke$arity$0 = G__22876__0;
          G__22876.cljs$core$IFn$_invoke$arity$1 = G__22876__1;
          G__22876.cljs$core$IFn$_invoke$arity$2 = G__22876__2;
          return G__22876;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__22883 = null;
          var G__22883__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__22883__1 = function(result) {
            var G__22880 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22880) : rf.call(null, G__22880);
          };
          var G__22883__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__22881 = result;
              var G__22882 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22881, G__22882) : rf.call(null, G__22881, G__22882);
            }
          };
          G__22883 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__22883__0.call(this);
              case 1:
                return G__22883__1.call(this, result);
              case 2:
                return G__22883__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__22883.cljs$core$IFn$_invoke$arity$0 = G__22883__0;
          G__22883.cljs$core$IFn$_invoke$arity$1 = G__22883__1;
          G__22883.cljs$core$IFn$_invoke$arity$2 = G__22883__2;
          return G__22883;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__22884 = n__$1 - 1;
          var G__22885 = cljs.core.rest(s);
          n__$1 = G__22884;
          coll__$1 = G__22885;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__22888 = cljs.core.next(s);
      var G__22889 = cljs.core.next(lead);
      s = G__22888;
      lead = G__22889;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__22902 = null;
          var G__22902__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__22902__1 = function(result) {
            var G__22896 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22896) : rf.call(null, G__22896);
          };
          var G__22902__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__3969__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3969__auto__)) {
                var G__22897 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__22897) : pred.call(null, G__22897);
              } else {
                return and__3969__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__22898 = result;
              var G__22899 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22898, G__22899) : rf.call(null, G__22898, G__22899);
            }
          };
          G__22902 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__22902__0.call(this);
              case 1:
                return G__22902__1.call(this, result);
              case 2:
                return G__22902__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__22902.cljs$core$IFn$_invoke$arity$0 = G__22902__0;
          G__22902.cljs$core$IFn$_invoke$arity$1 = G__22902__1;
          G__22902.cljs$core$IFn$_invoke$arity$2 = G__22902__2;
          return G__22902;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__3969__auto__ = s;
          if (and__3969__auto__) {
            var G__22901 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__22901) : pred__$1.call(null, G__22901);
          } else {
            return and__3969__auto__;
          }
        }())) {
          var G__22903 = pred__$1;
          var G__22904 = cljs.core.rest(s);
          pred__$1 = G__22903;
          coll__$1 = G__22904;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return iterate(f, function() {
      var G__22913 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22913) : f.call(null, G__22913);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__22916__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__22916 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__22917__i = 0, G__22917__a = new Array(arguments.length - 2);
        while (G__22917__i < G__22917__a.length) {
          G__22917__a[G__22917__i] = arguments[G__22917__i + 2];
          ++G__22917__i;
        }
        colls = new cljs.core.IndexedSeq(G__22917__a, 0);
      }
      return G__22916__delegate.call(this, c1, c2, colls);
    };
    G__22916.cljs$lang$maxFixedArity = 2;
    G__22916.cljs$lang$applyTo = function(arglist__22918) {
      var c1 = cljs.core.first(arglist__22918);
      arglist__22918 = cljs.core.next(arglist__22918);
      var c2 = cljs.core.first(arglist__22918);
      var colls = cljs.core.rest(arglist__22918);
      return G__22916__delegate(c1, c2, colls);
    };
    G__22916.cljs$core$IFn$_invoke$arity$variadic = G__22916__delegate;
    return G__22916;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        var G__22919 = null;
        if (arguments.length > 2) {
          var G__22920__i = 0, G__22920__a = new Array(arguments.length - 2);
          while (G__22920__i < G__22920__a.length) {
            G__22920__a[G__22920__i] = arguments[G__22920__i + 2];
            ++G__22920__i;
          }
          G__22919 = new cljs.core.IndexedSeq(G__22920__a, 0);
        }
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__22919);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function() {
  var interpose = null;
  var interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__22935 = null;
          var G__22935__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__22935__1 = function(result) {
            var G__22928 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22928) : rf.call(null, G__22928);
          };
          var G__22935__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__22929 = result;
                var G__22930 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22929, G__22930) : rf.call(null, G__22929, G__22930);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__22931 = sepr;
                var G__22932 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22931, G__22932) : rf.call(null, G__22931, G__22932);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__22933 = result;
              var G__22934 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22933, G__22934) : rf.call(null, G__22933, G__22934);
            }
          };
          G__22935 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__22935__0.call(this);
              case 1:
                return G__22935__1.call(this, result);
              case 2:
                return G__22935__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__22935.cljs$core$IFn$_invoke$arity$0 = G__22935__0;
          G__22935.cljs$core$IFn$_invoke$arity$1 = G__22935__1;
          G__22935.cljs$core$IFn$_invoke$arity$2 = G__22935__2;
          return G__22935;
        }();
      }(started);
    };
  };
  var interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return interpose__1.call(this, sep);
      case 2:
        return interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interpose.cljs$core$IFn$_invoke$arity$1 = interpose__1;
  interpose.cljs$core$IFn$_invoke$arity$2 = interpose__2;
  return interpose;
}();
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__22944__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__22944 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__22945__i = 0, G__22945__a = new Array(arguments.length - 1);
        while (G__22945__i < G__22945__a.length) {
          G__22945__a[G__22945__i] = arguments[G__22945__i + 1];
          ++G__22945__i;
        }
        colls = new cljs.core.IndexedSeq(G__22945__a, 0);
      }
      return G__22944__delegate.call(this, f, colls);
    };
    G__22944.cljs$lang$maxFixedArity = 1;
    G__22944.cljs$lang$applyTo = function(arglist__22946) {
      var f = cljs.core.first(arglist__22946);
      var colls = cljs.core.rest(arglist__22946);
      return G__22944__delegate(f, colls);
    };
    G__22944.cljs$core$IFn$_invoke$arity$variadic = G__22944__delegate;
    return G__22944;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        var G__22947 = null;
        if (arguments.length > 1) {
          var G__22948__i = 0, G__22948__a = new Array(arguments.length - 1);
          while (G__22948__i < G__22948__a.length) {
            G__22948__a[G__22948__i] = arguments[G__22948__i + 1];
            ++G__22948__i;
          }
          G__22947 = new cljs.core.IndexedSeq(G__22948__a, 0);
        }
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__22947);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__22967 = null;
        var G__22967__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__22967__1 = function(result) {
          var G__22961 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__22961) : rf.call(null, G__22961);
        };
        var G__22967__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__22962 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__22962) : pred.call(null, G__22962);
          }())) {
            var G__22963 = result;
            var G__22964 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__22963, G__22964) : rf.call(null, G__22963, G__22964);
          } else {
            return result;
          }
        };
        G__22967 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__22967__0.call(this);
            case 1:
              return G__22967__1.call(this, result);
            case 2:
              return G__22967__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__22967.cljs$core$IFn$_invoke$arity$0 = G__22967__0;
        G__22967.cljs$core$IFn$_invoke$arity$1 = G__22967__1;
        G__22967.cljs$core$IFn$_invoke$arity$2 = G__22967__2;
        return G__22967;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___22968 = size;
          var i_22969 = 0;
          while (true) {
            if (i_22969 < n__4868__auto___22968) {
              if (cljs.core.truth_(function() {
                var G__22965 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_22969);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__22965) : pred.call(null, G__22965);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_22969));
              } else {
              }
              var G__22970 = i_22969 + 1;
              i_22969 = G__22970;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__22966 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__22966) : pred.call(null, G__22966);
          }())) {
            return cljs.core.cons(f, filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__22977 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__22977) : branch_QMARK_.call(null, G__22977);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(walk, cljs.core.array_seq([function() {
        var G__22978 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__22978) : children.call(null, G__22978);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__22979_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__22979_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__22982 = to;
        if (G__22982) {
          var bit__4655__auto__ = G__22982.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4655__auto__ || G__22982.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__22983 = to;
      if (G__22983) {
        var bit__4655__auto__ = G__22983.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4655__auto__ || G__22983.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__22985 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__22985) : f.call(null, G__22985);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__22986__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__22986 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__22987__i = 0, G__22987__a = new Array(arguments.length - 4);
        while (G__22987__i < G__22987__a.length) {
          G__22987__a[G__22987__i] = arguments[G__22987__i + 4];
          ++G__22987__i;
        }
        colls = new cljs.core.IndexedSeq(G__22987__a, 0);
      }
      return G__22986__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__22986.cljs$lang$maxFixedArity = 4;
    G__22986.cljs$lang$applyTo = function(arglist__22988) {
      var f = cljs.core.first(arglist__22988);
      arglist__22988 = cljs.core.next(arglist__22988);
      var c1 = cljs.core.first(arglist__22988);
      arglist__22988 = cljs.core.next(arglist__22988);
      var c2 = cljs.core.first(arglist__22988);
      arglist__22988 = cljs.core.next(arglist__22988);
      var c3 = cljs.core.first(arglist__22988);
      var colls = cljs.core.rest(arglist__22988);
      return G__22986__delegate(f, c1, c2, c3, colls);
    };
    G__22986.cljs$core$IFn$_invoke$arity$variadic = G__22986__delegate;
    return G__22986;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__22989 = null;
        if (arguments.length > 4) {
          var G__22990__i = 0, G__22990__a = new Array(arguments.length - 4);
          while (G__22990__i < G__22990__a.length) {
            G__22990__a[G__22990__i] = arguments[G__22990__i + 4];
            ++G__22990__i;
          }
          G__22989 = new cljs.core.IndexedSeq(G__22990__a, 0);
        }
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__22989);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__22992 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__22992) : pred.call(null, G__22992);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__23007 = m__$1;
          if (G__23007) {
            var bit__4662__auto__ = G__23007.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4662__auto__ || G__23007.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__23007.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__23007);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__23007);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__23008 = sentinel;
            var G__23009 = m__$2;
            var G__23010 = cljs.core.next(ks__$1);
            sentinel = G__23008;
            m__$1 = G__23009;
            ks__$1 = G__23010;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__23011, v) {
  var vec__23016 = p__23011;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23016, 0, null);
  var ks = cljs.core.nthnext(vec__23016, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__23017, f) {
    var vec__23055 = p__23017;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23055, 0, null);
    var ks = cljs.core.nthnext(vec__23055, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__23056 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23056) : f.call(null, G__23056);
      }());
    }
  };
  var update_in__4 = function(m, p__23018, f, a) {
    var vec__23057 = p__23018;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23057, 0, null);
    var ks = cljs.core.nthnext(vec__23057, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__23058 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__23059 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23058, G__23059) : f.call(null, G__23058, G__23059);
      }());
    }
  };
  var update_in__5 = function(m, p__23019, f, a, b) {
    var vec__23060 = p__23019;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23060, 0, null);
    var ks = cljs.core.nthnext(vec__23060, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__23061 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__23062 = a;
        var G__23063 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23061, G__23062, G__23063) : f.call(null, G__23061, G__23062, G__23063);
      }());
    }
  };
  var update_in__6 = function(m, p__23020, f, a, b, c) {
    var vec__23064 = p__23020;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23064, 0, null);
    var ks = cljs.core.nthnext(vec__23064, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__23065 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__23066 = a;
        var G__23067 = b;
        var G__23068 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__23065, G__23066, G__23067, G__23068) : f.call(null, G__23065, G__23066, G__23067, G__23068);
      }());
    }
  };
  var update_in__7 = function() {
    var G__23070__delegate = function(m, p__23021, f, a, b, c, args) {
      var vec__23069 = p__23021;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23069, 0, null);
      var ks = cljs.core.nthnext(vec__23069, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__23070 = function(m, p__23021, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__23071__i = 0, G__23071__a = new Array(arguments.length - 6);
        while (G__23071__i < G__23071__a.length) {
          G__23071__a[G__23071__i] = arguments[G__23071__i + 6];
          ++G__23071__i;
        }
        args = new cljs.core.IndexedSeq(G__23071__a, 0);
      }
      return G__23070__delegate.call(this, m, p__23021, f, a, b, c, args);
    };
    G__23070.cljs$lang$maxFixedArity = 6;
    G__23070.cljs$lang$applyTo = function(arglist__23072) {
      var m = cljs.core.first(arglist__23072);
      arglist__23072 = cljs.core.next(arglist__23072);
      var p__23021 = cljs.core.first(arglist__23072);
      arglist__23072 = cljs.core.next(arglist__23072);
      var f = cljs.core.first(arglist__23072);
      arglist__23072 = cljs.core.next(arglist__23072);
      var a = cljs.core.first(arglist__23072);
      arglist__23072 = cljs.core.next(arglist__23072);
      var b = cljs.core.first(arglist__23072);
      arglist__23072 = cljs.core.next(arglist__23072);
      var c = cljs.core.first(arglist__23072);
      var args = cljs.core.rest(arglist__23072);
      return G__23070__delegate(m, p__23021, f, a, b, c, args);
    };
    G__23070.cljs$core$IFn$_invoke$arity$variadic = G__23070__delegate;
    return G__23070;
  }();
  update_in = function(m, p__23021, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__23021, f);
      case 4:
        return update_in__4.call(this, m, p__23021, f, a);
      case 5:
        return update_in__5.call(this, m, p__23021, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__23021, f, a, b, c);
      default:
        var G__23073 = null;
        if (arguments.length > 6) {
          var G__23074__i = 0, G__23074__a = new Array(arguments.length - 6);
          while (G__23074__i < G__23074__a.length) {
            G__23074__a[G__23074__i] = arguments[G__23074__i + 6];
            ++G__23074__i;
          }
          G__23073 = new cljs.core.IndexedSeq(G__23074__a, 0);
        }
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__23021, f, a, b, c, G__23073);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__23085 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23085) : f.call(null, G__23085);
    }());
  };
  var update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__23086 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__23087 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23086, G__23087) : f.call(null, G__23086, G__23087);
    }());
  };
  var update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__23088 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__23089 = x;
      var G__23090 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23088, G__23089, G__23090) : f.call(null, G__23088, G__23089, G__23090);
    }());
  };
  var update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__23091 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__23092 = x;
      var G__23093 = y;
      var G__23094 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__23091, G__23092, G__23093, G__23094) : f.call(null, G__23091, G__23092, G__23093, G__23094);
    }());
  };
  var update__7 = function() {
    var G__23095__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__23095 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__23096__i = 0, G__23096__a = new Array(arguments.length - 6);
        while (G__23096__i < G__23096__a.length) {
          G__23096__a[G__23096__i] = arguments[G__23096__i + 6];
          ++G__23096__i;
        }
        more = new cljs.core.IndexedSeq(G__23096__a, 0);
      }
      return G__23095__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__23095.cljs$lang$maxFixedArity = 6;
    G__23095.cljs$lang$applyTo = function(arglist__23097) {
      var m = cljs.core.first(arglist__23097);
      arglist__23097 = cljs.core.next(arglist__23097);
      var k = cljs.core.first(arglist__23097);
      arglist__23097 = cljs.core.next(arglist__23097);
      var f = cljs.core.first(arglist__23097);
      arglist__23097 = cljs.core.next(arglist__23097);
      var x = cljs.core.first(arglist__23097);
      arglist__23097 = cljs.core.next(arglist__23097);
      var y = cljs.core.first(arglist__23097);
      arglist__23097 = cljs.core.next(arglist__23097);
      var z = cljs.core.first(arglist__23097);
      var more = cljs.core.rest(arglist__23097);
      return G__23095__delegate(m, k, f, x, y, z, more);
    };
    G__23095.cljs$core$IFn$_invoke$arity$variadic = G__23095__delegate;
    return G__23095;
  }();
  update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x);
      case 5:
        return update__5.call(this, m, k, f, x, y);
      case 6:
        return update__6.call(this, m, k, f, x, y, z);
      default:
        var G__23098 = null;
        if (arguments.length > 6) {
          var G__23099__i = 0, G__23099__a = new Array(arguments.length - 6);
          while (G__23099__i < G__23099__a.length) {
            G__23099__a[G__23099__i] = arguments[G__23099__i + 6];
            ++G__23099__i;
          }
          G__23098 = new cljs.core.IndexedSeq(G__23099__a, 0);
        }
        return update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__23098);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 6;
  update.cljs$lang$applyTo = update__7.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$6 = update__6;
  update.cljs$core$IFn$_invoke$arity$variadic = update__7.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__23100 = ll - 5;
      var G__23101 = r;
      ll = G__23100;
      ret = G__23101;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__23106 = cljs.core.pv_aget(node, 0);
      var G__23107 = level - 5;
      node = G__23106;
      level = G__23107;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__23108 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__23109 = level - 5;
        node = G__23108;
        level = G__23109;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__23119 = init__$2;
              var G__23120 = j + i;
              var G__23121 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23119, G__23120, G__23121) : f.call(null, G__23119, G__23120, G__23121);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__23132 = j + 1;
              var G__23133 = init__$3;
              j = G__23132;
              init__$2 = G__23133;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__23122 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23122) : cljs.core.deref.call(null, G__23122);
      } else {
        var G__23134 = i + len;
        var G__23135 = init__$2;
        i = G__23134;
        init__$1 = G__23135;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__23123 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__23123) : cljs.core.tv_editable_root.call(null, G__23123);
  }(), function() {
    var G__23124 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__23124) : cljs.core.tv_editable_tail.call(null, G__23124);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__23125 = init__$2;
              var G__23126 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23125, G__23126) : f.call(null, G__23125, G__23126);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__23136 = j + 1;
              var G__23137 = init__$3;
              j = G__23136;
              init__$2 = G__23137;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__23127 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23127) : cljs.core.deref.call(null, G__23127);
      } else {
        var G__23138 = i + len;
        var G__23139 = init__$2;
        i = G__23138;
        init__$1 = G__23139;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__23128 = coll__$1;
      var G__23129 = cljs.core.first_array_for_longvec(coll__$1);
      var G__23130 = 0;
      var G__23131 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__23128, G__23129, G__23130, G__23131) : cljs.core.chunked_seq.call(null, G__23128, G__23129, G__23130, G__23131);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4868__auto___23140 = len;
    var i_23141 = 0;
    while (true) {
      if (i_23141 < n__4868__auto___23140) {
        new_tail[i_23141] = self__.tail[i_23141];
        var G__23142 = i_23141 + 1;
        i_23141 = G__23142;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__23143 = null;
  var G__23143__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__23143__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__23143 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23143__2.call(this, self__, k);
      case 3:
        return G__23143__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23143.cljs$core$IFn$_invoke$arity$2 = G__23143__2;
  G__23143.cljs$core$IFn$_invoke$arity$3 = G__23143__3;
  return G__23143;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args23118) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23118)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__23144 = i + 1;
        var G__23145 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__23144;
        out = G__23145;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.vec = function vec(coll) {
  if (coll instanceof Array) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__23146__i = 0, G__23146__a = new Array(arguments.length - 0);
      while (G__23146__i < G__23146__a.length) {
        G__23146__a[G__23146__i] = arguments[G__23146__i + 0];
        ++G__23146__i;
      }
      args = new cljs.core.IndexedSeq(G__23146__a, 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__23147) {
    var args = cljs.core.seq(arglist__23147);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__23148 = self__.vec;
      var G__23149 = self__.node;
      var G__23150 = self__.i;
      var G__23151 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__23148, G__23149, G__23150, G__23151) : cljs.core.chunked_seq.call(null, G__23148, G__23149, G__23150, G__23151);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__23152 = self__.vec;
    var G__23153 = self__.i + self__.off;
    var G__23154 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__23152, G__23153, G__23154) : cljs.core.subvec.call(null, G__23152, G__23153, G__23154);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__23155 = self__.vec;
    var G__23156 = self__.i + self__.off;
    var G__23157 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__23155, G__23156, G__23157) : cljs.core.subvec.call(null, G__23155, G__23156, G__23157);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__23158 = self__.vec;
      var G__23159 = self__.node;
      var G__23160 = self__.i;
      var G__23161 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__23158, G__23159, G__23160, G__23161) : cljs.core.chunked_seq.call(null, G__23158, G__23159, G__23160, G__23161);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__23162 = self__.vec;
    var G__23163 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__23164 = end;
    var G__23165 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__23162, G__23163, G__23164, G__23165) : cljs.core.chunked_seq.call(null, G__23162, G__23163, G__23164, G__23165);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__23166 = self__.vec;
  var G__23167 = self__.node;
  var G__23168 = self__.i;
  var G__23169 = self__.off;
  var G__23170 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__23166, G__23167, G__23168, G__23169, G__23170) : cljs.core.chunked_seq.call(null, G__23166, G__23167, G__23168, G__23169, G__23170);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__23171 = self__.vec;
    var G__23172 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__23173 = end;
    var G__23174 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__23171, G__23172, G__23173, G__23174) : cljs.core.chunked_seq.call(null, G__23171, G__23172, G__23173, G__23174);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__23176 = self__.meta;
  var G__23177 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__23178 = self__.start;
  var G__23179 = function() {
    var x__4298__auto__ = self__.end;
    var y__4299__auto__ = v_pos + 1;
    return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
  }();
  var G__23180 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__23176, G__23177, G__23178, G__23179, G__23180) : cljs.core.build_subvec.call(null, G__23176, G__23177, G__23178, G__23179, G__23180);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__23181 = self__.meta;
    var G__23182 = self__.v;
    var G__23183 = self__.start;
    var G__23184 = self__.end - 1;
    var G__23185 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__23181, G__23182, G__23183, G__23184, G__23185) : cljs.core.build_subvec.call(null, G__23181, G__23182, G__23183, G__23184, G__23185);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__23187 = meta__$1;
  var G__23188 = self__.v;
  var G__23189 = self__.start;
  var G__23190 = self__.end;
  var G__23191 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__23187, G__23188, G__23189, G__23190, G__23191) : cljs.core.build_subvec.call(null, G__23187, G__23188, G__23189, G__23190, G__23191);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__23192 = self__.meta;
  var G__23193 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__23194 = self__.start;
  var G__23195 = self__.end + 1;
  var G__23196 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__23192, G__23193, G__23194, G__23195, G__23196) : cljs.core.build_subvec.call(null, G__23192, G__23193, G__23194, G__23195, G__23196);
};
cljs.core.Subvec.prototype.call = function() {
  var G__23197 = null;
  var G__23197__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__23197__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__23197 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23197__2.call(this, self__, k);
      case 3:
        return G__23197__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23197.cljs$core$IFn$_invoke$arity$2 = G__23197__2;
  G__23197.cljs$core$IFn$_invoke$arity$3 = G__23197__3;
  return G__23197;
}();
cljs.core.Subvec.prototype.apply = function(self__, args23175) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23175)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__23198 = meta;
      var G__23199 = v.v;
      var G__23200 = v.start + start;
      var G__23201 = v.start + end;
      var G__23202 = __hash;
      meta = G__23198;
      v = G__23199;
      start = G__23200;
      end = G__23201;
      __hash = G__23202;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj23209 = {};
    return obj23209;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__23217 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__23218 = level - 5;
        node = G__23217;
        level = G__23218;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__23222 = null;
  var G__23222__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23222__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23222 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23222__2.call(this, self__, k);
      case 3:
        return G__23222__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23222.cljs$core$IFn$_invoke$arity$2 = G__23222__2;
  G__23222.cljs$core$IFn$_invoke$arity$3 = G__23222__3;
  return G__23222;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args23219) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23219)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__3981__auto__ = self__.front;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__3981__auto__ = self__.rear;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__23223 = i + incr;
        i = G__23223;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__23224 = i + 1;
      var G__23225 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__23224;
      out = G__23225;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj23229 = {};
    return obj23229;
  }();
  var l = ks.length;
  var i_23230 = 0;
  while (true) {
    if (i_23230 < l) {
      var k_23231 = ks[i_23230];
      new_obj[k_23231] = obj[k_23231];
      var G__23232 = i_23230 + 1;
      i_23230 = G__23232;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__23236 = k;
      return goog.isString(G__23236);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__23237 = init__$1;
        var G__23238 = k;
        var G__23239 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23237, G__23238, G__23239) : f.call(null, G__23237, G__23238, G__23239);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__23240 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23240) : cljs.core.deref.call(null, G__23240);
      } else {
        var G__23246 = cljs.core.rest(keys__$1);
        var G__23247 = init__$2;
        keys__$1 = G__23246;
        init__$1 = G__23247;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__23242 = k;
      return goog.isString(G__23242);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__23243 = k;
    return goog.isString(G__23243);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__23245 = k;
      return goog.isString(G__23245);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__23233_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__23233_SHARP_, self__.strobj[p1__23233_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__23248 = null;
  var G__23248__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23248__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23248 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23248__2.call(this, self__, k);
      case 3:
        return G__23248__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23248.cljs$core$IFn$_invoke$arity$2 = G__23248__2;
  G__23248.cljs$core$IFn$_invoke$arity$3 = G__23248__3;
  return G__23248;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args23234) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23234)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj23250 = {};
  return obj23250;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__23251 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23251, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23251, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__23252 = i + 2;
        i = G__23252;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__23253 = i + 2;
        i = G__23253;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__23254 = i + 2;
        i = G__23254;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__23255 = i + 2;
        i = G__23255;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__23256 = i + 2;
        i = G__23256;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = function() {
        var G__23260 = k;
        return goog.isString(G__23260);
      }();
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_23261 = 0;
  while (true) {
    if (i_23261 < l) {
      narr[i_23261] = arr[i_23261];
      var G__23262 = i_23261 + 1;
      i_23261 = G__23262;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__23264 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__23264) : cljs.core.keys.call(null, G__23264);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__23265 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__23265) : cljs.core.vals.call(null, G__23265);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__23266 = cljs.core.seq(coll);
  var chunk__23267 = null;
  var count__23268 = 0;
  var i__23269 = 0;
  while (true) {
    if (i__23269 < count__23268) {
      var vec__23270 = chunk__23267.cljs$core$IIndexed$_nth$arity$2(null, i__23269);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23270, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23270, 1, null);
      var G__23271_23284 = v;
      var G__23272_23285 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23271_23284, G__23272_23285) : f.call(null, G__23271_23284, G__23272_23285);
      var G__23286 = seq__23266;
      var G__23287 = chunk__23267;
      var G__23288 = count__23268;
      var G__23289 = i__23269 + 1;
      seq__23266 = G__23286;
      chunk__23267 = G__23287;
      count__23268 = G__23288;
      i__23269 = G__23289;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__23266);
      if (temp__4126__auto__) {
        var seq__23266__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__23266__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__23266__$1);
          var G__23290 = cljs.core.chunk_rest(seq__23266__$1);
          var G__23291 = c__4768__auto__;
          var G__23292 = cljs.core.count(c__4768__auto__);
          var G__23293 = 0;
          seq__23266 = G__23290;
          chunk__23267 = G__23291;
          count__23268 = G__23292;
          i__23269 = G__23293;
          continue;
        } else {
          var vec__23273 = cljs.core.first(seq__23266__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23273, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23273, 1, null);
          var G__23274_23294 = v;
          var G__23275_23295 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23274_23294, G__23275_23295) : f.call(null, G__23274_23294, G__23275_23295);
          var G__23296 = cljs.core.next(seq__23266__$1);
          var G__23297 = null;
          var G__23298 = 0;
          var G__23299 = 0;
          seq__23266 = G__23296;
          chunk__23267 = G__23297;
          count__23268 = G__23298;
          i__23269 = G__23299;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__23276 = init__$1;
        var G__23277 = self__.arr[i];
        var G__23278 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23276, G__23277, G__23278) : f.call(null, G__23276, G__23277, G__23278);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__23279 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23279) : cljs.core.deref.call(null, G__23279);
      } else {
        var G__23300 = i + 2;
        var G__23301 = init__$2;
        i = G__23300;
        init__$1 = G__23301;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__23280 = other;
    if (G__23280) {
      var bit__4655__auto__ = G__23280.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4655__auto__ || G__23280.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__23302 = i + 2;
              i = G__23302;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj23282 = {};
    return obj23282;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__23303 = s + 2;
            var G__23304 = d;
            s = G__23303;
            d = G__23304;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__23305 = s + 2;
            var G__23306 = d + 2;
            s = G__23305;
            d = G__23306;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__23283 = cljs.core.aclone(self__.arr);
        G__23283[idx + 1] = v;
        return G__23283;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__23307 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__23308 = cljs.core.next(es);
          ret = G__23307;
          es = G__23308;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__23309 = null;
  var G__23309__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23309__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23309 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23309__2.call(this, self__, k);
      case 3:
        return G__23309__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23309.cljs$core$IFn$_invoke$arity$2 = G__23309__2;
  G__23309.cljs$core$IFn$_invoke$arity$3 = G__23309__3;
  return G__23309;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args23263) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23263)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__23310 = i + 2;
        var G__23311 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__23310;
        ret = G__23311;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__23312_23320 = self__.arr;
      G__23312_23320.pop();
      G__23312_23320.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__23313 = self__.len;
          var G__23314 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__23313, G__23314) : cljs.core.array__GT_transient_hash_map.call(null, G__23313, G__23314);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__23315 = o;
      if (G__23315) {
        var bit__4662__auto__ = G__23315.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4662__auto__ || G__23315.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__23315.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__23315);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__23315);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__23316 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__23316) : cljs.core.key.call(null, G__23316);
      }(), function() {
        var G__23317 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__23317) : cljs.core.val.call(null, G__23317);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__23321 = cljs.core.next(es);
          var G__23322 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__23318 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__23318) : cljs.core.key.call(null, G__23318);
          }(), function() {
            var G__23319 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__23319) : cljs.core.val.call(null, G__23319);
          }());
          es = G__23321;
          tcoll__$2 = G__23322;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__23323 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__23324 = i + 2;
      out = G__23323;
      i = G__23324;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__23327 = cljs.core.aclone(arr);
    G__23327[i] = a;
    return G__23327;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__23328 = cljs.core.aclone(arr);
    G__23328[i] = a;
    G__23328[j] = b;
    return G__23328;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__23333 = init__$1;
          var G__23334 = k;
          var G__23335 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23333, G__23334, G__23335) : f.call(null, G__23333, G__23334, G__23335);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__23336 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23336) : cljs.core.deref.call(null, G__23336);
      } else {
        var G__23337 = i + 2;
        var G__23338 = init__$2;
        i = G__23337;
        init__$1 = G__23338;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__23339 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__23339) : cljs.core.create_inode_seq.call(null, G__23339);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_23353 = 0;
        var j_23354 = 0;
        while (true) {
          if (i_23353 < 32) {
            if ((self__.bitmap >>> i_23353 & 1) === 0) {
              var G__23355 = i_23353 + 1;
              var G__23356 = j_23354;
              i_23353 = G__23355;
              j_23354 = G__23356;
              continue;
            } else {
              nodes[i_23353] = !(self__.arr[j_23354] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_23354]), self__.arr[j_23354], self__.arr[j_23354 + 1], added_leaf_QMARK_) : self__.arr[j_23354 + 1];
              var G__23357 = i_23353 + 1;
              var G__23358 = j_23354 + 2;
              i_23353 = G__23357;
              j_23354 = G__23358;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__23340 = edit__$1;
          var G__23341 = shift + 5;
          var G__23342 = key_or_nil;
          var G__23343 = val_or_node;
          var G__23344 = hash;
          var G__23345 = key;
          var G__23346 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__23340, G__23341, G__23342, G__23343, G__23344, G__23345, G__23346) : cljs.core.create_node.call(null, G__23340, G__23341, G__23342, G__23343, G__23344, G__23345, G__23346);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_23359 = 0;
      var j_23360 = 0;
      while (true) {
        if (i_23359 < 32) {
          if ((self__.bitmap >>> i_23359 & 1) === 0) {
            var G__23361 = i_23359 + 1;
            var G__23362 = j_23360;
            i_23359 = G__23361;
            j_23360 = G__23362;
            continue;
          } else {
            nodes[i_23359] = !(self__.arr[j_23360] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_23360]), self__.arr[j_23360], self__.arr[j_23360 + 1], added_leaf_QMARK_) : self__.arr[j_23360 + 1];
            var G__23363 = i_23359 + 1;
            var G__23364 = j_23360 + 2;
            i_23359 = G__23363;
            j_23360 = G__23364;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__23347 = shift + 5;
          var G__23348 = key_or_nil;
          var G__23349 = val_or_node;
          var G__23350 = hash;
          var G__23351 = key;
          var G__23352 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__23347, G__23348, G__23349, G__23350, G__23351, G__23352) : cljs.core.create_node.call(null, G__23347, G__23348, G__23349, G__23350, G__23351, G__23352);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__23365 = i + 1;
        var G__23366 = j + 2;
        var G__23367 = bitmap | 1 << i;
        i = G__23365;
        j = G__23366;
        bitmap = G__23367;
        continue;
      } else {
        var G__23368 = i + 1;
        var G__23369 = j;
        var G__23370 = bitmap;
        i = G__23368;
        j = G__23369;
        bitmap = G__23370;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__23371 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__23371) : cljs.core.create_array_node_seq.call(null, G__23371);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__23372 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23372) : cljs.core.deref.call(null, G__23372);
        } else {
          var G__23373 = i + 1;
          var G__23374 = init__$2;
          i = G__23373;
          init__$1 = G__23374;
          continue;
        }
      } else {
        var G__23375 = i + 1;
        var G__23376 = init__$1;
        i = G__23375;
        init__$1 = G__23376;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__23377 = i + 2;
        i = G__23377;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__23378 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__23378) : cljs.core.create_inode_seq.call(null, G__23378);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__23379 = self__.nodes;
    var G__23380 = self__.i + 2;
    var G__23381 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__23379, G__23380, G__23381) : cljs.core.create_inode_seq.call(null, G__23379, G__23380, G__23381);
  } else {
    var G__23382 = self__.nodes;
    var G__23383 = self__.i;
    var G__23384 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__23382, G__23383, G__23384) : cljs.core.create_inode_seq.call(null, G__23382, G__23383, G__23384);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__23388 = j + 2;
                j = G__23388;
                continue;
              }
            } else {
              var G__23389 = j + 2;
              j = G__23389;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__23390 = null;
  var G__23391 = self__.nodes;
  var G__23392 = self__.i;
  var G__23393 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__23390, G__23391, G__23392, G__23393) : cljs.core.create_array_node_seq.call(null, G__23390, G__23391, G__23392, G__23393);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__23398 = j + 1;
              j = G__23398;
              continue;
            }
          } else {
            var G__23399 = j + 1;
            j = G__23399;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__23401 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__23401) : cljs.core.keys.call(null, G__23401);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__23402 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__23402) : cljs.core.vals.call(null, G__23402);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__23403 = cljs.core.seq(coll);
  var chunk__23404 = null;
  var count__23405 = 0;
  var i__23406 = 0;
  while (true) {
    if (i__23406 < count__23405) {
      var vec__23407 = chunk__23404.cljs$core$IIndexed$_nth$arity$2(null, i__23406);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23407, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23407, 1, null);
      var G__23408_23419 = v;
      var G__23409_23420 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23408_23419, G__23409_23420) : f.call(null, G__23408_23419, G__23409_23420);
      var G__23421 = seq__23403;
      var G__23422 = chunk__23404;
      var G__23423 = count__23405;
      var G__23424 = i__23406 + 1;
      seq__23403 = G__23421;
      chunk__23404 = G__23422;
      count__23405 = G__23423;
      i__23406 = G__23424;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__23403);
      if (temp__4126__auto__) {
        var seq__23403__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__23403__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__23403__$1);
          var G__23425 = cljs.core.chunk_rest(seq__23403__$1);
          var G__23426 = c__4768__auto__;
          var G__23427 = cljs.core.count(c__4768__auto__);
          var G__23428 = 0;
          seq__23403 = G__23425;
          chunk__23404 = G__23426;
          count__23405 = G__23427;
          i__23406 = G__23428;
          continue;
        } else {
          var vec__23410 = cljs.core.first(seq__23403__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23410, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23410, 1, null);
          var G__23411_23429 = v;
          var G__23412_23430 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23411_23429, G__23412_23430) : f.call(null, G__23411_23429, G__23412_23430);
          var G__23431 = cljs.core.next(seq__23403__$1);
          var G__23432 = null;
          var G__23433 = 0;
          var G__23434 = 0;
          seq__23403 = G__23431;
          chunk__23404 = G__23432;
          count__23405 = G__23433;
          i__23406 = G__23434;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__23413 = init;
    var G__23414 = null;
    var G__23415 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23413, G__23414, G__23415) : f.call(null, G__23413, G__23414, G__23415);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__23416 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23416) : cljs.core.deref.call(null, G__23416);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj23418 = {};
    return obj23418;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__23435 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__23436 = cljs.core.next(es);
          ret = G__23435;
          es = G__23436;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__23437 = null;
  var G__23437__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23437__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23437 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23437__2.call(this, self__, k);
      case 3:
        return G__23437__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23437.cljs$core$IFn$_invoke$arity$2 = G__23437__2;
  G__23437.cljs$core$IFn$_invoke$arity$3 = G__23437__3;
  return G__23437;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args23400) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23400)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__23438 = i + 2;
      var G__23439 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__23438;
      ret = G__23439;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__23440 = i + 1;
      var G__23441 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__23440;
      out = G__23441;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__23442 = o;
      if (G__23442) {
        var bit__4662__auto__ = G__23442.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4662__auto__ || G__23442.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__23442.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__23442);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__23442);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__23443 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__23443) : cljs.core.key.call(null, G__23443);
      }(), function() {
        var G__23444 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__23444) : cljs.core.val.call(null, G__23444);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__23447 = cljs.core.next(es);
          var G__23448 = tcoll__$1.assoc_BANG_(function() {
            var G__23445 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__23445) : cljs.core.key.call(null, G__23445);
          }(), function() {
            var G__23446 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__23446) : cljs.core.val.call(null, G__23446);
          }());
          es = G__23447;
          tcoll__$1 = G__23448;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__23449 = ascending_QMARK_ ? t.left : t.right;
      var G__23450 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__23449;
      stack__$1 = G__23450;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__23463 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23463) : cljs.core.deref.call(null, G__23463);
  } else {
    var init__$2 = function() {
      var G__23464 = init__$1;
      var G__23465 = node.key;
      var G__23466 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23464, G__23465, G__23466) : f.call(null, G__23464, G__23465, G__23466);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__23467 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23467) : cljs.core.deref.call(null, G__23467);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__23468 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23468) : cljs.core.deref.call(null, G__23468);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__23470 = null;
  var G__23470__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23470__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23470 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23470__2.call(this, self__, k);
      case 3:
        return G__23470__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23470.cljs$core$IFn$_invoke$arity$2 = G__23470__2;
  G__23470.cljs$core$IFn$_invoke$arity$3 = G__23470__3;
  return G__23470;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args23469) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23469)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__23472 = null;
  var G__23472__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23472__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23472 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23472__2.call(this, self__, k);
      case 3:
        return G__23472__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23472.cljs$core$IFn$_invoke$arity$2 = G__23472__2;
  G__23472.cljs$core$IFn$_invoke$arity$3 = G__23472__3;
  return G__23472;
}();
cljs.core.RedNode.prototype.apply = function(self__, args23471) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23471)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__23485 = k;
      var G__23486 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__23485, G__23486) : comp.call(null, G__23485, G__23486);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app__$1 = tree_map_append(left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.RedNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.RedNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app__$1, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append(left, right.left), right.right, null);
        } else {
          var app__$1 = tree_map_append(left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.BlackNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.BlackNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app__$1, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__23505 = k;
      var G__23506 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__23505, G__23506) : comp.call(null, G__23505, G__23506);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__23517 = k;
    var G__23518 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__23517, G__23518) : comp.call(null, G__23517, G__23518);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__23520 = cljs.core.seq(coll);
  var chunk__23521 = null;
  var count__23522 = 0;
  var i__23523 = 0;
  while (true) {
    if (i__23523 < count__23522) {
      var vec__23524 = chunk__23521.cljs$core$IIndexed$_nth$arity$2(null, i__23523);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23524, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23524, 1, null);
      var G__23525_23537 = v;
      var G__23526_23538 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23525_23537, G__23526_23538) : f.call(null, G__23525_23537, G__23526_23538);
      var G__23539 = seq__23520;
      var G__23540 = chunk__23521;
      var G__23541 = count__23522;
      var G__23542 = i__23523 + 1;
      seq__23520 = G__23539;
      chunk__23521 = G__23540;
      count__23522 = G__23541;
      i__23523 = G__23542;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__23520);
      if (temp__4126__auto__) {
        var seq__23520__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__23520__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__23520__$1);
          var G__23543 = cljs.core.chunk_rest(seq__23520__$1);
          var G__23544 = c__4768__auto__;
          var G__23545 = cljs.core.count(c__4768__auto__);
          var G__23546 = 0;
          seq__23520 = G__23543;
          chunk__23521 = G__23544;
          count__23522 = G__23545;
          i__23523 = G__23546;
          continue;
        } else {
          var vec__23527 = cljs.core.first(seq__23520__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23527, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23527, 1, null);
          var G__23528_23547 = v;
          var G__23529_23548 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23528_23547, G__23529_23548) : f.call(null, G__23528_23547, G__23529_23548);
          var G__23549 = cljs.core.next(seq__23520__$1);
          var G__23550 = null;
          var G__23551 = 0;
          var G__23552 = 0;
          seq__23520 = G__23549;
          chunk__23521 = G__23550;
          count__23522 = G__23551;
          i__23523 = G__23552;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__23530 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__23530) : cljs.core.keys.call(null, G__23530);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__23531 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__23531) : cljs.core.vals.call(null, G__23531);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__23532 = k;
        var G__23533 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__23532, G__23533) : self__.comp.call(null, G__23532, G__23533);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__23553 = t.left;
          t = G__23553;
          continue;
        } else {
          var G__23554 = t.right;
          t = G__23554;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__23555 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__23556 = cljs.core.next(es);
          ret = G__23555;
          es = G__23556;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__23557 = null;
  var G__23557__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23557__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23557 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23557__2.call(this, self__, k);
      case 3:
        return G__23557__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23557.cljs$core$IFn$_invoke$arity$2 = G__23557__2;
  G__23557.cljs$core$IFn$_invoke$arity$3 = G__23557__3;
  return G__23557;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args23519) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23519)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__23534 = k;
          var G__23535 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__23534, G__23535) : self__.comp.call(null, G__23534, G__23535);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__23558 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__23559 = t.left;
              stack = G__23558;
              t = G__23559;
              continue;
            } else {
              var G__23560 = stack;
              var G__23561 = t.right;
              stack = G__23560;
              t = G__23561;
              continue;
            }
          } else {
            if (c > 0) {
              var G__23562 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__23563 = t.right;
              stack = G__23562;
              t = G__23563;
              continue;
            } else {
              var G__23564 = stack;
              var G__23565 = t.left;
              stack = G__23564;
              t = G__23565;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__23536 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__23536) : cljs.core.key.call(null, G__23536);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__23566 = cljs.core.nnext(in$);
        var G__23567 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__23566;
        out = G__23567;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__23568__i = 0, G__23568__a = new Array(arguments.length - 0);
      while (G__23568__i < G__23568__a.length) {
        G__23568__a[G__23568__i] = arguments[G__23568__i + 0];
        ++G__23568__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__23568__a, 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__23569) {
    var keyvals = cljs.core.seq(arglist__23569);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__23570__i = 0, G__23570__a = new Array(arguments.length - 0);
      while (G__23570__i < G__23570__a.length) {
        G__23570__a[G__23570__i] = arguments[G__23570__i + 0];
        ++G__23570__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__23570__a, 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__23571) {
    var keyvals = cljs.core.seq(arglist__23571);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj23575 = {};
      return obj23575;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__23576 = cljs.core.nnext(kvs);
        kvs = G__23576;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__23577__i = 0, G__23577__a = new Array(arguments.length - 0);
      while (G__23577__i < G__23577__a.length) {
        G__23577__a[G__23577__i] = arguments[G__23577__i + 0];
        ++G__23577__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__23577__a, 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__23578) {
    var keyvals = cljs.core.seq(arglist__23578);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__23579 = cljs.core.nnext(in$);
        var G__23580 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__23579;
        out = G__23580;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__23581__i = 0, G__23581__a = new Array(arguments.length - 0);
      while (G__23581__i < G__23581__a.length) {
        G__23581__a[G__23581__i] = arguments[G__23581__i + 0];
        ++G__23581__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__23581__a, 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__23582) {
    var keyvals = cljs.core.seq(arglist__23582);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__23583 = cljs.core.nnext(in$);
        var G__23584 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__23583;
        out = G__23584;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__23585__i = 0, G__23585__a = new Array(arguments.length - 1);
      while (G__23585__i < G__23585__a.length) {
        G__23585__a[G__23585__i] = arguments[G__23585__i + 1];
        ++G__23585__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__23585__a, 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__23586) {
    var comparator = cljs.core.first(arglist__23586);
    var keyvals = cljs.core.rest(arglist__23586);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__23587 = self__.mseq;
    if (G__23587) {
      var bit__4662__auto__ = G__23587.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__23587.cljs$core$INext$) {
        return true;
      } else {
        if (!G__23587.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23587);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23587);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__23588 = self__.mseq;
    if (G__23588) {
      var bit__4662__auto__ = G__23588.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__23588.cljs$core$INext$) {
        return true;
      } else {
        if (!G__23588.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23588);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23588);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__23589 = self__.mseq;
    if (G__23589) {
      var bit__4662__auto__ = G__23589.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__23589.cljs$core$INext$) {
        return true;
      } else {
        if (!G__23589.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23589);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23589);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__23590 = self__.mseq;
    if (G__23590) {
      var bit__4662__auto__ = G__23590.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__23590.cljs$core$INext$) {
        return true;
      } else {
        if (!G__23590.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23590);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__23590);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__23591_SHARP_, p2__23592_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__3981__auto__ = p1__23591_SHARP_;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__23592_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__23593__i = 0, G__23593__a = new Array(arguments.length - 0);
      while (G__23593__i < G__23593__a.length) {
        G__23593__a[G__23593__i] = arguments[G__23593__i + 0];
        ++G__23593__i;
      }
      maps = new cljs.core.IndexedSeq(G__23593__a, 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__23594) {
    var maps = cljs.core.seq(arglist__23594);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__23597 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__23598 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23597, G__23598) : f.call(null, G__23597, G__23598);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__3981__auto__ = m1;
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__23599__i = 0, G__23599__a = new Array(arguments.length - 1);
      while (G__23599__i < G__23599__a.length) {
        G__23599__a[G__23599__i] = arguments[G__23599__i + 1];
        ++G__23599__i;
      }
      maps = new cljs.core.IndexedSeq(G__23599__a, 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__23600) {
    var f = cljs.core.first(arglist__23600);
    var maps = cljs.core.rest(arglist__23600);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__23601 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__23602 = cljs.core.next(keys);
      ret = G__23601;
      keys = G__23602;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__23605 = cljs.core.seq(coll);
  var chunk__23606 = null;
  var count__23607 = 0;
  var i__23608 = 0;
  while (true) {
    if (i__23608 < count__23607) {
      var vec__23609 = chunk__23606.cljs$core$IIndexed$_nth$arity$2(null, i__23608);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23609, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23609, 1, null);
      var G__23610_23615 = v;
      var G__23611_23616 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23610_23615, G__23611_23616) : f.call(null, G__23610_23615, G__23611_23616);
      var G__23617 = seq__23605;
      var G__23618 = chunk__23606;
      var G__23619 = count__23607;
      var G__23620 = i__23608 + 1;
      seq__23605 = G__23617;
      chunk__23606 = G__23618;
      count__23607 = G__23619;
      i__23608 = G__23620;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__23605);
      if (temp__4126__auto__) {
        var seq__23605__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__23605__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__23605__$1);
          var G__23621 = cljs.core.chunk_rest(seq__23605__$1);
          var G__23622 = c__4768__auto__;
          var G__23623 = cljs.core.count(c__4768__auto__);
          var G__23624 = 0;
          seq__23605 = G__23621;
          chunk__23606 = G__23622;
          count__23607 = G__23623;
          i__23608 = G__23624;
          continue;
        } else {
          var vec__23612 = cljs.core.first(seq__23605__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23612, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23612, 1, null);
          var G__23613_23625 = v;
          var G__23614_23626 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23613_23625, G__23614_23626) : f.call(null, G__23613_23625, G__23614_23626);
          var G__23627 = cljs.core.next(seq__23605__$1);
          var G__23628 = null;
          var G__23629 = 0;
          var G__23630 = 0;
          seq__23605 = G__23627;
          chunk__23606 = G__23628;
          count__23607 = G__23629;
          i__23608 = G__23630;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__23603_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__23603_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__23631 = null;
  var G__23631__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23631__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23631 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23631__2.call(this, self__, k);
      case 3:
        return G__23631__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23631.cljs$core$IFn$_invoke$arity$2 = G__23631__2;
  G__23631.cljs$core$IFn$_invoke$arity$3 = G__23631__3;
  return G__23631;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args23604) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23604)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__23632 = i + 1;
        var G__23633 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__23632;
        out = G__23633;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__23634 = i + 1;
        var G__23635 = cljs.core._conj_BANG_(out, items[i]);
        i = G__23634;
        out = G__23635;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__23637 = null;
  var G__23637__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__23637__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__23637 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23637__2.call(this, self__, k);
      case 3:
        return G__23637__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23637.cljs$core$IFn$_invoke$arity$2 = G__23637__2;
  G__23637.cljs$core$IFn$_invoke$arity$3 = G__23637__3;
  return G__23637;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args23636) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23636)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__23640 = cljs.core.seq(coll);
  var chunk__23641 = null;
  var count__23642 = 0;
  var i__23643 = 0;
  while (true) {
    if (i__23643 < count__23642) {
      var vec__23644 = chunk__23641.cljs$core$IIndexed$_nth$arity$2(null, i__23643);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23644, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23644, 1, null);
      var G__23645_23650 = v;
      var G__23646_23651 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23645_23650, G__23646_23651) : f.call(null, G__23645_23650, G__23646_23651);
      var G__23652 = seq__23640;
      var G__23653 = chunk__23641;
      var G__23654 = count__23642;
      var G__23655 = i__23643 + 1;
      seq__23640 = G__23652;
      chunk__23641 = G__23653;
      count__23642 = G__23654;
      i__23643 = G__23655;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__23640);
      if (temp__4126__auto__) {
        var seq__23640__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__23640__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__23640__$1);
          var G__23656 = cljs.core.chunk_rest(seq__23640__$1);
          var G__23657 = c__4768__auto__;
          var G__23658 = cljs.core.count(c__4768__auto__);
          var G__23659 = 0;
          seq__23640 = G__23656;
          chunk__23641 = G__23657;
          count__23642 = G__23658;
          i__23643 = G__23659;
          continue;
        } else {
          var vec__23647 = cljs.core.first(seq__23640__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23647, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23647, 1, null);
          var G__23648_23660 = v;
          var G__23649_23661 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23648_23660, G__23649_23661) : f.call(null, G__23648_23660, G__23649_23661);
          var G__23662 = cljs.core.next(seq__23640__$1);
          var G__23663 = null;
          var G__23664 = 0;
          var G__23665 = 0;
          seq__23640 = G__23662;
          chunk__23641 = G__23663;
          count__23642 = G__23664;
          i__23643 = G__23665;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__23638_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__23638_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__23666 = null;
  var G__23666__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__23666__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__23666 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23666__2.call(this, self__, k);
      case 3:
        return G__23666__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23666.cljs$core$IFn$_invoke$arity$2 = G__23666__2;
  G__23666.cljs$core$IFn$_invoke$arity$3 = G__23666__3;
  return G__23666;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args23639) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args23639)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4862__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4862__auto__.length) {
        var G__23667 = i + 1;
        var G__23668 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__23667;
        res = G__23668;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__23669 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__23670 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__23669;
          out = G__23670;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__23671__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__23671 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__23672__i = 0, G__23672__a = new Array(arguments.length - 0);
        while (G__23672__i < G__23672__a.length) {
          G__23672__a[G__23672__i] = arguments[G__23672__i + 0];
          ++G__23672__i;
        }
        keys = new cljs.core.IndexedSeq(G__23672__a, 0);
      }
      return G__23671__delegate.call(this, keys);
    };
    G__23671.cljs$lang$maxFixedArity = 0;
    G__23671.cljs$lang$applyTo = function(arglist__23673) {
      var keys = cljs.core.seq(arglist__23673);
      return G__23671__delegate(keys);
    };
    G__23671.cljs$core$IFn$_invoke$arity$variadic = G__23671__delegate;
    return G__23671;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        var G__23674 = null;
        if (arguments.length > 0) {
          var G__23675__i = 0, G__23675__a = new Array(arguments.length - 0);
          while (G__23675__i < G__23675__a.length) {
            G__23675__a[G__23675__i] = arguments[G__23675__i + 0];
            ++G__23675__i;
          }
          G__23674 = new cljs.core.IndexedSeq(G__23675__a, 0);
        }
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__23674);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__23676__i = 0, G__23676__a = new Array(arguments.length - 0);
      while (G__23676__i < G__23676__a.length) {
        G__23676__a[G__23676__i] = arguments[G__23676__i + 0];
        ++G__23676__i;
      }
      keys = new cljs.core.IndexedSeq(G__23676__a, 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__23677) {
    var keys = cljs.core.seq(arglist__23677);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__23678__i = 0, G__23678__a = new Array(arguments.length - 1);
      while (G__23678__i < G__23678__a.length) {
        G__23678__a[G__23678__i] = arguments[G__23678__i + 1];
        ++G__23678__i;
      }
      keys = new cljs.core.IndexedSeq(G__23678__a, 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__23679) {
    var comparator = cljs.core.first(arglist__23679);
    var keys = cljs.core.rest(arglist__23679);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__23680_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__23680_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__23680_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__23681_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__23681_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__23681_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function() {
  var distinct = null;
  var distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__23702 = null;
          var G__23702__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__23702__1 = function(result) {
            var G__23692 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__23692) : rf.call(null, G__23692);
          };
          var G__23702__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__23693 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23693) : cljs.core.deref.call(null, G__23693);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__23694 = result;
              var G__23695 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__23694, G__23695) : rf.call(null, G__23694, G__23695);
            }
          };
          G__23702 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__23702__0.call(this);
              case 1:
                return G__23702__1.call(this, result);
              case 2:
                return G__23702__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__23702.cljs$core$IFn$_invoke$arity$0 = G__23702__0;
          G__23702.cljs$core$IFn$_invoke$arity$1 = G__23702__1;
          G__23702.cljs$core$IFn$_invoke$arity$2 = G__23702__2;
          return G__23702;
        }();
      }(seen);
    };
  };
  var distinct__1 = function(coll) {
    var step = function step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__23700, seen__$1) {
          while (true) {
            var vec__23701 = p__23700;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23701, 0, null);
            var xs__$1 = vec__23701;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__23703 = cljs.core.rest(s);
                var G__23704 = seen__$1;
                p__23700 = G__23703;
                seen__$1 = G__23704;
                continue;
              } else {
                return cljs.core.cons(f, step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return distinct__0.call(this);
      case 1:
        return distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct.cljs$core$IFn$_invoke$arity$0 = distinct__0;
  distinct.cljs$core$IFn$_invoke$arity$1 = distinct__1;
  return distinct;
}();
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__23705 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__23706 = cljs.core.next(s__$1);
      ret = G__23705;
      s__$1 = G__23706;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__23708 = x;
    if (G__23708) {
      var bit__4655__auto__ = G__23708.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4655__auto__ || G__23708.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__23709 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__23710 = cljs.core.next(ks);
      var G__23711 = cljs.core.next(vs);
      map = G__23709;
      ks = G__23710;
      vs = G__23711;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (function() {
      var G__23722 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__23722) : k.call(null, G__23722);
    }() > function() {
      var G__23723 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__23723) : k.call(null, G__23723);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__23724__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__23712_SHARP_, p2__23713_SHARP_) {
        return max_key.cljs$core$IFn$_invoke$arity$3(k, p1__23712_SHARP_, p2__23713_SHARP_);
      }, max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__23724 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__23725__i = 0, G__23725__a = new Array(arguments.length - 3);
        while (G__23725__i < G__23725__a.length) {
          G__23725__a[G__23725__i] = arguments[G__23725__i + 3];
          ++G__23725__i;
        }
        more = new cljs.core.IndexedSeq(G__23725__a, 0);
      }
      return G__23724__delegate.call(this, k, x, y, more);
    };
    G__23724.cljs$lang$maxFixedArity = 3;
    G__23724.cljs$lang$applyTo = function(arglist__23726) {
      var k = cljs.core.first(arglist__23726);
      arglist__23726 = cljs.core.next(arglist__23726);
      var x = cljs.core.first(arglist__23726);
      arglist__23726 = cljs.core.next(arglist__23726);
      var y = cljs.core.first(arglist__23726);
      var more = cljs.core.rest(arglist__23726);
      return G__23724__delegate(k, x, y, more);
    };
    G__23724.cljs$core$IFn$_invoke$arity$variadic = G__23724__delegate;
    return G__23724;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        var G__23727 = null;
        if (arguments.length > 3) {
          var G__23728__i = 0, G__23728__a = new Array(arguments.length - 3);
          while (G__23728__i < G__23728__a.length) {
            G__23728__a[G__23728__i] = arguments[G__23728__i + 3];
            ++G__23728__i;
          }
          G__23727 = new cljs.core.IndexedSeq(G__23728__a, 0);
        }
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__23727);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (function() {
      var G__23739 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__23739) : k.call(null, G__23739);
    }() < function() {
      var G__23740 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__23740) : k.call(null, G__23740);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__23741__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__23729_SHARP_, p2__23730_SHARP_) {
        return min_key.cljs$core$IFn$_invoke$arity$3(k, p1__23729_SHARP_, p2__23730_SHARP_);
      }, min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__23741 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__23742__i = 0, G__23742__a = new Array(arguments.length - 3);
        while (G__23742__i < G__23742__a.length) {
          G__23742__a[G__23742__i] = arguments[G__23742__i + 3];
          ++G__23742__i;
        }
        more = new cljs.core.IndexedSeq(G__23742__a, 0);
      }
      return G__23741__delegate.call(this, k, x, y, more);
    };
    G__23741.cljs$lang$maxFixedArity = 3;
    G__23741.cljs$lang$applyTo = function(arglist__23743) {
      var k = cljs.core.first(arglist__23743);
      arglist__23743 = cljs.core.next(arglist__23743);
      var x = cljs.core.first(arglist__23743);
      arglist__23743 = cljs.core.next(arglist__23743);
      var y = cljs.core.first(arglist__23743);
      var more = cljs.core.rest(arglist__23743);
      return G__23741__delegate(k, x, y, more);
    };
    G__23741.cljs$core$IFn$_invoke$arity$variadic = G__23741__delegate;
    return G__23741;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        var G__23744 = null;
        if (arguments.length > 3) {
          var G__23745__i = 0, G__23745__a = new Array(arguments.length - 3);
          while (G__23745__i < G__23745__a.length) {
            G__23745__a[G__23745__i] = arguments[G__23745__i + 3];
            ++G__23745__i;
          }
          G__23744 = new cljs.core.IndexedSeq(G__23745__a, 0);
        }
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__23744);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__23762 = null;
          var G__23762__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__23762__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__23757 = result;
                var G__23758 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__23757, G__23758) : rf.call(null, G__23757, G__23758);
              }());
            }();
            var G__23759 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__23759) : rf.call(null, G__23759);
          };
          var G__23762__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__23760 = result;
              var G__23761 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__23760, G__23761) : rf.call(null, G__23760, G__23761);
            } else {
              return result;
            }
          };
          G__23762 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__23762__0.call(this);
              case 1:
                return G__23762__1.call(this, result);
              case 2:
                return G__23762__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__23762.cljs$core$IFn$_invoke$arity$0 = G__23762__0;
          G__23762.cljs$core$IFn$_invoke$arity$1 = G__23762__1;
          G__23762.cljs$core$IFn$_invoke$arity$2 = G__23762__2;
          return G__23762;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__23775 = null;
        var G__23775__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__23775__1 = function(result) {
          var G__23770 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__23770) : rf.call(null, G__23770);
        };
        var G__23775__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__23771 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__23771) : pred.call(null, G__23771);
          }())) {
            var G__23772 = result;
            var G__23773 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__23772, G__23773) : rf.call(null, G__23772, G__23773);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__23775 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__23775__0.call(this);
            case 1:
              return G__23775__1.call(this, result);
            case 2:
              return G__23775__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__23775.cljs$core$IFn$_invoke$arity$0 = G__23775__0;
        G__23775.cljs$core$IFn$_invoke$arity$1 = G__23775__1;
        G__23775.cljs$core$IFn$_invoke$arity$2 = G__23775__2;
        return G__23775;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__23774 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__23774) : pred.call(null, G__23774);
        }())) {
          return cljs.core.cons(cljs.core.first(s), take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__23780 = function() {
      var G__23782 = cljs.core._entry_key(sc, e);
      var G__23783 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__23782, G__23783) : comp.call(null, G__23782, G__23783);
    }();
    var G__23781 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__23780, G__23781) : test.call(null, G__23780, G__23781);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__23787 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23787, 0, null);
        var s = vec__23787;
        if (cljs.core.truth_(function() {
          var G__23788 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__23788) : include.call(null, G__23788);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__23789 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23789, 0, null);
      var s = vec__23789;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__23793 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23793, 0, null);
        var s = vec__23793;
        if (cljs.core.truth_(function() {
          var G__23794 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__23794) : include.call(null, G__23794);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__23795 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23795, 0, null);
      var s = vec__23795;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__23796 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__23796) : Math.ceil.call(null, G__23796);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__23797 = ret;
        var G__23798 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23797, G__23798) : f.call(null, G__23797, G__23798);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__23799 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23799) : cljs.core.deref.call(null, G__23799);
      } else {
        var G__23800 = i + self__.step;
        var G__23801 = ret__$1;
        i = G__23800;
        ret = G__23801;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__23819 = null;
          var G__23819__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__23819__1 = function(result) {
            var G__23816 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__23816) : rf.call(null, G__23816);
          };
          var G__23819__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__23817 = result;
              var G__23818 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__23817, G__23818) : rf.call(null, G__23817, G__23818);
            } else {
              return result;
            }
          };
          G__23819 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__23819__0.call(this);
              case 1:
                return G__23819__1.call(this, result);
              case 2:
                return G__23819__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__23819.cljs$core$IFn$_invoke$arity$0 = G__23819__0;
          G__23819.cljs$core$IFn$_invoke$arity$1 = G__23819__1;
          G__23819.cljs$core$IFn$_invoke$arity$2 = G__23819__2;
          return G__23819;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__23841 = null;
          var G__23841__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__23841__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__23832 = result;
                var G__23833 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__23832, G__23833) : rf.call(null, G__23832, G__23833);
              }());
            }();
            var G__23834 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__23834) : rf.call(null, G__23834);
          };
          var G__23841__2 = function(result, input) {
            var pval = function() {
              var G__23835 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__23835) : cljs.core.deref.call(null, G__23835);
            }();
            var val = function() {
              var G__23836 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23836) : f.call(null, G__23836);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__23837 = result;
                var G__23838 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__23837, G__23838) : rf.call(null, G__23837, G__23838);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__23841 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__23841__0.call(this);
              case 1:
                return G__23841__1.call(this, result);
              case 2:
                return G__23841__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__23841.cljs$core$IFn$_invoke$arity$0 = G__23841__0;
          G__23841.cljs$core$IFn$_invoke$arity$1 = G__23841__1;
          G__23841.cljs$core$IFn$_invoke$arity$2 = G__23841__2;
          return G__23841;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__23839 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23839) : f.call(null, G__23839);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__23820_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__23840 = p1__23820_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23840) : f.call(null, G__23840);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__23850 = init;
          var G__23851 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23850, G__23851) : f.call(null, G__23850, G__23851);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__23946 = null;
      var G__23946__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__23946__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23904 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23904) : f.call(null, G__23904);
        }()], null);
      };
      var G__23946__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23905 = x;
          var G__23906 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23905, G__23906) : f.call(null, G__23905, G__23906);
        }()], null);
      };
      var G__23946__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23907 = x;
          var G__23908 = y;
          var G__23909 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23907, G__23908, G__23909) : f.call(null, G__23907, G__23908, G__23909);
        }()], null);
      };
      var G__23946__4 = function() {
        var G__23947__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__23947 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__23948__i = 0, G__23948__a = new Array(arguments.length - 3);
            while (G__23948__i < G__23948__a.length) {
              G__23948__a[G__23948__i] = arguments[G__23948__i + 3];
              ++G__23948__i;
            }
            args = new cljs.core.IndexedSeq(G__23948__a, 0);
          }
          return G__23947__delegate.call(this, x, y, z, args);
        };
        G__23947.cljs$lang$maxFixedArity = 3;
        G__23947.cljs$lang$applyTo = function(arglist__23949) {
          var x = cljs.core.first(arglist__23949);
          arglist__23949 = cljs.core.next(arglist__23949);
          var y = cljs.core.first(arglist__23949);
          arglist__23949 = cljs.core.next(arglist__23949);
          var z = cljs.core.first(arglist__23949);
          var args = cljs.core.rest(arglist__23949);
          return G__23947__delegate(x, y, z, args);
        };
        G__23947.cljs$core$IFn$_invoke$arity$variadic = G__23947__delegate;
        return G__23947;
      }();
      G__23946 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__23946__0.call(this);
          case 1:
            return G__23946__1.call(this, x);
          case 2:
            return G__23946__2.call(this, x, y);
          case 3:
            return G__23946__3.call(this, x, y, z);
          default:
            var G__23950 = null;
            if (arguments.length > 3) {
              var G__23951__i = 0, G__23951__a = new Array(arguments.length - 3);
              while (G__23951__i < G__23951__a.length) {
                G__23951__a[G__23951__i] = arguments[G__23951__i + 3];
                ++G__23951__i;
              }
              G__23950 = new cljs.core.IndexedSeq(G__23951__a, 0);
            }
            return G__23946__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__23950);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__23946.cljs$lang$maxFixedArity = 3;
      G__23946.cljs$lang$applyTo = G__23946__4.cljs$lang$applyTo;
      G__23946.cljs$core$IFn$_invoke$arity$0 = G__23946__0;
      G__23946.cljs$core$IFn$_invoke$arity$1 = G__23946__1;
      G__23946.cljs$core$IFn$_invoke$arity$2 = G__23946__2;
      G__23946.cljs$core$IFn$_invoke$arity$3 = G__23946__3;
      G__23946.cljs$core$IFn$_invoke$arity$variadic = G__23946__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__23946;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__23952 = null;
      var G__23952__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__23952__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23910 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23910) : f.call(null, G__23910);
        }(), function() {
          var G__23911 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__23911) : g.call(null, G__23911);
        }()], null);
      };
      var G__23952__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23912 = x;
          var G__23913 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23912, G__23913) : f.call(null, G__23912, G__23913);
        }(), function() {
          var G__23914 = x;
          var G__23915 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__23914, G__23915) : g.call(null, G__23914, G__23915);
        }()], null);
      };
      var G__23952__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23916 = x;
          var G__23917 = y;
          var G__23918 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23916, G__23917, G__23918) : f.call(null, G__23916, G__23917, G__23918);
        }(), function() {
          var G__23919 = x;
          var G__23920 = y;
          var G__23921 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__23919, G__23920, G__23921) : g.call(null, G__23919, G__23920, G__23921);
        }()], null);
      };
      var G__23952__4 = function() {
        var G__23953__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__23953 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__23954__i = 0, G__23954__a = new Array(arguments.length - 3);
            while (G__23954__i < G__23954__a.length) {
              G__23954__a[G__23954__i] = arguments[G__23954__i + 3];
              ++G__23954__i;
            }
            args = new cljs.core.IndexedSeq(G__23954__a, 0);
          }
          return G__23953__delegate.call(this, x, y, z, args);
        };
        G__23953.cljs$lang$maxFixedArity = 3;
        G__23953.cljs$lang$applyTo = function(arglist__23955) {
          var x = cljs.core.first(arglist__23955);
          arglist__23955 = cljs.core.next(arglist__23955);
          var y = cljs.core.first(arglist__23955);
          arglist__23955 = cljs.core.next(arglist__23955);
          var z = cljs.core.first(arglist__23955);
          var args = cljs.core.rest(arglist__23955);
          return G__23953__delegate(x, y, z, args);
        };
        G__23953.cljs$core$IFn$_invoke$arity$variadic = G__23953__delegate;
        return G__23953;
      }();
      G__23952 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__23952__0.call(this);
          case 1:
            return G__23952__1.call(this, x);
          case 2:
            return G__23952__2.call(this, x, y);
          case 3:
            return G__23952__3.call(this, x, y, z);
          default:
            var G__23956 = null;
            if (arguments.length > 3) {
              var G__23957__i = 0, G__23957__a = new Array(arguments.length - 3);
              while (G__23957__i < G__23957__a.length) {
                G__23957__a[G__23957__i] = arguments[G__23957__i + 3];
                ++G__23957__i;
              }
              G__23956 = new cljs.core.IndexedSeq(G__23957__a, 0);
            }
            return G__23952__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__23956);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__23952.cljs$lang$maxFixedArity = 3;
      G__23952.cljs$lang$applyTo = G__23952__4.cljs$lang$applyTo;
      G__23952.cljs$core$IFn$_invoke$arity$0 = G__23952__0;
      G__23952.cljs$core$IFn$_invoke$arity$1 = G__23952__1;
      G__23952.cljs$core$IFn$_invoke$arity$2 = G__23952__2;
      G__23952.cljs$core$IFn$_invoke$arity$3 = G__23952__3;
      G__23952.cljs$core$IFn$_invoke$arity$variadic = G__23952__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__23952;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__23958 = null;
      var G__23958__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__23958__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23922 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__23922) : f.call(null, G__23922);
        }(), function() {
          var G__23923 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__23923) : g.call(null, G__23923);
        }(), function() {
          var G__23924 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__23924) : h.call(null, G__23924);
        }()], null);
      };
      var G__23958__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23925 = x;
          var G__23926 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__23925, G__23926) : f.call(null, G__23925, G__23926);
        }(), function() {
          var G__23927 = x;
          var G__23928 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__23927, G__23928) : g.call(null, G__23927, G__23928);
        }(), function() {
          var G__23929 = x;
          var G__23930 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__23929, G__23930) : h.call(null, G__23929, G__23930);
        }()], null);
      };
      var G__23958__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__23931 = x;
          var G__23932 = y;
          var G__23933 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__23931, G__23932, G__23933) : f.call(null, G__23931, G__23932, G__23933);
        }(), function() {
          var G__23934 = x;
          var G__23935 = y;
          var G__23936 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__23934, G__23935, G__23936) : g.call(null, G__23934, G__23935, G__23936);
        }(), function() {
          var G__23937 = x;
          var G__23938 = y;
          var G__23939 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__23937, G__23938, G__23939) : h.call(null, G__23937, G__23938, G__23939);
        }()], null);
      };
      var G__23958__4 = function() {
        var G__23959__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__23959 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__23960__i = 0, G__23960__a = new Array(arguments.length - 3);
            while (G__23960__i < G__23960__a.length) {
              G__23960__a[G__23960__i] = arguments[G__23960__i + 3];
              ++G__23960__i;
            }
            args = new cljs.core.IndexedSeq(G__23960__a, 0);
          }
          return G__23959__delegate.call(this, x, y, z, args);
        };
        G__23959.cljs$lang$maxFixedArity = 3;
        G__23959.cljs$lang$applyTo = function(arglist__23961) {
          var x = cljs.core.first(arglist__23961);
          arglist__23961 = cljs.core.next(arglist__23961);
          var y = cljs.core.first(arglist__23961);
          arglist__23961 = cljs.core.next(arglist__23961);
          var z = cljs.core.first(arglist__23961);
          var args = cljs.core.rest(arglist__23961);
          return G__23959__delegate(x, y, z, args);
        };
        G__23959.cljs$core$IFn$_invoke$arity$variadic = G__23959__delegate;
        return G__23959;
      }();
      G__23958 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__23958__0.call(this);
          case 1:
            return G__23958__1.call(this, x);
          case 2:
            return G__23958__2.call(this, x, y);
          case 3:
            return G__23958__3.call(this, x, y, z);
          default:
            var G__23962 = null;
            if (arguments.length > 3) {
              var G__23963__i = 0, G__23963__a = new Array(arguments.length - 3);
              while (G__23963__i < G__23963__a.length) {
                G__23963__a[G__23963__i] = arguments[G__23963__i + 3];
                ++G__23963__i;
              }
              G__23962 = new cljs.core.IndexedSeq(G__23963__a, 0);
            }
            return G__23958__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__23962);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__23958.cljs$lang$maxFixedArity = 3;
      G__23958.cljs$lang$applyTo = G__23958__4.cljs$lang$applyTo;
      G__23958.cljs$core$IFn$_invoke$arity$0 = G__23958__0;
      G__23958.cljs$core$IFn$_invoke$arity$1 = G__23958__1;
      G__23958.cljs$core$IFn$_invoke$arity$2 = G__23958__2;
      G__23958.cljs$core$IFn$_invoke$arity$3 = G__23958__3;
      G__23958.cljs$core$IFn$_invoke$arity$variadic = G__23958__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__23958;
    }();
  };
  var juxt__4 = function() {
    var G__23964__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__23965 = null;
          var G__23965__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__23852_SHARP_, p2__23853_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__23852_SHARP_, function() {
                  return p2__23853_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__23853_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__23853_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__23965__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__23854_SHARP_, p2__23855_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__23854_SHARP_, function() {
                  var G__23940 = x;
                  return p2__23855_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__23855_SHARP_.cljs$core$IFn$_invoke$arity$1(G__23940) : p2__23855_SHARP_.call(null, G__23940);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__23965__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__23856_SHARP_, p2__23857_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__23856_SHARP_, function() {
                  var G__23941 = x;
                  var G__23942 = y;
                  return p2__23857_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__23857_SHARP_.cljs$core$IFn$_invoke$arity$2(G__23941, G__23942) : p2__23857_SHARP_.call(null, G__23941, G__23942);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__23965__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__23858_SHARP_, p2__23859_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__23858_SHARP_, function() {
                  var G__23943 = x;
                  var G__23944 = y;
                  var G__23945 = z;
                  return p2__23859_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__23859_SHARP_.cljs$core$IFn$_invoke$arity$3(G__23943, G__23944, G__23945) : p2__23859_SHARP_.call(null, G__23943, G__23944, G__23945);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__23965__4 = function() {
            var G__23966__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__23860_SHARP_, p2__23861_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__23860_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__23861_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__23966 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__23967__i = 0, G__23967__a = new Array(arguments.length - 3);
                while (G__23967__i < G__23967__a.length) {
                  G__23967__a[G__23967__i] = arguments[G__23967__i + 3];
                  ++G__23967__i;
                }
                args = new cljs.core.IndexedSeq(G__23967__a, 0);
              }
              return G__23966__delegate.call(this, x, y, z, args);
            };
            G__23966.cljs$lang$maxFixedArity = 3;
            G__23966.cljs$lang$applyTo = function(arglist__23968) {
              var x = cljs.core.first(arglist__23968);
              arglist__23968 = cljs.core.next(arglist__23968);
              var y = cljs.core.first(arglist__23968);
              arglist__23968 = cljs.core.next(arglist__23968);
              var z = cljs.core.first(arglist__23968);
              var args = cljs.core.rest(arglist__23968);
              return G__23966__delegate(x, y, z, args);
            };
            G__23966.cljs$core$IFn$_invoke$arity$variadic = G__23966__delegate;
            return G__23966;
          }();
          G__23965 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__23965__0.call(this);
              case 1:
                return G__23965__1.call(this, x);
              case 2:
                return G__23965__2.call(this, x, y);
              case 3:
                return G__23965__3.call(this, x, y, z);
              default:
                var G__23969 = null;
                if (arguments.length > 3) {
                  var G__23970__i = 0, G__23970__a = new Array(arguments.length - 3);
                  while (G__23970__i < G__23970__a.length) {
                    G__23970__a[G__23970__i] = arguments[G__23970__i + 3];
                    ++G__23970__i;
                  }
                  G__23969 = new cljs.core.IndexedSeq(G__23970__a, 0);
                }
                return G__23965__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__23969);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__23965.cljs$lang$maxFixedArity = 3;
          G__23965.cljs$lang$applyTo = G__23965__4.cljs$lang$applyTo;
          G__23965.cljs$core$IFn$_invoke$arity$0 = G__23965__0;
          G__23965.cljs$core$IFn$_invoke$arity$1 = G__23965__1;
          G__23965.cljs$core$IFn$_invoke$arity$2 = G__23965__2;
          G__23965.cljs$core$IFn$_invoke$arity$3 = G__23965__3;
          G__23965.cljs$core$IFn$_invoke$arity$variadic = G__23965__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__23965;
        }();
      }(fs__$1);
    };
    var G__23964 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__23971__i = 0, G__23971__a = new Array(arguments.length - 3);
        while (G__23971__i < G__23971__a.length) {
          G__23971__a[G__23971__i] = arguments[G__23971__i + 3];
          ++G__23971__i;
        }
        fs = new cljs.core.IndexedSeq(G__23971__a, 0);
      }
      return G__23964__delegate.call(this, f, g, h, fs);
    };
    G__23964.cljs$lang$maxFixedArity = 3;
    G__23964.cljs$lang$applyTo = function(arglist__23972) {
      var f = cljs.core.first(arglist__23972);
      arglist__23972 = cljs.core.next(arglist__23972);
      var g = cljs.core.first(arglist__23972);
      arglist__23972 = cljs.core.next(arglist__23972);
      var h = cljs.core.first(arglist__23972);
      var fs = cljs.core.rest(arglist__23972);
      return G__23964__delegate(f, g, h, fs);
    };
    G__23964.cljs$core$IFn$_invoke$arity$variadic = G__23964__delegate;
    return G__23964;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        var G__23973 = null;
        if (arguments.length > 3) {
          var G__23974__i = 0, G__23974__a = new Array(arguments.length - 3);
          while (G__23974__i < G__23974__a.length) {
            G__23974__a[G__23974__i] = arguments[G__23974__i + 3];
            ++G__23974__i;
          }
          G__23973 = new cljs.core.IndexedSeq(G__23974__a, 0);
        }
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__23973);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__23975 = cljs.core.next(coll);
        coll = G__23975;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__23976 = n - 1;
        var G__23977 = cljs.core.next(coll);
        n = G__23976;
        coll = G__23977;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__23981 = cljs.core.re_find(/^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23981, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23981, 1, null);
    var pattern = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__23981, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_23989 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__3981__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__23990_23996 = cljs.core.first(coll);
          var G__23991_23997 = writer;
          var G__23992_23998 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__23990_23996, G__23991_23997, G__23992_23998) : print_one.call(null, G__23990_23996, G__23991_23997, G__23992_23998);
        } else {
        }
        var coll_23999__$1 = cljs.core.next(coll);
        var n_24000 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_23999__$1 && (n_24000 == null || !(n_24000 === 0))) {
            cljs.core._write(writer, sep);
            var G__23993_24001 = cljs.core.first(coll_23999__$1);
            var G__23994_24002 = writer;
            var G__23995_24003 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__23993_24001, G__23994_24002, G__23995_24003) : print_one.call(null, G__23993_24001, G__23994_24002, G__23995_24003);
            var G__24004 = cljs.core.next(coll_23999__$1);
            var G__24005 = n_24000 - 1;
            coll_23999__$1 = G__24004;
            n_24000 = G__24005;
            continue;
          } else {
            if (cljs.core.seq(coll_23999__$1) && n_24000 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__3981__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_23989;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__24010 = cljs.core.seq(ss);
    var chunk__24011 = null;
    var count__24012 = 0;
    var i__24013 = 0;
    while (true) {
      if (i__24013 < count__24012) {
        var s = chunk__24011.cljs$core$IIndexed$_nth$arity$2(null, i__24013);
        cljs.core._write(writer, s);
        var G__24014 = seq__24010;
        var G__24015 = chunk__24011;
        var G__24016 = count__24012;
        var G__24017 = i__24013 + 1;
        seq__24010 = G__24014;
        chunk__24011 = G__24015;
        count__24012 = G__24016;
        i__24013 = G__24017;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__24010);
        if (temp__4126__auto__) {
          var seq__24010__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__24010__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first(seq__24010__$1);
            var G__24018 = cljs.core.chunk_rest(seq__24010__$1);
            var G__24019 = c__4768__auto__;
            var G__24020 = cljs.core.count(c__4768__auto__);
            var G__24021 = 0;
            seq__24010 = G__24018;
            chunk__24011 = G__24019;
            count__24012 = G__24020;
            i__24013 = G__24021;
            continue;
          } else {
            var s = cljs.core.first(seq__24010__$1);
            cljs.core._write(writer, s);
            var G__24022 = cljs.core.next(seq__24010__$1);
            var G__24023 = null;
            var G__24024 = 0;
            var G__24025 = 0;
            seq__24010 = G__24022;
            chunk__24011 = G__24023;
            count__24012 = G__24024;
            i__24013 = G__24025;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__24026__i = 0, G__24026__a = new Array(arguments.length - 1);
      while (G__24026__i < G__24026__a.length) {
        G__24026__a[G__24026__i] = arguments[G__24026__i + 1];
        ++G__24026__i;
      }
      ss = new cljs.core.IndexedSeq(G__24026__a, 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__24027) {
    var writer = cljs.core.first(arglist__24027);
    var ss = cljs.core.rest(arglist__24027);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj24029 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj24029;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__24032 = '[\\\\"\b\f\n\r\t]';
    var G__24033 = "g";
    return RegExp(G__24032, G__24033);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3969__auto__)) {
          var and__3969__auto____$1 = function() {
            var G__24047 = obj;
            if (G__24047) {
              var bit__4662__auto__ = G__24047.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4662__auto__ || G__24047.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__24047.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__24047);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__24047);
            }
          }();
          if (and__3969__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__3969__auto____$1;
          }
        } else {
          return and__3969__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__24048_24058 = cljs.core.meta(obj);
        var G__24049_24059 = writer;
        var G__24050_24060 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__24048_24058, G__24049_24059, G__24050_24060) : cljs.core.pr_writer.call(null, G__24048_24058, G__24049_24059, G__24050_24060);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__24051 = obj;
            if (G__24051) {
              var bit__4655__auto__ = G__24051.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4655__auto__ || G__24051.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__24052 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__24053 = cljs.core.pr_writer;
                var G__24054 = writer;
                var G__24055 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__24052, G__24053, G__24054, G__24055) : cljs.core.print_map.call(null, G__24052, G__24053, G__24054, G__24055);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__24056 = obj;
                    return goog.isString(G__24056);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__24061 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__24061;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__24057 = obj;
                            if (G__24057) {
                              var bit__4662__auto__ = G__24057.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4662__auto__ || G__24057.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__24057.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__24057);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__24057);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__24065 = obj;
    var G__24066 = writer;
    var G__24067 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__24065, G__24066, G__24067) : alt_impl.call(null, G__24065, G__24066, G__24067);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__24072 = cljs.core.seq(cljs.core.next(objs));
  var chunk__24073 = null;
  var count__24074 = 0;
  var i__24075 = 0;
  while (true) {
    if (i__24075 < count__24074) {
      var obj = chunk__24073.cljs$core$IIndexed$_nth$arity$2(null, i__24075);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__24076 = seq__24072;
      var G__24077 = chunk__24073;
      var G__24078 = count__24074;
      var G__24079 = i__24075 + 1;
      seq__24072 = G__24076;
      chunk__24073 = G__24077;
      count__24074 = G__24078;
      i__24075 = G__24079;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__24072);
      if (temp__4126__auto__) {
        var seq__24072__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__24072__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__24072__$1);
          var G__24080 = cljs.core.chunk_rest(seq__24072__$1);
          var G__24081 = c__4768__auto__;
          var G__24082 = cljs.core.count(c__4768__auto__);
          var G__24083 = 0;
          seq__24072 = G__24080;
          chunk__24073 = G__24081;
          count__24074 = G__24082;
          i__24075 = G__24083;
          continue;
        } else {
          var obj = cljs.core.first(seq__24072__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__24084 = cljs.core.next(seq__24072__$1);
          var G__24085 = null;
          var G__24086 = 0;
          var G__24087 = 0;
          seq__24072 = G__24084;
          chunk__24073 = G__24085;
          count__24074 = G__24086;
          i__24075 = G__24087;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24088__i = 0, G__24088__a = new Array(arguments.length - 0);
      while (G__24088__i < G__24088__a.length) {
        G__24088__a[G__24088__i] = arguments[G__24088__i + 0];
        ++G__24088__i;
      }
      objs = new cljs.core.IndexedSeq(G__24088__a, 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__24089) {
    var objs = cljs.core.seq(arglist__24089);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24090__i = 0, G__24090__a = new Array(arguments.length - 0);
      while (G__24090__i < G__24090__a.length) {
        G__24090__a[G__24090__i] = arguments[G__24090__i + 0];
        ++G__24090__i;
      }
      objs = new cljs.core.IndexedSeq(G__24090__a, 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__24091) {
    var objs = cljs.core.seq(arglist__24091);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24092__i = 0, G__24092__a = new Array(arguments.length - 0);
      while (G__24092__i < G__24092__a.length) {
        G__24092__a[G__24092__i] = arguments[G__24092__i + 0];
        ++G__24092__i;
      }
      objs = new cljs.core.IndexedSeq(G__24092__a, 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__24093) {
    var objs = cljs.core.seq(arglist__24093);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24094__i = 0, G__24094__a = new Array(arguments.length - 0);
      while (G__24094__i < G__24094__a.length) {
        G__24094__a[G__24094__i] = arguments[G__24094__i + 0];
        ++G__24094__i;
      }
      objs = new cljs.core.IndexedSeq(G__24094__a, 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__24095) {
    var objs = cljs.core.seq(arglist__24095);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24096__i = 0, G__24096__a = new Array(arguments.length - 0);
      while (G__24096__i < G__24096__a.length) {
        G__24096__a[G__24096__i] = arguments[G__24096__i + 0];
        ++G__24096__i;
      }
      objs = new cljs.core.IndexedSeq(G__24096__a, 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__24097) {
    var objs = cljs.core.seq(arglist__24097);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24098__i = 0, G__24098__a = new Array(arguments.length - 0);
      while (G__24098__i < G__24098__a.length) {
        G__24098__a[G__24098__i] = arguments[G__24098__i + 0];
        ++G__24098__i;
      }
      objs = new cljs.core.IndexedSeq(G__24098__a, 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__24099) {
    var objs = cljs.core.seq(arglist__24099);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24100__i = 0, G__24100__a = new Array(arguments.length - 0);
      while (G__24100__i < G__24100__a.length) {
        G__24100__a[G__24100__i] = arguments[G__24100__i + 0];
        ++G__24100__i;
      }
      objs = new cljs.core.IndexedSeq(G__24100__a, 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__24101) {
    var objs = cljs.core.seq(arglist__24101);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__24102__i = 0, G__24102__a = new Array(arguments.length - 0);
      while (G__24102__i < G__24102__a.length) {
        G__24102__a[G__24102__i] = arguments[G__24102__i + 0];
        ++G__24102__i;
      }
      objs = new cljs.core.IndexedSeq(G__24102__a, 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__24103) {
    var objs = cljs.core.seq(arglist__24103);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__24110_24116 = cljs.core.key(e);
    var G__24111_24117 = w;
    var G__24112_24118 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__24110_24116, G__24111_24117, G__24112_24118) : print_one.call(null, G__24110_24116, G__24111_24117, G__24112_24118);
    cljs.core._write(w, " ");
    var G__24113 = cljs.core.val(e);
    var G__24114 = w;
    var G__24115 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__24113, G__24114, G__24115) : print_one.call(null, G__24113, G__24114, G__24115);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__24119__i = 0, G__24119__a = new Array(arguments.length - 2);
      while (G__24119__i < G__24119__a.length) {
        G__24119__a[G__24119__i] = arguments[G__24119__i + 2];
        ++G__24119__i;
      }
      args = new cljs.core.IndexedSeq(G__24119__a, 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__24120) {
    var iref = cljs.core.first(arglist__24120);
    arglist__24120 = cljs.core.next(arglist__24120);
    var f = cljs.core.first(arglist__24120);
    var args = cljs.core.rest(arglist__24120);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__24123 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__24123) : cljs.core.atom.call(null, G__24123);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__24125 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24125) : cljs.core.deref.call(null, G__24125);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__24126_SHARP_, p2__24127_SHARP_) {
    var ret = function() {
      var G__24130 = p1__24126_SHARP_;
      var G__24131 = p2__24127_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__24130, G__24131) : rf.call(null, G__24130, G__24131);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__24134 = null;
      var G__24134__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__24134__1 = function(result) {
        var G__24133 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__24133) : rf.call(null, G__24133);
      };
      var G__24134__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__24134 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__24134__0.call(this);
          case 1:
            return G__24134__1.call(this, result);
          case 2:
            return G__24134__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24134.cljs$core$IFn$_invoke$arity$0 = G__24134__0;
      G__24134.cljs$core$IFn$_invoke$arity$1 = G__24134__1;
      G__24134.cljs$core$IFn$_invoke$arity$2 = G__24134__2;
      return G__24134;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__24143 = null;
          var G__24143__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__24143__1 = function(result) {
            var G__24139 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__24139) : rf.call(null, G__24139);
          };
          var G__24143__2 = function(result, input) {
            var prior = function() {
              var G__24140 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24140) : cljs.core.deref.call(null, G__24140);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__24141 = result;
              var G__24142 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__24141, G__24142) : rf.call(null, G__24141, G__24142);
            }
          };
          G__24143 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24143__0.call(this);
              case 1:
                return G__24143__1.call(this, result);
              case 2:
                return G__24143__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24143.cljs$core$IFn$_invoke$arity$0 = G__24143__0;
          G__24143.cljs$core$IFn$_invoke$arity$1 = G__24143__1;
          G__24143.cljs$core$IFn$_invoke$arity$2 = G__24143__2;
          return G__24143;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__24145_SHARP_, p2__24144_SHARP_) {
    var G__24147 = p2__24144_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__24147) : proc.call(null, G__24147);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj24149 = {};
  return obj24149;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._clj__GT_js[function() {
        var G__24153 = x__4625__auto__;
        return goog.typeOf(G__24153);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._key__GT_js[function() {
        var G__24157 = x__4625__auto__;
        return goog.typeOf(G__24157);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__24160 = k;
    if (G__24160) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__24160.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__24160.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__24160);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__24160);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__24161 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__24161) : cljs.core.clj__GT_js.call(null, G__24161);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__24177 = x;
      if (G__24177) {
        var bit__4662__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3981__auto__ = bit__4662__auto__;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return G__24177.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__24177.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__24177);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__24177);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj24179 = {};
              return obj24179;
            }();
            var seq__24180_24190 = cljs.core.seq(x);
            var chunk__24181_24191 = null;
            var count__24182_24192 = 0;
            var i__24183_24193 = 0;
            while (true) {
              if (i__24183_24193 < count__24182_24192) {
                var vec__24184_24194 = chunk__24181_24191.cljs$core$IIndexed$_nth$arity$2(null, i__24183_24193);
                var k_24195 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24184_24194, 0, null);
                var v_24196 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24184_24194, 1, null);
                m[cljs.core.key__GT_js(k_24195)] = clj__GT_js(v_24196);
                var G__24197 = seq__24180_24190;
                var G__24198 = chunk__24181_24191;
                var G__24199 = count__24182_24192;
                var G__24200 = i__24183_24193 + 1;
                seq__24180_24190 = G__24197;
                chunk__24181_24191 = G__24198;
                count__24182_24192 = G__24199;
                i__24183_24193 = G__24200;
                continue;
              } else {
                var temp__4126__auto___24201 = cljs.core.seq(seq__24180_24190);
                if (temp__4126__auto___24201) {
                  var seq__24180_24202__$1 = temp__4126__auto___24201;
                  if (cljs.core.chunked_seq_QMARK_(seq__24180_24202__$1)) {
                    var c__4768__auto___24203 = cljs.core.chunk_first(seq__24180_24202__$1);
                    var G__24204 = cljs.core.chunk_rest(seq__24180_24202__$1);
                    var G__24205 = c__4768__auto___24203;
                    var G__24206 = cljs.core.count(c__4768__auto___24203);
                    var G__24207 = 0;
                    seq__24180_24190 = G__24204;
                    chunk__24181_24191 = G__24205;
                    count__24182_24192 = G__24206;
                    i__24183_24193 = G__24207;
                    continue;
                  } else {
                    var vec__24185_24208 = cljs.core.first(seq__24180_24202__$1);
                    var k_24209 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24185_24208, 0, null);
                    var v_24210 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24185_24208, 1, null);
                    m[cljs.core.key__GT_js(k_24209)] = clj__GT_js(v_24210);
                    var G__24211 = cljs.core.next(seq__24180_24202__$1);
                    var G__24212 = null;
                    var G__24213 = 0;
                    var G__24214 = 0;
                    seq__24180_24190 = G__24211;
                    chunk__24181_24191 = G__24212;
                    count__24182_24192 = G__24213;
                    i__24183_24193 = G__24214;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__24186_24215 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clj__GT_js, x));
              var chunk__24187_24216 = null;
              var count__24188_24217 = 0;
              var i__24189_24218 = 0;
              while (true) {
                if (i__24189_24218 < count__24188_24217) {
                  var x_24219__$1 = chunk__24187_24216.cljs$core$IIndexed$_nth$arity$2(null, i__24189_24218);
                  arr.push(x_24219__$1);
                  var G__24220 = seq__24186_24215;
                  var G__24221 = chunk__24187_24216;
                  var G__24222 = count__24188_24217;
                  var G__24223 = i__24189_24218 + 1;
                  seq__24186_24215 = G__24220;
                  chunk__24187_24216 = G__24221;
                  count__24188_24217 = G__24222;
                  i__24189_24218 = G__24223;
                  continue;
                } else {
                  var temp__4126__auto___24224 = cljs.core.seq(seq__24186_24215);
                  if (temp__4126__auto___24224) {
                    var seq__24186_24225__$1 = temp__4126__auto___24224;
                    if (cljs.core.chunked_seq_QMARK_(seq__24186_24225__$1)) {
                      var c__4768__auto___24226 = cljs.core.chunk_first(seq__24186_24225__$1);
                      var G__24227 = cljs.core.chunk_rest(seq__24186_24225__$1);
                      var G__24228 = c__4768__auto___24226;
                      var G__24229 = cljs.core.count(c__4768__auto___24226);
                      var G__24230 = 0;
                      seq__24186_24215 = G__24227;
                      chunk__24187_24216 = G__24228;
                      count__24188_24217 = G__24229;
                      i__24189_24218 = G__24230;
                      continue;
                    } else {
                      var x_24231__$1 = cljs.core.first(seq__24186_24225__$1);
                      arr.push(x_24231__$1);
                      var G__24232 = cljs.core.next(seq__24186_24225__$1);
                      var G__24233 = null;
                      var G__24234 = 0;
                      var G__24235 = 0;
                      seq__24186_24215 = G__24232;
                      chunk__24187_24216 = G__24233;
                      count__24188_24217 = G__24234;
                      i__24189_24218 = G__24235;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj24237 = {};
  return obj24237;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._js__GT_clj[function() {
        var G__24241 = x__4625__auto__;
        return goog.typeOf(G__24241);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var js__GT_clj__2 = function() {
    var G__24298__delegate = function(x, opts) {
      var map__24271 = opts;
      var map__24271__$1 = cljs.core.seq_QMARK_(map__24271) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__24271) : map__24271;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24271__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__24271, map__24271__$1, keywordize_keys, keyfn) {
        return function thisfn(x__$1) {
          if (function() {
            var G__24287 = x__$1;
            if (G__24287) {
              var bit__4662__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__3981__auto__ = bit__4662__auto__;
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  return G__24287.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__24287.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__24287);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__24287);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
              } else {
                if (x__$1 instanceof Array) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4737__auto__ = function(map__24271, map__24271__$1, keywordize_keys, keyfn) {
                        return function iter__24288(s__24289) {
                          return new cljs.core.LazySeq(null, function(map__24271, map__24271__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__24289__$1 = s__24289;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__24289__$1);
                                if (temp__4126__auto__) {
                                  var s__24289__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__24289__$2)) {
                                    var c__4735__auto__ = cljs.core.chunk_first(s__24289__$2);
                                    var size__4736__auto__ = cljs.core.count(c__4735__auto__);
                                    var b__24291 = cljs.core.chunk_buffer(size__4736__auto__);
                                    if (function() {
                                      var i__24290 = 0;
                                      while (true) {
                                        if (i__24290 < size__4736__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4735__auto__, i__24290);
                                          cljs.core.chunk_append(b__24291, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__24296 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__24296) : keyfn.call(null, G__24296);
                                          }(), thisfn(x__$1[k])], null));
                                          var G__24299 = i__24290 + 1;
                                          i__24290 = G__24299;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__24291), iter__24288(cljs.core.chunk_rest(s__24289__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__24291), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__24289__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__24297 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__24297) : keyfn.call(null, G__24297);
                                    }(), thisfn(x__$1[k])], null), iter__24288(cljs.core.rest(s__24289__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__24271, map__24271__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__24271, map__24271__$1, keywordize_keys, keyfn);
                      return iter__4737__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__24271, map__24271__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__24298 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__24300__i = 0, G__24300__a = new Array(arguments.length - 1);
        while (G__24300__i < G__24300__a.length) {
          G__24300__a[G__24300__i] = arguments[G__24300__i + 1];
          ++G__24300__i;
        }
        opts = new cljs.core.IndexedSeq(G__24300__a, 0);
      }
      return G__24298__delegate.call(this, x, opts);
    };
    G__24298.cljs$lang$maxFixedArity = 1;
    G__24298.cljs$lang$applyTo = function(arglist__24301) {
      var x = cljs.core.first(arglist__24301);
      var opts = cljs.core.rest(arglist__24301);
      return G__24298__delegate(x, opts);
    };
    G__24298.cljs$core$IFn$_invoke$arity$variadic = G__24298__delegate;
    return G__24298;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        var G__24302 = null;
        if (arguments.length > 1) {
          var G__24303__i = 0, G__24303__a = new Array(arguments.length - 1);
          while (G__24303__i < G__24303__a.length) {
            G__24303__a[G__24303__i] = arguments[G__24303__i + 1];
            ++G__24303__i;
          }
          G__24302 = new cljs.core.IndexedSeq(G__24303__a, 0);
        }
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__24302);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = function() {
    var G__24306 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__24306) : cljs.core.atom.call(null, G__24306);
  }();
  return function(mem) {
    return function() {
      var G__24308__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__24307 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24307) : cljs.core.deref.call(null, G__24307);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__24308 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__24309__i = 0, G__24309__a = new Array(arguments.length - 0);
          while (G__24309__i < G__24309__a.length) {
            G__24309__a[G__24309__i] = arguments[G__24309__i + 0];
            ++G__24309__i;
          }
          args = new cljs.core.IndexedSeq(G__24309__a, 0);
        }
        return G__24308__delegate.call(this, args);
      };
      G__24308.cljs$lang$maxFixedArity = 0;
      G__24308.cljs$lang$applyTo = function(arglist__24310) {
        var args = cljs.core.seq(arglist__24310);
        return G__24308__delegate(args);
      };
      G__24308.cljs$core$IFn$_invoke$arity$variadic = G__24308__delegate;
      return G__24308;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__24312 = ret;
        f = G__24312;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__24313__delegate = function(f, args) {
      return trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__24313 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__24314__i = 0, G__24314__a = new Array(arguments.length - 1);
        while (G__24314__i < G__24314__a.length) {
          G__24314__a[G__24314__i] = arguments[G__24314__i + 1];
          ++G__24314__i;
        }
        args = new cljs.core.IndexedSeq(G__24314__a, 0);
      }
      return G__24313__delegate.call(this, f, args);
    };
    G__24313.cljs$lang$maxFixedArity = 1;
    G__24313.cljs$lang$applyTo = function(arglist__24315) {
      var f = cljs.core.first(arglist__24315);
      var args = cljs.core.rest(arglist__24315);
      return G__24313__delegate(f, args);
    };
    G__24313.cljs$core$IFn$_invoke$arity$variadic = G__24313__delegate;
    return G__24313;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        var G__24316 = null;
        if (arguments.length > 1) {
          var G__24317__i = 0, G__24317__a = new Array(arguments.length - 1);
          while (G__24317__i < G__24317__a.length) {
            G__24317__a[G__24317__i] = arguments[G__24317__i + 1];
            ++G__24317__i;
          }
          G__24316 = new cljs.core.IndexedSeq(G__24317__a, 0);
        }
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__24316);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  var G__24320 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__24320) : Math.floor.call(null, G__24320);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__24322 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__24322) : f.call(null, G__24322);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__24324 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__24324) : cljs.core.atom.call(null, G__24324);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__24325__i = 0, G__24325__a = new Array(arguments.length - 1);
      while (G__24325__i < G__24325__a.length) {
        G__24325__a[G__24325__i] = arguments[G__24325__i + 1];
        ++G__24325__i;
      }
      args = new cljs.core.IndexedSeq(G__24325__a, 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__24326) {
    var f = cljs.core.first(arglist__24326);
    var args = cljs.core.rest(arglist__24326);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__24391 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24391) : cljs.core.deref.call(null, G__24391);
    }(), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3981__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__3981__auto__) {
      return or__3981__auto__;
    } else {
      var or__3981__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3981__auto____$1) {
        return or__3981__auto____$1;
      } else {
        var and__3969__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__3969__auto__) {
          var and__3969__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__3969__auto____$1) {
            var and__3969__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__3969__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__24416 = isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__24414 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__24414) : child.call(null, G__24414);
                  }(), function() {
                    var G__24415 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__24415) : parent.call(null, G__24415);
                  }());
                  var G__24417 = i + 1;
                  ret = G__24416;
                  i = G__24417;
                  continue;
                }
                break;
              }
            } else {
              return and__3969__auto____$2;
            }
          } else {
            return and__3969__auto____$1;
          }
        } else {
          return and__3969__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__24421 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24421) : cljs.core.deref.call(null, G__24421);
    }(), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__24425 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24425) : cljs.core.deref.call(null, G__24425);
    }(), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__24429 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24429) : cljs.core.deref.call(null, G__24429);
    }(), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__24438 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__24438) : targets.call(null, G__24438);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__24439 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__24439) : sources.call(null, G__24439);
        }()));
      };
    }(tp, td, ta);
    var or__3981__auto__ = cljs.core.contains_QMARK_(function() {
      var G__24443 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__24443) : tp.call(null, G__24443);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__24444 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__24444) : ta.call(null, G__24444);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__24445 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__24445) : ta.call(null, G__24445);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__24452 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__24452) : parentMap.call(null, G__24452);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__24453 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__24453) : parentMap.call(null, G__24453);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__24446_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__24446_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__24446_SHARP_), cljs.core.second(p1__24446_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__24454 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__24454) : parentMap.call(null, G__24454);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__24447_SHARP_, p2__24448_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__24447_SHARP_, p2__24448_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__24457 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24457) : cljs.core.deref.call(null, G__24457);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__24458 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24458) : cljs.core.deref.call(null, G__24458);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__24474 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24474) : cljs.core.deref.call(null, G__24474);
  }().call(null, x);
  var or__3981__auto__ = cljs.core.truth_(function() {
    var and__3969__auto__ = xprefs;
    if (cljs.core.truth_(and__3969__auto__)) {
      var G__24476 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__24476) : xprefs.call(null, G__24476);
    } else {
      return and__3969__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var or__3981__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__24477 = cljs.core.rest(ps);
          ps = G__24477;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3981__auto____$1)) {
      return or__3981__auto____$1;
    } else {
      var or__3981__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__24478 = cljs.core.rest(ps);
            ps = G__24478;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3981__auto____$2)) {
        return or__3981__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3981__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__24492) {
    var vec__24493 = p__24492;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24493, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24493, 1, null);
    var e = vec__24493;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__24494 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24494) : cljs.core.deref.call(null, G__24494);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3981__auto__ = be == null;
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__24495 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24495) : cljs.core.deref.call(null, G__24495);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__24496 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24496) : cljs.core.deref.call(null, G__24496);
    }(), function() {
      var G__24497 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24497) : cljs.core.deref.call(null, G__24497);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj24499 = {};
  return obj24499;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._reset[function() {
        var G__24503 = x__4625__auto__;
        return goog.typeOf(G__24503);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._reset["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._add_method[function() {
        var G__24507 = x__4625__auto__;
        return goog.typeOf(G__24507);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._add_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._remove_method[function() {
        var G__24511 = x__4625__auto__;
        return goog.typeOf(G__24511);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._remove_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._prefer_method[function() {
        var G__24515 = x__4625__auto__;
        return goog.typeOf(G__24515);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._get_method[function() {
        var G__24519 = x__4625__auto__;
        return goog.typeOf(G__24519);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._get_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._methods[function() {
        var G__24523 = x__4625__auto__;
        return goog.typeOf(G__24523);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._methods["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._prefers[function() {
        var G__24527 = x__4625__auto__;
        return goog.typeOf(G__24527);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._prefers["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__24529 = this$__$1;
  return goog.getUid(G__24529);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__24530 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24530) : cljs.core.deref.call(null, G__24530);
  }(), function() {
    var G__24531 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24531) : cljs.core.deref.call(null, G__24531);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__24532 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24532) : cljs.core.deref.call(null, G__24532);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__24533 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24533) : cljs.core.deref.call(null, G__24533);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__24534 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24534) : cljs.core.deref.call(null, G__24534);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__24535 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__24535) : cljs.core.deref.call(null, G__24535);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__25376 = null;
  var G__25376__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__25376__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24536 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__24536) : self__.dispatch_fn.call(null, G__24536);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24537 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__24537) : target_fn.call(null, G__24537);
  };
  var G__25376__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24538 = a;
      var G__24539 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__24538, G__24539) : self__.dispatch_fn.call(null, G__24538, G__24539);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24540 = a;
    var G__24541 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__24540, G__24541) : target_fn.call(null, G__24540, G__24541);
  };
  var G__25376__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24542 = a;
      var G__24543 = b;
      var G__24544 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__24542, G__24543, G__24544) : self__.dispatch_fn.call(null, G__24542, G__24543, G__24544);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24545 = a;
    var G__24546 = b;
    var G__24547 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__24545, G__24546, G__24547) : target_fn.call(null, G__24545, G__24546, G__24547);
  };
  var G__25376__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24548 = a;
      var G__24549 = b;
      var G__24550 = c;
      var G__24551 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__24548, G__24549, G__24550, G__24551) : self__.dispatch_fn.call(null, G__24548, G__24549, G__24550, G__24551);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24552 = a;
    var G__24553 = b;
    var G__24554 = c;
    var G__24555 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__24552, G__24553, G__24554, G__24555) : target_fn.call(null, G__24552, G__24553, G__24554, G__24555);
  };
  var G__25376__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24556 = a;
      var G__24557 = b;
      var G__24558 = c;
      var G__24559 = d;
      var G__24560 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__24556, G__24557, G__24558, G__24559, G__24560) : self__.dispatch_fn.call(null, G__24556, G__24557, G__24558, G__24559, G__24560);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24561 = a;
    var G__24562 = b;
    var G__24563 = c;
    var G__24564 = d;
    var G__24565 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__24561, G__24562, G__24563, G__24564, G__24565) : target_fn.call(null, G__24561, G__24562, G__24563, G__24564, G__24565);
  };
  var G__25376__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24566 = a;
      var G__24567 = b;
      var G__24568 = c;
      var G__24569 = d;
      var G__24570 = e;
      var G__24571 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__24566, G__24567, G__24568, G__24569, G__24570, G__24571) : self__.dispatch_fn.call(null, G__24566, G__24567, G__24568, G__24569, G__24570, G__24571);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24572 = a;
    var G__24573 = b;
    var G__24574 = c;
    var G__24575 = d;
    var G__24576 = e;
    var G__24577 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__24572, G__24573, G__24574, G__24575, G__24576, G__24577) : target_fn.call(null, G__24572, G__24573, G__24574, G__24575, G__24576, G__24577);
  };
  var G__25376__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24578 = a;
      var G__24579 = b;
      var G__24580 = c;
      var G__24581 = d;
      var G__24582 = e;
      var G__24583 = f;
      var G__24584 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__24578, G__24579, G__24580, G__24581, G__24582, G__24583, G__24584) : self__.dispatch_fn.call(null, G__24578, G__24579, G__24580, G__24581, G__24582, G__24583, G__24584);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24585 = a;
    var G__24586 = b;
    var G__24587 = c;
    var G__24588 = d;
    var G__24589 = e;
    var G__24590 = f;
    var G__24591 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__24585, G__24586, G__24587, G__24588, G__24589, G__24590, G__24591) : target_fn.call(null, G__24585, G__24586, G__24587, G__24588, G__24589, G__24590, G__24591);
  };
  var G__25376__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24592 = a;
      var G__24593 = b;
      var G__24594 = c;
      var G__24595 = d;
      var G__24596 = e;
      var G__24597 = f;
      var G__24598 = g;
      var G__24599 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__24592, G__24593, G__24594, G__24595, G__24596, G__24597, G__24598, G__24599) : self__.dispatch_fn.call(null, G__24592, G__24593, G__24594, G__24595, G__24596, G__24597, G__24598, G__24599);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24600 = a;
    var G__24601 = b;
    var G__24602 = c;
    var G__24603 = d;
    var G__24604 = e;
    var G__24605 = f;
    var G__24606 = g;
    var G__24607 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__24600, G__24601, G__24602, G__24603, G__24604, G__24605, G__24606, G__24607) : target_fn.call(null, G__24600, G__24601, G__24602, G__24603, G__24604, G__24605, G__24606, G__24607);
  };
  var G__25376__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24608 = a;
      var G__24609 = b;
      var G__24610 = c;
      var G__24611 = d;
      var G__24612 = e;
      var G__24613 = f;
      var G__24614 = g;
      var G__24615 = h;
      var G__24616 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__24608, G__24609, G__24610, G__24611, G__24612, G__24613, G__24614, G__24615, G__24616) : self__.dispatch_fn.call(null, G__24608, G__24609, G__24610, G__24611, G__24612, G__24613, G__24614, G__24615, G__24616);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24617 = a;
    var G__24618 = b;
    var G__24619 = c;
    var G__24620 = d;
    var G__24621 = e;
    var G__24622 = f;
    var G__24623 = g;
    var G__24624 = h;
    var G__24625 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__24617, G__24618, G__24619, G__24620, G__24621, G__24622, G__24623, G__24624, G__24625) : target_fn.call(null, G__24617, G__24618, G__24619, G__24620, G__24621, G__24622, G__24623, G__24624, G__24625);
  };
  var G__25376__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24626 = a;
      var G__24627 = b;
      var G__24628 = c;
      var G__24629 = d;
      var G__24630 = e;
      var G__24631 = f;
      var G__24632 = g;
      var G__24633 = h;
      var G__24634 = i;
      var G__24635 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__24626, G__24627, G__24628, G__24629, G__24630, G__24631, G__24632, G__24633, G__24634, G__24635) : self__.dispatch_fn.call(null, G__24626, G__24627, G__24628, G__24629, G__24630, G__24631, G__24632, G__24633, G__24634, G__24635);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24636 = a;
    var G__24637 = b;
    var G__24638 = c;
    var G__24639 = d;
    var G__24640 = e;
    var G__24641 = f;
    var G__24642 = g;
    var G__24643 = h;
    var G__24644 = i;
    var G__24645 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__24636, G__24637, G__24638, G__24639, G__24640, G__24641, G__24642, G__24643, G__24644, G__24645) : target_fn.call(null, G__24636, G__24637, G__24638, G__24639, G__24640, G__24641, G__24642, G__24643, G__24644, G__24645);
  };
  var G__25376__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24646 = a;
      var G__24647 = b;
      var G__24648 = c;
      var G__24649 = d;
      var G__24650 = e;
      var G__24651 = f;
      var G__24652 = g;
      var G__24653 = h;
      var G__24654 = i;
      var G__24655 = j;
      var G__24656 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__24646, G__24647, G__24648, G__24649, G__24650, G__24651, G__24652, G__24653, G__24654, G__24655, G__24656) : self__.dispatch_fn.call(null, G__24646, G__24647, G__24648, G__24649, G__24650, G__24651, G__24652, G__24653, G__24654, G__24655, G__24656);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24657 = a;
    var G__24658 = b;
    var G__24659 = c;
    var G__24660 = d;
    var G__24661 = e;
    var G__24662 = f;
    var G__24663 = g;
    var G__24664 = h;
    var G__24665 = i;
    var G__24666 = j;
    var G__24667 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__24657, G__24658, G__24659, G__24660, G__24661, G__24662, G__24663, G__24664, G__24665, G__24666, G__24667) : target_fn.call(null, G__24657, G__24658, G__24659, G__24660, G__24661, G__24662, G__24663, G__24664, G__24665, G__24666, G__24667);
  };
  var G__25376__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24668 = a;
      var G__24669 = b;
      var G__24670 = c;
      var G__24671 = d;
      var G__24672 = e;
      var G__24673 = f;
      var G__24674 = g;
      var G__24675 = h;
      var G__24676 = i;
      var G__24677 = j;
      var G__24678 = k;
      var G__24679 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__24668, G__24669, G__24670, G__24671, G__24672, G__24673, G__24674, G__24675, G__24676, G__24677, G__24678, G__24679) : self__.dispatch_fn.call(null, G__24668, G__24669, G__24670, G__24671, G__24672, G__24673, G__24674, G__24675, G__24676, G__24677, G__24678, G__24679);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24680 = a;
    var G__24681 = b;
    var G__24682 = c;
    var G__24683 = d;
    var G__24684 = e;
    var G__24685 = f;
    var G__24686 = g;
    var G__24687 = h;
    var G__24688 = i;
    var G__24689 = j;
    var G__24690 = k;
    var G__24691 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__24680, G__24681, G__24682, G__24683, G__24684, G__24685, G__24686, G__24687, G__24688, G__24689, G__24690, G__24691) : target_fn.call(null, G__24680, G__24681, G__24682, G__24683, G__24684, G__24685, G__24686, G__24687, G__24688, G__24689, G__24690, G__24691);
  };
  var G__25376__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24692 = a;
      var G__24693 = b;
      var G__24694 = c;
      var G__24695 = d;
      var G__24696 = e;
      var G__24697 = f;
      var G__24698 = g;
      var G__24699 = h;
      var G__24700 = i;
      var G__24701 = j;
      var G__24702 = k;
      var G__24703 = l;
      var G__24704 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__24692, G__24693, G__24694, G__24695, G__24696, G__24697, G__24698, G__24699, G__24700, G__24701, G__24702, G__24703, G__24704) : self__.dispatch_fn.call(null, G__24692, G__24693, G__24694, G__24695, G__24696, G__24697, G__24698, G__24699, G__24700, G__24701, G__24702, G__24703, G__24704);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24705 = a;
    var G__24706 = b;
    var G__24707 = c;
    var G__24708 = d;
    var G__24709 = e;
    var G__24710 = f;
    var G__24711 = g;
    var G__24712 = h;
    var G__24713 = i;
    var G__24714 = j;
    var G__24715 = k;
    var G__24716 = l;
    var G__24717 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__24705, G__24706, G__24707, G__24708, G__24709, G__24710, G__24711, G__24712, G__24713, G__24714, G__24715, G__24716, G__24717) : target_fn.call(null, G__24705, G__24706, G__24707, G__24708, G__24709, G__24710, G__24711, G__24712, G__24713, G__24714, G__24715, G__24716, G__24717);
  };
  var G__25376__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24718 = a;
      var G__24719 = b;
      var G__24720 = c;
      var G__24721 = d;
      var G__24722 = e;
      var G__24723 = f;
      var G__24724 = g;
      var G__24725 = h;
      var G__24726 = i;
      var G__24727 = j;
      var G__24728 = k;
      var G__24729 = l;
      var G__24730 = m;
      var G__24731 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__24718, G__24719, G__24720, G__24721, G__24722, G__24723, G__24724, G__24725, G__24726, G__24727, G__24728, G__24729, G__24730, G__24731) : self__.dispatch_fn.call(null, G__24718, G__24719, G__24720, G__24721, G__24722, G__24723, G__24724, G__24725, G__24726, G__24727, G__24728, G__24729, G__24730, G__24731);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24732 = a;
    var G__24733 = b;
    var G__24734 = c;
    var G__24735 = d;
    var G__24736 = e;
    var G__24737 = f;
    var G__24738 = g;
    var G__24739 = h;
    var G__24740 = i;
    var G__24741 = j;
    var G__24742 = k;
    var G__24743 = l;
    var G__24744 = m;
    var G__24745 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__24732, G__24733, G__24734, G__24735, G__24736, G__24737, G__24738, G__24739, G__24740, G__24741, G__24742, G__24743, G__24744, G__24745) : target_fn.call(null, G__24732, G__24733, G__24734, G__24735, G__24736, G__24737, G__24738, G__24739, G__24740, G__24741, G__24742, G__24743, G__24744, G__24745);
  };
  var G__25376__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24746 = a;
      var G__24747 = b;
      var G__24748 = c;
      var G__24749 = d;
      var G__24750 = e;
      var G__24751 = f;
      var G__24752 = g;
      var G__24753 = h;
      var G__24754 = i;
      var G__24755 = j;
      var G__24756 = k;
      var G__24757 = l;
      var G__24758 = m;
      var G__24759 = n;
      var G__24760 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__24746, G__24747, G__24748, G__24749, G__24750, G__24751, G__24752, G__24753, G__24754, G__24755, G__24756, G__24757, G__24758, G__24759, G__24760) : self__.dispatch_fn.call(null, G__24746, G__24747, G__24748, G__24749, G__24750, G__24751, G__24752, G__24753, G__24754, G__24755, G__24756, G__24757, G__24758, G__24759, G__24760);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24761 = a;
    var G__24762 = b;
    var G__24763 = c;
    var G__24764 = d;
    var G__24765 = e;
    var G__24766 = f;
    var G__24767 = g;
    var G__24768 = h;
    var G__24769 = i;
    var G__24770 = j;
    var G__24771 = k;
    var G__24772 = l;
    var G__24773 = m;
    var G__24774 = n;
    var G__24775 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__24761, G__24762, G__24763, G__24764, G__24765, G__24766, G__24767, G__24768, G__24769, G__24770, G__24771, G__24772, G__24773, G__24774, G__24775) : target_fn.call(null, G__24761, G__24762, G__24763, G__24764, G__24765, G__24766, G__24767, G__24768, G__24769, G__24770, G__24771, G__24772, G__24773, G__24774, G__24775);
  };
  var G__25376__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24776 = a;
      var G__24777 = b;
      var G__24778 = c;
      var G__24779 = d;
      var G__24780 = e;
      var G__24781 = f;
      var G__24782 = g;
      var G__24783 = h;
      var G__24784 = i;
      var G__24785 = j;
      var G__24786 = k;
      var G__24787 = l;
      var G__24788 = m;
      var G__24789 = n;
      var G__24790 = o;
      var G__24791 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__24776, G__24777, G__24778, G__24779, G__24780, G__24781, G__24782, G__24783, G__24784, G__24785, G__24786, G__24787, G__24788, G__24789, G__24790, G__24791) : self__.dispatch_fn.call(null, G__24776, G__24777, G__24778, G__24779, G__24780, G__24781, G__24782, G__24783, G__24784, G__24785, G__24786, G__24787, G__24788, G__24789, G__24790, G__24791);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24792 = a;
    var G__24793 = b;
    var G__24794 = c;
    var G__24795 = d;
    var G__24796 = e;
    var G__24797 = f;
    var G__24798 = g;
    var G__24799 = h;
    var G__24800 = i;
    var G__24801 = j;
    var G__24802 = k;
    var G__24803 = l;
    var G__24804 = m;
    var G__24805 = n;
    var G__24806 = o;
    var G__24807 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__24792, G__24793, G__24794, G__24795, G__24796, G__24797, G__24798, G__24799, G__24800, G__24801, G__24802, G__24803, G__24804, G__24805, G__24806, G__24807) : target_fn.call(null, G__24792, G__24793, G__24794, G__24795, G__24796, G__24797, G__24798, G__24799, G__24800, G__24801, G__24802, G__24803, G__24804, G__24805, G__24806, G__24807);
  };
  var G__25376__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24808 = a;
      var G__24809 = b;
      var G__24810 = c;
      var G__24811 = d;
      var G__24812 = e;
      var G__24813 = f;
      var G__24814 = g;
      var G__24815 = h;
      var G__24816 = i;
      var G__24817 = j;
      var G__24818 = k;
      var G__24819 = l;
      var G__24820 = m;
      var G__24821 = n;
      var G__24822 = o;
      var G__24823 = p;
      var G__24824 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__24808, G__24809, G__24810, G__24811, G__24812, G__24813, G__24814, G__24815, G__24816, G__24817, G__24818, G__24819, G__24820, G__24821, G__24822, G__24823, G__24824) : self__.dispatch_fn.call(null, G__24808, G__24809, G__24810, G__24811, G__24812, G__24813, G__24814, G__24815, G__24816, G__24817, G__24818, G__24819, G__24820, G__24821, G__24822, G__24823, G__24824);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24825 = a;
    var G__24826 = b;
    var G__24827 = c;
    var G__24828 = d;
    var G__24829 = e;
    var G__24830 = f;
    var G__24831 = g;
    var G__24832 = h;
    var G__24833 = i;
    var G__24834 = j;
    var G__24835 = k;
    var G__24836 = l;
    var G__24837 = m;
    var G__24838 = n;
    var G__24839 = o;
    var G__24840 = p;
    var G__24841 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__24825, G__24826, G__24827, G__24828, G__24829, G__24830, G__24831, G__24832, G__24833, G__24834, G__24835, G__24836, G__24837, G__24838, G__24839, G__24840, G__24841) : target_fn.call(null, G__24825, G__24826, G__24827, G__24828, G__24829, G__24830, G__24831, G__24832, G__24833, G__24834, G__24835, G__24836, G__24837, G__24838, G__24839, G__24840, G__24841);
  };
  var G__25376__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24842 = a;
      var G__24843 = b;
      var G__24844 = c;
      var G__24845 = d;
      var G__24846 = e;
      var G__24847 = f;
      var G__24848 = g;
      var G__24849 = h;
      var G__24850 = i;
      var G__24851 = j;
      var G__24852 = k;
      var G__24853 = l;
      var G__24854 = m;
      var G__24855 = n;
      var G__24856 = o;
      var G__24857 = p;
      var G__24858 = q;
      var G__24859 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__24842, G__24843, G__24844, G__24845, G__24846, G__24847, G__24848, G__24849, G__24850, G__24851, G__24852, G__24853, G__24854, G__24855, G__24856, G__24857, G__24858, G__24859) : self__.dispatch_fn.call(null, G__24842, G__24843, G__24844, G__24845, G__24846, G__24847, G__24848, G__24849, G__24850, G__24851, G__24852, G__24853, G__24854, G__24855, G__24856, G__24857, G__24858, G__24859);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24860 = a;
    var G__24861 = b;
    var G__24862 = c;
    var G__24863 = d;
    var G__24864 = e;
    var G__24865 = f;
    var G__24866 = g;
    var G__24867 = h;
    var G__24868 = i;
    var G__24869 = j;
    var G__24870 = k;
    var G__24871 = l;
    var G__24872 = m;
    var G__24873 = n;
    var G__24874 = o;
    var G__24875 = p;
    var G__24876 = q;
    var G__24877 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__24860, G__24861, G__24862, G__24863, G__24864, G__24865, G__24866, G__24867, G__24868, G__24869, G__24870, G__24871, G__24872, G__24873, G__24874, G__24875, G__24876, G__24877) : target_fn.call(null, G__24860, G__24861, G__24862, G__24863, G__24864, G__24865, G__24866, G__24867, G__24868, G__24869, G__24870, G__24871, G__24872, G__24873, G__24874, G__24875, G__24876, G__24877);
  };
  var G__25376__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24878 = a;
      var G__24879 = b;
      var G__24880 = c;
      var G__24881 = d;
      var G__24882 = e;
      var G__24883 = f;
      var G__24884 = g;
      var G__24885 = h;
      var G__24886 = i;
      var G__24887 = j;
      var G__24888 = k;
      var G__24889 = l;
      var G__24890 = m;
      var G__24891 = n;
      var G__24892 = o;
      var G__24893 = p;
      var G__24894 = q;
      var G__24895 = r;
      var G__24896 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__24878, G__24879, G__24880, G__24881, G__24882, G__24883, G__24884, G__24885, G__24886, G__24887, G__24888, G__24889, G__24890, G__24891, G__24892, G__24893, G__24894, G__24895, G__24896) : self__.dispatch_fn.call(null, G__24878, G__24879, G__24880, G__24881, G__24882, G__24883, G__24884, G__24885, G__24886, G__24887, G__24888, G__24889, G__24890, G__24891, G__24892, G__24893, G__24894, 
      G__24895, G__24896);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24897 = a;
    var G__24898 = b;
    var G__24899 = c;
    var G__24900 = d;
    var G__24901 = e;
    var G__24902 = f;
    var G__24903 = g;
    var G__24904 = h;
    var G__24905 = i;
    var G__24906 = j;
    var G__24907 = k;
    var G__24908 = l;
    var G__24909 = m;
    var G__24910 = n;
    var G__24911 = o;
    var G__24912 = p;
    var G__24913 = q;
    var G__24914 = r;
    var G__24915 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__24897, G__24898, G__24899, G__24900, G__24901, G__24902, G__24903, G__24904, G__24905, G__24906, G__24907, G__24908, G__24909, G__24910, G__24911, G__24912, G__24913, G__24914, G__24915) : target_fn.call(null, G__24897, G__24898, G__24899, G__24900, G__24901, G__24902, G__24903, G__24904, G__24905, G__24906, G__24907, G__24908, G__24909, G__24910, G__24911, G__24912, G__24913, G__24914, G__24915);
  };
  var G__25376__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__24916 = a;
      var G__24917 = b;
      var G__24918 = c;
      var G__24919 = d;
      var G__24920 = e;
      var G__24921 = f;
      var G__24922 = g;
      var G__24923 = h;
      var G__24924 = i;
      var G__24925 = j;
      var G__24926 = k;
      var G__24927 = l;
      var G__24928 = m;
      var G__24929 = n;
      var G__24930 = o;
      var G__24931 = p;
      var G__24932 = q;
      var G__24933 = r;
      var G__24934 = s;
      var G__24935 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__24916, G__24917, G__24918, G__24919, G__24920, G__24921, G__24922, G__24923, G__24924, G__24925, G__24926, G__24927, G__24928, G__24929, G__24930, G__24931, G__24932, G__24933, G__24934, G__24935) : self__.dispatch_fn.call(null, G__24916, G__24917, G__24918, G__24919, G__24920, G__24921, G__24922, G__24923, G__24924, G__24925, G__24926, G__24927, G__24928, G__24929, G__24930, G__24931, 
      G__24932, G__24933, G__24934, G__24935);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__24936 = a;
    var G__24937 = b;
    var G__24938 = c;
    var G__24939 = d;
    var G__24940 = e;
    var G__24941 = f;
    var G__24942 = g;
    var G__24943 = h;
    var G__24944 = i;
    var G__24945 = j;
    var G__24946 = k;
    var G__24947 = l;
    var G__24948 = m;
    var G__24949 = n;
    var G__24950 = o;
    var G__24951 = p;
    var G__24952 = q;
    var G__24953 = r;
    var G__24954 = s;
    var G__24955 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__24936, G__24937, G__24938, G__24939, G__24940, G__24941, G__24942, G__24943, G__24944, G__24945, G__24946, G__24947, G__24948, G__24949, G__24950, G__24951, G__24952, G__24953, G__24954, G__24955) : target_fn.call(null, G__24936, G__24937, G__24938, G__24939, G__24940, G__24941, G__24942, G__24943, G__24944, G__24945, G__24946, G__24947, G__24948, G__24949, G__24950, G__24951, G__24952, G__24953, G__24954, 
    G__24955);
  };
  var G__25376__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__25376 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__25376__1.call(this, self__);
      case 2:
        return G__25376__2.call(this, self__, a);
      case 3:
        return G__25376__3.call(this, self__, a, b);
      case 4:
        return G__25376__4.call(this, self__, a, b, c);
      case 5:
        return G__25376__5.call(this, self__, a, b, c, d);
      case 6:
        return G__25376__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__25376__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__25376__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__25376__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__25376__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__25376__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__25376__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__25376__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__25376__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__25376__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__25376__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__25376__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__25376__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__25376__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__25376__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__25376__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__25376__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__25376.cljs$core$IFn$_invoke$arity$1 = G__25376__1;
  G__25376.cljs$core$IFn$_invoke$arity$2 = G__25376__2;
  G__25376.cljs$core$IFn$_invoke$arity$3 = G__25376__3;
  G__25376.cljs$core$IFn$_invoke$arity$4 = G__25376__4;
  G__25376.cljs$core$IFn$_invoke$arity$5 = G__25376__5;
  G__25376.cljs$core$IFn$_invoke$arity$6 = G__25376__6;
  G__25376.cljs$core$IFn$_invoke$arity$7 = G__25376__7;
  G__25376.cljs$core$IFn$_invoke$arity$8 = G__25376__8;
  G__25376.cljs$core$IFn$_invoke$arity$9 = G__25376__9;
  G__25376.cljs$core$IFn$_invoke$arity$10 = G__25376__10;
  G__25376.cljs$core$IFn$_invoke$arity$11 = G__25376__11;
  G__25376.cljs$core$IFn$_invoke$arity$12 = G__25376__12;
  G__25376.cljs$core$IFn$_invoke$arity$13 = G__25376__13;
  G__25376.cljs$core$IFn$_invoke$arity$14 = G__25376__14;
  G__25376.cljs$core$IFn$_invoke$arity$15 = G__25376__15;
  G__25376.cljs$core$IFn$_invoke$arity$16 = G__25376__16;
  G__25376.cljs$core$IFn$_invoke$arity$17 = G__25376__17;
  G__25376.cljs$core$IFn$_invoke$arity$18 = G__25376__18;
  G__25376.cljs$core$IFn$_invoke$arity$19 = G__25376__19;
  G__25376.cljs$core$IFn$_invoke$arity$20 = G__25376__20;
  G__25376.cljs$core$IFn$_invoke$arity$21 = G__25376__21;
  G__25376.cljs$core$IFn$_invoke$arity$22 = G__25376__22;
  return G__25376;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args24528) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args24528)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__24956 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__24956) : self__.dispatch_fn.call(null, G__24956);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__24957 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__24957) : target_fn.call(null, G__24957);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__24958 = a;
    var G__24959 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__24958, G__24959) : self__.dispatch_fn.call(null, G__24958, G__24959);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__24960 = a;
  var G__24961 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__24960, G__24961) : target_fn.call(null, G__24960, G__24961);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__24962 = a;
    var G__24963 = b;
    var G__24964 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__24962, G__24963, G__24964) : self__.dispatch_fn.call(null, G__24962, G__24963, G__24964);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__24965 = a;
  var G__24966 = b;
  var G__24967 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__24965, G__24966, G__24967) : target_fn.call(null, G__24965, G__24966, G__24967);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__24968 = a;
    var G__24969 = b;
    var G__24970 = c;
    var G__24971 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__24968, G__24969, G__24970, G__24971) : self__.dispatch_fn.call(null, G__24968, G__24969, G__24970, G__24971);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__24972 = a;
  var G__24973 = b;
  var G__24974 = c;
  var G__24975 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__24972, G__24973, G__24974, G__24975) : target_fn.call(null, G__24972, G__24973, G__24974, G__24975);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__24976 = a;
    var G__24977 = b;
    var G__24978 = c;
    var G__24979 = d;
    var G__24980 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__24976, G__24977, G__24978, G__24979, G__24980) : self__.dispatch_fn.call(null, G__24976, G__24977, G__24978, G__24979, G__24980);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__24981 = a;
  var G__24982 = b;
  var G__24983 = c;
  var G__24984 = d;
  var G__24985 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__24981, G__24982, G__24983, G__24984, G__24985) : target_fn.call(null, G__24981, G__24982, G__24983, G__24984, G__24985);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__24986 = a;
    var G__24987 = b;
    var G__24988 = c;
    var G__24989 = d;
    var G__24990 = e;
    var G__24991 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__24986, G__24987, G__24988, G__24989, G__24990, G__24991) : self__.dispatch_fn.call(null, G__24986, G__24987, G__24988, G__24989, G__24990, G__24991);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__24992 = a;
  var G__24993 = b;
  var G__24994 = c;
  var G__24995 = d;
  var G__24996 = e;
  var G__24997 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__24992, G__24993, G__24994, G__24995, G__24996, G__24997) : target_fn.call(null, G__24992, G__24993, G__24994, G__24995, G__24996, G__24997);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__24998 = a;
    var G__24999 = b;
    var G__25000 = c;
    var G__25001 = d;
    var G__25002 = e;
    var G__25003 = f;
    var G__25004 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__24998, G__24999, G__25000, G__25001, G__25002, G__25003, G__25004) : self__.dispatch_fn.call(null, G__24998, G__24999, G__25000, G__25001, G__25002, G__25003, G__25004);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25005 = a;
  var G__25006 = b;
  var G__25007 = c;
  var G__25008 = d;
  var G__25009 = e;
  var G__25010 = f;
  var G__25011 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__25005, G__25006, G__25007, G__25008, G__25009, G__25010, G__25011) : target_fn.call(null, G__25005, G__25006, G__25007, G__25008, G__25009, G__25010, G__25011);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25012 = a;
    var G__25013 = b;
    var G__25014 = c;
    var G__25015 = d;
    var G__25016 = e;
    var G__25017 = f;
    var G__25018 = g;
    var G__25019 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__25012, G__25013, G__25014, G__25015, G__25016, G__25017, G__25018, G__25019) : self__.dispatch_fn.call(null, G__25012, G__25013, G__25014, G__25015, G__25016, G__25017, G__25018, G__25019);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25020 = a;
  var G__25021 = b;
  var G__25022 = c;
  var G__25023 = d;
  var G__25024 = e;
  var G__25025 = f;
  var G__25026 = g;
  var G__25027 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__25020, G__25021, G__25022, G__25023, G__25024, G__25025, G__25026, G__25027) : target_fn.call(null, G__25020, G__25021, G__25022, G__25023, G__25024, G__25025, G__25026, G__25027);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25028 = a;
    var G__25029 = b;
    var G__25030 = c;
    var G__25031 = d;
    var G__25032 = e;
    var G__25033 = f;
    var G__25034 = g;
    var G__25035 = h;
    var G__25036 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__25028, G__25029, G__25030, G__25031, G__25032, G__25033, G__25034, G__25035, G__25036) : self__.dispatch_fn.call(null, G__25028, G__25029, G__25030, G__25031, G__25032, G__25033, G__25034, G__25035, G__25036);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25037 = a;
  var G__25038 = b;
  var G__25039 = c;
  var G__25040 = d;
  var G__25041 = e;
  var G__25042 = f;
  var G__25043 = g;
  var G__25044 = h;
  var G__25045 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__25037, G__25038, G__25039, G__25040, G__25041, G__25042, G__25043, G__25044, G__25045) : target_fn.call(null, G__25037, G__25038, G__25039, G__25040, G__25041, G__25042, G__25043, G__25044, G__25045);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25046 = a;
    var G__25047 = b;
    var G__25048 = c;
    var G__25049 = d;
    var G__25050 = e;
    var G__25051 = f;
    var G__25052 = g;
    var G__25053 = h;
    var G__25054 = i;
    var G__25055 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__25046, G__25047, G__25048, G__25049, G__25050, G__25051, G__25052, G__25053, G__25054, G__25055) : self__.dispatch_fn.call(null, G__25046, G__25047, G__25048, G__25049, G__25050, G__25051, G__25052, G__25053, G__25054, G__25055);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25056 = a;
  var G__25057 = b;
  var G__25058 = c;
  var G__25059 = d;
  var G__25060 = e;
  var G__25061 = f;
  var G__25062 = g;
  var G__25063 = h;
  var G__25064 = i;
  var G__25065 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__25056, G__25057, G__25058, G__25059, G__25060, G__25061, G__25062, G__25063, G__25064, G__25065) : target_fn.call(null, G__25056, G__25057, G__25058, G__25059, G__25060, G__25061, G__25062, G__25063, G__25064, G__25065);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25066 = a;
    var G__25067 = b;
    var G__25068 = c;
    var G__25069 = d;
    var G__25070 = e;
    var G__25071 = f;
    var G__25072 = g;
    var G__25073 = h;
    var G__25074 = i;
    var G__25075 = j;
    var G__25076 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__25066, G__25067, G__25068, G__25069, G__25070, G__25071, G__25072, G__25073, G__25074, G__25075, G__25076) : self__.dispatch_fn.call(null, G__25066, G__25067, G__25068, G__25069, G__25070, G__25071, G__25072, G__25073, G__25074, G__25075, G__25076);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25077 = a;
  var G__25078 = b;
  var G__25079 = c;
  var G__25080 = d;
  var G__25081 = e;
  var G__25082 = f;
  var G__25083 = g;
  var G__25084 = h;
  var G__25085 = i;
  var G__25086 = j;
  var G__25087 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__25077, G__25078, G__25079, G__25080, G__25081, G__25082, G__25083, G__25084, G__25085, G__25086, G__25087) : target_fn.call(null, G__25077, G__25078, G__25079, G__25080, G__25081, G__25082, G__25083, G__25084, G__25085, G__25086, G__25087);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25088 = a;
    var G__25089 = b;
    var G__25090 = c;
    var G__25091 = d;
    var G__25092 = e;
    var G__25093 = f;
    var G__25094 = g;
    var G__25095 = h;
    var G__25096 = i;
    var G__25097 = j;
    var G__25098 = k;
    var G__25099 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__25088, G__25089, G__25090, G__25091, G__25092, G__25093, G__25094, G__25095, G__25096, G__25097, G__25098, G__25099) : self__.dispatch_fn.call(null, G__25088, G__25089, G__25090, G__25091, G__25092, G__25093, G__25094, G__25095, G__25096, G__25097, G__25098, G__25099);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25100 = a;
  var G__25101 = b;
  var G__25102 = c;
  var G__25103 = d;
  var G__25104 = e;
  var G__25105 = f;
  var G__25106 = g;
  var G__25107 = h;
  var G__25108 = i;
  var G__25109 = j;
  var G__25110 = k;
  var G__25111 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__25100, G__25101, G__25102, G__25103, G__25104, G__25105, G__25106, G__25107, G__25108, G__25109, G__25110, G__25111) : target_fn.call(null, G__25100, G__25101, G__25102, G__25103, G__25104, G__25105, G__25106, G__25107, G__25108, G__25109, G__25110, G__25111);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25112 = a;
    var G__25113 = b;
    var G__25114 = c;
    var G__25115 = d;
    var G__25116 = e;
    var G__25117 = f;
    var G__25118 = g;
    var G__25119 = h;
    var G__25120 = i;
    var G__25121 = j;
    var G__25122 = k;
    var G__25123 = l;
    var G__25124 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__25112, G__25113, G__25114, G__25115, G__25116, G__25117, G__25118, G__25119, G__25120, G__25121, G__25122, G__25123, G__25124) : self__.dispatch_fn.call(null, G__25112, G__25113, G__25114, G__25115, G__25116, G__25117, G__25118, G__25119, G__25120, G__25121, G__25122, G__25123, G__25124);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25125 = a;
  var G__25126 = b;
  var G__25127 = c;
  var G__25128 = d;
  var G__25129 = e;
  var G__25130 = f;
  var G__25131 = g;
  var G__25132 = h;
  var G__25133 = i;
  var G__25134 = j;
  var G__25135 = k;
  var G__25136 = l;
  var G__25137 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__25125, G__25126, G__25127, G__25128, G__25129, G__25130, G__25131, G__25132, G__25133, G__25134, G__25135, G__25136, G__25137) : target_fn.call(null, G__25125, G__25126, G__25127, G__25128, G__25129, G__25130, G__25131, G__25132, G__25133, G__25134, G__25135, G__25136, G__25137);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25138 = a;
    var G__25139 = b;
    var G__25140 = c;
    var G__25141 = d;
    var G__25142 = e;
    var G__25143 = f;
    var G__25144 = g;
    var G__25145 = h;
    var G__25146 = i;
    var G__25147 = j;
    var G__25148 = k;
    var G__25149 = l;
    var G__25150 = m;
    var G__25151 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__25138, G__25139, G__25140, G__25141, G__25142, G__25143, G__25144, G__25145, G__25146, G__25147, G__25148, G__25149, G__25150, G__25151) : self__.dispatch_fn.call(null, G__25138, G__25139, G__25140, G__25141, G__25142, G__25143, G__25144, G__25145, G__25146, G__25147, G__25148, G__25149, G__25150, G__25151);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25152 = a;
  var G__25153 = b;
  var G__25154 = c;
  var G__25155 = d;
  var G__25156 = e;
  var G__25157 = f;
  var G__25158 = g;
  var G__25159 = h;
  var G__25160 = i;
  var G__25161 = j;
  var G__25162 = k;
  var G__25163 = l;
  var G__25164 = m;
  var G__25165 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__25152, G__25153, G__25154, G__25155, G__25156, G__25157, G__25158, G__25159, G__25160, G__25161, G__25162, G__25163, G__25164, G__25165) : target_fn.call(null, G__25152, G__25153, G__25154, G__25155, G__25156, G__25157, G__25158, G__25159, G__25160, G__25161, G__25162, G__25163, G__25164, G__25165);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25166 = a;
    var G__25167 = b;
    var G__25168 = c;
    var G__25169 = d;
    var G__25170 = e;
    var G__25171 = f;
    var G__25172 = g;
    var G__25173 = h;
    var G__25174 = i;
    var G__25175 = j;
    var G__25176 = k;
    var G__25177 = l;
    var G__25178 = m;
    var G__25179 = n;
    var G__25180 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__25166, G__25167, G__25168, G__25169, G__25170, G__25171, G__25172, G__25173, G__25174, G__25175, G__25176, G__25177, G__25178, G__25179, G__25180) : self__.dispatch_fn.call(null, G__25166, G__25167, G__25168, G__25169, G__25170, G__25171, G__25172, G__25173, G__25174, G__25175, G__25176, G__25177, G__25178, G__25179, G__25180);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25181 = a;
  var G__25182 = b;
  var G__25183 = c;
  var G__25184 = d;
  var G__25185 = e;
  var G__25186 = f;
  var G__25187 = g;
  var G__25188 = h;
  var G__25189 = i;
  var G__25190 = j;
  var G__25191 = k;
  var G__25192 = l;
  var G__25193 = m;
  var G__25194 = n;
  var G__25195 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__25181, G__25182, G__25183, G__25184, G__25185, G__25186, G__25187, G__25188, G__25189, G__25190, G__25191, G__25192, G__25193, G__25194, G__25195) : target_fn.call(null, G__25181, G__25182, G__25183, G__25184, G__25185, G__25186, G__25187, G__25188, G__25189, G__25190, G__25191, G__25192, G__25193, G__25194, G__25195);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25196 = a;
    var G__25197 = b;
    var G__25198 = c;
    var G__25199 = d;
    var G__25200 = e;
    var G__25201 = f;
    var G__25202 = g;
    var G__25203 = h;
    var G__25204 = i;
    var G__25205 = j;
    var G__25206 = k;
    var G__25207 = l;
    var G__25208 = m;
    var G__25209 = n;
    var G__25210 = o;
    var G__25211 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__25196, G__25197, G__25198, G__25199, G__25200, G__25201, G__25202, G__25203, G__25204, G__25205, G__25206, G__25207, G__25208, G__25209, G__25210, G__25211) : self__.dispatch_fn.call(null, G__25196, G__25197, G__25198, G__25199, G__25200, G__25201, G__25202, G__25203, G__25204, G__25205, G__25206, G__25207, G__25208, G__25209, G__25210, G__25211);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25212 = a;
  var G__25213 = b;
  var G__25214 = c;
  var G__25215 = d;
  var G__25216 = e;
  var G__25217 = f;
  var G__25218 = g;
  var G__25219 = h;
  var G__25220 = i;
  var G__25221 = j;
  var G__25222 = k;
  var G__25223 = l;
  var G__25224 = m;
  var G__25225 = n;
  var G__25226 = o;
  var G__25227 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__25212, G__25213, G__25214, G__25215, G__25216, G__25217, G__25218, G__25219, G__25220, G__25221, G__25222, G__25223, G__25224, G__25225, G__25226, G__25227) : target_fn.call(null, G__25212, G__25213, G__25214, G__25215, G__25216, G__25217, G__25218, G__25219, G__25220, G__25221, G__25222, G__25223, G__25224, G__25225, G__25226, G__25227);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25228 = a;
    var G__25229 = b;
    var G__25230 = c;
    var G__25231 = d;
    var G__25232 = e;
    var G__25233 = f;
    var G__25234 = g;
    var G__25235 = h;
    var G__25236 = i;
    var G__25237 = j;
    var G__25238 = k;
    var G__25239 = l;
    var G__25240 = m;
    var G__25241 = n;
    var G__25242 = o;
    var G__25243 = p;
    var G__25244 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__25228, G__25229, G__25230, G__25231, G__25232, G__25233, G__25234, G__25235, G__25236, G__25237, G__25238, G__25239, G__25240, G__25241, G__25242, G__25243, G__25244) : self__.dispatch_fn.call(null, G__25228, G__25229, G__25230, G__25231, G__25232, G__25233, G__25234, G__25235, G__25236, G__25237, G__25238, G__25239, G__25240, G__25241, G__25242, G__25243, G__25244);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25245 = a;
  var G__25246 = b;
  var G__25247 = c;
  var G__25248 = d;
  var G__25249 = e;
  var G__25250 = f;
  var G__25251 = g;
  var G__25252 = h;
  var G__25253 = i;
  var G__25254 = j;
  var G__25255 = k;
  var G__25256 = l;
  var G__25257 = m;
  var G__25258 = n;
  var G__25259 = o;
  var G__25260 = p;
  var G__25261 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__25245, G__25246, G__25247, G__25248, G__25249, G__25250, G__25251, G__25252, G__25253, G__25254, G__25255, G__25256, G__25257, G__25258, G__25259, G__25260, G__25261) : target_fn.call(null, G__25245, G__25246, G__25247, G__25248, G__25249, G__25250, G__25251, G__25252, G__25253, G__25254, G__25255, G__25256, G__25257, G__25258, G__25259, G__25260, G__25261);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25262 = a;
    var G__25263 = b;
    var G__25264 = c;
    var G__25265 = d;
    var G__25266 = e;
    var G__25267 = f;
    var G__25268 = g;
    var G__25269 = h;
    var G__25270 = i;
    var G__25271 = j;
    var G__25272 = k;
    var G__25273 = l;
    var G__25274 = m;
    var G__25275 = n;
    var G__25276 = o;
    var G__25277 = p;
    var G__25278 = q;
    var G__25279 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__25262, G__25263, G__25264, G__25265, G__25266, G__25267, G__25268, G__25269, G__25270, G__25271, G__25272, G__25273, G__25274, G__25275, G__25276, G__25277, G__25278, G__25279) : self__.dispatch_fn.call(null, G__25262, G__25263, G__25264, G__25265, G__25266, G__25267, G__25268, G__25269, G__25270, G__25271, G__25272, G__25273, G__25274, G__25275, G__25276, G__25277, G__25278, G__25279);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25280 = a;
  var G__25281 = b;
  var G__25282 = c;
  var G__25283 = d;
  var G__25284 = e;
  var G__25285 = f;
  var G__25286 = g;
  var G__25287 = h;
  var G__25288 = i;
  var G__25289 = j;
  var G__25290 = k;
  var G__25291 = l;
  var G__25292 = m;
  var G__25293 = n;
  var G__25294 = o;
  var G__25295 = p;
  var G__25296 = q;
  var G__25297 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__25280, G__25281, G__25282, G__25283, G__25284, G__25285, G__25286, G__25287, G__25288, G__25289, G__25290, G__25291, G__25292, G__25293, G__25294, G__25295, G__25296, G__25297) : target_fn.call(null, G__25280, G__25281, G__25282, G__25283, G__25284, G__25285, G__25286, G__25287, G__25288, G__25289, G__25290, G__25291, G__25292, G__25293, G__25294, G__25295, G__25296, G__25297);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25298 = a;
    var G__25299 = b;
    var G__25300 = c;
    var G__25301 = d;
    var G__25302 = e;
    var G__25303 = f;
    var G__25304 = g;
    var G__25305 = h;
    var G__25306 = i;
    var G__25307 = j;
    var G__25308 = k;
    var G__25309 = l;
    var G__25310 = m;
    var G__25311 = n;
    var G__25312 = o;
    var G__25313 = p;
    var G__25314 = q;
    var G__25315 = r;
    var G__25316 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__25298, G__25299, G__25300, G__25301, G__25302, G__25303, G__25304, G__25305, G__25306, G__25307, G__25308, G__25309, G__25310, G__25311, G__25312, G__25313, G__25314, G__25315, G__25316) : self__.dispatch_fn.call(null, G__25298, G__25299, G__25300, G__25301, G__25302, G__25303, G__25304, G__25305, G__25306, G__25307, G__25308, G__25309, G__25310, G__25311, G__25312, G__25313, G__25314, 
    G__25315, G__25316);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25317 = a;
  var G__25318 = b;
  var G__25319 = c;
  var G__25320 = d;
  var G__25321 = e;
  var G__25322 = f;
  var G__25323 = g;
  var G__25324 = h;
  var G__25325 = i;
  var G__25326 = j;
  var G__25327 = k;
  var G__25328 = l;
  var G__25329 = m;
  var G__25330 = n;
  var G__25331 = o;
  var G__25332 = p;
  var G__25333 = q;
  var G__25334 = r;
  var G__25335 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__25317, G__25318, G__25319, G__25320, G__25321, G__25322, G__25323, G__25324, G__25325, G__25326, G__25327, G__25328, G__25329, G__25330, G__25331, G__25332, G__25333, G__25334, G__25335) : target_fn.call(null, G__25317, G__25318, G__25319, G__25320, G__25321, G__25322, G__25323, G__25324, G__25325, G__25326, G__25327, G__25328, G__25329, G__25330, G__25331, G__25332, G__25333, G__25334, G__25335);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__25336 = a;
    var G__25337 = b;
    var G__25338 = c;
    var G__25339 = d;
    var G__25340 = e;
    var G__25341 = f;
    var G__25342 = g;
    var G__25343 = h;
    var G__25344 = i;
    var G__25345 = j;
    var G__25346 = k;
    var G__25347 = l;
    var G__25348 = m;
    var G__25349 = n;
    var G__25350 = o;
    var G__25351 = p;
    var G__25352 = q;
    var G__25353 = r;
    var G__25354 = s;
    var G__25355 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__25336, G__25337, G__25338, G__25339, G__25340, G__25341, G__25342, G__25343, G__25344, G__25345, G__25346, G__25347, G__25348, G__25349, G__25350, G__25351, G__25352, G__25353, G__25354, G__25355) : self__.dispatch_fn.call(null, G__25336, G__25337, G__25338, G__25339, G__25340, G__25341, G__25342, G__25343, G__25344, G__25345, G__25346, G__25347, G__25348, G__25349, G__25350, G__25351, 
    G__25352, G__25353, G__25354, G__25355);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__25356 = a;
  var G__25357 = b;
  var G__25358 = c;
  var G__25359 = d;
  var G__25360 = e;
  var G__25361 = f;
  var G__25362 = g;
  var G__25363 = h;
  var G__25364 = i;
  var G__25365 = j;
  var G__25366 = k;
  var G__25367 = l;
  var G__25368 = m;
  var G__25369 = n;
  var G__25370 = o;
  var G__25371 = p;
  var G__25372 = q;
  var G__25373 = r;
  var G__25374 = s;
  var G__25375 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__25356, G__25357, G__25358, G__25359, G__25360, G__25361, G__25362, G__25363, G__25364, G__25365, G__25366, G__25367, G__25368, G__25369, G__25370, G__25371, G__25372, G__25373, G__25374, G__25375) : target_fn.call(null, G__25356, G__25357, G__25358, G__25359, G__25360, G__25361, G__25362, G__25363, G__25364, G__25365, G__25366, G__25367, G__25368, G__25369, G__25370, G__25371, G__25372, G__25373, G__25374, 
  G__25375);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__25377 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__25377);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.pr_writer_ex_info = function pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, data) {
    return ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var ex_info__3 = function(msg, data, cause) {
    cljs.core.ExceptionInfo.prototype = function() {
      var G__25382 = msg;
      return Error(G__25382);
    }();
    cljs.core.ExceptionInfo.prototype.name = "ExceptionInfo";
    cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
    cljs.core.ExceptionInfo.prototype.toString = cljs.core.pr_str_STAR_;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
      var obj__$1 = this;
      return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
    };
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, data);
      case 3:
        return ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__25387 = x;
      var G__25388 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__25387, G__25388) : pred.call(null, G__25387, G__25388);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__25389 = y;
        var G__25390 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__25389, G__25390) : pred.call(null, G__25389, G__25390);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj27372 = {};
  return obj27372;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3969__auto__ = port;
    if (and__3969__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4625__auto__ = port == null ? null : port;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj27374 = {};
  return obj27374;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3969__auto__ = port;
    if (and__3969__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4625__auto__ = port == null ? null : port;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj27376 = {};
  return obj27376;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3969__auto__ = chan;
    if (and__3969__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4625__auto__ = chan == null ? null : chan;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj27378 = {};
  return obj27378;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3969__auto__ = h;
    if (and__3969__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4625__auto__ = h == null ? null : h;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3969__auto__ = h;
    if (and__3969__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4625__auto__ = h == null ? null : h;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj27380 = {};
  return obj27380;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3969__auto__ = b;
    if (and__3969__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4625__auto__ = b == null ? null : b;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3969__auto__ = b;
    if (and__3969__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4625__auto__ = b == null ? null : b;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3969__auto__ = b;
    if (and__3969__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4625__auto__ = b == null ? null : b;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__27383 = cnt + 1;
      cnt = G__27383;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4868__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4868__auto__) {
      var v_27384 = this$.pop();
      if (keep_QMARK_.call(null, v_27384)) {
        this$.unshift(v_27384);
      } else {
      }
      var G__27385 = x + 1;
      x = G__27385;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_27388 = 0;
  while (true) {
    var m_27389 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_27389 == null) {
    } else {
      m_27389.call(null);
      if (count_27388 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__27390 = count_27388 + 1;
        count_27388 = G__27390;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3969__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3969__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t27396 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t27396 = function(val, box, meta27397) {
      this.val = val;
      this.box = box;
      this.meta27397 = meta27397;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t27396.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t27396.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27398) {
      var self__ = this;
      var _27398__$1 = this;
      return self__.meta27397;
    };
    cljs.core.async.impl.channels.t27396.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27398, meta27397__$1) {
      var self__ = this;
      var _27398__$1 = this;
      return new cljs.core.async.impl.channels.t27396(self__.val, self__.box, meta27397__$1);
    };
    cljs.core.async.impl.channels.t27396.cljs$lang$type = true;
    cljs.core.async.impl.channels.t27396.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t27396";
    cljs.core.async.impl.channels.t27396.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.channels/t27396");
    };
    cljs.core.async.impl.channels.__GT_t27396 = function __GT_t27396(val__$1, box__$1, meta27397) {
      return new cljs.core.async.impl.channels.t27396(val__$1, box__$1, meta27397);
    };
  }
  return new cljs.core.async.impl.channels.t27396(val, box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_27399 = self__.takes.pop();
      if (taker_27399 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_27399)) {
          var take_cb_27400 = cljs.core.async.impl.protocols.commit.call(null, taker_27399);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_27400, taker_27399, this$__$1) {
            return function() {
              return take_cb_27400.call(null, null);
            };
          }(take_cb_27400, taker_27399, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t27338 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t27338 = function(f, fn_handler, meta27339) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta27339 = meta27339;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t27338.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t27338.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t27338.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t27338.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27340) {
      var self__ = this;
      var _27340__$1 = this;
      return self__.meta27339;
    };
    cljs.core.async.impl.ioc_helpers.t27338.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27340, meta27339__$1) {
      var self__ = this;
      var _27340__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t27338(self__.f, self__.fn_handler, meta27339__$1);
    };
    cljs.core.async.impl.ioc_helpers.t27338.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t27338.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t27338";
    cljs.core.async.impl.ioc_helpers.t27338.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.ioc-helpers/t27338");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t27338 = function __GT_t27338(f__$1, fn_handler__$1, meta27339) {
      return new cljs.core.async.impl.ioc_helpers.t27338(f__$1, fn_handler__$1, meta27339);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t27338(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e27342) {
    if (e27342 instanceof Object) {
      var ex = e27342;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e27342;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_27345_27347 = state;
    statearr_27345_27347[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_27345_27347[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_27346_27348 = state;
    statearr_27346_27348[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_27346_27348[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_27351_27353 = state;
    statearr_27351_27353[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_27351_27353[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_27352_27354 = state;
    statearr_27352_27354[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_27352_27354[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__27355) {
    var map__27360 = p__27355;
    var map__27360__$1 = cljs.core.seq_QMARK_.call(null, map__27360) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27360) : map__27360;
    var opts = map__27360__$1;
    var statearr_27361_27364 = state;
    statearr_27361_27364[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__27360, map__27360__$1, opts) {
      return function(val) {
        var statearr_27362_27365 = state;
        statearr_27362_27365[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__27360, map__27360__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_27363_27366 = state;
      statearr_27363_27366[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__27355 = null;
    if (arguments.length > 3) {
      var G__27367__i = 0, G__27367__a = new Array(arguments.length - 3);
      while (G__27367__i < G__27367__a.length) {
        G__27367__a[G__27367__i] = arguments[G__27367__i + 3];
        ++G__27367__i;
      }
      p__27355 = new cljs.core.IndexedSeq(G__27367__a, 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__27355);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__27368) {
    var state = cljs.core.first(arglist__27368);
    arglist__27368 = cljs.core.next(arglist__27368);
    var cont_block = cljs.core.first(arglist__27368);
    arglist__27368 = cljs.core.next(arglist__27368);
    var ports = cljs.core.first(arglist__27368);
    var p__27355 = cljs.core.rest(arglist__27368);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__27355);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__27309 = level + 1;
        level = G__27309;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_27310 = 0;
    while (true) {
      if (i_27310 < arr.length) {
        arr[i_27310] = null;
        var G__27311 = i_27310 + 1;
        i_27310 = G__27311;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__27312 = x_SINGLEQUOTE_;
                x__$1 = G__27312;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__27313 = x__$1;
        var G__27314 = k;
        var G__27315 = level - 1;
        var G__27316 = update;
        x = G__27313;
        k = G__27314;
        level = G__27315;
        update = G__27316;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_27317 = self__.level + 1;
      while (true) {
        if (i_27317 <= new_level + 1) {
          update[i_27317] = self__.header;
          var G__27318 = i_27317 + 1;
          i_27317 = G__27318;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_27319 = 0;
    while (true) {
      if (i_27319 <= self__.level) {
        var links_27320 = update[i_27319].forward;
        if (links_27320[i_27319] === x__$1) {
          links_27320[i_27319] = x__$1.forward[i_27319];
          var G__27321 = i_27319 + 1;
          i_27319 = G__27321;
          continue;
        } else {
          var G__27322 = i_27319 + 1;
          i_27319 = G__27322;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__27323 = x_SINGLEQUOTE_;
              x__$1 = G__27323;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__27324 = nx;
        var G__27325 = level__$1 - 1;
        x = G__27324;
        level__$1 = G__27325;
        continue;
      } else {
        var G__27326 = x;
        var G__27327 = level__$1 - 1;
        x = G__27326;
        level__$1 = G__27327;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__27328 = x_SINGLEQUOTE_;
              x__$1 = G__27328;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__27329 = nx;
        var G__27330 = level__$1 - 1;
        x = G__27329;
        level__$1 = G__27330;
        continue;
      } else {
        var G__27331 = x;
        var G__27332 = level__$1 - 1;
        x = G__27331;
        level__$1 = G__27332;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3981__auto__ = cljs.core.truth_(function() {
    var and__3969__auto__ = me;
    if (cljs.core.truth_(and__3969__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3969__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3981__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3981__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t25396 !== "undefined") {
  } else {
    cljs.core.async.t25396 = function(f, fn_handler, meta25397) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta25397 = meta25397;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25396.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25396.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t25396.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t25396.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25398) {
      var self__ = this;
      var _25398__$1 = this;
      return self__.meta25397;
    };
    cljs.core.async.t25396.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25398, meta25397__$1) {
      var self__ = this;
      var _25398__$1 = this;
      return new cljs.core.async.t25396(self__.f, self__.fn_handler, meta25397__$1);
    };
    cljs.core.async.t25396.cljs$lang$type = true;
    cljs.core.async.t25396.cljs$lang$ctorStr = "cljs.core.async/t25396";
    cljs.core.async.t25396.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t25396");
    };
    cljs.core.async.__GT_t25396 = function __GT_t25396(f__$1, fn_handler__$1, meta25397) {
      return new cljs.core.async.t25396(f__$1, fn_handler__$1, meta25397);
    };
  }
  return new cljs.core.async.t25396(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_25399 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_25399);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_25399, ret) {
          return function() {
            return fn1.call(null, val_25399);
          };
        }(val_25399, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = ret;
      if (cljs.core.truth_(and__3969__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4868__auto___25400 = n;
  var x_25401 = 0;
  while (true) {
    if (x_25401 < n__4868__auto___25400) {
      a[x_25401] = 0;
      var G__25402 = x_25401 + 1;
      x_25401 = G__25402;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__25403 = i + 1;
      i = G__25403;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t25407 !== "undefined") {
  } else {
    cljs.core.async.t25407 = function(flag, alt_flag, meta25408) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta25408 = meta25408;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25407.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25407.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t25407.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t25407.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_25409) {
        var self__ = this;
        var _25409__$1 = this;
        return self__.meta25408;
      };
    }(flag);
    cljs.core.async.t25407.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_25409, meta25408__$1) {
        var self__ = this;
        var _25409__$1 = this;
        return new cljs.core.async.t25407(self__.flag, self__.alt_flag, meta25408__$1);
      };
    }(flag);
    cljs.core.async.t25407.cljs$lang$type = true;
    cljs.core.async.t25407.cljs$lang$ctorStr = "cljs.core.async/t25407";
    cljs.core.async.t25407.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t25407");
      };
    }(flag);
    cljs.core.async.__GT_t25407 = function(flag) {
      return function __GT_t25407(flag__$1, alt_flag__$1, meta25408) {
        return new cljs.core.async.t25407(flag__$1, alt_flag__$1, meta25408);
      };
    }(flag);
  }
  return new cljs.core.async.t25407(flag, alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t25413 !== "undefined") {
  } else {
    cljs.core.async.t25413 = function(cb, flag, alt_handler, meta25414) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta25414 = meta25414;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25413.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25413.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t25413.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t25413.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25415) {
      var self__ = this;
      var _25415__$1 = this;
      return self__.meta25414;
    };
    cljs.core.async.t25413.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25415, meta25414__$1) {
      var self__ = this;
      var _25415__$1 = this;
      return new cljs.core.async.t25413(self__.cb, self__.flag, self__.alt_handler, meta25414__$1);
    };
    cljs.core.async.t25413.cljs$lang$type = true;
    cljs.core.async.t25413.cljs$lang$ctorStr = "cljs.core.async/t25413";
    cljs.core.async.t25413.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t25413");
    };
    cljs.core.async.__GT_t25413 = function __GT_t25413(cb__$1, flag__$1, alt_handler__$1, meta25414) {
      return new cljs.core.async.t25413(cb__$1, flag__$1, alt_handler__$1, meta25414);
    };
  }
  return new cljs.core.async.t25413(cb, flag, alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__25416_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__25416_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3981__auto__ = wport;
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__25417 = i + 1;
          i = G__25417;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3981__auto__ = ret;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3969__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3969__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__25418) {
    var map__25420 = p__25418;
    var map__25420__$1 = cljs.core.seq_QMARK_.call(null, map__25420) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25420) : map__25420;
    var opts = map__25420__$1;
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__25418 = null;
    if (arguments.length > 1) {
      var G__25421__i = 0, G__25421__a = new Array(arguments.length - 1);
      while (G__25421__i < G__25421__a.length) {
        G__25421__a[G__25421__i] = arguments[G__25421__i + 1];
        ++G__25421__i;
      }
      p__25418 = new cljs.core.IndexedSeq(G__25421__a, 0);
    }
    return alts_BANG___delegate.call(this, ports, p__25418);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__25422) {
    var ports = cljs.core.first(arglist__25422);
    var p__25418 = cljs.core.rest(arglist__25422);
    return alts_BANG___delegate(ports, p__25418);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t25430 !== "undefined") {
  } else {
    cljs.core.async.t25430 = function(ch, f, map_LT_, meta25431) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta25431 = meta25431;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25430.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t25430.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t25430.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t25430.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t25433 !== "undefined") {
        } else {
          cljs.core.async.t25433 = function(fn1, _, meta25431, map_LT_, f, ch, meta25434) {
            this.fn1 = fn1;
            this._ = _;
            this.meta25431 = meta25431;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta25434 = meta25434;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t25433.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t25433.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t25433.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t25433.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__25423_SHARP_) {
                  return f1.call(null, p1__25423_SHARP_ == null ? null : self__.f.call(null, p1__25423_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t25433.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_25435) {
              var self__ = this;
              var _25435__$1 = this;
              return self__.meta25434;
            };
          }(___$1);
          cljs.core.async.t25433.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_25435, meta25434__$1) {
              var self__ = this;
              var _25435__$1 = this;
              return new cljs.core.async.t25433(self__.fn1, self__._, self__.meta25431, self__.map_LT_, self__.f, self__.ch, meta25434__$1);
            };
          }(___$1);
          cljs.core.async.t25433.cljs$lang$type = true;
          cljs.core.async.t25433.cljs$lang$ctorStr = "cljs.core.async/t25433";
          cljs.core.async.t25433.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
              return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t25433");
            };
          }(___$1);
          cljs.core.async.__GT_t25433 = function(___$1) {
            return function __GT_t25433(fn1__$1, ___$2, meta25431__$1, map_LT___$1, f__$1, ch__$1, meta25434) {
              return new cljs.core.async.t25433(fn1__$1, ___$2, meta25431__$1, map_LT___$1, f__$1, ch__$1, meta25434);
            };
          }(___$1);
        }
        return new cljs.core.async.t25433(fn1, ___$1, self__.meta25431, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = ret;
        if (cljs.core.truth_(and__3969__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3969__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t25430.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t25430.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t25430.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25432) {
      var self__ = this;
      var _25432__$1 = this;
      return self__.meta25431;
    };
    cljs.core.async.t25430.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25432, meta25431__$1) {
      var self__ = this;
      var _25432__$1 = this;
      return new cljs.core.async.t25430(self__.ch, self__.f, self__.map_LT_, meta25431__$1);
    };
    cljs.core.async.t25430.cljs$lang$type = true;
    cljs.core.async.t25430.cljs$lang$ctorStr = "cljs.core.async/t25430";
    cljs.core.async.t25430.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t25430");
    };
    cljs.core.async.__GT_t25430 = function __GT_t25430(ch__$1, f__$1, map_LT___$1, meta25431) {
      return new cljs.core.async.t25430(ch__$1, f__$1, map_LT___$1, meta25431);
    };
  }
  return new cljs.core.async.t25430(ch, f, map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t25439 !== "undefined") {
  } else {
    cljs.core.async.t25439 = function(ch, f, map_GT_, meta25440) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta25440 = meta25440;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25439.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t25439.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t25439.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t25439.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t25439.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t25439.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t25439.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25441) {
      var self__ = this;
      var _25441__$1 = this;
      return self__.meta25440;
    };
    cljs.core.async.t25439.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25441, meta25440__$1) {
      var self__ = this;
      var _25441__$1 = this;
      return new cljs.core.async.t25439(self__.ch, self__.f, self__.map_GT_, meta25440__$1);
    };
    cljs.core.async.t25439.cljs$lang$type = true;
    cljs.core.async.t25439.cljs$lang$ctorStr = "cljs.core.async/t25439";
    cljs.core.async.t25439.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t25439");
    };
    cljs.core.async.__GT_t25439 = function __GT_t25439(ch__$1, f__$1, map_GT___$1, meta25440) {
      return new cljs.core.async.t25439(ch__$1, f__$1, map_GT___$1, meta25440);
    };
  }
  return new cljs.core.async.t25439(ch, f, map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t25445 !== "undefined") {
  } else {
    cljs.core.async.t25445 = function(ch, p, filter_GT_, meta25446) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta25446 = meta25446;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25445.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t25445.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t25445.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t25445.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t25445.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t25445.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t25445.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25447) {
      var self__ = this;
      var _25447__$1 = this;
      return self__.meta25446;
    };
    cljs.core.async.t25445.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25447, meta25446__$1) {
      var self__ = this;
      var _25447__$1 = this;
      return new cljs.core.async.t25445(self__.ch, self__.p, self__.filter_GT_, meta25446__$1);
    };
    cljs.core.async.t25445.cljs$lang$type = true;
    cljs.core.async.t25445.cljs$lang$ctorStr = "cljs.core.async/t25445";
    cljs.core.async.t25445.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t25445");
    };
    cljs.core.async.__GT_t25445 = function __GT_t25445(ch__$1, p__$1, filter_GT___$1, meta25446) {
      return new cljs.core.async.t25445(ch__$1, p__$1, filter_GT___$1, meta25446);
    };
  }
  return new cljs.core.async.t25445(ch, p, filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6620__auto___25522 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___25522, out) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto___25522, out) {
            return function(state_25505) {
              var state_val_25506 = state_25505[1];
              if (state_val_25506 === 7) {
                var inst_25501 = state_25505[2];
                var state_25505__$1 = state_25505;
                var statearr_25507_25523 = state_25505__$1;
                statearr_25507_25523[2] = inst_25501;
                statearr_25507_25523[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25506 === 1) {
                  var state_25505__$1 = state_25505;
                  var statearr_25508_25524 = state_25505__$1;
                  statearr_25508_25524[2] = null;
                  statearr_25508_25524[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25506 === 4) {
                    var inst_25487 = state_25505[5];
                    var inst_25487__$1 = state_25505[2];
                    var inst_25488 = inst_25487__$1 == null;
                    var state_25505__$1 = function() {
                      var statearr_25509 = state_25505;
                      statearr_25509[5] = inst_25487__$1;
                      return statearr_25509;
                    }();
                    if (cljs.core.truth_(inst_25488)) {
                      var statearr_25510_25525 = state_25505__$1;
                      statearr_25510_25525[1] = 5;
                    } else {
                      var statearr_25511_25526 = state_25505__$1;
                      statearr_25511_25526[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25506 === 6) {
                      var inst_25487 = state_25505[5];
                      var inst_25492 = p.call(null, inst_25487);
                      var state_25505__$1 = state_25505;
                      if (cljs.core.truth_(inst_25492)) {
                        var statearr_25512_25527 = state_25505__$1;
                        statearr_25512_25527[1] = 8;
                      } else {
                        var statearr_25513_25528 = state_25505__$1;
                        statearr_25513_25528[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25506 === 3) {
                        var inst_25503 = state_25505[2];
                        var state_25505__$1 = state_25505;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25505__$1, inst_25503);
                      } else {
                        if (state_val_25506 === 2) {
                          var state_25505__$1 = state_25505;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25505__$1, 4, ch);
                        } else {
                          if (state_val_25506 === 11) {
                            var inst_25495 = state_25505[2];
                            var state_25505__$1 = state_25505;
                            var statearr_25514_25529 = state_25505__$1;
                            statearr_25514_25529[2] = inst_25495;
                            statearr_25514_25529[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25506 === 9) {
                              var state_25505__$1 = state_25505;
                              var statearr_25515_25530 = state_25505__$1;
                              statearr_25515_25530[2] = null;
                              statearr_25515_25530[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_25506 === 5) {
                                var inst_25490 = cljs.core.async.close_BANG_.call(null, out);
                                var state_25505__$1 = state_25505;
                                var statearr_25516_25531 = state_25505__$1;
                                statearr_25516_25531[2] = inst_25490;
                                statearr_25516_25531[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25506 === 10) {
                                  var inst_25498 = state_25505[2];
                                  var state_25505__$1 = function() {
                                    var statearr_25517 = state_25505;
                                    statearr_25517[6] = inst_25498;
                                    return statearr_25517;
                                  }();
                                  var statearr_25518_25532 = state_25505__$1;
                                  statearr_25518_25532[2] = null;
                                  statearr_25518_25532[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25506 === 8) {
                                    var inst_25487 = state_25505[5];
                                    var state_25505__$1 = state_25505;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25505__$1, 11, out, inst_25487);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto___25522, out);
          return function(switch__6576__auto__, c__6620__auto___25522, out) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_25520 = [null, null, null, null, null, null, null];
                statearr_25520[0] = state_machine__6577__auto__;
                statearr_25520[1] = 1;
                return statearr_25520;
              };
              var state_machine__6577__auto____1 = function(state_25505) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_25505);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_25505) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_25505);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto___25522, out);
        }();
        var state__6622__auto__ = function() {
          var statearr_25521 = f__6621__auto__.call(null);
          statearr_25521[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___25522;
          return statearr_25521;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto___25522, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_25680) {
            var state_val_25681 = state_25680[1];
            if (state_val_25681 === 7) {
              var inst_25676 = state_25680[2];
              var state_25680__$1 = state_25680;
              var statearr_25682_25715 = state_25680__$1;
              statearr_25682_25715[2] = inst_25676;
              statearr_25682_25715[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_25681 === 20) {
                var inst_25651 = state_25680[5];
                var inst_25662 = state_25680[2];
                var inst_25663 = cljs.core.next.call(null, inst_25651);
                var inst_25637 = inst_25663;
                var inst_25638 = null;
                var inst_25639 = 0;
                var inst_25640 = 0;
                var state_25680__$1 = function() {
                  var statearr_25683 = state_25680;
                  statearr_25683[6] = inst_25662;
                  statearr_25683[7] = inst_25640;
                  statearr_25683[8] = inst_25639;
                  statearr_25683[9] = inst_25637;
                  statearr_25683[10] = inst_25638;
                  return statearr_25683;
                }();
                var statearr_25684_25716 = state_25680__$1;
                statearr_25684_25716[2] = null;
                statearr_25684_25716[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25681 === 1) {
                  var state_25680__$1 = state_25680;
                  var statearr_25685_25717 = state_25680__$1;
                  statearr_25685_25717[2] = null;
                  statearr_25685_25717[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25681 === 4) {
                    var inst_25626 = state_25680[11];
                    var inst_25626__$1 = state_25680[2];
                    var inst_25627 = inst_25626__$1 == null;
                    var state_25680__$1 = function() {
                      var statearr_25689 = state_25680;
                      statearr_25689[11] = inst_25626__$1;
                      return statearr_25689;
                    }();
                    if (cljs.core.truth_(inst_25627)) {
                      var statearr_25690_25718 = state_25680__$1;
                      statearr_25690_25718[1] = 5;
                    } else {
                      var statearr_25691_25719 = state_25680__$1;
                      statearr_25691_25719[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25681 === 15) {
                      var state_25680__$1 = state_25680;
                      var statearr_25692_25720 = state_25680__$1;
                      statearr_25692_25720[2] = null;
                      statearr_25692_25720[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25681 === 13) {
                        var inst_25640 = state_25680[7];
                        var inst_25639 = state_25680[8];
                        var inst_25637 = state_25680[9];
                        var inst_25638 = state_25680[10];
                        var inst_25647 = state_25680[2];
                        var inst_25648 = inst_25640 + 1;
                        var tmp25686 = inst_25639;
                        var tmp25687 = inst_25637;
                        var tmp25688 = inst_25638;
                        var inst_25637__$1 = tmp25687;
                        var inst_25638__$1 = tmp25688;
                        var inst_25639__$1 = tmp25686;
                        var inst_25640__$1 = inst_25648;
                        var state_25680__$1 = function() {
                          var statearr_25693 = state_25680;
                          statearr_25693[12] = inst_25647;
                          statearr_25693[7] = inst_25640__$1;
                          statearr_25693[8] = inst_25639__$1;
                          statearr_25693[9] = inst_25637__$1;
                          statearr_25693[10] = inst_25638__$1;
                          return statearr_25693;
                        }();
                        var statearr_25694_25721 = state_25680__$1;
                        statearr_25694_25721[2] = null;
                        statearr_25694_25721[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_25681 === 6) {
                          var inst_25626 = state_25680[11];
                          var inst_25631 = f.call(null, inst_25626);
                          var inst_25636 = cljs.core.seq.call(null, inst_25631);
                          var inst_25637 = inst_25636;
                          var inst_25638 = null;
                          var inst_25639 = 0;
                          var inst_25640 = 0;
                          var state_25680__$1 = function() {
                            var statearr_25695 = state_25680;
                            statearr_25695[7] = inst_25640;
                            statearr_25695[8] = inst_25639;
                            statearr_25695[9] = inst_25637;
                            statearr_25695[10] = inst_25638;
                            return statearr_25695;
                          }();
                          var statearr_25696_25722 = state_25680__$1;
                          statearr_25696_25722[2] = null;
                          statearr_25696_25722[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_25681 === 17) {
                            var inst_25651 = state_25680[5];
                            var inst_25655 = cljs.core.chunk_first.call(null, inst_25651);
                            var inst_25656 = cljs.core.chunk_rest.call(null, inst_25651);
                            var inst_25657 = cljs.core.count.call(null, inst_25655);
                            var inst_25637 = inst_25656;
                            var inst_25638 = inst_25655;
                            var inst_25639 = inst_25657;
                            var inst_25640 = 0;
                            var state_25680__$1 = function() {
                              var statearr_25697 = state_25680;
                              statearr_25697[7] = inst_25640;
                              statearr_25697[8] = inst_25639;
                              statearr_25697[9] = inst_25637;
                              statearr_25697[10] = inst_25638;
                              return statearr_25697;
                            }();
                            var statearr_25698_25723 = state_25680__$1;
                            statearr_25698_25723[2] = null;
                            statearr_25698_25723[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25681 === 3) {
                              var inst_25678 = state_25680[2];
                              var state_25680__$1 = state_25680;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25680__$1, inst_25678);
                            } else {
                              if (state_val_25681 === 12) {
                                var inst_25671 = state_25680[2];
                                var state_25680__$1 = state_25680;
                                var statearr_25699_25724 = state_25680__$1;
                                statearr_25699_25724[2] = inst_25671;
                                statearr_25699_25724[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25681 === 2) {
                                  var state_25680__$1 = state_25680;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25680__$1, 4, in$);
                                } else {
                                  if (state_val_25681 === 19) {
                                    var inst_25666 = state_25680[2];
                                    var state_25680__$1 = state_25680;
                                    var statearr_25700_25725 = state_25680__$1;
                                    statearr_25700_25725[2] = inst_25666;
                                    statearr_25700_25725[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_25681 === 11) {
                                      var inst_25651 = state_25680[5];
                                      var inst_25637 = state_25680[9];
                                      var inst_25651__$1 = cljs.core.seq.call(null, inst_25637);
                                      var state_25680__$1 = function() {
                                        var statearr_25701 = state_25680;
                                        statearr_25701[5] = inst_25651__$1;
                                        return statearr_25701;
                                      }();
                                      if (inst_25651__$1) {
                                        var statearr_25702_25726 = state_25680__$1;
                                        statearr_25702_25726[1] = 14;
                                      } else {
                                        var statearr_25703_25727 = state_25680__$1;
                                        statearr_25703_25727[1] = 15;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_25681 === 9) {
                                        var inst_25673 = state_25680[2];
                                        var state_25680__$1 = function() {
                                          var statearr_25704 = state_25680;
                                          statearr_25704[13] = inst_25673;
                                          return statearr_25704;
                                        }();
                                        var statearr_25705_25728 = state_25680__$1;
                                        statearr_25705_25728[2] = null;
                                        statearr_25705_25728[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_25681 === 5) {
                                          var inst_25629 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_25680__$1 = state_25680;
                                          var statearr_25706_25729 = state_25680__$1;
                                          statearr_25706_25729[2] = inst_25629;
                                          statearr_25706_25729[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_25681 === 14) {
                                            var inst_25651 = state_25680[5];
                                            var inst_25653 = cljs.core.chunked_seq_QMARK_.call(null, inst_25651);
                                            var state_25680__$1 = state_25680;
                                            if (inst_25653) {
                                              var statearr_25707_25730 = state_25680__$1;
                                              statearr_25707_25730[1] = 17;
                                            } else {
                                              var statearr_25708_25731 = state_25680__$1;
                                              statearr_25708_25731[1] = 18;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_25681 === 16) {
                                              var inst_25669 = state_25680[2];
                                              var state_25680__$1 = state_25680;
                                              var statearr_25709_25732 = state_25680__$1;
                                              statearr_25709_25732[2] = inst_25669;
                                              statearr_25709_25732[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_25681 === 10) {
                                                var inst_25640 = state_25680[7];
                                                var inst_25638 = state_25680[10];
                                                var inst_25645 = cljs.core._nth.call(null, inst_25638, inst_25640);
                                                var state_25680__$1 = state_25680;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25680__$1, 13, out, inst_25645);
                                              } else {
                                                if (state_val_25681 === 18) {
                                                  var inst_25651 = state_25680[5];
                                                  var inst_25660 = cljs.core.first.call(null, inst_25651);
                                                  var state_25680__$1 = state_25680;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25680__$1, 20, out, inst_25660);
                                                } else {
                                                  if (state_val_25681 === 8) {
                                                    var inst_25640 = state_25680[7];
                                                    var inst_25639 = state_25680[8];
                                                    var inst_25642 = inst_25640 < inst_25639;
                                                    var inst_25643 = inst_25642;
                                                    var state_25680__$1 = state_25680;
                                                    if (cljs.core.truth_(inst_25643)) {
                                                      var statearr_25710_25733 = state_25680__$1;
                                                      statearr_25710_25733[1] = 10;
                                                    } else {
                                                      var statearr_25711_25734 = state_25680__$1;
                                                      statearr_25711_25734[1] = 11;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_25713 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_25713[0] = state_machine__6577__auto__;
              statearr_25713[1] = 1;
              return statearr_25713;
            };
            var state_machine__6577__auto____1 = function(state_25680) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_25680);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_25680) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_25680);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_25714 = f__6621__auto__.call(null);
        statearr_25714[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_25714;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__6620__auto___25807 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___25807) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto___25807) {
            return function(state_25790) {
              var state_val_25791 = state_25790[1];
              if (state_val_25791 === 7) {
                var inst_25786 = state_25790[2];
                var state_25790__$1 = state_25790;
                var statearr_25792_25808 = state_25790__$1;
                statearr_25792_25808[2] = inst_25786;
                statearr_25792_25808[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25791 === 1) {
                  var state_25790__$1 = state_25790;
                  var statearr_25793_25809 = state_25790__$1;
                  statearr_25793_25809[2] = null;
                  statearr_25793_25809[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25791 === 4) {
                    var inst_25773 = state_25790[5];
                    var inst_25773__$1 = state_25790[2];
                    var inst_25774 = inst_25773__$1 == null;
                    var state_25790__$1 = function() {
                      var statearr_25794 = state_25790;
                      statearr_25794[5] = inst_25773__$1;
                      return statearr_25794;
                    }();
                    if (cljs.core.truth_(inst_25774)) {
                      var statearr_25795_25810 = state_25790__$1;
                      statearr_25795_25810[1] = 5;
                    } else {
                      var statearr_25796_25811 = state_25790__$1;
                      statearr_25796_25811[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25791 === 6) {
                      var inst_25773 = state_25790[5];
                      var state_25790__$1 = state_25790;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25790__$1, 11, to, inst_25773);
                    } else {
                      if (state_val_25791 === 3) {
                        var inst_25788 = state_25790[2];
                        var state_25790__$1 = state_25790;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25790__$1, inst_25788);
                      } else {
                        if (state_val_25791 === 2) {
                          var state_25790__$1 = state_25790;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25790__$1, 4, from);
                        } else {
                          if (state_val_25791 === 11) {
                            var inst_25783 = state_25790[2];
                            var state_25790__$1 = function() {
                              var statearr_25797 = state_25790;
                              statearr_25797[6] = inst_25783;
                              return statearr_25797;
                            }();
                            var statearr_25798_25812 = state_25790__$1;
                            statearr_25798_25812[2] = null;
                            statearr_25798_25812[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25791 === 9) {
                              var state_25790__$1 = state_25790;
                              var statearr_25799_25813 = state_25790__$1;
                              statearr_25799_25813[2] = null;
                              statearr_25799_25813[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_25791 === 5) {
                                var state_25790__$1 = state_25790;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_25800_25814 = state_25790__$1;
                                  statearr_25800_25814[1] = 8;
                                } else {
                                  var statearr_25801_25815 = state_25790__$1;
                                  statearr_25801_25815[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25791 === 10) {
                                  var inst_25780 = state_25790[2];
                                  var state_25790__$1 = state_25790;
                                  var statearr_25802_25816 = state_25790__$1;
                                  statearr_25802_25816[2] = inst_25780;
                                  statearr_25802_25816[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25791 === 8) {
                                    var inst_25777 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_25790__$1 = state_25790;
                                    var statearr_25803_25817 = state_25790__$1;
                                    statearr_25803_25817[2] = inst_25777;
                                    statearr_25803_25817[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto___25807);
          return function(switch__6576__auto__, c__6620__auto___25807) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_25805 = [null, null, null, null, null, null, null];
                statearr_25805[0] = state_machine__6577__auto__;
                statearr_25805[1] = 1;
                return statearr_25805;
              };
              var state_machine__6577__auto____1 = function(state_25790) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_25790);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_25790) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_25790);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto___25807);
        }();
        var state__6622__auto__ = function() {
          var statearr_25806 = f__6621__auto__.call(null);
          statearr_25806[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___25807;
          return statearr_25806;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto___25807));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6620__auto___25896 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___25896, tc, fc) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto___25896, tc, fc) {
            return function(state_25878) {
              var state_val_25879 = state_25878[1];
              if (state_val_25879 === 7) {
                var inst_25874 = state_25878[2];
                var state_25878__$1 = state_25878;
                var statearr_25880_25897 = state_25878__$1;
                statearr_25880_25897[2] = inst_25874;
                statearr_25880_25897[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25879 === 1) {
                  var state_25878__$1 = state_25878;
                  var statearr_25881_25898 = state_25878__$1;
                  statearr_25881_25898[2] = null;
                  statearr_25881_25898[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25879 === 4) {
                    var inst_25859 = state_25878[5];
                    var inst_25859__$1 = state_25878[2];
                    var inst_25860 = inst_25859__$1 == null;
                    var state_25878__$1 = function() {
                      var statearr_25882 = state_25878;
                      statearr_25882[5] = inst_25859__$1;
                      return statearr_25882;
                    }();
                    if (cljs.core.truth_(inst_25860)) {
                      var statearr_25883_25899 = state_25878__$1;
                      statearr_25883_25899[1] = 5;
                    } else {
                      var statearr_25884_25900 = state_25878__$1;
                      statearr_25884_25900[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25879 === 6) {
                      var inst_25859 = state_25878[5];
                      var inst_25865 = p.call(null, inst_25859);
                      var state_25878__$1 = state_25878;
                      if (cljs.core.truth_(inst_25865)) {
                        var statearr_25885_25901 = state_25878__$1;
                        statearr_25885_25901[1] = 9;
                      } else {
                        var statearr_25886_25902 = state_25878__$1;
                        statearr_25886_25902[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25879 === 3) {
                        var inst_25876 = state_25878[2];
                        var state_25878__$1 = state_25878;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25878__$1, inst_25876);
                      } else {
                        if (state_val_25879 === 2) {
                          var state_25878__$1 = state_25878;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25878__$1, 4, ch);
                        } else {
                          if (state_val_25879 === 11) {
                            var inst_25859 = state_25878[5];
                            var inst_25869 = state_25878[2];
                            var state_25878__$1 = state_25878;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25878__$1, 8, inst_25869, inst_25859);
                          } else {
                            if (state_val_25879 === 9) {
                              var state_25878__$1 = state_25878;
                              var statearr_25887_25903 = state_25878__$1;
                              statearr_25887_25903[2] = tc;
                              statearr_25887_25903[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_25879 === 5) {
                                var inst_25862 = cljs.core.async.close_BANG_.call(null, tc);
                                var inst_25863 = cljs.core.async.close_BANG_.call(null, fc);
                                var state_25878__$1 = function() {
                                  var statearr_25888 = state_25878;
                                  statearr_25888[6] = inst_25862;
                                  return statearr_25888;
                                }();
                                var statearr_25889_25904 = state_25878__$1;
                                statearr_25889_25904[2] = inst_25863;
                                statearr_25889_25904[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25879 === 10) {
                                  var state_25878__$1 = state_25878;
                                  var statearr_25890_25905 = state_25878__$1;
                                  statearr_25890_25905[2] = fc;
                                  statearr_25890_25905[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25879 === 8) {
                                    var inst_25871 = state_25878[2];
                                    var state_25878__$1 = function() {
                                      var statearr_25891 = state_25878;
                                      statearr_25891[7] = inst_25871;
                                      return statearr_25891;
                                    }();
                                    var statearr_25892_25906 = state_25878__$1;
                                    statearr_25892_25906[2] = null;
                                    statearr_25892_25906[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto___25896, tc, fc);
          return function(switch__6576__auto__, c__6620__auto___25896, tc, fc) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_25894 = [null, null, null, null, null, null, null, null];
                statearr_25894[0] = state_machine__6577__auto__;
                statearr_25894[1] = 1;
                return statearr_25894;
              };
              var state_machine__6577__auto____1 = function(state_25878) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_25878);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_25878) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_25878);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto___25896, tc, fc);
        }();
        var state__6622__auto__ = function() {
          var statearr_25895 = f__6621__auto__.call(null);
          statearr_25895[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___25896;
          return statearr_25895;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto___25896, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_25949) {
            var state_val_25950 = state_25949[1];
            if (state_val_25950 === 7) {
              var inst_25945 = state_25949[2];
              var state_25949__$1 = state_25949;
              var statearr_25951_25963 = state_25949__$1;
              statearr_25951_25963[2] = inst_25945;
              statearr_25951_25963[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_25950 === 6) {
                var inst_25938 = state_25949[5];
                var inst_25935 = state_25949[6];
                var inst_25942 = f.call(null, inst_25935, inst_25938);
                var inst_25935__$1 = inst_25942;
                var state_25949__$1 = function() {
                  var statearr_25952 = state_25949;
                  statearr_25952[6] = inst_25935__$1;
                  return statearr_25952;
                }();
                var statearr_25953_25964 = state_25949__$1;
                statearr_25953_25964[2] = null;
                statearr_25953_25964[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25950 === 5) {
                  var inst_25935 = state_25949[6];
                  var state_25949__$1 = state_25949;
                  var statearr_25954_25965 = state_25949__$1;
                  statearr_25954_25965[2] = inst_25935;
                  statearr_25954_25965[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25950 === 4) {
                    var inst_25938 = state_25949[5];
                    var inst_25938__$1 = state_25949[2];
                    var inst_25939 = inst_25938__$1 == null;
                    var state_25949__$1 = function() {
                      var statearr_25955 = state_25949;
                      statearr_25955[5] = inst_25938__$1;
                      return statearr_25955;
                    }();
                    if (cljs.core.truth_(inst_25939)) {
                      var statearr_25956_25966 = state_25949__$1;
                      statearr_25956_25966[1] = 5;
                    } else {
                      var statearr_25957_25967 = state_25949__$1;
                      statearr_25957_25967[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25950 === 3) {
                      var inst_25947 = state_25949[2];
                      var state_25949__$1 = state_25949;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25949__$1, inst_25947);
                    } else {
                      if (state_val_25950 === 2) {
                        var state_25949__$1 = state_25949;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25949__$1, 4, ch);
                      } else {
                        if (state_val_25950 === 1) {
                          var inst_25935 = init;
                          var state_25949__$1 = function() {
                            var statearr_25958 = state_25949;
                            statearr_25958[6] = inst_25935;
                            return statearr_25958;
                          }();
                          var statearr_25959_25968 = state_25949__$1;
                          statearr_25959_25968[2] = null;
                          statearr_25959_25968[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_25961 = [null, null, null, null, null, null, null];
              statearr_25961[0] = state_machine__6577__auto__;
              statearr_25961[1] = 1;
              return statearr_25961;
            };
            var state_machine__6577__auto____1 = function(state_25949) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_25949);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_25949) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_25949);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_25962 = f__6621__auto__.call(null);
        statearr_25962[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_25962;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_26026) {
              var state_val_26027 = state_26026[1];
              if (state_val_26027 === 7) {
                var inst_26007 = state_26026[5];
                var inst_26012 = state_26026[2];
                var inst_26013 = cljs.core.next.call(null, inst_26007);
                var inst_26007__$1 = inst_26013;
                var state_26026__$1 = function() {
                  var statearr_26028 = state_26026;
                  statearr_26028[6] = inst_26012;
                  statearr_26028[5] = inst_26007__$1;
                  return statearr_26028;
                }();
                var statearr_26029_26043 = state_26026__$1;
                statearr_26029_26043[2] = null;
                statearr_26029_26043[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_26027 === 1) {
                  var inst_26006 = cljs.core.seq.call(null, coll);
                  var inst_26007 = inst_26006;
                  var state_26026__$1 = function() {
                    var statearr_26030 = state_26026;
                    statearr_26030[5] = inst_26007;
                    return statearr_26030;
                  }();
                  var statearr_26031_26044 = state_26026__$1;
                  statearr_26031_26044[2] = null;
                  statearr_26031_26044[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_26027 === 4) {
                    var inst_26007 = state_26026[5];
                    var inst_26010 = cljs.core.first.call(null, inst_26007);
                    var state_26026__$1 = state_26026;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26026__$1, 7, ch, inst_26010);
                  } else {
                    if (state_val_26027 === 6) {
                      var inst_26022 = state_26026[2];
                      var state_26026__$1 = state_26026;
                      var statearr_26032_26045 = state_26026__$1;
                      statearr_26032_26045[2] = inst_26022;
                      statearr_26032_26045[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_26027 === 3) {
                        var inst_26024 = state_26026[2];
                        var state_26026__$1 = state_26026;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26026__$1, inst_26024);
                      } else {
                        if (state_val_26027 === 2) {
                          var inst_26007 = state_26026[5];
                          var state_26026__$1 = state_26026;
                          if (cljs.core.truth_(inst_26007)) {
                            var statearr_26033_26046 = state_26026__$1;
                            statearr_26033_26046[1] = 4;
                          } else {
                            var statearr_26034_26047 = state_26026__$1;
                            statearr_26034_26047[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_26027 === 9) {
                            var state_26026__$1 = state_26026;
                            var statearr_26035_26048 = state_26026__$1;
                            statearr_26035_26048[2] = null;
                            statearr_26035_26048[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_26027 === 5) {
                              var state_26026__$1 = state_26026;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_26036_26049 = state_26026__$1;
                                statearr_26036_26049[1] = 8;
                              } else {
                                var statearr_26037_26050 = state_26026__$1;
                                statearr_26037_26050[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_26027 === 10) {
                                var inst_26020 = state_26026[2];
                                var state_26026__$1 = state_26026;
                                var statearr_26038_26051 = state_26026__$1;
                                statearr_26038_26051[2] = inst_26020;
                                statearr_26038_26051[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_26027 === 8) {
                                  var inst_26017 = cljs.core.async.close_BANG_.call(null, ch);
                                  var state_26026__$1 = state_26026;
                                  var statearr_26039_26052 = state_26026__$1;
                                  statearr_26039_26052[2] = inst_26017;
                                  statearr_26039_26052[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_26041 = [null, null, null, null, null, null, null];
                statearr_26041[0] = state_machine__6577__auto__;
                statearr_26041[1] = 1;
                return statearr_26041;
              };
              var state_machine__6577__auto____1 = function(state_26026) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_26026);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_26026) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_26026);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_26042 = f__6621__auto__.call(null);
          statearr_26042[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_26042;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj26054 = {};
  return obj26054;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3969__auto__ = _;
    if (and__3969__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4625__auto__ = _ == null ? null : _;
    return function() {
      var or__3981__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj26056 = {};
  return obj26056;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t26269 !== "undefined") {
    } else {
      cljs.core.async.t26269 = function(cs, ch, mult, meta26270) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta26270 = meta26270;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t26269.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t26269.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t26269.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t26269.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t26269.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t26269.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t26269.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_26271) {
          var self__ = this;
          var _26271__$1 = this;
          return self__.meta26270;
        };
      }(cs);
      cljs.core.async.t26269.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_26271, meta26270__$1) {
          var self__ = this;
          var _26271__$1 = this;
          return new cljs.core.async.t26269(self__.cs, self__.ch, self__.mult, meta26270__$1);
        };
      }(cs);
      cljs.core.async.t26269.cljs$lang$type = true;
      cljs.core.async.t26269.cljs$lang$ctorStr = "cljs.core.async/t26269";
      cljs.core.async.t26269.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
          return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t26269");
        };
      }(cs);
      cljs.core.async.__GT_t26269 = function(cs) {
        return function __GT_t26269(cs__$1, ch__$1, mult__$1, meta26270) {
          return new cljs.core.async.t26269(cs__$1, ch__$1, mult__$1, meta26270);
        };
      }(cs);
    }
    return new cljs.core.async.t26269(cs, ch, mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6620__auto___26481 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___26481, cs, m, dchan, dctr, done) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto___26481, cs, m, dchan, dctr, done) {
          return function(state_26399) {
            var state_val_26400 = state_26399[1];
            if (state_val_26400 === 7) {
              var inst_26395 = state_26399[2];
              var state_26399__$1 = state_26399;
              var statearr_26401_26482 = state_26399__$1;
              statearr_26401_26482[2] = inst_26395;
              statearr_26401_26482[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_26400 === 20) {
                var inst_26303 = state_26399[5];
                var inst_26313 = cljs.core.first.call(null, inst_26303);
                var inst_26314 = cljs.core.nth.call(null, inst_26313, 0, null);
                var inst_26315 = cljs.core.nth.call(null, inst_26313, 1, null);
                var state_26399__$1 = function() {
                  var statearr_26402 = state_26399;
                  statearr_26402[6] = inst_26314;
                  return statearr_26402;
                }();
                if (cljs.core.truth_(inst_26315)) {
                  var statearr_26403_26483 = state_26399__$1;
                  statearr_26403_26483[1] = 22;
                } else {
                  var statearr_26404_26484 = state_26399__$1;
                  statearr_26404_26484[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_26400 === 27) {
                  var inst_26343 = state_26399[7];
                  var inst_26345 = state_26399[8];
                  var inst_26350 = cljs.core._nth.call(null, inst_26343, inst_26345);
                  var state_26399__$1 = function() {
                    var statearr_26405 = state_26399;
                    statearr_26405[9] = inst_26350;
                    return statearr_26405;
                  }();
                  var statearr_26406_26485 = state_26399__$1;
                  statearr_26406_26485[2] = null;
                  statearr_26406_26485[1] = 32;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_26400 === 1) {
                    var state_26399__$1 = state_26399;
                    var statearr_26407_26486 = state_26399__$1;
                    statearr_26407_26486[2] = null;
                    statearr_26407_26486[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_26400 === 24) {
                      var inst_26303 = state_26399[5];
                      var inst_26320 = state_26399[2];
                      var inst_26321 = cljs.core.next.call(null, inst_26303);
                      var inst_26283 = inst_26321;
                      var inst_26284 = null;
                      var inst_26285 = 0;
                      var inst_26286 = 0;
                      var state_26399__$1 = function() {
                        var statearr_26408 = state_26399;
                        statearr_26408[10] = inst_26283;
                        statearr_26408[11] = inst_26286;
                        statearr_26408[12] = inst_26285;
                        statearr_26408[13] = inst_26320;
                        statearr_26408[14] = inst_26284;
                        return statearr_26408;
                      }();
                      var statearr_26409_26487 = state_26399__$1;
                      statearr_26409_26487[2] = null;
                      statearr_26409_26487[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_26400 === 39) {
                        var inst_26362 = state_26399[15];
                        var inst_26379 = state_26399[2];
                        var inst_26380 = cljs.core.next.call(null, inst_26362);
                        var inst_26342 = inst_26380;
                        var inst_26343 = null;
                        var inst_26344 = 0;
                        var inst_26345 = 0;
                        var state_26399__$1 = function() {
                          var statearr_26413 = state_26399;
                          statearr_26413[16] = inst_26379;
                          statearr_26413[17] = inst_26342;
                          statearr_26413[18] = inst_26344;
                          statearr_26413[7] = inst_26343;
                          statearr_26413[8] = inst_26345;
                          return statearr_26413;
                        }();
                        var statearr_26414_26488 = state_26399__$1;
                        statearr_26414_26488[2] = null;
                        statearr_26414_26488[1] = 25;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_26400 === 4) {
                          var inst_26274 = state_26399[19];
                          var inst_26274__$1 = state_26399[2];
                          var inst_26275 = inst_26274__$1 == null;
                          var state_26399__$1 = function() {
                            var statearr_26415 = state_26399;
                            statearr_26415[19] = inst_26274__$1;
                            return statearr_26415;
                          }();
                          if (cljs.core.truth_(inst_26275)) {
                            var statearr_26416_26489 = state_26399__$1;
                            statearr_26416_26489[1] = 5;
                          } else {
                            var statearr_26417_26490 = state_26399__$1;
                            statearr_26417_26490[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_26400 === 15) {
                            var inst_26283 = state_26399[10];
                            var inst_26286 = state_26399[11];
                            var inst_26285 = state_26399[12];
                            var inst_26284 = state_26399[14];
                            var inst_26299 = state_26399[2];
                            var inst_26300 = inst_26286 + 1;
                            var tmp26410 = inst_26283;
                            var tmp26411 = inst_26285;
                            var tmp26412 = inst_26284;
                            var inst_26283__$1 = tmp26410;
                            var inst_26284__$1 = tmp26412;
                            var inst_26285__$1 = tmp26411;
                            var inst_26286__$1 = inst_26300;
                            var state_26399__$1 = function() {
                              var statearr_26418 = state_26399;
                              statearr_26418[10] = inst_26283__$1;
                              statearr_26418[11] = inst_26286__$1;
                              statearr_26418[12] = inst_26285__$1;
                              statearr_26418[20] = inst_26299;
                              statearr_26418[14] = inst_26284__$1;
                              return statearr_26418;
                            }();
                            var statearr_26419_26491 = state_26399__$1;
                            statearr_26419_26491[2] = null;
                            statearr_26419_26491[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_26400 === 21) {
                              var inst_26324 = state_26399[2];
                              var state_26399__$1 = state_26399;
                              var statearr_26420_26492 = state_26399__$1;
                              statearr_26420_26492[2] = inst_26324;
                              statearr_26420_26492[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_26400 === 31) {
                                var inst_26350 = state_26399[9];
                                var inst_26351 = state_26399[2];
                                var inst_26352 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_26353 = cljs.core.async.untap_STAR_.call(null, m, inst_26350);
                                var state_26399__$1 = function() {
                                  var statearr_26421 = state_26399;
                                  statearr_26421[21] = inst_26352;
                                  statearr_26421[22] = inst_26351;
                                  return statearr_26421;
                                }();
                                var statearr_26422_26493 = state_26399__$1;
                                statearr_26422_26493[2] = inst_26353;
                                statearr_26422_26493[1] = 30;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_26400 === 32) {
                                  try {
                                    var inst_26350 = state_26399[9];
                                    var inst_26274 = state_26399[19];
                                    var inst_26356 = cljs.core.async.put_BANG_.call(null, inst_26350, inst_26274, done);
                                    var state_26399__$1 = state_26399;
                                    var statearr_26425_26494 = state_26399__$1;
                                    statearr_26425_26494[2] = inst_26356;
                                    statearr_26425_26494[1] = 30;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e26423) {
                                    if (e26423 instanceof Object) {
                                      var ex__6570__auto__ = e26423;
                                      var statearr_26424_26495 = state_26399;
                                      statearr_26424_26495[1] = 31;
                                      statearr_26424_26495[2] = ex__6570__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e26423;
                                    }
                                  }
                                } else {
                                  if (state_val_26400 === 40) {
                                    var inst_26371 = state_26399[23];
                                    var inst_26372 = state_26399[2];
                                    var inst_26373 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_26374 = cljs.core.async.untap_STAR_.call(null, m, inst_26371);
                                    var state_26399__$1 = function() {
                                      var statearr_26426 = state_26399;
                                      statearr_26426[24] = inst_26373;
                                      statearr_26426[25] = inst_26372;
                                      return statearr_26426;
                                    }();
                                    var statearr_26427_26496 = state_26399__$1;
                                    statearr_26427_26496[2] = inst_26374;
                                    statearr_26427_26496[1] = 39;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_26400 === 33) {
                                      var inst_26362 = state_26399[15];
                                      var inst_26364 = cljs.core.chunked_seq_QMARK_.call(null, inst_26362);
                                      var state_26399__$1 = state_26399;
                                      if (inst_26364) {
                                        var statearr_26428_26497 = state_26399__$1;
                                        statearr_26428_26497[1] = 36;
                                      } else {
                                        var statearr_26429_26498 = state_26399__$1;
                                        statearr_26429_26498[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_26400 === 13) {
                                        var inst_26293 = state_26399[26];
                                        var inst_26296 = cljs.core.async.close_BANG_.call(null, inst_26293);
                                        var state_26399__$1 = state_26399;
                                        var statearr_26430_26499 = state_26399__$1;
                                        statearr_26430_26499[2] = inst_26296;
                                        statearr_26430_26499[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_26400 === 22) {
                                          var inst_26314 = state_26399[6];
                                          var inst_26317 = cljs.core.async.close_BANG_.call(null, inst_26314);
                                          var state_26399__$1 = state_26399;
                                          var statearr_26431_26500 = state_26399__$1;
                                          statearr_26431_26500[2] = inst_26317;
                                          statearr_26431_26500[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_26400 === 36) {
                                            var inst_26362 = state_26399[15];
                                            var inst_26366 = cljs.core.chunk_first.call(null, inst_26362);
                                            var inst_26367 = cljs.core.chunk_rest.call(null, inst_26362);
                                            var inst_26368 = cljs.core.count.call(null, inst_26366);
                                            var inst_26342 = inst_26367;
                                            var inst_26343 = inst_26366;
                                            var inst_26344 = inst_26368;
                                            var inst_26345 = 0;
                                            var state_26399__$1 = function() {
                                              var statearr_26432 = state_26399;
                                              statearr_26432[17] = inst_26342;
                                              statearr_26432[18] = inst_26344;
                                              statearr_26432[7] = inst_26343;
                                              statearr_26432[8] = inst_26345;
                                              return statearr_26432;
                                            }();
                                            var statearr_26433_26501 = state_26399__$1;
                                            statearr_26433_26501[2] = null;
                                            statearr_26433_26501[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_26400 === 41) {
                                              try {
                                                var inst_26371 = state_26399[23];
                                                var inst_26274 = state_26399[19];
                                                var inst_26377 = cljs.core.async.put_BANG_.call(null, inst_26371, inst_26274, done);
                                                var state_26399__$1 = state_26399;
                                                var statearr_26436_26502 = state_26399__$1;
                                                statearr_26436_26502[2] = inst_26377;
                                                statearr_26436_26502[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } catch (e26434) {
                                                if (e26434 instanceof Object) {
                                                  var ex__6570__auto__ = e26434;
                                                  var statearr_26435_26503 = state_26399;
                                                  statearr_26435_26503[1] = 40;
                                                  statearr_26435_26503[2] = ex__6570__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  throw e26434;
                                                }
                                              }
                                            } else {
                                              if (state_val_26400 === 29) {
                                                var inst_26388 = state_26399[2];
                                                var state_26399__$1 = state_26399;
                                                var statearr_26437_26504 = state_26399__$1;
                                                statearr_26437_26504[2] = inst_26388;
                                                statearr_26437_26504[1] = 26;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_26400 === 6) {
                                                  var inst_26333 = cljs.core.deref.call(null, cs);
                                                  var inst_26334 = cljs.core.keys.call(null, inst_26333);
                                                  var inst_26335 = cljs.core.count.call(null, inst_26334);
                                                  var inst_26336 = cljs.core.reset_BANG_.call(null, dctr, inst_26335);
                                                  var inst_26341 = cljs.core.seq.call(null, inst_26334);
                                                  var inst_26342 = inst_26341;
                                                  var inst_26343 = null;
                                                  var inst_26344 = 0;
                                                  var inst_26345 = 0;
                                                  var state_26399__$1 = function() {
                                                    var statearr_26438 = state_26399;
                                                    statearr_26438[17] = inst_26342;
                                                    statearr_26438[18] = inst_26344;
                                                    statearr_26438[7] = inst_26343;
                                                    statearr_26438[8] = inst_26345;
                                                    statearr_26438[27] = inst_26336;
                                                    return statearr_26438;
                                                  }();
                                                  var statearr_26439_26505 = state_26399__$1;
                                                  statearr_26439_26505[2] = null;
                                                  statearr_26439_26505[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_26400 === 28) {
                                                    var inst_26342 = state_26399[17];
                                                    var inst_26362 = state_26399[15];
                                                    var inst_26362__$1 = cljs.core.seq.call(null, inst_26342);
                                                    var state_26399__$1 = function() {
                                                      var statearr_26440 = state_26399;
                                                      statearr_26440[15] = inst_26362__$1;
                                                      return statearr_26440;
                                                    }();
                                                    if (inst_26362__$1) {
                                                      var statearr_26441_26506 = state_26399__$1;
                                                      statearr_26441_26506[1] = 33;
                                                    } else {
                                                      var statearr_26442_26507 = state_26399__$1;
                                                      statearr_26442_26507[1] = 34;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_26400 === 25) {
                                                      var inst_26344 = state_26399[18];
                                                      var inst_26345 = state_26399[8];
                                                      var inst_26347 = inst_26345 < inst_26344;
                                                      var inst_26348 = inst_26347;
                                                      var state_26399__$1 = state_26399;
                                                      if (cljs.core.truth_(inst_26348)) {
                                                        var statearr_26443_26508 = state_26399__$1;
                                                        statearr_26443_26508[1] = 27;
                                                      } else {
                                                        var statearr_26444_26509 = state_26399__$1;
                                                        statearr_26444_26509[1] = 28;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_26400 === 34) {
                                                        var state_26399__$1 = state_26399;
                                                        var statearr_26445_26510 = state_26399__$1;
                                                        statearr_26445_26510[2] = null;
                                                        statearr_26445_26510[1] = 35;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_26400 === 17) {
                                                          var state_26399__$1 = state_26399;
                                                          var statearr_26446_26511 = state_26399__$1;
                                                          statearr_26446_26511[2] = null;
                                                          statearr_26446_26511[1] = 18;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_26400 === 3) {
                                                            var inst_26397 = state_26399[2];
                                                            var state_26399__$1 = state_26399;
                                                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26399__$1, inst_26397);
                                                          } else {
                                                            if (state_val_26400 === 12) {
                                                              var inst_26329 = state_26399[2];
                                                              var state_26399__$1 = state_26399;
                                                              var statearr_26447_26512 = state_26399__$1;
                                                              statearr_26447_26512[2] = inst_26329;
                                                              statearr_26447_26512[1] = 9;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_26400 === 2) {
                                                                var state_26399__$1 = state_26399;
                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26399__$1, 4, ch);
                                                              } else {
                                                                if (state_val_26400 === 23) {
                                                                  var state_26399__$1 = state_26399;
                                                                  var statearr_26448_26513 = state_26399__$1;
                                                                  statearr_26448_26513[2] = null;
                                                                  statearr_26448_26513[1] = 24;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_26400 === 35) {
                                                                    var inst_26386 = state_26399[2];
                                                                    var state_26399__$1 = state_26399;
                                                                    var statearr_26449_26514 = state_26399__$1;
                                                                    statearr_26449_26514[2] = inst_26386;
                                                                    statearr_26449_26514[1] = 29;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_26400 === 19) {
                                                                      var inst_26303 = state_26399[5];
                                                                      var inst_26307 = cljs.core.chunk_first.call(null, inst_26303);
                                                                      var inst_26308 = cljs.core.chunk_rest.call(null, inst_26303);
                                                                      var inst_26309 = cljs.core.count.call(null, inst_26307);
                                                                      var inst_26283 = inst_26308;
                                                                      var inst_26284 = inst_26307;
                                                                      var inst_26285 = inst_26309;
                                                                      var inst_26286 = 0;
                                                                      var state_26399__$1 = function() {
                                                                        var statearr_26450 = state_26399;
                                                                        statearr_26450[10] = inst_26283;
                                                                        statearr_26450[11] = inst_26286;
                                                                        statearr_26450[12] = inst_26285;
                                                                        statearr_26450[14] = inst_26284;
                                                                        return statearr_26450;
                                                                      }();
                                                                      var statearr_26451_26515 = state_26399__$1;
                                                                      statearr_26451_26515[2] = null;
                                                                      statearr_26451_26515[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_26400 === 11) {
                                                                        var inst_26283 = state_26399[10];
                                                                        var inst_26303 = state_26399[5];
                                                                        var inst_26303__$1 = cljs.core.seq.call(null, inst_26283);
                                                                        var state_26399__$1 = function() {
                                                                          var statearr_26452 = state_26399;
                                                                          statearr_26452[5] = inst_26303__$1;
                                                                          return statearr_26452;
                                                                        }();
                                                                        if (inst_26303__$1) {
                                                                          var statearr_26453_26516 = state_26399__$1;
                                                                          statearr_26453_26516[1] = 16;
                                                                        } else {
                                                                          var statearr_26454_26517 = state_26399__$1;
                                                                          statearr_26454_26517[1] = 17;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_26400 === 9) {
                                                                          var inst_26331 = state_26399[2];
                                                                          var state_26399__$1 = state_26399;
                                                                          var statearr_26455_26518 = state_26399__$1;
                                                                          statearr_26455_26518[2] = inst_26331;
                                                                          statearr_26455_26518[1] = 7;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_26400 === 5) {
                                                                            var inst_26281 = cljs.core.deref.call(null, cs);
                                                                            var inst_26282 = cljs.core.seq.call(null, inst_26281);
                                                                            var inst_26283 = inst_26282;
                                                                            var inst_26284 = null;
                                                                            var inst_26285 = 0;
                                                                            var inst_26286 = 0;
                                                                            var state_26399__$1 = function() {
                                                                              var statearr_26456 = state_26399;
                                                                              statearr_26456[10] = inst_26283;
                                                                              statearr_26456[11] = inst_26286;
                                                                              statearr_26456[12] = inst_26285;
                                                                              statearr_26456[14] = inst_26284;
                                                                              return statearr_26456;
                                                                            }();
                                                                            var statearr_26457_26519 = state_26399__$1;
                                                                            statearr_26457_26519[2] = null;
                                                                            statearr_26457_26519[1] = 8;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_26400 === 14) {
                                                                              var state_26399__$1 = state_26399;
                                                                              var statearr_26458_26520 = state_26399__$1;
                                                                              statearr_26458_26520[2] = null;
                                                                              statearr_26458_26520[1] = 15;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_26400 === 26) {
                                                                                var inst_26390 = state_26399[2];
                                                                                var state_26399__$1 = function() {
                                                                                  var statearr_26459 = state_26399;
                                                                                  statearr_26459[28] = inst_26390;
                                                                                  return statearr_26459;
                                                                                }();
                                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26399__$1, 42, dchan);
                                                                              } else {
                                                                                if (state_val_26400 === 16) {
                                                                                  var inst_26303 = state_26399[5];
                                                                                  var inst_26305 = cljs.core.chunked_seq_QMARK_.call(null, inst_26303);
                                                                                  var state_26399__$1 = state_26399;
                                                                                  if (inst_26305) {
                                                                                    var statearr_26463_26521 = state_26399__$1;
                                                                                    statearr_26463_26521[1] = 19;
                                                                                  } else {
                                                                                    var statearr_26464_26522 = state_26399__$1;
                                                                                    statearr_26464_26522[1] = 20;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_26400 === 38) {
                                                                                    var inst_26383 = state_26399[2];
                                                                                    var state_26399__$1 = state_26399;
                                                                                    var statearr_26465_26523 = state_26399__$1;
                                                                                    statearr_26465_26523[2] = inst_26383;
                                                                                    statearr_26465_26523[1] = 35;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_26400 === 30) {
                                                                                      var inst_26342 = state_26399[17];
                                                                                      var inst_26344 = state_26399[18];
                                                                                      var inst_26343 = state_26399[7];
                                                                                      var inst_26345 = state_26399[8];
                                                                                      var inst_26358 = state_26399[2];
                                                                                      var inst_26359 = inst_26345 + 1;
                                                                                      var tmp26460 = inst_26342;
                                                                                      var tmp26461 = inst_26344;
                                                                                      var tmp26462 = inst_26343;
                                                                                      var inst_26342__$1 = tmp26460;
                                                                                      var inst_26343__$1 = tmp26462;
                                                                                      var inst_26344__$1 = tmp26461;
                                                                                      var inst_26345__$1 = inst_26359;
                                                                                      var state_26399__$1 = function() {
                                                                                        var statearr_26466 = state_26399;
                                                                                        statearr_26466[17] = inst_26342__$1;
                                                                                        statearr_26466[29] = inst_26358;
                                                                                        statearr_26466[18] = inst_26344__$1;
                                                                                        statearr_26466[7] = inst_26343__$1;
                                                                                        statearr_26466[8] = inst_26345__$1;
                                                                                        return statearr_26466;
                                                                                      }();
                                                                                      var statearr_26467_26524 = state_26399__$1;
                                                                                      statearr_26467_26524[2] = null;
                                                                                      statearr_26467_26524[1] = 25;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_26400 === 10) {
                                                                                        var inst_26286 = state_26399[11];
                                                                                        var inst_26284 = state_26399[14];
                                                                                        var inst_26292 = cljs.core._nth.call(null, inst_26284, inst_26286);
                                                                                        var inst_26293 = cljs.core.nth.call(null, inst_26292, 0, null);
                                                                                        var inst_26294 = cljs.core.nth.call(null, inst_26292, 1, null);
                                                                                        var state_26399__$1 = function() {
                                                                                          var statearr_26468 = state_26399;
                                                                                          statearr_26468[26] = inst_26293;
                                                                                          return statearr_26468;
                                                                                        }();
                                                                                        if (cljs.core.truth_(inst_26294)) {
                                                                                          var statearr_26469_26525 = state_26399__$1;
                                                                                          statearr_26469_26525[1] = 13;
                                                                                        } else {
                                                                                          var statearr_26470_26526 = state_26399__$1;
                                                                                          statearr_26470_26526[1] = 14;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_26400 === 18) {
                                                                                          var inst_26327 = state_26399[2];
                                                                                          var state_26399__$1 = state_26399;
                                                                                          var statearr_26471_26527 = state_26399__$1;
                                                                                          statearr_26471_26527[2] = inst_26327;
                                                                                          statearr_26471_26527[1] = 12;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_26400 === 42) {
                                                                                            var inst_26392 = state_26399[2];
                                                                                            var state_26399__$1 = function() {
                                                                                              var statearr_26472 = state_26399;
                                                                                              statearr_26472[30] = inst_26392;
                                                                                              return statearr_26472;
                                                                                            }();
                                                                                            var statearr_26473_26528 = state_26399__$1;
                                                                                            statearr_26473_26528[2] = null;
                                                                                            statearr_26473_26528[1] = 2;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_26400 === 37) {
                                                                                              var inst_26362 = state_26399[15];
                                                                                              var inst_26371 = cljs.core.first.call(null, inst_26362);
                                                                                              var state_26399__$1 = function() {
                                                                                                var statearr_26474 = state_26399;
                                                                                                statearr_26474[23] = inst_26371;
                                                                                                return statearr_26474;
                                                                                              }();
                                                                                              var statearr_26475_26529 = state_26399__$1;
                                                                                              statearr_26475_26529[2] = null;
                                                                                              statearr_26475_26529[1] = 41;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_26400 === 8) {
                                                                                                var inst_26286 = state_26399[11];
                                                                                                var inst_26285 = state_26399[12];
                                                                                                var inst_26288 = inst_26286 < inst_26285;
                                                                                                var inst_26289 = inst_26288;
                                                                                                var state_26399__$1 = state_26399;
                                                                                                if (cljs.core.truth_(inst_26289)) {
                                                                                                  var statearr_26476_26530 = state_26399__$1;
                                                                                                  statearr_26476_26530[1] = 10;
                                                                                                } else {
                                                                                                  var statearr_26477_26531 = state_26399__$1;
                                                                                                  statearr_26477_26531[1] = 11;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                return null;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto___26481, cs, m, dchan, dctr, done);
        return function(switch__6576__auto__, c__6620__auto___26481, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_26479 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_26479[0] = state_machine__6577__auto__;
              statearr_26479[1] = 1;
              return statearr_26479;
            };
            var state_machine__6577__auto____1 = function(state_26399) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_26399);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_26399) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_26399);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto___26481, cs, m, dchan, dctr, done);
      }();
      var state__6622__auto__ = function() {
        var statearr_26480 = f__6621__auto__.call(null);
        statearr_26480[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___26481;
        return statearr_26480;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto___26481, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj26533 = {};
  return obj26533;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t26639 !== "undefined") {
    } else {
      cljs.core.async.t26639 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta26640) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta26640 = meta26640;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t26639.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t26639.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t26639.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_26641) {
          var self__ = this;
          var _26641__$1 = this;
          return self__.meta26640;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_26641, meta26640__$1) {
          var self__ = this;
          var _26641__$1 = this;
          return new cljs.core.async.t26639(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta26640__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26639.cljs$lang$type = true;
      cljs.core.async.t26639.cljs$lang$ctorStr = "cljs.core.async/t26639";
      cljs.core.async.t26639.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
          return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t26639");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t26639 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t26639(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta26640) {
          return new cljs.core.async.t26639(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta26640);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t26639(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__6620__auto___26744 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___26744, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto___26744, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_26706) {
            var state_val_26707 = state_26706[1];
            if (state_val_26707 === 7) {
              var inst_26655 = state_26706[5];
              var inst_26660 = cljs.core.apply.call(null, cljs.core.hash_map, inst_26655);
              var state_26706__$1 = state_26706;
              var statearr_26708_26745 = state_26706__$1;
              statearr_26708_26745[2] = inst_26660;
              statearr_26708_26745[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_26707 === 20) {
                var inst_26670 = state_26706[6];
                var state_26706__$1 = state_26706;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26706__$1, 23, out, inst_26670);
              } else {
                if (state_val_26707 === 1) {
                  var inst_26645 = state_26706[7];
                  var inst_26645__$1 = calc_state.call(null);
                  var inst_26646 = cljs.core.seq_QMARK_.call(null, inst_26645__$1);
                  var state_26706__$1 = function() {
                    var statearr_26709 = state_26706;
                    statearr_26709[7] = inst_26645__$1;
                    return statearr_26709;
                  }();
                  if (inst_26646) {
                    var statearr_26710_26746 = state_26706__$1;
                    statearr_26710_26746[1] = 2;
                  } else {
                    var statearr_26711_26747 = state_26706__$1;
                    statearr_26711_26747[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_26707 === 4) {
                    var inst_26645 = state_26706[7];
                    var inst_26651 = state_26706[2];
                    var inst_26652 = cljs.core.get.call(null, inst_26651, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                    var inst_26653 = cljs.core.get.call(null, inst_26651, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                    var inst_26654 = cljs.core.get.call(null, inst_26651, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                    var inst_26655 = inst_26645;
                    var state_26706__$1 = function() {
                      var statearr_26712 = state_26706;
                      statearr_26712[8] = inst_26652;
                      statearr_26712[9] = inst_26654;
                      statearr_26712[10] = inst_26653;
                      statearr_26712[5] = inst_26655;
                      return statearr_26712;
                    }();
                    var statearr_26713_26748 = state_26706__$1;
                    statearr_26713_26748[2] = null;
                    statearr_26713_26748[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_26707 === 15) {
                      var state_26706__$1 = state_26706;
                      var statearr_26714_26749 = state_26706__$1;
                      statearr_26714_26749[2] = null;
                      statearr_26714_26749[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_26707 === 21) {
                        var state_26706__$1 = state_26706;
                        var statearr_26715_26750 = state_26706__$1;
                        statearr_26715_26750[2] = null;
                        statearr_26715_26750[1] = 22;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_26707 === 13) {
                          var inst_26702 = state_26706[2];
                          var state_26706__$1 = state_26706;
                          var statearr_26716_26751 = state_26706__$1;
                          statearr_26716_26751[2] = inst_26702;
                          statearr_26716_26751[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_26707 === 22) {
                            var inst_26663 = state_26706[11];
                            var inst_26699 = state_26706[2];
                            var inst_26655 = inst_26663;
                            var state_26706__$1 = function() {
                              var statearr_26717 = state_26706;
                              statearr_26717[12] = inst_26699;
                              statearr_26717[5] = inst_26655;
                              return statearr_26717;
                            }();
                            var statearr_26718_26752 = state_26706__$1;
                            statearr_26718_26752[2] = null;
                            statearr_26718_26752[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_26707 === 6) {
                              var inst_26704 = state_26706[2];
                              var state_26706__$1 = state_26706;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26706__$1, inst_26704);
                            } else {
                              if (state_val_26707 === 17) {
                                var inst_26685 = state_26706[13];
                                var state_26706__$1 = state_26706;
                                var statearr_26719_26753 = state_26706__$1;
                                statearr_26719_26753[2] = inst_26685;
                                statearr_26719_26753[1] = 19;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_26707 === 3) {
                                  var inst_26645 = state_26706[7];
                                  var state_26706__$1 = state_26706;
                                  var statearr_26720_26754 = state_26706__$1;
                                  statearr_26720_26754[2] = inst_26645;
                                  statearr_26720_26754[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_26707 === 12) {
                                    var inst_26671 = state_26706[14];
                                    var inst_26685 = state_26706[13];
                                    var inst_26666 = state_26706[15];
                                    var inst_26685__$1 = inst_26666.call(null, inst_26671);
                                    var state_26706__$1 = function() {
                                      var statearr_26721 = state_26706;
                                      statearr_26721[13] = inst_26685__$1;
                                      return statearr_26721;
                                    }();
                                    if (cljs.core.truth_(inst_26685__$1)) {
                                      var statearr_26722_26755 = state_26706__$1;
                                      statearr_26722_26755[1] = 17;
                                    } else {
                                      var statearr_26723_26756 = state_26706__$1;
                                      statearr_26723_26756[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_26707 === 2) {
                                      var inst_26645 = state_26706[7];
                                      var inst_26648 = cljs.core.apply.call(null, cljs.core.hash_map, inst_26645);
                                      var state_26706__$1 = state_26706;
                                      var statearr_26724_26757 = state_26706__$1;
                                      statearr_26724_26757[2] = inst_26648;
                                      statearr_26724_26757[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_26707 === 23) {
                                        var inst_26696 = state_26706[2];
                                        var state_26706__$1 = state_26706;
                                        var statearr_26725_26758 = state_26706__$1;
                                        statearr_26725_26758[2] = inst_26696;
                                        statearr_26725_26758[1] = 22;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_26707 === 19) {
                                          var inst_26693 = state_26706[2];
                                          var state_26706__$1 = state_26706;
                                          if (cljs.core.truth_(inst_26693)) {
                                            var statearr_26726_26759 = state_26706__$1;
                                            statearr_26726_26759[1] = 20;
                                          } else {
                                            var statearr_26727_26760 = state_26706__$1;
                                            statearr_26727_26760[1] = 21;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_26707 === 11) {
                                            var inst_26670 = state_26706[6];
                                            var inst_26676 = inst_26670 == null;
                                            var state_26706__$1 = state_26706;
                                            if (cljs.core.truth_(inst_26676)) {
                                              var statearr_26728_26761 = state_26706__$1;
                                              statearr_26728_26761[1] = 14;
                                            } else {
                                              var statearr_26729_26762 = state_26706__$1;
                                              statearr_26729_26762[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_26707 === 9) {
                                              var inst_26663 = state_26706[11];
                                              var inst_26663__$1 = state_26706[2];
                                              var inst_26664 = cljs.core.get.call(null, inst_26663__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                              var inst_26665 = cljs.core.get.call(null, inst_26663__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                              var inst_26666 = cljs.core.get.call(null, inst_26663__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                              var state_26706__$1 = function() {
                                                var statearr_26730 = state_26706;
                                                statearr_26730[16] = inst_26665;
                                                statearr_26730[11] = inst_26663__$1;
                                                statearr_26730[15] = inst_26666;
                                                return statearr_26730;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_26706__$1, 10, inst_26664);
                                            } else {
                                              if (state_val_26707 === 5) {
                                                var inst_26655 = state_26706[5];
                                                var inst_26658 = cljs.core.seq_QMARK_.call(null, inst_26655);
                                                var state_26706__$1 = state_26706;
                                                if (inst_26658) {
                                                  var statearr_26731_26763 = state_26706__$1;
                                                  statearr_26731_26763[1] = 7;
                                                } else {
                                                  var statearr_26732_26764 = state_26706__$1;
                                                  statearr_26732_26764[1] = 8;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_26707 === 14) {
                                                  var inst_26671 = state_26706[14];
                                                  var inst_26678 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_26671);
                                                  var state_26706__$1 = state_26706;
                                                  var statearr_26733_26765 = state_26706__$1;
                                                  statearr_26733_26765[2] = inst_26678;
                                                  statearr_26733_26765[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_26707 === 16) {
                                                    var inst_26681 = state_26706[2];
                                                    var inst_26682 = calc_state.call(null);
                                                    var inst_26655 = inst_26682;
                                                    var state_26706__$1 = function() {
                                                      var statearr_26734 = state_26706;
                                                      statearr_26734[17] = inst_26681;
                                                      statearr_26734[5] = inst_26655;
                                                      return statearr_26734;
                                                    }();
                                                    var statearr_26735_26766 = state_26706__$1;
                                                    statearr_26735_26766[2] = null;
                                                    statearr_26735_26766[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_26707 === 10) {
                                                      var inst_26671 = state_26706[14];
                                                      var inst_26670 = state_26706[6];
                                                      var inst_26669 = state_26706[2];
                                                      var inst_26670__$1 = cljs.core.nth.call(null, inst_26669, 0, null);
                                                      var inst_26671__$1 = cljs.core.nth.call(null, inst_26669, 1, null);
                                                      var inst_26672 = inst_26670__$1 == null;
                                                      var inst_26673 = cljs.core._EQ_.call(null, inst_26671__$1, change);
                                                      var inst_26674 = inst_26672 || inst_26673;
                                                      var state_26706__$1 = function() {
                                                        var statearr_26736 = state_26706;
                                                        statearr_26736[14] = inst_26671__$1;
                                                        statearr_26736[6] = inst_26670__$1;
                                                        return statearr_26736;
                                                      }();
                                                      if (cljs.core.truth_(inst_26674)) {
                                                        var statearr_26737_26767 = state_26706__$1;
                                                        statearr_26737_26767[1] = 11;
                                                      } else {
                                                        var statearr_26738_26768 = state_26706__$1;
                                                        statearr_26738_26768[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_26707 === 18) {
                                                        var inst_26665 = state_26706[16];
                                                        var inst_26671 = state_26706[14];
                                                        var inst_26666 = state_26706[15];
                                                        var inst_26688 = cljs.core.empty_QMARK_.call(null, inst_26666);
                                                        var inst_26689 = inst_26665.call(null, inst_26671);
                                                        var inst_26690 = cljs.core.not.call(null, inst_26689);
                                                        var inst_26691 = inst_26688 && inst_26690;
                                                        var state_26706__$1 = state_26706;
                                                        var statearr_26739_26769 = state_26706__$1;
                                                        statearr_26739_26769[2] = inst_26691;
                                                        statearr_26739_26769[1] = 19;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_26707 === 8) {
                                                          var inst_26655 = state_26706[5];
                                                          var state_26706__$1 = state_26706;
                                                          var statearr_26740_26770 = state_26706__$1;
                                                          statearr_26740_26770[2] = inst_26655;
                                                          statearr_26740_26770[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto___26744, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6576__auto__, c__6620__auto___26744, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_26742 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_26742[0] = state_machine__6577__auto__;
              statearr_26742[1] = 1;
              return statearr_26742;
            };
            var state_machine__6577__auto____1 = function(state_26706) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_26706);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_26706) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_26706);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto___26744, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6622__auto__ = function() {
        var statearr_26743 = f__6621__auto__.call(null);
        statearr_26743[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___26744;
        return statearr_26743;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto___26744, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj26772 = {};
  return obj26772;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3969__auto__ = p;
    if (and__3969__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4625__auto__ = p == null ? null : p;
    return function() {
      var or__3981__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3969__auto__ = p;
    if (and__3969__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4625__auto__ = p == null ? null : p;
    return function() {
      var or__3981__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3969__auto__ = p;
      if (and__3969__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4625__auto__ = p == null ? null : p;
      return function() {
        var or__3981__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3969__auto__ = p;
      if (and__3969__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4625__auto__ = p == null ? null : p;
      return function() {
        var or__3981__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3981__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3981__auto__, mults) {
            return function(p1__26773_SHARP_) {
              if (cljs.core.truth_(p1__26773_SHARP_.call(null, topic))) {
                return p1__26773_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__26773_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3981__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t26897 !== "undefined") {
      } else {
        cljs.core.async.t26897 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta26898) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta26898 = meta26898;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t26897.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t26897.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t26897.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t26897.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t26897.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t26897.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t26897.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t26897.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_26899) {
            var self__ = this;
            var _26899__$1 = this;
            return self__.meta26898;
          };
        }(mults, ensure_mult);
        cljs.core.async.t26897.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_26899, meta26898__$1) {
            var self__ = this;
            var _26899__$1 = this;
            return new cljs.core.async.t26897(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta26898__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t26897.cljs$lang$type = true;
        cljs.core.async.t26897.cljs$lang$ctorStr = "cljs.core.async/t26897";
        cljs.core.async.t26897.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
            return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t26897");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t26897 = function(mults, ensure_mult) {
          return function __GT_t26897(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta26898) {
            return new cljs.core.async.t26897(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta26898);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t26897(ensure_mult, mults, buf_fn, topic_fn, ch, pub, cljs.core.PersistentArrayMap.EMPTY);
    }();
    var c__6620__auto___27020 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___27020, mults, ensure_mult, p) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto___27020, mults, ensure_mult, p) {
            return function(state_26972) {
              var state_val_26973 = state_26972[1];
              if (state_val_26973 === 7) {
                var inst_26968 = state_26972[2];
                var state_26972__$1 = state_26972;
                var statearr_26974_27021 = state_26972__$1;
                statearr_26974_27021[2] = inst_26968;
                statearr_26974_27021[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_26973 === 20) {
                  var state_26972__$1 = state_26972;
                  var statearr_26975_27022 = state_26972__$1;
                  statearr_26975_27022[2] = null;
                  statearr_26975_27022[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_26973 === 1) {
                    var state_26972__$1 = state_26972;
                    var statearr_26976_27023 = state_26972__$1;
                    statearr_26976_27023[2] = null;
                    statearr_26976_27023[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_26973 === 24) {
                      try {
                        var inst_26952 = state_26972[5];
                        var inst_26902 = state_26972[6];
                        var inst_26958 = cljs.core.async.muxch_STAR_.call(null, inst_26952);
                        var state_26972__$1 = state_26972;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26972__$1, 25, inst_26958, inst_26902);
                      } catch (e26977) {
                        if (e26977 instanceof Object) {
                          var ex__6570__auto__ = e26977;
                          var statearr_26978_27024 = state_26972;
                          statearr_26978_27024[1] = 23;
                          statearr_26978_27024[2] = ex__6570__auto__;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e26977;
                        }
                      }
                    } else {
                      if (state_val_26973 === 4) {
                        var inst_26902 = state_26972[6];
                        var inst_26902__$1 = state_26972[2];
                        var inst_26903 = inst_26902__$1 == null;
                        var state_26972__$1 = function() {
                          var statearr_26979 = state_26972;
                          statearr_26979[6] = inst_26902__$1;
                          return statearr_26979;
                        }();
                        if (cljs.core.truth_(inst_26903)) {
                          var statearr_26980_27025 = state_26972__$1;
                          statearr_26980_27025[1] = 5;
                        } else {
                          var statearr_26981_27026 = state_26972__$1;
                          statearr_26981_27026[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_26973 === 15) {
                          var inst_26944 = state_26972[2];
                          var state_26972__$1 = state_26972;
                          var statearr_26982_27027 = state_26972__$1;
                          statearr_26982_27027[2] = inst_26944;
                          statearr_26982_27027[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_26973 === 21) {
                            var inst_26965 = state_26972[2];
                            var state_26972__$1 = function() {
                              var statearr_26983 = state_26972;
                              statearr_26983[7] = inst_26965;
                              return statearr_26983;
                            }();
                            var statearr_26984_27028 = state_26972__$1;
                            statearr_26984_27028[2] = null;
                            statearr_26984_27028[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_26973 === 13) {
                              var inst_26926 = state_26972[8];
                              var inst_26928 = cljs.core.chunked_seq_QMARK_.call(null, inst_26926);
                              var state_26972__$1 = state_26972;
                              if (inst_26928) {
                                var statearr_26985_27029 = state_26972__$1;
                                statearr_26985_27029[1] = 16;
                              } else {
                                var statearr_26986_27030 = state_26972__$1;
                                statearr_26986_27030[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_26973 === 22) {
                                var inst_26962 = state_26972[2];
                                var state_26972__$1 = state_26972;
                                var statearr_26987_27031 = state_26972__$1;
                                statearr_26987_27031[2] = inst_26962;
                                statearr_26987_27031[1] = 21;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_26973 === 6) {
                                  var inst_26952 = state_26972[5];
                                  var inst_26902 = state_26972[6];
                                  var inst_26950 = state_26972[9];
                                  var inst_26950__$1 = topic_fn.call(null, inst_26902);
                                  var inst_26951 = cljs.core.deref.call(null, mults);
                                  var inst_26952__$1 = cljs.core.get.call(null, inst_26951, inst_26950__$1);
                                  var state_26972__$1 = function() {
                                    var statearr_26988 = state_26972;
                                    statearr_26988[5] = inst_26952__$1;
                                    statearr_26988[9] = inst_26950__$1;
                                    return statearr_26988;
                                  }();
                                  if (cljs.core.truth_(inst_26952__$1)) {
                                    var statearr_26989_27032 = state_26972__$1;
                                    statearr_26989_27032[1] = 19;
                                  } else {
                                    var statearr_26990_27033 = state_26972__$1;
                                    statearr_26990_27033[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_26973 === 25) {
                                    try {
                                      var inst_26960 = state_26972[2];
                                      var state_26972__$1 = state_26972;
                                      var statearr_26993_27034 = state_26972__$1;
                                      statearr_26993_27034[2] = inst_26960;
                                      statearr_26993_27034[1] = 22;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } catch (e26991) {
                                      if (e26991 instanceof Object) {
                                        var ex__6570__auto__ = e26991;
                                        var statearr_26992_27035 = state_26972;
                                        statearr_26992_27035[1] = 23;
                                        statearr_26992_27035[2] = ex__6570__auto__;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        throw e26991;
                                      }
                                    }
                                  } else {
                                    if (state_val_26973 === 17) {
                                      var inst_26926 = state_26972[8];
                                      var inst_26935 = cljs.core.first.call(null, inst_26926);
                                      var inst_26936 = cljs.core.async.muxch_STAR_.call(null, inst_26935);
                                      var inst_26937 = cljs.core.async.close_BANG_.call(null, inst_26936);
                                      var inst_26938 = cljs.core.next.call(null, inst_26926);
                                      var inst_26912 = inst_26938;
                                      var inst_26913 = null;
                                      var inst_26914 = 0;
                                      var inst_26915 = 0;
                                      var state_26972__$1 = function() {
                                        var statearr_26994 = state_26972;
                                        statearr_26994[10] = inst_26937;
                                        statearr_26994[11] = inst_26914;
                                        statearr_26994[12] = inst_26912;
                                        statearr_26994[13] = inst_26913;
                                        statearr_26994[14] = inst_26915;
                                        return statearr_26994;
                                      }();
                                      var statearr_26995_27036 = state_26972__$1;
                                      statearr_26995_27036[2] = null;
                                      statearr_26995_27036[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_26973 === 3) {
                                        var inst_26970 = state_26972[2];
                                        var state_26972__$1 = state_26972;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26972__$1, inst_26970);
                                      } else {
                                        if (state_val_26973 === 12) {
                                          var inst_26946 = state_26972[2];
                                          var state_26972__$1 = state_26972;
                                          var statearr_26996_27037 = state_26972__$1;
                                          statearr_26996_27037[2] = inst_26946;
                                          statearr_26996_27037[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_26973 === 2) {
                                            var state_26972__$1 = state_26972;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26972__$1, 4, ch);
                                          } else {
                                            if (state_val_26973 === 23) {
                                              var inst_26950 = state_26972[9];
                                              var inst_26954 = state_26972[2];
                                              var inst_26955 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_26950);
                                              var state_26972__$1 = function() {
                                                var statearr_26997 = state_26972;
                                                statearr_26997[15] = inst_26954;
                                                return statearr_26997;
                                              }();
                                              var statearr_26998_27038 = state_26972__$1;
                                              statearr_26998_27038[2] = inst_26955;
                                              statearr_26998_27038[1] = 22;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_26973 === 19) {
                                                var state_26972__$1 = state_26972;
                                                var statearr_26999_27039 = state_26972__$1;
                                                statearr_26999_27039[2] = null;
                                                statearr_26999_27039[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_26973 === 11) {
                                                  var inst_26926 = state_26972[8];
                                                  var inst_26912 = state_26972[12];
                                                  var inst_26926__$1 = cljs.core.seq.call(null, inst_26912);
                                                  var state_26972__$1 = function() {
                                                    var statearr_27000 = state_26972;
                                                    statearr_27000[8] = inst_26926__$1;
                                                    return statearr_27000;
                                                  }();
                                                  if (inst_26926__$1) {
                                                    var statearr_27001_27040 = state_26972__$1;
                                                    statearr_27001_27040[1] = 13;
                                                  } else {
                                                    var statearr_27002_27041 = state_26972__$1;
                                                    statearr_27002_27041[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_26973 === 9) {
                                                    var inst_26948 = state_26972[2];
                                                    var state_26972__$1 = state_26972;
                                                    var statearr_27003_27042 = state_26972__$1;
                                                    statearr_27003_27042[2] = inst_26948;
                                                    statearr_27003_27042[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_26973 === 5) {
                                                      var inst_26909 = cljs.core.deref.call(null, mults);
                                                      var inst_26910 = cljs.core.vals.call(null, inst_26909);
                                                      var inst_26911 = cljs.core.seq.call(null, inst_26910);
                                                      var inst_26912 = inst_26911;
                                                      var inst_26913 = null;
                                                      var inst_26914 = 0;
                                                      var inst_26915 = 0;
                                                      var state_26972__$1 = function() {
                                                        var statearr_27004 = state_26972;
                                                        statearr_27004[11] = inst_26914;
                                                        statearr_27004[12] = inst_26912;
                                                        statearr_27004[13] = inst_26913;
                                                        statearr_27004[14] = inst_26915;
                                                        return statearr_27004;
                                                      }();
                                                      var statearr_27005_27043 = state_26972__$1;
                                                      statearr_27005_27043[2] = null;
                                                      statearr_27005_27043[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_26973 === 14) {
                                                        var state_26972__$1 = state_26972;
                                                        var statearr_27009_27044 = state_26972__$1;
                                                        statearr_27009_27044[2] = null;
                                                        statearr_27009_27044[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_26973 === 16) {
                                                          var inst_26926 = state_26972[8];
                                                          var inst_26930 = cljs.core.chunk_first.call(null, inst_26926);
                                                          var inst_26931 = cljs.core.chunk_rest.call(null, inst_26926);
                                                          var inst_26932 = cljs.core.count.call(null, inst_26930);
                                                          var inst_26912 = inst_26931;
                                                          var inst_26913 = inst_26930;
                                                          var inst_26914 = inst_26932;
                                                          var inst_26915 = 0;
                                                          var state_26972__$1 = function() {
                                                            var statearr_27010 = state_26972;
                                                            statearr_27010[11] = inst_26914;
                                                            statearr_27010[12] = inst_26912;
                                                            statearr_27010[13] = inst_26913;
                                                            statearr_27010[14] = inst_26915;
                                                            return statearr_27010;
                                                          }();
                                                          var statearr_27011_27045 = state_26972__$1;
                                                          statearr_27011_27045[2] = null;
                                                          statearr_27011_27045[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_26973 === 10) {
                                                            var inst_26914 = state_26972[11];
                                                            var inst_26912 = state_26972[12];
                                                            var inst_26913 = state_26972[13];
                                                            var inst_26915 = state_26972[14];
                                                            var inst_26920 = cljs.core._nth.call(null, inst_26913, inst_26915);
                                                            var inst_26921 = cljs.core.async.muxch_STAR_.call(null, inst_26920);
                                                            var inst_26922 = cljs.core.async.close_BANG_.call(null, inst_26921);
                                                            var inst_26923 = inst_26915 + 1;
                                                            var tmp27006 = inst_26914;
                                                            var tmp27007 = inst_26912;
                                                            var tmp27008 = inst_26913;
                                                            var inst_26912__$1 = tmp27007;
                                                            var inst_26913__$1 = tmp27008;
                                                            var inst_26914__$1 = tmp27006;
                                                            var inst_26915__$1 = inst_26923;
                                                            var state_26972__$1 = function() {
                                                              var statearr_27012 = state_26972;
                                                              statearr_27012[11] = inst_26914__$1;
                                                              statearr_27012[12] = inst_26912__$1;
                                                              statearr_27012[13] = inst_26913__$1;
                                                              statearr_27012[16] = inst_26922;
                                                              statearr_27012[14] = inst_26915__$1;
                                                              return statearr_27012;
                                                            }();
                                                            var statearr_27013_27046 = state_26972__$1;
                                                            statearr_27013_27046[2] = null;
                                                            statearr_27013_27046[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_26973 === 18) {
                                                              var inst_26941 = state_26972[2];
                                                              var state_26972__$1 = state_26972;
                                                              var statearr_27014_27047 = state_26972__$1;
                                                              statearr_27014_27047[2] = inst_26941;
                                                              statearr_27014_27047[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_26973 === 8) {
                                                                var inst_26914 = state_26972[11];
                                                                var inst_26915 = state_26972[14];
                                                                var inst_26917 = inst_26915 < inst_26914;
                                                                var inst_26918 = inst_26917;
                                                                var state_26972__$1 = state_26972;
                                                                if (cljs.core.truth_(inst_26918)) {
                                                                  var statearr_27015_27048 = state_26972__$1;
                                                                  statearr_27015_27048[1] = 10;
                                                                } else {
                                                                  var statearr_27016_27049 = state_26972__$1;
                                                                  statearr_27016_27049[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto___27020, mults, ensure_mult, p);
          return function(switch__6576__auto__, c__6620__auto___27020, mults, ensure_mult, p) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_27018 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_27018[0] = state_machine__6577__auto__;
                statearr_27018[1] = 1;
                return statearr_27018;
              };
              var state_machine__6577__auto____1 = function(state_26972) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_26972);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_26972) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_26972);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto___27020, mults, ensure_mult, p);
        }();
        var state__6622__auto__ = function() {
          var statearr_27019 = f__6621__auto__.call(null);
          statearr_27019[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___27020;
          return statearr_27019;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto___27020, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6620__auto___27180 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___27180, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto___27180, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_27152) {
              var state_val_27153 = state_27152[1];
              if (state_val_27153 === 7) {
                var state_27152__$1 = state_27152;
                var statearr_27154_27181 = state_27152__$1;
                statearr_27154_27181[2] = null;
                statearr_27154_27181[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27153 === 1) {
                  var state_27152__$1 = state_27152;
                  var statearr_27155_27182 = state_27152__$1;
                  statearr_27155_27182[2] = null;
                  statearr_27155_27182[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27153 === 4) {
                    var inst_27117 = state_27152[5];
                    var inst_27119 = inst_27117 < cnt;
                    var state_27152__$1 = state_27152;
                    if (cljs.core.truth_(inst_27119)) {
                      var statearr_27156_27183 = state_27152__$1;
                      statearr_27156_27183[1] = 6;
                    } else {
                      var statearr_27157_27184 = state_27152__$1;
                      statearr_27157_27184[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27153 === 15) {
                      var inst_27148 = state_27152[2];
                      var state_27152__$1 = state_27152;
                      var statearr_27158_27185 = state_27152__$1;
                      statearr_27158_27185[2] = inst_27148;
                      statearr_27158_27185[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27153 === 13) {
                        var inst_27141 = cljs.core.async.close_BANG_.call(null, out);
                        var state_27152__$1 = state_27152;
                        var statearr_27159_27186 = state_27152__$1;
                        statearr_27159_27186[2] = inst_27141;
                        statearr_27159_27186[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_27153 === 6) {
                          var state_27152__$1 = state_27152;
                          var statearr_27160_27187 = state_27152__$1;
                          statearr_27160_27187[2] = null;
                          statearr_27160_27187[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_27153 === 3) {
                            var inst_27150 = state_27152[2];
                            var state_27152__$1 = state_27152;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27152__$1, inst_27150);
                          } else {
                            if (state_val_27153 === 12) {
                              var inst_27138 = state_27152[6];
                              var inst_27138__$1 = state_27152[2];
                              var inst_27139 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_27138__$1);
                              var state_27152__$1 = function() {
                                var statearr_27161 = state_27152;
                                statearr_27161[6] = inst_27138__$1;
                                return statearr_27161;
                              }();
                              if (cljs.core.truth_(inst_27139)) {
                                var statearr_27162_27188 = state_27152__$1;
                                statearr_27162_27188[1] = 13;
                              } else {
                                var statearr_27163_27189 = state_27152__$1;
                                statearr_27163_27189[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_27153 === 2) {
                                var inst_27116 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_27117 = 0;
                                var state_27152__$1 = function() {
                                  var statearr_27164 = state_27152;
                                  statearr_27164[7] = inst_27116;
                                  statearr_27164[5] = inst_27117;
                                  return statearr_27164;
                                }();
                                var statearr_27165_27190 = state_27152__$1;
                                statearr_27165_27190[2] = null;
                                statearr_27165_27190[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27153 === 11) {
                                  try {
                                    var inst_27117 = state_27152[5];
                                    var inst_27125 = chs__$1.call(null, inst_27117);
                                    var inst_27126 = done.call(null, inst_27117);
                                    var inst_27127 = cljs.core.async.take_BANG_.call(null, inst_27125, inst_27126);
                                    var state_27152__$1 = state_27152;
                                    var statearr_27168_27191 = state_27152__$1;
                                    statearr_27168_27191[2] = inst_27127;
                                    statearr_27168_27191[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e27166) {
                                    if (e27166 instanceof Object) {
                                      var ex__6570__auto__ = e27166;
                                      var statearr_27167_27192 = state_27152;
                                      statearr_27167_27192[1] = 10;
                                      statearr_27167_27192[2] = ex__6570__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e27166;
                                    }
                                  }
                                } else {
                                  if (state_val_27153 === 9) {
                                    var inst_27117 = state_27152[5];
                                    var inst_27129 = state_27152[2];
                                    var inst_27130 = inst_27117 + 1;
                                    var inst_27117__$1 = inst_27130;
                                    var state_27152__$1 = function() {
                                      var statearr_27169 = state_27152;
                                      statearr_27169[8] = inst_27129;
                                      statearr_27169[5] = inst_27117__$1;
                                      return statearr_27169;
                                    }();
                                    var statearr_27170_27193 = state_27152__$1;
                                    statearr_27170_27193[2] = null;
                                    statearr_27170_27193[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_27153 === 5) {
                                      var inst_27136 = state_27152[2];
                                      var state_27152__$1 = function() {
                                        var statearr_27171 = state_27152;
                                        statearr_27171[9] = inst_27136;
                                        return statearr_27171;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27152__$1, 12, dchan);
                                    } else {
                                      if (state_val_27153 === 14) {
                                        var inst_27138 = state_27152[6];
                                        var inst_27143 = cljs.core.apply.call(null, f, inst_27138);
                                        var state_27152__$1 = state_27152;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27152__$1, 16, out, inst_27143);
                                      } else {
                                        if (state_val_27153 === 16) {
                                          var inst_27145 = state_27152[2];
                                          var state_27152__$1 = function() {
                                            var statearr_27172 = state_27152;
                                            statearr_27172[10] = inst_27145;
                                            return statearr_27172;
                                          }();
                                          var statearr_27173_27194 = state_27152__$1;
                                          statearr_27173_27194[2] = null;
                                          statearr_27173_27194[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_27153 === 10) {
                                            var inst_27121 = state_27152[2];
                                            var inst_27122 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_27152__$1 = function() {
                                              var statearr_27174 = state_27152;
                                              statearr_27174[11] = inst_27121;
                                              return statearr_27174;
                                            }();
                                            var statearr_27175_27195 = state_27152__$1;
                                            statearr_27175_27195[2] = inst_27122;
                                            statearr_27175_27195[1] = 9;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_27153 === 8) {
                                              var inst_27134 = state_27152[2];
                                              var state_27152__$1 = state_27152;
                                              var statearr_27176_27196 = state_27152__$1;
                                              statearr_27176_27196[2] = inst_27134;
                                              statearr_27176_27196[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto___27180, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__6576__auto__, c__6620__auto___27180, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_27178 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_27178[0] = state_machine__6577__auto__;
                statearr_27178[1] = 1;
                return statearr_27178;
              };
              var state_machine__6577__auto____1 = function(state_27152) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_27152);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_27152) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_27152);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto___27180, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__6622__auto__ = function() {
          var statearr_27179 = f__6621__auto__.call(null);
          statearr_27179[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___27180;
          return statearr_27179;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto___27180, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6620__auto___27296 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___27296, out) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto___27296, out) {
            return function(state_27276) {
              var state_val_27277 = state_27276[1];
              if (state_val_27277 === 7) {
                var inst_27255 = state_27276[5];
                var inst_27256 = state_27276[6];
                var inst_27255__$1 = state_27276[2];
                var inst_27256__$1 = cljs.core.nth.call(null, inst_27255__$1, 0, null);
                var inst_27257 = cljs.core.nth.call(null, inst_27255__$1, 1, null);
                var inst_27258 = inst_27256__$1 == null;
                var state_27276__$1 = function() {
                  var statearr_27278 = state_27276;
                  statearr_27278[5] = inst_27255__$1;
                  statearr_27278[7] = inst_27257;
                  statearr_27278[6] = inst_27256__$1;
                  return statearr_27278;
                }();
                if (cljs.core.truth_(inst_27258)) {
                  var statearr_27279_27297 = state_27276__$1;
                  statearr_27279_27297[1] = 8;
                } else {
                  var statearr_27280_27298 = state_27276__$1;
                  statearr_27280_27298[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27277 === 1) {
                  var inst_27247 = cljs.core.vec.call(null, chs);
                  var inst_27248 = inst_27247;
                  var state_27276__$1 = function() {
                    var statearr_27281 = state_27276;
                    statearr_27281[8] = inst_27248;
                    return statearr_27281;
                  }();
                  var statearr_27282_27299 = state_27276__$1;
                  statearr_27282_27299[2] = null;
                  statearr_27282_27299[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27277 === 4) {
                    var inst_27248 = state_27276[8];
                    var state_27276__$1 = state_27276;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_27276__$1, 7, inst_27248);
                  } else {
                    if (state_val_27277 === 6) {
                      var inst_27272 = state_27276[2];
                      var state_27276__$1 = state_27276;
                      var statearr_27283_27300 = state_27276__$1;
                      statearr_27283_27300[2] = inst_27272;
                      statearr_27283_27300[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27277 === 3) {
                        var inst_27274 = state_27276[2];
                        var state_27276__$1 = state_27276;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27276__$1, inst_27274);
                      } else {
                        if (state_val_27277 === 2) {
                          var inst_27248 = state_27276[8];
                          var inst_27250 = cljs.core.count.call(null, inst_27248);
                          var inst_27251 = inst_27250 > 0;
                          var state_27276__$1 = state_27276;
                          if (cljs.core.truth_(inst_27251)) {
                            var statearr_27285_27301 = state_27276__$1;
                            statearr_27285_27301[1] = 4;
                          } else {
                            var statearr_27286_27302 = state_27276__$1;
                            statearr_27286_27302[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_27277 === 11) {
                            var inst_27248 = state_27276[8];
                            var inst_27265 = state_27276[2];
                            var tmp27284 = inst_27248;
                            var inst_27248__$1 = tmp27284;
                            var state_27276__$1 = function() {
                              var statearr_27287 = state_27276;
                              statearr_27287[9] = inst_27265;
                              statearr_27287[8] = inst_27248__$1;
                              return statearr_27287;
                            }();
                            var statearr_27288_27303 = state_27276__$1;
                            statearr_27288_27303[2] = null;
                            statearr_27288_27303[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27277 === 9) {
                              var inst_27256 = state_27276[6];
                              var state_27276__$1 = state_27276;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27276__$1, 11, out, inst_27256);
                            } else {
                              if (state_val_27277 === 5) {
                                var inst_27270 = cljs.core.async.close_BANG_.call(null, out);
                                var state_27276__$1 = state_27276;
                                var statearr_27289_27304 = state_27276__$1;
                                statearr_27289_27304[2] = inst_27270;
                                statearr_27289_27304[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27277 === 10) {
                                  var inst_27268 = state_27276[2];
                                  var state_27276__$1 = state_27276;
                                  var statearr_27290_27305 = state_27276__$1;
                                  statearr_27290_27305[2] = inst_27268;
                                  statearr_27290_27305[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27277 === 8) {
                                    var inst_27255 = state_27276[5];
                                    var inst_27257 = state_27276[7];
                                    var inst_27256 = state_27276[6];
                                    var inst_27248 = state_27276[8];
                                    var inst_27260 = function() {
                                      var c = inst_27257;
                                      var v = inst_27256;
                                      var vec__27253 = inst_27255;
                                      var cs = inst_27248;
                                      return function(c, v, vec__27253, cs, inst_27255, inst_27257, inst_27256, inst_27248, state_val_27277, c__6620__auto___27296, out) {
                                        return function(p1__27197_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__27197_SHARP_);
                                        };
                                      }(c, v, vec__27253, cs, inst_27255, inst_27257, inst_27256, inst_27248, state_val_27277, c__6620__auto___27296, out);
                                    }();
                                    var inst_27261 = cljs.core.filterv.call(null, inst_27260, inst_27248);
                                    var inst_27248__$1 = inst_27261;
                                    var state_27276__$1 = function() {
                                      var statearr_27291 = state_27276;
                                      statearr_27291[8] = inst_27248__$1;
                                      return statearr_27291;
                                    }();
                                    var statearr_27292_27306 = state_27276__$1;
                                    statearr_27292_27306[2] = null;
                                    statearr_27292_27306[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto___27296, out);
          return function(switch__6576__auto__, c__6620__auto___27296, out) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_27294 = [null, null, null, null, null, null, null, null, null, null];
                statearr_27294[0] = state_machine__6577__auto__;
                statearr_27294[1] = 1;
                return statearr_27294;
              };
              var state_machine__6577__auto____1 = function(state_27276) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_27276);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_27276) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_27276);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto___27296, out);
        }();
        var state__6622__auto__ = function() {
          var statearr_27295 = f__6621__auto__.call(null);
          statearr_27295[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___27296;
          return statearr_27295;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto___27296, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("logger");
goog.require("cljs.core");
goog.require("cljs.core.async");
cljs.core.enable_console_print_BANG_.call(null);
logger.tagsOn = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "all", "all", 892129742), new cljs.core.Keyword(null, "inv", "inv", 1526077438), new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), new cljs.core.Keyword(null, 
"makeBlock", "makeBlock", -1854081426), new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), new cljs.core.Keyword(null, "dbput", "dbput", 890434907), new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312)], null);
logger.tagsO1 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "invoke", "invoke", 1145927159)], null);
logger.tagsOFF = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "receive", "receive", 1830053389)], null);
logger.tags = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630)], null);
logger.og = function og(type, format, data) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_123564) {
            var state_val_123565 = state_123564[1];
            if (state_val_123565 === 7) {
              var inst_123555 = state_123564[2];
              var state_123564__$1 = state_123564;
              if (cljs.core.truth_(inst_123555)) {
                var statearr_123566_123584 = state_123564__$1;
                statearr_123566_123584[1] = 8;
              } else {
                var statearr_123567_123585 = state_123564__$1;
                statearr_123567_123585[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_123565 === 1) {
                var inst_123539 = state_123564[5];
                var inst_123537 = [type];
                var inst_123538 = cljs.core.PersistentHashSet.fromArray(inst_123537, true);
                var inst_123539__$1 = cljs.core.some.call(null, inst_123538, logger.tagsOn);
                var state_123564__$1 = function() {
                  var statearr_123568 = state_123564;
                  statearr_123568[5] = inst_123539__$1;
                  return statearr_123568;
                }();
                if (cljs.core.truth_(inst_123539__$1)) {
                  var statearr_123569_123586 = state_123564__$1;
                  statearr_123569_123586[1] = 2;
                } else {
                  var statearr_123570_123587 = state_123564__$1;
                  statearr_123570_123587[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_123565 === 4) {
                  var inst_123547 = state_123564[6];
                  var inst_123547__$1 = state_123564[2];
                  var state_123564__$1 = function() {
                    var statearr_123571 = state_123564;
                    statearr_123571[6] = inst_123547__$1;
                    return statearr_123571;
                  }();
                  if (cljs.core.truth_(inst_123547__$1)) {
                    var statearr_123572_123588 = state_123564__$1;
                    statearr_123572_123588[1] = 5;
                  } else {
                    var statearr_123573_123589 = state_123564__$1;
                    statearr_123573_123589[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_123565 === 6) {
                    var inst_123547 = state_123564[6];
                    var state_123564__$1 = state_123564;
                    var statearr_123574_123590 = state_123564__$1;
                    statearr_123574_123590[2] = inst_123547;
                    statearr_123574_123590[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_123565 === 3) {
                      var inst_123542 = [new cljs.core.Keyword(null, "all", "all", 892129742), null];
                      var inst_123543 = new cljs.core.PersistentArrayMap(null, 1, inst_123542, null);
                      var inst_123544 = new cljs.core.PersistentHashSet(null, inst_123543, null);
                      var inst_123545 = cljs.core.some.call(null, inst_123544, logger.tagsOn);
                      var state_123564__$1 = state_123564;
                      var statearr_123575_123591 = state_123564__$1;
                      statearr_123575_123591[2] = inst_123545;
                      statearr_123575_123591[1] = 4;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_123565 === 2) {
                        var inst_123539 = state_123564[5];
                        var state_123564__$1 = state_123564;
                        var statearr_123576_123592 = state_123564__$1;
                        statearr_123576_123592[2] = inst_123539;
                        statearr_123576_123592[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_123565 === 9) {
                          var state_123564__$1 = state_123564;
                          var statearr_123577_123593 = state_123564__$1;
                          statearr_123577_123593[2] = null;
                          statearr_123577_123593[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_123565 === 5) {
                            var inst_123549 = [type];
                            var inst_123550 = cljs.core.PersistentHashSet.fromArray(inst_123549, true);
                            var inst_123551 = cljs.core.some.call(null, inst_123550, logger.tagsOFF);
                            var inst_123552 = cljs.core.not.call(null, inst_123551);
                            var state_123564__$1 = state_123564;
                            var statearr_123578_123594 = state_123564__$1;
                            statearr_123578_123594[2] = inst_123552;
                            statearr_123578_123594[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_123565 === 10) {
                              var inst_123562 = state_123564[2];
                              var state_123564__$1 = function() {
                                var statearr_123579 = state_123564;
                                statearr_123579[7] = inst_123562;
                                return statearr_123579;
                              }();
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_123564__$1, data);
                            } else {
                              if (state_val_123565 === 8) {
                                var inst_123557 = type + " ";
                                var inst_123558 = inst_123557 + format;
                                var inst_123559 = console.log(inst_123558, data);
                                var state_123564__$1 = state_123564;
                                var statearr_123580_123595 = state_123564__$1;
                                statearr_123580_123595[2] = inst_123559;
                                statearr_123580_123595[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_123582 = [null, null, null, null, null, null, null, null];
              statearr_123582[0] = state_machine__6577__auto__;
              statearr_123582[1] = 1;
              return statearr_123582;
            };
            var state_machine__6577__auto____1 = function(state_123564) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_123564);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_123564) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_123564);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_123583 = f__6621__auto__.call(null);
        statearr_123583[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_123583;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("pubsub");
goog.require("cljs.core");
goog.require("logger");
goog.require("cljs.core.async");
pubsub.proxychan = cljs.core.async.chan.call(null);
pubsub.proxychan2 = cljs.core.async.chan.call(null, 1);
pubsub.sendReceiveCh = cljs.core.async.chan.call(null, 1E3);
pubsub.statesCh = cljs.core.async.chan.call(null, 1E3);
pubsub.states = function() {
  var obj92042 = {};
  return obj92042;
}();
pubsub.receiveCH = cljs.core.async.chan.call(null, 1E3);
pubsub.get = function get() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_92066) {
            var state_val_92067 = state_92066[1];
            if (state_val_92067 === 3) {
              var inst_92063 = state_92066[2];
              var inst_92064 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
              var state_92066__$1 = function() {
                var statearr_92068 = state_92066;
                statearr_92068[5] = inst_92063;
                statearr_92068[6] = inst_92064;
                return statearr_92068;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92066__$1, pubsub.a);
            } else {
              if (state_val_92067 === 2) {
                var inst_92059 = state_92066[2];
                var inst_92060 = pubsub.a = inst_92059;
                var inst_92061 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
                var state_92066__$1 = function() {
                  var statearr_92069 = state_92066;
                  statearr_92069[7] = inst_92061;
                  statearr_92069[8] = inst_92060;
                  return statearr_92069;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92066__$1, 3, pubsub.proxychan2, pubsub.a);
              } else {
                if (state_val_92067 === 1) {
                  var state_92066__$1 = state_92066;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92066__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_92071 = [null, null, null, null, null, null, null, null, null];
              statearr_92071[0] = state_machine__6577__auto__;
              statearr_92071[1] = 1;
              return statearr_92071;
            };
            var state_machine__6577__auto____1 = function(state_92066) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_92066);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_92066) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_92066);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_92072 = f__6621__auto__.call(null);
        statearr_92072[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_92072;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.init = function init(what) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_92087) {
            var state_val_92088 = state_92087[1];
            if (state_val_92088 === 2) {
              var inst_92085 = state_92087[2];
              var state_92087__$1 = state_92087;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92087__$1, inst_92085);
            } else {
              if (state_val_92088 === 1) {
                var inst_92083 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "peerjs", what);
                var state_92087__$1 = function() {
                  var statearr_92089 = state_92087;
                  statearr_92089[5] = inst_92083;
                  return statearr_92089;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92087__$1, 2, pubsub.proxychan2, what);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_92091 = [null, null, null, null, null, null];
              statearr_92091[0] = state_machine__6577__auto__;
              statearr_92091[1] = 1;
              return statearr_92091;
            };
            var state_machine__6577__auto____1 = function(state_92087) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_92087);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_92087) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_92087);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_92092 = f__6621__auto__.call(null);
        statearr_92092[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_92092;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.set = function set(what) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_92109) {
            var state_val_92110 = state_92109[1];
            if (state_val_92110 === 3) {
              var inst_92107 = state_92109[2];
              var state_92109__$1 = state_92109;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92109__$1, inst_92107);
            } else {
              if (state_val_92110 === 2) {
                var inst_92105 = state_92109[2];
                var state_92109__$1 = function() {
                  var statearr_92111 = state_92109;
                  statearr_92111[5] = inst_92105;
                  return statearr_92111;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92109__$1, 3, pubsub.proxychan2, what);
              } else {
                if (state_val_92110 === 1) {
                  var state_92109__$1 = state_92109;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92109__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_92113 = [null, null, null, null, null, null];
              statearr_92113[0] = state_machine__6577__auto__;
              statearr_92113[1] = 1;
              return statearr_92113;
            };
            var state_machine__6577__auto____1 = function(state_92109) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_92109);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_92109) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_92109);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_92114 = f__6621__auto__.call(null);
        statearr_92114[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_92114;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.subs = function() {
  var obj92116 = {};
  return obj92116;
}();
pubsub.sub = function sub(typ, fun) {
  if (cljs.core.truth_(pubsub.subs[typ])) {
    return pubsub.subs[typ] = cljs.core.conj.call(null, pubsub.subs[typ], fun);
  } else {
    return pubsub.subs[typ] = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fun], null);
  }
};
pubsub.trig = function trig(typ, msg) {
  return $("body").trigger(typ, msg);
};
pubsub.pub = function pub(typ, msg) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_92159) {
            var state_val_92160 = state_92159[1];
            if (state_val_92160 === 5) {
              var inst_92155 = state_92159[2];
              var state_92159__$1 = state_92159;
              var statearr_92161_92169 = state_92159__$1;
              statearr_92161_92169[2] = inst_92155;
              statearr_92161_92169[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_92160 === 4) {
                var inst_92157 = state_92159[2];
                var state_92159__$1 = state_92159;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92159__$1, inst_92157);
              } else {
                if (state_val_92160 === 3) {
                  var inst_92153 = {"typ":typ, "msg":msg};
                  var state_92159__$1 = state_92159;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92159__$1, 5, pubsub.proxychan, inst_92153);
                } else {
                  if (state_val_92160 === 2) {
                    var inst_92149 = pubsub.trig.call(null, typ, msg);
                    var state_92159__$1 = state_92159;
                    var statearr_92162_92170 = state_92159__$1;
                    statearr_92162_92170[2] = inst_92149;
                    statearr_92162_92170[1] = 4;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_92160 === 1) {
                      var inst_92143 = typ + " ";
                      var inst_92144 = inst_92143 + msg;
                      var inst_92145 = logger.og.call(null, new cljs.core.Keyword(null, "pub", "pub", -1189143908), "pubing ", inst_92144);
                      var inst_92146 = window["messages"];
                      var inst_92147 = inst_92146[typ];
                      var state_92159__$1 = function() {
                        var statearr_92163 = state_92159;
                        statearr_92163[5] = inst_92145;
                        return statearr_92163;
                      }();
                      if (cljs.core.truth_(inst_92147)) {
                        var statearr_92164_92171 = state_92159__$1;
                        statearr_92164_92171[1] = 2;
                      } else {
                        var statearr_92165_92172 = state_92159__$1;
                        statearr_92165_92172[1] = 3;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_92167 = [null, null, null, null, null, null];
              statearr_92167[0] = state_machine__6577__auto__;
              statearr_92167[1] = 1;
              return statearr_92167;
            };
            var state_machine__6577__auto____1 = function(state_92159) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_92159);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_92159) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_92159);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_92168 = f__6621__auto__.call(null);
        statearr_92168[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_92168;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.initpubsub = function initpubsub() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_92264) {
            var state_val_92265 = state_92264[1];
            if (state_val_92265 === 9) {
              var inst_92257 = state_92264[2];
              var state_92264__$1 = state_92264;
              var statearr_92266_92283 = state_92264__$1;
              statearr_92266_92283[2] = inst_92257;
              statearr_92266_92283[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_92265 === 8) {
                var state_92264__$1 = state_92264;
                var statearr_92267_92284 = state_92264__$1;
                statearr_92267_92284[2] = null;
                statearr_92267_92284[1] = 9;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_92265 === 7) {
                  var inst_92242 = pubsub.remainingsubs;
                  var state_92264__$1 = function() {
                    var statearr_92268 = state_92264;
                    statearr_92268[5] = inst_92242;
                    return statearr_92268;
                  }();
                  var statearr_92269_92285 = state_92264__$1;
                  statearr_92269_92285[2] = null;
                  statearr_92269_92285[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_92265 === 6) {
                    var inst_92259 = state_92264[2];
                    var state_92264__$1 = function() {
                      var statearr_92270 = state_92264;
                      statearr_92270[6] = inst_92259;
                      return statearr_92270;
                    }();
                    var statearr_92271_92286 = state_92264__$1;
                    statearr_92271_92286[2] = null;
                    statearr_92271_92286[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_92265 === 5) {
                      var inst_92242 = state_92264[5];
                      var inst_92244 = cljs.core.first.call(null, inst_92242);
                      var inst_92245 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "trying to invoke", inst_92244);
                      var inst_92246 = cljs.core.first.call(null, inst_92242);
                      var inst_92247 = pubsub.m["msg"];
                      var inst_92248 = inst_92246.call(null, inst_92247);
                      var inst_92249 = cljs.core.rest.call(null, inst_92242);
                      var inst_92250 = pubsub.remainingsubs = inst_92249;
                      var inst_92251 = cljs.core.count.call(null, pubsub.remainingsubs);
                      var inst_92252 = inst_92251 > 0;
                      var state_92264__$1 = function() {
                        var statearr_92272 = state_92264;
                        statearr_92272[7] = inst_92250;
                        statearr_92272[8] = inst_92245;
                        statearr_92272[9] = inst_92248;
                        return statearr_92272;
                      }();
                      if (cljs.core.truth_(inst_92252)) {
                        var statearr_92273_92287 = state_92264__$1;
                        statearr_92273_92287[1] = 7;
                      } else {
                        var statearr_92274_92288 = state_92264__$1;
                        statearr_92274_92288[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_92265 === 4) {
                        var inst_92237 = state_92264[2];
                        var inst_92238 = pubsub.m = inst_92237;
                        var inst_92239 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "about to deliver subbed %s", pubsub.m);
                        var inst_92240 = pubsub.m["typ"];
                        var inst_92241 = pubsub.subs[inst_92240];
                        var inst_92242 = inst_92241;
                        var state_92264__$1 = function() {
                          var statearr_92275 = state_92264;
                          statearr_92275[10] = inst_92239;
                          statearr_92275[5] = inst_92242;
                          statearr_92275[11] = inst_92238;
                          return statearr_92275;
                        }();
                        var statearr_92276_92289 = state_92264__$1;
                        statearr_92276_92289[2] = null;
                        statearr_92276_92289[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_92265 === 3) {
                          var inst_92262 = state_92264[2];
                          var state_92264__$1 = state_92264;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92264__$1, inst_92262);
                        } else {
                          if (state_val_92265 === 2) {
                            var inst_92235 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "started loop");
                            var state_92264__$1 = function() {
                              var statearr_92277 = state_92264;
                              statearr_92277[12] = inst_92235;
                              return statearr_92277;
                            }();
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92264__$1, 4, pubsub.proxychan);
                          } else {
                            if (state_val_92265 === 1) {
                              var inst_92228 = $(document);
                              var inst_92229 = function() {
                                return function(inst_92228, state_val_92265, c__6620__auto__) {
                                  return function(ev, m) {
                                    return pubsub._GT__BANG_.call(null, pubsub.proxychan, m);
                                  };
                                }(inst_92228, state_val_92265, c__6620__auto__);
                              }();
                              var inst_92230 = inst_92228.on("pubsub", inst_92229);
                              var inst_92231 = $(document);
                              var inst_92232 = function() {
                                return function(inst_92228, inst_92229, inst_92230, inst_92231, state_val_92265, c__6620__auto__) {
                                  return function(ev, m) {
                                    return pubsub.c.call(null, "typ"[m], "msg"[m]);
                                  };
                                }(inst_92228, inst_92229, inst_92230, inst_92231, state_val_92265, c__6620__auto__);
                              }();
                              var inst_92233 = inst_92231.on("call", inst_92232);
                              var state_92264__$1 = function() {
                                var statearr_92278 = state_92264;
                                statearr_92278[13] = inst_92230;
                                statearr_92278[14] = inst_92233;
                                return statearr_92278;
                              }();
                              var statearr_92279_92290 = state_92264__$1;
                              statearr_92279_92290[2] = null;
                              statearr_92279_92290[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_92281 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_92281[0] = state_machine__6577__auto__;
              statearr_92281[1] = 1;
              return statearr_92281;
            };
            var state_machine__6577__auto____1 = function(state_92264) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_92264);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_92264) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_92264);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_92282 = f__6621__auto__.call(null);
        statearr_92282[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_92282;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.makeMsg = function makeMsg(typ, m, pchannel) {
  var obj92294 = {"typ":typ, "msg":m};
  return obj92294;
};
pubsub.r = function r(typ) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_92377) {
            var state_val_92378 = state_92377[1];
            if (state_val_92378 === 7) {
              var inst_92365 = pubsub.mtemp["typ"];
              var inst_92366 = inst_92365 === 0;
              var state_92377__$1 = state_92377;
              if (cljs.core.truth_(inst_92366)) {
                var statearr_92379_92397 = state_92377__$1;
                statearr_92379_92397[1] = 10;
              } else {
                var statearr_92380_92398 = state_92377__$1;
                statearr_92380_92398[1] = 11;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_92378 === 1) {
                var inst_92346 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve %s", typ);
                var inst_92349 = {"typ":0};
                var state_92377__$1 = function() {
                  var statearr_92381 = state_92377;
                  statearr_92381[5] = inst_92346;
                  return statearr_92381;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92377__$1, 2, pubsub.statesCh, inst_92349);
              } else {
                if (state_val_92378 === 4) {
                  var inst_92375 = state_92377[2];
                  var state_92377__$1 = state_92377;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92377__$1, inst_92375);
                } else {
                  if (state_val_92378 === 6) {
                    var state_92377__$1 = state_92377;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92377__$1, 9, pubsub.statesCh, pubsub.m);
                  } else {
                    if (state_val_92378 === 3) {
                      var inst_92353 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                      var state_92377__$1 = function() {
                        var statearr_92382 = state_92377;
                        statearr_92382[6] = inst_92353;
                        return statearr_92382;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92377__$1, 5, pubsub.sendReceiveCh);
                    } else {
                      if (state_val_92378 === 12) {
                        var inst_92371 = state_92377[2];
                        var state_92377__$1 = state_92377;
                        var statearr_92383_92399 = state_92377__$1;
                        statearr_92383_92399[2] = inst_92371;
                        statearr_92383_92399[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_92378 === 2) {
                          var inst_92351 = state_92377[2];
                          var state_92377__$1 = function() {
                            var statearr_92384 = state_92377;
                            statearr_92384[7] = inst_92351;
                            return statearr_92384;
                          }();
                          var statearr_92385_92400 = state_92377__$1;
                          statearr_92385_92400[2] = null;
                          statearr_92385_92400[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_92378 === 11) {
                            var state_92377__$1 = state_92377;
                            var statearr_92386_92401 = state_92377__$1;
                            statearr_92386_92401[2] = null;
                            statearr_92386_92401[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_92378 === 9) {
                              var inst_92362 = state_92377[2];
                              var inst_92363 = pubsub.mtemp["msg"];
                              var state_92377__$1 = function() {
                                var statearr_92387 = state_92377;
                                statearr_92387[8] = inst_92362;
                                return statearr_92387;
                              }();
                              var statearr_92388_92402 = state_92377__$1;
                              statearr_92388_92402[2] = inst_92363;
                              statearr_92388_92402[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_92378 === 5) {
                                var inst_92355 = state_92377[2];
                                var inst_92356 = pubsub.mtemp = inst_92355;
                                var inst_92357 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                                var inst_92358 = pubsub.mtemp["typ"];
                                var inst_92359 = inst_92358 === typ;
                                var state_92377__$1 = function() {
                                  var statearr_92389 = state_92377;
                                  statearr_92389[9] = inst_92356;
                                  statearr_92389[10] = inst_92357;
                                  return statearr_92389;
                                }();
                                if (cljs.core.truth_(inst_92359)) {
                                  var statearr_92390_92403 = state_92377__$1;
                                  statearr_92390_92403[1] = 6;
                                } else {
                                  var statearr_92391_92404 = state_92377__$1;
                                  statearr_92391_92404[1] = 7;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_92378 === 10) {
                                  var state_92377__$1 = state_92377;
                                  var statearr_92392_92405 = state_92377__$1;
                                  statearr_92392_92405[2] = 0;
                                  statearr_92392_92405[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_92378 === 8) {
                                    var inst_92373 = state_92377[2];
                                    var state_92377__$1 = state_92377;
                                    var statearr_92393_92406 = state_92377__$1;
                                    statearr_92393_92406[2] = inst_92373;
                                    statearr_92393_92406[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_92395 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_92395[0] = state_machine__6577__auto__;
              statearr_92395[1] = 1;
              return statearr_92395;
            };
            var state_machine__6577__auto____1 = function(state_92377) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_92377);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_92377) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_92377);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_92396 = f__6621__auto__.call(null);
        statearr_92396[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_92396;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.check = function check(typ, v, ret) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_92558) {
            var state_val_92559 = state_92558[1];
            if (state_val_92559 === 7) {
              var inst_92520 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "found no val  ", pubsub.mtemp);
              var inst_92521 = pubsub.mtemp["typ"] = typ;
              var state_92558__$1 = function() {
                var statearr_92560 = state_92558;
                statearr_92560[5] = inst_92520;
                statearr_92560[6] = inst_92521;
                return statearr_92560;
              }();
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92558__$1, 11, pubsub.statesCh, pubsub.mtemp);
            } else {
              if (state_val_92559 === 20) {
                var state_92558__$1 = state_92558;
                var statearr_92561_92593 = state_92558__$1;
                statearr_92561_92593[2] = null;
                statearr_92561_92593[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_92559 === 1) {
                  var inst_92502 = {"typ":typ, "msg":v};
                  var inst_92503 = pubsub.m = inst_92502;
                  var state_92558__$1 = function() {
                    var statearr_92562 = state_92558;
                    statearr_92562[7] = inst_92503;
                    return statearr_92562;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92558__$1, 2, pubsub.statesCh);
                } else {
                  if (state_val_92559 === 24) {
                    var inst_92552 = state_92558[2];
                    var state_92558__$1 = state_92558;
                    var statearr_92563_92594 = state_92558__$1;
                    statearr_92563_92594[2] = inst_92552;
                    statearr_92563_92594[1] = 15;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_92559 === 4) {
                      var inst_92531 = pubsub.mtemp["typ"];
                      var inst_92532 = inst_92531 === 0;
                      var state_92558__$1 = state_92558;
                      if (cljs.core.truth_(inst_92532)) {
                        var statearr_92564_92595 = state_92558__$1;
                        statearr_92564_92595[1] = 13;
                      } else {
                        var statearr_92565_92596 = state_92558__$1;
                        statearr_92565_92596[1] = 14;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_92559 === 15) {
                        var inst_92554 = state_92558[2];
                        var state_92558__$1 = state_92558;
                        var statearr_92566_92597 = state_92558__$1;
                        statearr_92566_92597[2] = inst_92554;
                        statearr_92566_92597[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_92559 === 21) {
                          var inst_92543 = state_92558[2];
                          var state_92558__$1 = state_92558;
                          var statearr_92567_92598 = state_92558__$1;
                          statearr_92567_92598[2] = inst_92543;
                          statearr_92567_92598[1] = 18;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_92559 === 13) {
                            var state_92558__$1 = state_92558;
                            if (cljs.core.truth_(ret)) {
                              var statearr_92568_92599 = state_92558__$1;
                              statearr_92568_92599[1] = 16;
                            } else {
                              var statearr_92569_92600 = state_92558__$1;
                              statearr_92569_92600[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_92559 === 22) {
                              var inst_92540 = state_92558[2];
                              var state_92558__$1 = function() {
                                var statearr_92570 = state_92558;
                                statearr_92570[8] = inst_92540;
                                return statearr_92570;
                              }();
                              var statearr_92571_92601 = state_92558__$1;
                              statearr_92571_92601[2] = v;
                              statearr_92571_92601[1] = 21;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_92559 === 6) {
                                var inst_92512 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "found val  ", pubsub.mtemp);
                                var inst_92513 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "putting back   ", pubsub.m);
                                var state_92558__$1 = function() {
                                  var statearr_92572 = state_92558;
                                  statearr_92572[9] = inst_92512;
                                  statearr_92572[10] = inst_92513;
                                  return statearr_92572;
                                }();
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92558__$1, 9, pubsub.statesCh, pubsub.m);
                              } else {
                                if (state_val_92559 === 17) {
                                  var state_92558__$1 = state_92558;
                                  if (cljs.core.truth_(v)) {
                                    var statearr_92573_92602 = state_92558__$1;
                                    statearr_92573_92602[1] = 19;
                                  } else {
                                    var statearr_92574_92603 = state_92558__$1;
                                    statearr_92574_92603[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_92559 === 3) {
                                    var state_92558__$1 = state_92558;
                                    if (cljs.core.truth_(v)) {
                                      var statearr_92575_92604 = state_92558__$1;
                                      statearr_92575_92604[1] = 6;
                                    } else {
                                      var statearr_92576_92605 = state_92558__$1;
                                      statearr_92576_92605[1] = 7;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_92559 === 12) {
                                      var inst_92527 = state_92558[2];
                                      var state_92558__$1 = state_92558;
                                      var statearr_92577_92606 = state_92558__$1;
                                      statearr_92577_92606[2] = inst_92527;
                                      statearr_92577_92606[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_92559 === 2) {
                                        var inst_92505 = state_92558[2];
                                        var inst_92506 = pubsub.mtemp = inst_92505;
                                        var inst_92507 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "checking  ", pubsub.mtemp);
                                        var inst_92508 = pubsub.mtemp["typ"];
                                        var inst_92509 = inst_92508 === typ;
                                        var state_92558__$1 = function() {
                                          var statearr_92578 = state_92558;
                                          statearr_92578[11] = inst_92506;
                                          statearr_92578[12] = inst_92507;
                                          return statearr_92578;
                                        }();
                                        if (cljs.core.truth_(inst_92509)) {
                                          var statearr_92579_92607 = state_92558__$1;
                                          statearr_92579_92607[1] = 3;
                                        } else {
                                          var statearr_92580_92608 = state_92558__$1;
                                          statearr_92580_92608[1] = 4;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_92559 === 23) {
                                          var inst_92548 = state_92558[2];
                                          var inst_92549 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "itteration  ", ret);
                                          var inst_92550 = check.call(null, typ, v, ret);
                                          var state_92558__$1 = function() {
                                            var statearr_92581 = state_92558;
                                            statearr_92581[13] = inst_92548;
                                            statearr_92581[14] = inst_92549;
                                            return statearr_92581;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92558__$1, 24, inst_92550);
                                        } else {
                                          if (state_val_92559 === 19) {
                                            var inst_92538 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "got nul val is ", v);
                                            var state_92558__$1 = function() {
                                              var statearr_92582 = state_92558;
                                              statearr_92582[15] = inst_92538;
                                              return statearr_92582;
                                            }();
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92558__$1, 22, pubsub.statesCh, pubsub.m);
                                          } else {
                                            if (state_val_92559 === 11) {
                                              var inst_92523 = state_92558[2];
                                              var inst_92524 = pubsub.mtemp["msg"];
                                              var inst_92525 = check.call(null, typ, v, inst_92524);
                                              var state_92558__$1 = function() {
                                                var statearr_92583 = state_92558;
                                                statearr_92583[16] = inst_92523;
                                                return statearr_92583;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92558__$1, 12, inst_92525);
                                            } else {
                                              if (state_val_92559 === 9) {
                                                var inst_92515 = state_92558[2];
                                                var inst_92516 = check.call(null, typ, v, v);
                                                var state_92558__$1 = function() {
                                                  var statearr_92584 = state_92558;
                                                  statearr_92584[17] = inst_92515;
                                                  return statearr_92584;
                                                }();
                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92558__$1, 10, inst_92516);
                                              } else {
                                                if (state_val_92559 === 5) {
                                                  var inst_92556 = state_92558[2];
                                                  var state_92558__$1 = state_92558;
                                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92558__$1, inst_92556);
                                                } else {
                                                  if (state_val_92559 === 14) {
                                                    var state_92558__$1 = state_92558;
                                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92558__$1, 23, pubsub.statesCh, pubsub.mtemp);
                                                  } else {
                                                    if (state_val_92559 === 16) {
                                                      var inst_92535 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "ending ", v);
                                                      var state_92558__$1 = function() {
                                                        var statearr_92585 = state_92558;
                                                        statearr_92585[18] = inst_92535;
                                                        return statearr_92585;
                                                      }();
                                                      var statearr_92586_92609 = state_92558__$1;
                                                      statearr_92586_92609[2] = ret;
                                                      statearr_92586_92609[1] = 18;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_92559 === 10) {
                                                        var inst_92518 = state_92558[2];
                                                        var state_92558__$1 = state_92558;
                                                        var statearr_92587_92610 = state_92558__$1;
                                                        statearr_92587_92610[2] = inst_92518;
                                                        statearr_92587_92610[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_92559 === 18) {
                                                          var inst_92545 = state_92558[2];
                                                          var state_92558__$1 = state_92558;
                                                          var statearr_92588_92611 = state_92558__$1;
                                                          statearr_92588_92611[2] = inst_92545;
                                                          statearr_92588_92611[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_92559 === 8) {
                                                            var inst_92529 = state_92558[2];
                                                            var state_92558__$1 = state_92558;
                                                            var statearr_92589_92612 = state_92558__$1;
                                                            statearr_92589_92612[2] = inst_92529;
                                                            statearr_92589_92612[1] = 5;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_92591 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_92591[0] = state_machine__6577__auto__;
              statearr_92591[1] = 1;
              return statearr_92591;
            };
            var state_machine__6577__auto____1 = function(state_92558) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_92558);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_92558) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_92558);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_92592 = f__6621__auto__.call(null);
        statearr_92592[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_92592;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.swp = function swp(typ, v) {
  if (cljs.core.truth_(v)) {
    return pubsub.states[typ] = v;
  } else {
    return pubsub.states[typ];
  }
};
pubsub.rr = function() {
  var rr__delegate = function(typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_92757) {
              var state_val_92758 = state_92757[1];
              if (state_val_92758 === 7) {
                var inst_92719 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                var inst_92720 = 0;
                var state_92757__$1 = function() {
                  var statearr_92759 = state_92757;
                  statearr_92759[5] = inst_92719;
                  statearr_92759[6] = inst_92720;
                  return statearr_92759;
                }();
                var statearr_92760_92787 = state_92757__$1;
                statearr_92760_92787[2] = null;
                statearr_92760_92787[1] = 9;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_92758 === 1) {
                  var inst_92700 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_92701 = cljs.core.count.call(null, typ);
                  var inst_92702 = inst_92701 / 2;
                  var inst_92703 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_92702);
                  var inst_92706 = {"typ":0};
                  var state_92757__$1 = function() {
                    var statearr_92761 = state_92757;
                    statearr_92761[7] = inst_92700;
                    statearr_92761[8] = inst_92703;
                    return statearr_92761;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92757__$1, 2, pubsub.sendReceiveCh, inst_92706);
                } else {
                  if (state_val_92758 === 4) {
                    var inst_92755 = state_92757[2];
                    var state_92757__$1 = state_92757;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92757__$1, inst_92755);
                  } else {
                    if (state_val_92758 === 15) {
                      var inst_92720 = state_92757[6];
                      var inst_92742 = inst_92720 + 2;
                      var inst_92720__$1 = inst_92742;
                      var state_92757__$1 = function() {
                        var statearr_92762 = state_92757;
                        statearr_92762[6] = inst_92720__$1;
                        return statearr_92762;
                      }();
                      var statearr_92763_92788 = state_92757__$1;
                      statearr_92763_92788[2] = null;
                      statearr_92763_92788[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_92758 === 13) {
                        var inst_92748 = state_92757[2];
                        var state_92757__$1 = state_92757;
                        var statearr_92764_92789 = state_92757__$1;
                        statearr_92764_92789[2] = inst_92748;
                        statearr_92764_92789[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_92758 === 6) {
                          var inst_92717 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                          var state_92757__$1 = function() {
                            var statearr_92765 = state_92757;
                            statearr_92765[9] = inst_92717;
                            return statearr_92765;
                          }();
                          var statearr_92766_92790 = state_92757__$1;
                          statearr_92766_92790[2] = 0;
                          statearr_92766_92790[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_92758 === 17) {
                            var inst_92740 = state_92757[2];
                            var state_92757__$1 = state_92757;
                            var statearr_92767_92791 = state_92757__$1;
                            statearr_92767_92791[2] = inst_92740;
                            statearr_92767_92791[1] = 16;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_92758 === 3) {
                              var inst_92710 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                              var state_92757__$1 = function() {
                                var statearr_92768 = state_92757;
                                statearr_92768[10] = inst_92710;
                                return statearr_92768;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92757__$1, 5, pubsub.sendReceiveCh);
                            } else {
                              if (state_val_92758 === 12) {
                                var state_92757__$1 = state_92757;
                                var statearr_92769_92792 = state_92757__$1;
                                statearr_92769_92792[2] = null;
                                statearr_92769_92792[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_92758 === 2) {
                                  var inst_92708 = state_92757[2];
                                  var state_92757__$1 = function() {
                                    var statearr_92770 = state_92757;
                                    statearr_92770[11] = inst_92708;
                                    return statearr_92770;
                                  }();
                                  var statearr_92771_92793 = state_92757__$1;
                                  statearr_92771_92793[2] = null;
                                  statearr_92771_92793[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_92758 === 11) {
                                    var inst_92720 = state_92757[6];
                                    var inst_92725 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_92720);
                                    var inst_92726 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                    var inst_92727 = cljs.core.nth.call(null, typ, inst_92720);
                                    var inst_92728 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_92727);
                                    var inst_92729 = pubsub.mtemp["typ"];
                                    var inst_92730 = cljs.core.nth.call(null, typ, inst_92720);
                                    var inst_92731 = inst_92729 === inst_92730;
                                    var state_92757__$1 = function() {
                                      var statearr_92772 = state_92757;
                                      statearr_92772[12] = inst_92725;
                                      statearr_92772[13] = inst_92728;
                                      statearr_92772[14] = inst_92726;
                                      return statearr_92772;
                                    }();
                                    if (cljs.core.truth_(inst_92731)) {
                                      var statearr_92773_92794 = state_92757__$1;
                                      statearr_92773_92794[1] = 14;
                                    } else {
                                      var statearr_92774_92795 = state_92757__$1;
                                      statearr_92774_92795[1] = 15;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_92758 === 9) {
                                      var inst_92720 = state_92757[6];
                                      var inst_92722 = cljs.core.count.call(null, typ);
                                      var inst_92723 = inst_92720 < inst_92722;
                                      var state_92757__$1 = state_92757;
                                      if (cljs.core.truth_(inst_92723)) {
                                        var statearr_92775_92796 = state_92757__$1;
                                        statearr_92775_92796[1] = 11;
                                      } else {
                                        var statearr_92776_92797 = state_92757__$1;
                                        statearr_92776_92797[1] = 12;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_92758 === 5) {
                                        var inst_92712 = state_92757[2];
                                        var inst_92713 = pubsub.mtemp = inst_92712;
                                        var inst_92714 = pubsub.mtemp["typ"];
                                        var inst_92715 = inst_92714 === 0;
                                        var state_92757__$1 = function() {
                                          var statearr_92777 = state_92757;
                                          statearr_92777[15] = inst_92713;
                                          return statearr_92777;
                                        }();
                                        if (cljs.core.truth_(inst_92715)) {
                                          var statearr_92778_92798 = state_92757__$1;
                                          statearr_92778_92798[1] = 6;
                                        } else {
                                          var statearr_92779_92799 = state_92757__$1;
                                          statearr_92779_92799[1] = 7;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_92758 === 14) {
                                          var inst_92720 = state_92757[6];
                                          var inst_92733 = cljs.core.nth.call(null, typ, inst_92720);
                                          var inst_92734 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_92733);
                                          var inst_92735 = inst_92720 + 1;
                                          var inst_92736 = cljs.core.nth.call(null, typ, inst_92735);
                                          var inst_92737 = pubsub.mtemp["msg"];
                                          var inst_92738 = inst_92736.call(null, inst_92737);
                                          var state_92757__$1 = function() {
                                            var statearr_92780 = state_92757;
                                            statearr_92780[16] = inst_92734;
                                            return statearr_92780;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92757__$1, 17, inst_92738);
                                        } else {
                                          if (state_val_92758 === 16) {
                                            var inst_92745 = state_92757[2];
                                            var state_92757__$1 = state_92757;
                                            var statearr_92781_92800 = state_92757__$1;
                                            statearr_92781_92800[2] = inst_92745;
                                            statearr_92781_92800[1] = 13;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_92758 === 10) {
                                              var inst_92750 = state_92757[2];
                                              var inst_92751 = pubsub.result = inst_92750;
                                              var state_92757__$1 = state_92757;
                                              var statearr_92782_92801 = state_92757__$1;
                                              statearr_92782_92801[2] = inst_92751;
                                              statearr_92782_92801[1] = 8;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_92758 === 8) {
                                                var inst_92753 = state_92757[2];
                                                var state_92757__$1 = state_92757;
                                                var statearr_92783_92802 = state_92757__$1;
                                                statearr_92783_92802[2] = inst_92753;
                                                statearr_92783_92802[1] = 4;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_92785 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_92785[0] = state_machine__6577__auto__;
                statearr_92785[1] = 1;
                return statearr_92785;
              };
              var state_machine__6577__auto____1 = function(state_92757) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_92757);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_92757) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_92757);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_92786 = f__6621__auto__.call(null);
          statearr_92786[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_92786;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var rr = function(var_args) {
    var typ = null;
    if (arguments.length > 0) {
      var G__92803__i = 0, G__92803__a = new Array(arguments.length - 0);
      while (G__92803__i < G__92803__a.length) {
        G__92803__a[G__92803__i] = arguments[G__92803__i + 0];
        ++G__92803__i;
      }
      typ = new cljs.core.IndexedSeq(G__92803__a, 0);
    }
    return rr__delegate.call(this, typ);
  };
  rr.cljs$lang$maxFixedArity = 0;
  rr.cljs$lang$applyTo = function(arglist__92804) {
    var typ = cljs.core.seq(arglist__92804);
    return rr__delegate(typ);
  };
  rr.cljs$core$IFn$_invoke$arity$variadic = rr__delegate;
  return rr;
}();
pubsub.rrs = function() {
  var rrs__delegate = function(typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_92945) {
              var state_val_92946 = state_92945[1];
              if (state_val_92946 === 7) {
                var inst_92940 = state_92945[2];
                var state_92945__$1 = function() {
                  var statearr_92947 = state_92945;
                  statearr_92947[5] = inst_92940;
                  return statearr_92947;
                }();
                var statearr_92948_92975 = state_92945__$1;
                statearr_92948_92975[2] = null;
                statearr_92948_92975[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_92946 === 1) {
                  var inst_92890 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_92891 = cljs.core.count.call(null, typ);
                  var inst_92892 = inst_92891 / 2;
                  var inst_92893 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_92892);
                  var state_92945__$1 = function() {
                    var statearr_92949 = state_92945;
                    statearr_92949[6] = inst_92893;
                    statearr_92949[7] = inst_92890;
                    return statearr_92949;
                  }();
                  var statearr_92950_92976 = state_92945__$1;
                  statearr_92950_92976[2] = null;
                  statearr_92950_92976[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_92946 === 4) {
                    var inst_92897 = state_92945[2];
                    var inst_92898 = pubsub.mtemp = inst_92897;
                    var inst_92899 = pubsub.mtemp["typ"];
                    var inst_92900 = inst_92899 === 0;
                    var state_92945__$1 = function() {
                      var statearr_92951 = state_92945;
                      statearr_92951[8] = inst_92898;
                      return statearr_92951;
                    }();
                    if (cljs.core.truth_(inst_92900)) {
                      var statearr_92952_92977 = state_92945__$1;
                      statearr_92952_92977[1] = 5;
                    } else {
                      var statearr_92953_92978 = state_92945__$1;
                      statearr_92953_92978[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_92946 === 15) {
                      var inst_92932 = state_92945[2];
                      var state_92945__$1 = state_92945;
                      var statearr_92954_92979 = state_92945__$1;
                      statearr_92954_92979[2] = inst_92932;
                      statearr_92954_92979[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_92946 === 13) {
                        var inst_92905 = state_92945[9];
                        var inst_92918 = cljs.core.nth.call(null, typ, inst_92905);
                        var inst_92919 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_92918);
                        var inst_92920 = inst_92905 + 1;
                        var inst_92921 = cljs.core.nth.call(null, typ, inst_92920);
                        var inst_92922 = pubsub.mtemp["msg"];
                        var inst_92923 = inst_92921.call(null, inst_92922);
                        var inst_92924 = pubsub.ret = inst_92923;
                        var inst_92925 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "return ", pubsub.ret);
                        var state_92945__$1 = function() {
                          var statearr_92955 = state_92945;
                          statearr_92955[10] = inst_92925;
                          statearr_92955[11] = inst_92924;
                          statearr_92955[12] = inst_92919;
                          return statearr_92955;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_92945__$1, 16, pubsub.receiveCH, pubsub.ret);
                      } else {
                        if (state_val_92946 === 6) {
                          var inst_92904 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                          var inst_92905 = 0;
                          var state_92945__$1 = function() {
                            var statearr_92956 = state_92945;
                            statearr_92956[13] = inst_92904;
                            statearr_92956[9] = inst_92905;
                            return statearr_92956;
                          }();
                          var statearr_92957_92980 = state_92945__$1;
                          statearr_92957_92980[2] = null;
                          statearr_92957_92980[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_92946 === 3) {
                            var inst_92943 = state_92945[2];
                            var state_92945__$1 = state_92945;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_92945__$1, inst_92943);
                          } else {
                            if (state_val_92946 === 12) {
                              var inst_92935 = state_92945[2];
                              var state_92945__$1 = state_92945;
                              var statearr_92958_92981 = state_92945__$1;
                              statearr_92958_92981[2] = inst_92935;
                              statearr_92958_92981[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_92946 === 2) {
                                var inst_92895 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                var state_92945__$1 = function() {
                                  var statearr_92959 = state_92945;
                                  statearr_92959[14] = inst_92895;
                                  return statearr_92959;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_92945__$1, 4, pubsub.sendReceiveCh);
                              } else {
                                if (state_val_92946 === 11) {
                                  var state_92945__$1 = state_92945;
                                  var statearr_92960_92982 = state_92945__$1;
                                  statearr_92960_92982[2] = null;
                                  statearr_92960_92982[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_92946 === 9) {
                                    var inst_92937 = state_92945[2];
                                    var inst_92938 = pubsub.result = inst_92937;
                                    var state_92945__$1 = state_92945;
                                    var statearr_92961_92983 = state_92945__$1;
                                    statearr_92961_92983[2] = inst_92938;
                                    statearr_92961_92983[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_92946 === 5) {
                                      var inst_92902 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                      var state_92945__$1 = function() {
                                        var statearr_92962 = state_92945;
                                        statearr_92962[15] = inst_92902;
                                        return statearr_92962;
                                      }();
                                      var statearr_92963_92984 = state_92945__$1;
                                      statearr_92963_92984[2] = 0;
                                      statearr_92963_92984[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_92946 === 14) {
                                        var inst_92905 = state_92945[9];
                                        var inst_92929 = inst_92905 + 2;
                                        var inst_92905__$1 = inst_92929;
                                        var state_92945__$1 = function() {
                                          var statearr_92964 = state_92945;
                                          statearr_92964[9] = inst_92905__$1;
                                          return statearr_92964;
                                        }();
                                        var statearr_92965_92985 = state_92945__$1;
                                        statearr_92965_92985[2] = null;
                                        statearr_92965_92985[1] = 8;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_92946 === 16) {
                                          var inst_92927 = state_92945[2];
                                          var state_92945__$1 = state_92945;
                                          var statearr_92966_92986 = state_92945__$1;
                                          statearr_92966_92986[2] = inst_92927;
                                          statearr_92966_92986[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_92946 === 10) {
                                            var inst_92905 = state_92945[9];
                                            var inst_92910 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_92905);
                                            var inst_92911 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                            var inst_92912 = cljs.core.nth.call(null, typ, inst_92905);
                                            var inst_92913 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_92912);
                                            var inst_92914 = pubsub.mtemp["typ"];
                                            var inst_92915 = cljs.core.nth.call(null, typ, inst_92905);
                                            var inst_92916 = inst_92914 === inst_92915;
                                            var state_92945__$1 = function() {
                                              var statearr_92967 = state_92945;
                                              statearr_92967[16] = inst_92910;
                                              statearr_92967[17] = inst_92911;
                                              statearr_92967[18] = inst_92913;
                                              return statearr_92967;
                                            }();
                                            if (cljs.core.truth_(inst_92916)) {
                                              var statearr_92968_92987 = state_92945__$1;
                                              statearr_92968_92987[1] = 13;
                                            } else {
                                              var statearr_92969_92988 = state_92945__$1;
                                              statearr_92969_92988[1] = 14;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_92946 === 8) {
                                              var inst_92905 = state_92945[9];
                                              var inst_92907 = cljs.core.count.call(null, typ);
                                              var inst_92908 = inst_92905 < inst_92907;
                                              var state_92945__$1 = state_92945;
                                              if (cljs.core.truth_(inst_92908)) {
                                                var statearr_92970_92989 = state_92945__$1;
                                                statearr_92970_92989[1] = 10;
                                              } else {
                                                var statearr_92971_92990 = state_92945__$1;
                                                statearr_92971_92990[1] = 11;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_92973 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_92973[0] = state_machine__6577__auto__;
                statearr_92973[1] = 1;
                return statearr_92973;
              };
              var state_machine__6577__auto____1 = function(state_92945) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_92945);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_92945) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_92945);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_92974 = f__6621__auto__.call(null);
          statearr_92974[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_92974;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var rrs = function(var_args) {
    var typ = null;
    if (arguments.length > 0) {
      var G__92991__i = 0, G__92991__a = new Array(arguments.length - 0);
      while (G__92991__i < G__92991__a.length) {
        G__92991__a[G__92991__i] = arguments[G__92991__i + 0];
        ++G__92991__i;
      }
      typ = new cljs.core.IndexedSeq(G__92991__a, 0);
    }
    return rrs__delegate.call(this, typ);
  };
  rrs.cljs$lang$maxFixedArity = 0;
  rrs.cljs$lang$applyTo = function(arglist__92992) {
    var typ = cljs.core.seq(arglist__92992);
    return rrs__delegate(typ);
  };
  rrs.cljs$core$IFn$_invoke$arity$variadic = rrs__delegate;
  return rrs;
}();
pubsub.rrsa = function() {
  var rrsa__delegate = function(rch, sch, typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_93166) {
              var state_val_93167 = state_93166[1];
              if (state_val_93167 === 7) {
                var inst_93111 = state_93166[2];
                var inst_93112 = pubsub.mtemp = inst_93111;
                var inst_93113 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop", pubsub.mtemp);
                var inst_93114 = pubsub.mtemp["typ"];
                var inst_93115 = inst_93114 === 0;
                var state_93166__$1 = function() {
                  var statearr_93168 = state_93166;
                  statearr_93168[5] = inst_93112;
                  statearr_93168[6] = inst_93113;
                  return statearr_93168;
                }();
                if (cljs.core.truth_(inst_93115)) {
                  var statearr_93169_93201 = state_93166__$1;
                  statearr_93169_93201[1] = 8;
                } else {
                  var statearr_93170_93202 = state_93166__$1;
                  statearr_93170_93202[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_93167 === 20) {
                  var inst_93146 = state_93166[2];
                  var state_93166__$1 = state_93166;
                  var statearr_93171_93203 = state_93166__$1;
                  statearr_93171_93203[2] = inst_93146;
                  statearr_93171_93203[1] = 18;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_93167 === 1) {
                    var inst_93097 = window["hook"];
                    var inst_93098 = inst_93097[typ];
                    var state_93166__$1 = state_93166;
                    if (cljs.core.truth_(inst_93098)) {
                      var statearr_93172_93204 = state_93166__$1;
                      statearr_93172_93204[1] = 2;
                    } else {
                      var statearr_93173_93205 = state_93166__$1;
                      statearr_93173_93205[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_93167 === 4) {
                      var inst_93164 = state_93166[2];
                      var state_93166__$1 = state_93166;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_93166__$1, inst_93164);
                    } else {
                      if (state_val_93167 === 15) {
                        var inst_93154 = state_93166[2];
                        var state_93166__$1 = state_93166;
                        var statearr_93174_93206 = state_93166__$1;
                        statearr_93174_93206[2] = inst_93154;
                        statearr_93174_93206[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_93167 === 13) {
                          var inst_93120 = state_93166[7];
                          var inst_93125 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_93120);
                          var inst_93126 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                          var inst_93127 = cljs.core.nth.call(null, typ, inst_93120);
                          var inst_93128 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_93127);
                          var inst_93129 = pubsub.mtemp["typ"];
                          var inst_93130 = cljs.core.nth.call(null, typ, inst_93120);
                          var inst_93131 = inst_93129 === inst_93130;
                          var state_93166__$1 = function() {
                            var statearr_93175 = state_93166;
                            statearr_93175[8] = inst_93128;
                            statearr_93175[9] = inst_93125;
                            statearr_93175[10] = inst_93126;
                            return statearr_93175;
                          }();
                          if (cljs.core.truth_(inst_93131)) {
                            var statearr_93176_93207 = state_93166__$1;
                            statearr_93176_93207[1] = 16;
                          } else {
                            var statearr_93177_93208 = state_93166__$1;
                            statearr_93177_93208[1] = 17;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_93167 === 6) {
                            var inst_93162 = state_93166[2];
                            var state_93166__$1 = state_93166;
                            var statearr_93178_93209 = state_93166__$1;
                            statearr_93178_93209[2] = inst_93162;
                            statearr_93178_93209[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_93167 === 17) {
                              var inst_93120 = state_93166[7];
                              var inst_93148 = inst_93120 + 2;
                              var inst_93120__$1 = inst_93148;
                              var state_93166__$1 = function() {
                                var statearr_93179 = state_93166;
                                statearr_93179[7] = inst_93120__$1;
                                return statearr_93179;
                              }();
                              var statearr_93180_93210 = state_93166__$1;
                              statearr_93180_93210[2] = null;
                              statearr_93180_93210[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_93167 === 3) {
                                var inst_93104 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                                var inst_93105 = cljs.core.count.call(null, typ);
                                var inst_93106 = inst_93105 / 2;
                                var inst_93107 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_93106);
                                var state_93166__$1 = function() {
                                  var statearr_93181 = state_93166;
                                  statearr_93181[11] = inst_93107;
                                  statearr_93181[12] = inst_93104;
                                  return statearr_93181;
                                }();
                                var statearr_93182_93211 = state_93166__$1;
                                statearr_93182_93211[2] = null;
                                statearr_93182_93211[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_93167 === 12) {
                                  var inst_93156 = state_93166[2];
                                  var inst_93157 = pubsub.result = inst_93156;
                                  var state_93166__$1 = state_93166;
                                  var statearr_93183_93212 = state_93166__$1;
                                  statearr_93183_93212[2] = inst_93157;
                                  statearr_93183_93212[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_93167 === 2) {
                                    var inst_93100 = window["hook"];
                                    var inst_93101 = inst_93100[typ];
                                    var inst_93102 = inst_93101.call(null, pubsub.msg);
                                    var state_93166__$1 = state_93166;
                                    var statearr_93184_93213 = state_93166__$1;
                                    statearr_93184_93213[2] = inst_93102;
                                    statearr_93184_93213[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_93167 === 19) {
                                      var inst_93142 = state_93166[2];
                                      var inst_93143 = pubsub.ret = inst_93142;
                                      var inst_93144 = logger.og.call(null, new cljs.core.Keyword(null, "receive1", "receive1", -1698206131), "return ", pubsub.ret);
                                      var state_93166__$1 = function() {
                                        var statearr_93185 = state_93166;
                                        statearr_93185[13] = inst_93144;
                                        statearr_93185[14] = inst_93143;
                                        return statearr_93185;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_93166__$1, 20, rch, pubsub.ret);
                                    } else {
                                      if (state_val_93167 === 11) {
                                        var inst_93120 = state_93166[7];
                                        var inst_93122 = cljs.core.count.call(null, typ);
                                        var inst_93123 = inst_93120 < inst_93122;
                                        var state_93166__$1 = state_93166;
                                        if (cljs.core.truth_(inst_93123)) {
                                          var statearr_93186_93214 = state_93166__$1;
                                          statearr_93186_93214[1] = 13;
                                        } else {
                                          var statearr_93187_93215 = state_93166__$1;
                                          statearr_93187_93215[1] = 14;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_93167 === 9) {
                                          var inst_93119 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                                          var inst_93120 = 0;
                                          var state_93166__$1 = function() {
                                            var statearr_93188 = state_93166;
                                            statearr_93188[7] = inst_93120;
                                            statearr_93188[15] = inst_93119;
                                            return statearr_93188;
                                          }();
                                          var statearr_93189_93216 = state_93166__$1;
                                          statearr_93189_93216[2] = null;
                                          statearr_93189_93216[1] = 11;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_93167 === 5) {
                                            var inst_93109 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                            var state_93166__$1 = function() {
                                              var statearr_93190 = state_93166;
                                              statearr_93190[16] = inst_93109;
                                              return statearr_93190;
                                            }();
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93166__$1, 7, sch);
                                          } else {
                                            if (state_val_93167 === 14) {
                                              var state_93166__$1 = state_93166;
                                              var statearr_93191_93217 = state_93166__$1;
                                              statearr_93191_93217[2] = null;
                                              statearr_93191_93217[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_93167 === 16) {
                                                var inst_93120 = state_93166[7];
                                                var inst_93133 = cljs.core.nth.call(null, typ, inst_93120);
                                                var inst_93134 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_93133);
                                                var inst_93135 = pubsub.mtemp["msg"];
                                                var inst_93136 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "args ", inst_93135);
                                                var inst_93137 = inst_93120 + 1;
                                                var inst_93138 = cljs.core.nth.call(null, typ, inst_93137);
                                                var inst_93139 = pubsub.mtemp["msg"];
                                                var inst_93140 = cljs.core.apply.call(null, inst_93138, inst_93139);
                                                var state_93166__$1 = function() {
                                                  var statearr_93192 = state_93166;
                                                  statearr_93192[17] = inst_93136;
                                                  statearr_93192[18] = inst_93134;
                                                  return statearr_93192;
                                                }();
                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93166__$1, 19, inst_93140);
                                              } else {
                                                if (state_val_93167 === 10) {
                                                  var inst_93159 = state_93166[2];
                                                  var state_93166__$1 = function() {
                                                    var statearr_93193 = state_93166;
                                                    statearr_93193[19] = inst_93159;
                                                    return statearr_93193;
                                                  }();
                                                  var statearr_93194_93218 = state_93166__$1;
                                                  statearr_93194_93218[2] = null;
                                                  statearr_93194_93218[1] = 5;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_93167 === 18) {
                                                    var inst_93151 = state_93166[2];
                                                    var state_93166__$1 = state_93166;
                                                    var statearr_93195_93219 = state_93166__$1;
                                                    statearr_93195_93219[2] = inst_93151;
                                                    statearr_93195_93219[1] = 15;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_93167 === 8) {
                                                      var inst_93117 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                                      var state_93166__$1 = function() {
                                                        var statearr_93196 = state_93166;
                                                        statearr_93196[20] = inst_93117;
                                                        return statearr_93196;
                                                      }();
                                                      var statearr_93197_93220 = state_93166__$1;
                                                      statearr_93197_93220[2] = 0;
                                                      statearr_93197_93220[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_93199 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_93199[0] = state_machine__6577__auto__;
                statearr_93199[1] = 1;
                return statearr_93199;
              };
              var state_machine__6577__auto____1 = function(state_93166) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_93166);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_93166) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_93166);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_93200 = f__6621__auto__.call(null);
          statearr_93200[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_93200;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var rrsa = function(rch, sch, var_args) {
    var typ = null;
    if (arguments.length > 2) {
      var G__93221__i = 0, G__93221__a = new Array(arguments.length - 2);
      while (G__93221__i < G__93221__a.length) {
        G__93221__a[G__93221__i] = arguments[G__93221__i + 2];
        ++G__93221__i;
      }
      typ = new cljs.core.IndexedSeq(G__93221__a, 0);
    }
    return rrsa__delegate.call(this, rch, sch, typ);
  };
  rrsa.cljs$lang$maxFixedArity = 2;
  rrsa.cljs$lang$applyTo = function(arglist__93222) {
    var rch = cljs.core.first(arglist__93222);
    arglist__93222 = cljs.core.next(arglist__93222);
    var sch = cljs.core.first(arglist__93222);
    var typ = cljs.core.rest(arglist__93222);
    return rrsa__delegate(rch, sch, typ);
  };
  rrsa.cljs$core$IFn$_invoke$arity$variadic = rrsa__delegate;
  return rrsa;
}();
pubsub.arrsa = function() {
  var arrsa__delegate = function(sch, typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_93387) {
              var state_val_93388 = state_93387[1];
              if (state_val_93388 === 7) {
                var inst_93336 = state_93387[2];
                var inst_93337 = pubsub.mtemp = inst_93336;
                var inst_93338 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop", pubsub.mtemp);
                var inst_93339 = pubsub.mtemp["typ"];
                var inst_93340 = inst_93339 === 0;
                var state_93387__$1 = function() {
                  var statearr_93389 = state_93387;
                  statearr_93389[5] = inst_93338;
                  statearr_93389[6] = inst_93337;
                  return statearr_93389;
                }();
                if (cljs.core.truth_(inst_93340)) {
                  var statearr_93390_93421 = state_93387__$1;
                  statearr_93390_93421[1] = 8;
                } else {
                  var statearr_93391_93422 = state_93387__$1;
                  statearr_93391_93422[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_93388 === 1) {
                  var inst_93322 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_93323 = cljs.core.count.call(null, typ);
                  var inst_93324 = inst_93323 / 2;
                  var inst_93325 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_93324);
                  var inst_93326 = window["hook"];
                  var inst_93327 = inst_93326[typ];
                  var state_93387__$1 = function() {
                    var statearr_93392 = state_93387;
                    statearr_93392[7] = inst_93325;
                    statearr_93392[8] = inst_93322;
                    return statearr_93392;
                  }();
                  if (cljs.core.truth_(inst_93327)) {
                    var statearr_93393_93423 = state_93387__$1;
                    statearr_93393_93423[1] = 2;
                  } else {
                    var statearr_93394_93424 = state_93387__$1;
                    statearr_93394_93424[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_93388 === 4) {
                    var inst_93385 = state_93387[2];
                    var state_93387__$1 = state_93387;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_93387__$1, inst_93385);
                  } else {
                    if (state_val_93388 === 15) {
                      var inst_93375 = state_93387[2];
                      var state_93387__$1 = state_93387;
                      var statearr_93395_93425 = state_93387__$1;
                      statearr_93395_93425[2] = inst_93375;
                      statearr_93395_93425[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_93388 === 13) {
                        var inst_93345 = state_93387[9];
                        var inst_93350 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_93345);
                        var inst_93351 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                        var inst_93352 = cljs.core.nth.call(null, typ, inst_93345);
                        var inst_93353 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_93352);
                        var inst_93354 = pubsub.mtemp["typ"];
                        var inst_93355 = cljs.core.nth.call(null, typ, inst_93345);
                        var inst_93356 = inst_93354 === inst_93355;
                        var state_93387__$1 = function() {
                          var statearr_93396 = state_93387;
                          statearr_93396[10] = inst_93353;
                          statearr_93396[11] = inst_93351;
                          statearr_93396[12] = inst_93350;
                          return statearr_93396;
                        }();
                        if (cljs.core.truth_(inst_93356)) {
                          var statearr_93397_93426 = state_93387__$1;
                          statearr_93397_93426[1] = 16;
                        } else {
                          var statearr_93398_93427 = state_93387__$1;
                          statearr_93398_93427[1] = 17;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_93388 === 6) {
                          var inst_93383 = state_93387[2];
                          var state_93387__$1 = state_93387;
                          var statearr_93399_93428 = state_93387__$1;
                          statearr_93399_93428[2] = inst_93383;
                          statearr_93399_93428[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_93388 === 17) {
                            var inst_93345 = state_93387[9];
                            var inst_93369 = inst_93345 + 2;
                            var inst_93345__$1 = inst_93369;
                            var state_93387__$1 = function() {
                              var statearr_93400 = state_93387;
                              statearr_93400[9] = inst_93345__$1;
                              return statearr_93400;
                            }();
                            var statearr_93401_93429 = state_93387__$1;
                            statearr_93401_93429[2] = null;
                            statearr_93401_93429[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_93388 === 3) {
                              var state_93387__$1 = state_93387;
                              var statearr_93402_93430 = state_93387__$1;
                              statearr_93402_93430[2] = null;
                              statearr_93402_93430[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_93388 === 12) {
                                var inst_93377 = state_93387[2];
                                var inst_93378 = pubsub.result = inst_93377;
                                var state_93387__$1 = state_93387;
                                var statearr_93403_93431 = state_93387__$1;
                                statearr_93403_93431[2] = inst_93378;
                                statearr_93403_93431[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_93388 === 2) {
                                  var inst_93329 = window["hook"];
                                  var inst_93330 = inst_93329[typ];
                                  var inst_93331 = inst_93330.call(null, pubsub.msg);
                                  var state_93387__$1 = state_93387;
                                  var statearr_93404_93432 = state_93387__$1;
                                  statearr_93404_93432[2] = inst_93331;
                                  statearr_93404_93432[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_93388 === 11) {
                                    var inst_93345 = state_93387[9];
                                    var inst_93347 = cljs.core.count.call(null, typ);
                                    var inst_93348 = inst_93345 < inst_93347;
                                    var state_93387__$1 = state_93387;
                                    if (cljs.core.truth_(inst_93348)) {
                                      var statearr_93405_93433 = state_93387__$1;
                                      statearr_93405_93433[1] = 13;
                                    } else {
                                      var statearr_93406_93434 = state_93387__$1;
                                      statearr_93406_93434[1] = 14;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_93388 === 9) {
                                      var inst_93344 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                                      var inst_93345 = 0;
                                      var state_93387__$1 = function() {
                                        var statearr_93407 = state_93387;
                                        statearr_93407[9] = inst_93345;
                                        statearr_93407[13] = inst_93344;
                                        return statearr_93407;
                                      }();
                                      var statearr_93408_93435 = state_93387__$1;
                                      statearr_93408_93435[2] = null;
                                      statearr_93408_93435[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_93388 === 5) {
                                        var inst_93334 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                        var state_93387__$1 = function() {
                                          var statearr_93409 = state_93387;
                                          statearr_93409[14] = inst_93334;
                                          return statearr_93409;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93387__$1, 7, sch);
                                      } else {
                                        if (state_val_93388 === 14) {
                                          var state_93387__$1 = state_93387;
                                          var statearr_93410_93436 = state_93387__$1;
                                          statearr_93410_93436[2] = null;
                                          statearr_93410_93436[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_93388 === 16) {
                                            var inst_93345 = state_93387[9];
                                            var inst_93358 = cljs.core.nth.call(null, typ, inst_93345);
                                            var inst_93359 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_93358);
                                            var inst_93360 = pubsub.mtemp["msg"];
                                            var inst_93361 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "args ", inst_93360);
                                            var inst_93362 = inst_93345 + 1;
                                            var inst_93363 = cljs.core.nth.call(null, typ, inst_93362);
                                            var inst_93364 = pubsub.mtemp["msg"];
                                            var inst_93365 = cljs.core.apply.call(null, inst_93363, inst_93364);
                                            var inst_93366 = pubsub.ret = inst_93365;
                                            var inst_93367 = logger.og.call(null, new cljs.core.Keyword(null, "receive1", "receive1", -1698206131), "return ", pubsub.ret);
                                            var state_93387__$1 = function() {
                                              var statearr_93411 = state_93387;
                                              statearr_93411[15] = inst_93366;
                                              statearr_93411[16] = inst_93359;
                                              statearr_93411[17] = inst_93361;
                                              return statearr_93411;
                                            }();
                                            var statearr_93412_93437 = state_93387__$1;
                                            statearr_93412_93437[2] = inst_93367;
                                            statearr_93412_93437[1] = 18;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_93388 === 10) {
                                              var inst_93380 = state_93387[2];
                                              var state_93387__$1 = function() {
                                                var statearr_93413 = state_93387;
                                                statearr_93413[18] = inst_93380;
                                                return statearr_93413;
                                              }();
                                              var statearr_93414_93438 = state_93387__$1;
                                              statearr_93414_93438[2] = null;
                                              statearr_93414_93438[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_93388 === 18) {
                                                var inst_93372 = state_93387[2];
                                                var state_93387__$1 = state_93387;
                                                var statearr_93415_93439 = state_93387__$1;
                                                statearr_93415_93439[2] = inst_93372;
                                                statearr_93415_93439[1] = 15;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_93388 === 8) {
                                                  var inst_93342 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                                  var state_93387__$1 = function() {
                                                    var statearr_93416 = state_93387;
                                                    statearr_93416[19] = inst_93342;
                                                    return statearr_93416;
                                                  }();
                                                  var statearr_93417_93440 = state_93387__$1;
                                                  statearr_93417_93440[2] = 0;
                                                  statearr_93417_93440[1] = 10;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  return null;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_93419 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_93419[0] = state_machine__6577__auto__;
                statearr_93419[1] = 1;
                return statearr_93419;
              };
              var state_machine__6577__auto____1 = function(state_93387) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_93387);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_93387) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_93387);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_93420 = f__6621__auto__.call(null);
          statearr_93420[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_93420;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var arrsa = function(sch, var_args) {
    var typ = null;
    if (arguments.length > 1) {
      var G__93441__i = 0, G__93441__a = new Array(arguments.length - 1);
      while (G__93441__i < G__93441__a.length) {
        G__93441__a[G__93441__i] = arguments[G__93441__i + 1];
        ++G__93441__i;
      }
      typ = new cljs.core.IndexedSeq(G__93441__a, 0);
    }
    return arrsa__delegate.call(this, sch, typ);
  };
  arrsa.cljs$lang$maxFixedArity = 1;
  arrsa.cljs$lang$applyTo = function(arglist__93442) {
    var sch = cljs.core.first(arglist__93442);
    var typ = cljs.core.rest(arglist__93442);
    return arrsa__delegate(sch, typ);
  };
  arrsa.cljs$core$IFn$_invoke$arity$variadic = arrsa__delegate;
  return arrsa;
}();
pubsub.s = function s(typ, m) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_93459) {
            var state_val_93460 = state_93459[1];
            if (state_val_93460 === 2) {
              var inst_93457 = state_93459[2];
              var state_93459__$1 = state_93459;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_93459__$1, inst_93457);
            } else {
              if (state_val_93460 === 1) {
                var inst_93454 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), typ, m);
                var inst_93455 = pubsub.makeMsg.call(null, typ, m);
                var state_93459__$1 = function() {
                  var statearr_93461 = state_93459;
                  statearr_93461[5] = inst_93454;
                  return statearr_93461;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_93459__$1, 2, pubsub.sendReceiveCh, inst_93455);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_93463 = [null, null, null, null, null, null];
              statearr_93463[0] = state_machine__6577__auto__;
              statearr_93463[1] = 1;
              return statearr_93463;
            };
            var state_machine__6577__auto____1 = function(state_93459) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_93459);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_93459) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_93459);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_93464 = f__6621__auto__.call(null);
        statearr_93464[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_93464;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.si = function si(typ, m) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_93495) {
            var state_val_93496 = state_93495[1];
            if (state_val_93496 === 3) {
              var inst_93491 = state_93495[2];
              var inst_93492 = pubsub.n = inst_93491;
              var inst_93493 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "recieved", pubsub.n);
              var state_93495__$1 = function() {
                var statearr_93497 = state_93495;
                statearr_93497[5] = inst_93492;
                return statearr_93497;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_93495__$1, inst_93493);
            } else {
              if (state_val_93496 === 2) {
                var inst_93489 = state_93495[2];
                var state_93495__$1 = function() {
                  var statearr_93498 = state_93495;
                  statearr_93498[6] = inst_93489;
                  return statearr_93498;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93495__$1, 3, pubsub.pchannel);
              } else {
                if (state_val_93496 === 1) {
                  var inst_93484 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), typ, m);
                  var inst_93485 = cljs.core.async.chan.call(null);
                  var inst_93486 = pubsub.pchannel = inst_93485;
                  var inst_93487 = pubsub.makeMsg.call(null, typ, m, pubsub.pchannel);
                  var state_93495__$1 = function() {
                    var statearr_93499 = state_93495;
                    statearr_93499[7] = inst_93486;
                    statearr_93499[8] = inst_93484;
                    return statearr_93499;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_93495__$1, 2, pubsub.sendReceiveCh, inst_93487);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_93501 = [null, null, null, null, null, null, null, null, null];
              statearr_93501[0] = state_machine__6577__auto__;
              statearr_93501[1] = 1;
              return statearr_93501;
            };
            var state_machine__6577__auto____1 = function(state_93495) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_93495);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_93495) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_93495);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_93502 = f__6621__auto__.call(null);
        statearr_93502[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_93502;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.order = [];
pubsub.sia = function() {
  var sia__delegate = function(typ, mo) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_93640) {
              var state_val_93641 = state_93640[1];
              if (state_val_93641 === 7) {
                var inst_93611 = cljs.core.PersistentVector.EMPTY;
                var state_93640__$1 = state_93640;
                var statearr_93642_93661 = state_93640__$1;
                statearr_93642_93661[2] = inst_93611;
                statearr_93642_93661[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_93641 === 1) {
                  var inst_93582 = window["preroutinghook"];
                  var inst_93583 = inst_93582[typ];
                  var state_93640__$1 = state_93640;
                  if (cljs.core.truth_(inst_93583)) {
                    var statearr_93643_93662 = state_93640__$1;
                    statearr_93643_93662[1] = 2;
                  } else {
                    var statearr_93644_93663 = state_93640__$1;
                    statearr_93644_93663[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_93641 === 4) {
                    var inst_93597 = state_93640[2];
                    var inst_93598 = logger.og.call(null, new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), typ, pubsub.m);
                    var inst_93599 = cljs.core.async.chan.call(null, 1);
                    var inst_93600 = pubsub.pchannel = inst_93599;
                    var inst_93601 = cljs.core.async.chan.call(null, 1);
                    var inst_93602 = pubsub.sch = inst_93601;
                    var inst_93603 = pubsub.pchannel["typ"] = typ;
                    var state_93640__$1 = function() {
                      var statearr_93645 = state_93640;
                      statearr_93645[5] = inst_93597;
                      statearr_93645[6] = inst_93603;
                      statearr_93645[7] = inst_93598;
                      statearr_93645[8] = inst_93602;
                      statearr_93645[9] = inst_93600;
                      return statearr_93645;
                    }();
                    if (cljs.core.truth_(pubsub.m)) {
                      var statearr_93646_93664 = state_93640__$1;
                      statearr_93646_93664[1] = 6;
                    } else {
                      var statearr_93647_93665 = state_93640__$1;
                      statearr_93647_93665[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_93641 === 15) {
                      var inst_93633 = state_93640[2];
                      var inst_93634 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "done routing2", inst_93633);
                      var state_93640__$1 = state_93640;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93640__$1, 14, inst_93634);
                    } else {
                      if (state_val_93641 === 13) {
                        var inst_93624 = state_93640[10];
                        var inst_93626 = state_93640[2];
                        var inst_93627 = inst_93624.call(null, inst_93626);
                        var inst_93628 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "done routing2", inst_93627);
                        var state_93640__$1 = state_93640;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93640__$1, 12, inst_93628);
                      } else {
                        if (state_val_93641 === 6) {
                          var inst_93607 = cljs.core.PersistentVector.EMPTY;
                          var inst_93608 = pubsub.m.arr;
                          var inst_93609 = cljs.core.into.call(null, inst_93607, inst_93608);
                          var state_93640__$1 = state_93640;
                          var statearr_93648_93666 = state_93640__$1;
                          statearr_93648_93666[2] = inst_93609;
                          statearr_93648_93666[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_93641 === 3) {
                            var inst_93595 = pubsub.m = mo;
                            var state_93640__$1 = state_93640;
                            var statearr_93649_93667 = state_93640__$1;
                            statearr_93649_93667[2] = inst_93595;
                            statearr_93649_93667[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_93641 === 12) {
                              var inst_93630 = state_93640[2];
                              var state_93640__$1 = state_93640;
                              var statearr_93650_93668 = state_93640__$1;
                              statearr_93650_93668[2] = inst_93630;
                              statearr_93650_93668[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_93641 === 2) {
                                var inst_93585 = logger.og.call(null, new cljs.core.Keyword(null, "prehook", "prehook", 393932004), mo);
                                var inst_93588 = window["preroutinghook"];
                                var inst_93589 = inst_93588[typ];
                                var inst_93590 = cljs.core.apply.call(null, inst_93589, mo);
                                var inst_93591 = {"arr":inst_93590};
                                var inst_93592 = pubsub.m = inst_93591;
                                var inst_93593 = logger.og.call(null, new cljs.core.Keyword(null, "afterhook", "afterhook", -1282024607), pubsub.m);
                                var state_93640__$1 = function() {
                                  var statearr_93651 = state_93640;
                                  statearr_93651[11] = inst_93585;
                                  statearr_93651[12] = inst_93592;
                                  return statearr_93651;
                                }();
                                var statearr_93652_93669 = state_93640__$1;
                                statearr_93652_93669[2] = inst_93593;
                                statearr_93652_93669[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_93641 === 11) {
                                  var inst_93638 = state_93640[2];
                                  var state_93640__$1 = state_93640;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_93640__$1, inst_93638);
                                } else {
                                  if (state_val_93641 === 9) {
                                    var inst_93623 = window["postroutinghook"];
                                    var inst_93624 = inst_93623[typ];
                                    var state_93640__$1 = function() {
                                      var statearr_93653 = state_93640;
                                      statearr_93653[10] = inst_93624;
                                      return statearr_93653;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93640__$1, 13, pubsub.pchannel);
                                  } else {
                                    if (state_val_93641 === 5) {
                                      var inst_93616 = state_93640[2];
                                      var inst_93617 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "about to route");
                                      var inst_93618 = routing.routea.call(null, pubsub.rrsa, pubsub.pchannel, pubsub.sch);
                                      var inst_93619 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "done routing", pubsub.order);
                                      var inst_93620 = window["postroutinghook"];
                                      var inst_93621 = inst_93620[typ];
                                      var state_93640__$1 = function() {
                                        var statearr_93654 = state_93640;
                                        statearr_93654[13] = inst_93617;
                                        statearr_93654[14] = inst_93616;
                                        statearr_93654[15] = inst_93618;
                                        statearr_93654[16] = inst_93619;
                                        return statearr_93654;
                                      }();
                                      if (cljs.core.truth_(inst_93621)) {
                                        var statearr_93655_93670 = state_93640__$1;
                                        statearr_93655_93670[1] = 9;
                                      } else {
                                        var statearr_93656_93671 = state_93640__$1;
                                        statearr_93656_93671[1] = 10;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_93641 === 14) {
                                        var inst_93636 = state_93640[2];
                                        var state_93640__$1 = state_93640;
                                        var statearr_93657_93672 = state_93640__$1;
                                        statearr_93657_93672[2] = inst_93636;
                                        statearr_93657_93672[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_93641 === 10) {
                                          var state_93640__$1 = state_93640;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93640__$1, 15, pubsub.pchannel);
                                        } else {
                                          if (state_val_93641 === 8) {
                                            var inst_93613 = state_93640[2];
                                            var inst_93614 = {"typ":typ, "msg":inst_93613};
                                            var state_93640__$1 = state_93640;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_93640__$1, 5, pubsub.sch, inst_93614);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_93659 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_93659[0] = state_machine__6577__auto__;
                statearr_93659[1] = 1;
                return statearr_93659;
              };
              var state_machine__6577__auto____1 = function(state_93640) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_93640);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_93640) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_93640);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_93660 = f__6621__auto__.call(null);
          statearr_93660[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_93660;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var sia = function(typ, var_args) {
    var mo = null;
    if (arguments.length > 1) {
      var G__93673__i = 0, G__93673__a = new Array(arguments.length - 1);
      while (G__93673__i < G__93673__a.length) {
        G__93673__a[G__93673__i] = arguments[G__93673__i + 1];
        ++G__93673__i;
      }
      mo = new cljs.core.IndexedSeq(G__93673__a, 0);
    }
    return sia__delegate.call(this, typ, mo);
  };
  sia.cljs$lang$maxFixedArity = 1;
  sia.cljs$lang$applyTo = function(arglist__93674) {
    var typ = cljs.core.first(arglist__93674);
    var mo = cljs.core.rest(arglist__93674);
    return sia__delegate(typ, mo);
  };
  sia.cljs$core$IFn$_invoke$arity$variadic = sia__delegate;
  return sia;
}();
pubsub.asia = function() {
  var asia__delegate = function(typ, m) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_93732) {
              var state_val_93733 = state_93732[1];
              if (state_val_93733 === 5) {
                var inst_93724 = state_93732[2];
                var inst_93725 = {"typ":typ, "msg":inst_93724};
                var state_93732__$1 = state_93732;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_93732__$1, 2, pubsub.sch, inst_93725);
              } else {
                if (state_val_93733 === 4) {
                  var inst_93722 = cljs.core.PersistentVector.EMPTY;
                  var state_93732__$1 = state_93732;
                  var statearr_93734_93743 = state_93732__$1;
                  statearr_93734_93743[2] = inst_93722;
                  statearr_93734_93743[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_93733 === 3) {
                    var inst_93718 = cljs.core.PersistentVector.EMPTY;
                    var inst_93719 = m.arr;
                    var inst_93720 = cljs.core.into.call(null, inst_93718, inst_93719);
                    var state_93732__$1 = state_93732;
                    var statearr_93735_93744 = state_93732__$1;
                    statearr_93735_93744[2] = inst_93720;
                    statearr_93735_93744[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_93733 === 2) {
                      var inst_93727 = state_93732[2];
                      var inst_93728 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "about to route");
                      var inst_93729 = routing.routea.call(null, pubsub.arrsa, pubsub.pchannel, pubsub.sch);
                      var inst_93730 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "done routing", pubsub.order);
                      var state_93732__$1 = function() {
                        var statearr_93736 = state_93732;
                        statearr_93736[5] = inst_93727;
                        statearr_93736[6] = inst_93729;
                        statearr_93736[7] = inst_93728;
                        return statearr_93736;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_93732__$1, inst_93730);
                    } else {
                      if (state_val_93733 === 1) {
                        var inst_93709 = logger.og.call(null, new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), typ, m);
                        var inst_93710 = cljs.core.async.chan.call(null, 1);
                        var inst_93711 = pubsub.pchannel = inst_93710;
                        var inst_93712 = cljs.core.async.chan.call(null, 1);
                        var inst_93713 = pubsub.sch = inst_93712;
                        var inst_93714 = pubsub.pchannel["typ"] = typ;
                        var state_93732__$1 = function() {
                          var statearr_93737 = state_93732;
                          statearr_93737[8] = inst_93711;
                          statearr_93737[9] = inst_93709;
                          statearr_93737[10] = inst_93714;
                          statearr_93737[11] = inst_93713;
                          return statearr_93737;
                        }();
                        if (cljs.core.truth_(m)) {
                          var statearr_93738_93745 = state_93732__$1;
                          statearr_93738_93745[1] = 3;
                        } else {
                          var statearr_93739_93746 = state_93732__$1;
                          statearr_93739_93746[1] = 4;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_93741 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_93741[0] = state_machine__6577__auto__;
                statearr_93741[1] = 1;
                return statearr_93741;
              };
              var state_machine__6577__auto____1 = function(state_93732) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_93732);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_93732) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_93732);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_93742 = f__6621__auto__.call(null);
          statearr_93742[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_93742;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var asia = function(typ, var_args) {
    var m = null;
    if (arguments.length > 1) {
      var G__93747__i = 0, G__93747__a = new Array(arguments.length - 1);
      while (G__93747__i < G__93747__a.length) {
        G__93747__a[G__93747__i] = arguments[G__93747__i + 1];
        ++G__93747__i;
      }
      m = new cljs.core.IndexedSeq(G__93747__a, 0);
    }
    return asia__delegate.call(this, typ, m);
  };
  asia.cljs$lang$maxFixedArity = 1;
  asia.cljs$lang$applyTo = function(arglist__93748) {
    var typ = cljs.core.first(arglist__93748);
    var m = cljs.core.rest(arglist__93748);
    return asia__delegate(typ, m);
  };
  asia.cljs$core$IFn$_invoke$arity$variadic = asia__delegate;
  return asia;
}();
goog.provide("conf");
goog.require("cljs.core");
conf.signaling2 = "buyan-nikolamandic.rhcloud.com";
conf.signaling1 = "localhost";
conf.signaling = conf.signaling2;
conf.sport1 = "8000";
conf.sport2 = "80";
conf.sport = conf.sport2;
conf.signalingd = [cljs.core.str(conf.signaling), cljs.core.str(":"), cljs.core.str(conf.sport)].join("");
conf.interval = 1E3;
goog.provide("communications");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("conf");
goog.require("logger");
communications.intercomMeta = function() {
  var obj108956 = {"id":1, "knownPeers":cljs.core.PersistentVector.EMPTY, "knownPeersChannels":cljs.core.PersistentVector.EMPTY, "p2pchans":cljs.core.PersistentVector.EMPTY};
  return obj108956;
}();
communications.peers = cljs.core.PersistentVector.EMPTY;
communications.transactionch = cljs.core.async.chan.call(null);
communications.transactionch.type = "transactionch";
communications.cryptoCh = cljs.core.async.chan.call(null);
communications.cryptoCh.type = "cryptoch";
communications.connectTo = function connectTo(ev, id) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_108979) {
            var state_val_108980 = state_108979[1];
            if (state_val_108980 === 2) {
              var inst_108973 = state_108979[2];
              var inst_108974 = inst_108973.connect(id);
              var inst_108975 = cljs.core.partial.call(null, communications.onOpen, inst_108974);
              var inst_108976 = inst_108974.on("open", inst_108975);
              var inst_108977 = communications.channelsFromConnection.call(null, inst_108974);
              var state_108979__$1 = function() {
                var statearr_108981 = state_108979;
                statearr_108981[5] = inst_108976;
                return statearr_108981;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_108979__$1, inst_108977);
            } else {
              if (state_val_108980 === 1) {
                var inst_108971 = pubsub.sia.call(null, "db", "peerjs");
                var state_108979__$1 = state_108979;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_108979__$1, 2, inst_108971);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_108983 = [null, null, null, null, null, null];
              statearr_108983[0] = state_machine__6577__auto__;
              statearr_108983[1] = 1;
              return statearr_108983;
            };
            var state_machine__6577__auto____1 = function(state_108979) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_108979);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_108979) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_108979);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_108984 = f__6621__auto__.call(null);
        statearr_108984[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_108984;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.peerParams = function() {
  var obj108986 = {"host":conf.signaling, "port":8E3, "key":"prokletdajepapa", "debug":true};
  return obj108986;
}();
communications.setID = function setID(ev, id) {
  console.log((new cljs.core.Keyword(null, "setID", "setID", -1552962901)).toString(), ev, id);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109026) {
            var state_val_109027 = state_109026[1];
            if (state_val_109027 === 4) {
              var inst_109022 = state_109026[2];
              var inst_109023 = function() {
                return function(inst_109022, state_val_109027, c__6620__auto__) {
                  return function(p1__108987_SHARP_) {
                    return pubsub.sia.call(null, "onConnection", p1__108987_SHARP_);
                  };
                }(inst_109022, state_val_109027, c__6620__auto__);
              }();
              var inst_109024 = communications.peerjs.on("connection", inst_109023);
              var state_109026__$1 = function() {
                var statearr_109028 = state_109026;
                statearr_109028[5] = inst_109022;
                return statearr_109028;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109026__$1, inst_109024);
            } else {
              if (state_val_109027 === 3) {
                var inst_109016 = state_109026[2];
                var inst_109017 = console.log(inst_109016);
                var inst_109018 = new Peer(id, communications.peerParams);
                var inst_109019 = communications.peerjs = inst_109018;
                var inst_109020 = pubsub.sia.call(null, "db", "peerjs", communications.peerjs);
                var state_109026__$1 = function() {
                  var statearr_109029 = state_109026;
                  statearr_109029[6] = inst_109019;
                  statearr_109029[7] = inst_109017;
                  return statearr_109029;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109026__$1, 4, inst_109020);
              } else {
                if (state_val_109027 === 2) {
                  var inst_109013 = state_109026[2];
                  var inst_109014 = pubsub.sia.call(null, "db", "lid");
                  var state_109026__$1 = function() {
                    var statearr_109030 = state_109026;
                    statearr_109030[8] = inst_109013;
                    return statearr_109030;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109026__$1, 3, inst_109014);
                } else {
                  if (state_val_109027 === 1) {
                    var inst_109011 = pubsub.sia.call(null, "db", "lid", id);
                    var state_109026__$1 = state_109026;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109026__$1, 2, inst_109011);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109032 = [null, null, null, null, null, null, null, null, null];
              statearr_109032[0] = state_machine__6577__auto__;
              statearr_109032[1] = 1;
              return statearr_109032;
            };
            var state_machine__6577__auto____1 = function(state_109026) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109026);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109026) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109026);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109033 = f__6621__auto__.call(null);
        statearr_109033[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109033;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.start = cljs.core.async.chan.call(null);
communications.broadcast = function broadcast(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109214) {
            var state_val_109215 = state_109214[1];
            if (state_val_109215 === 1) {
              var inst_109139 = logger.og.call(null, new cljs.core.Keyword(null, "broadcast", "broadcast", 1770276872), "message ", message);
              var inst_109140 = logger.og.call(null, new cljs.core.Keyword(null, "broadcast", "broadcast", 1770276872), "broadsacting new block", communications.blockk);
              var inst_109141 = communications.intercomMeta.knownPeersChannels;
              var inst_109142 = logger.og.call(null, new cljs.core.Keyword(null, "broadcast", "broadcast", 1770276872), "broadsacting new block to ", inst_109141);
              var inst_109210 = cljs.core.async.chan.call(null, 1);
              var inst_109211 = function() {
                var c__6620__auto____$1 = inst_109210;
                return function(c__6620__auto____$1, inst_109139, inst_109140, inst_109141, inst_109142, inst_109210, state_val_109215, c__6620__auto__) {
                  return function() {
                    var f__6621__auto__ = function() {
                      var switch__6576__auto__ = function(c__6620__auto____$1, inst_109139, inst_109140, inst_109141, inst_109142, inst_109210, state_val_109215, c__6620__auto__) {
                        return function(state_109205) {
                          var state_val_109206 = state_109205[1];
                          if (state_val_109206 === 7) {
                            var inst_109150 = state_109205[5];
                            var inst_109151 = state_109205[6];
                            var inst_109152 = state_109205[7];
                            var inst_109149 = state_109205[8];
                            var inst_109168 = state_109205[2];
                            var inst_109169 = inst_109152 + 1;
                            var tmp109207 = inst_109150;
                            var tmp109208 = inst_109151;
                            var tmp109209 = inst_109149;
                            var inst_109149__$1 = tmp109209;
                            var inst_109150__$1 = tmp109207;
                            var inst_109151__$1 = tmp109208;
                            var inst_109152__$1 = inst_109169;
                            var state_109205__$1 = function() {
                              var statearr_109216 = state_109205;
                              statearr_109216[5] = inst_109150__$1;
                              statearr_109216[6] = inst_109151__$1;
                              statearr_109216[9] = inst_109168;
                              statearr_109216[7] = inst_109152__$1;
                              statearr_109216[8] = inst_109149__$1;
                              return statearr_109216;
                            }();
                            var statearr_109217_109244 = state_109205__$1;
                            statearr_109217_109244[2] = null;
                            statearr_109217_109244[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_109206 === 1) {
                              var inst_109147 = communications.intercomMeta.knownPeersChannels;
                              var inst_109148 = cljs.core.seq.call(null, inst_109147);
                              var inst_109149 = inst_109148;
                              var inst_109150 = null;
                              var inst_109151 = 0;
                              var inst_109152 = 0;
                              var state_109205__$1 = function() {
                                var statearr_109218 = state_109205;
                                statearr_109218[5] = inst_109150;
                                statearr_109218[6] = inst_109151;
                                statearr_109218[7] = inst_109152;
                                statearr_109218[8] = inst_109149;
                                return statearr_109218;
                              }();
                              var statearr_109219_109245 = state_109205__$1;
                              statearr_109219_109245[2] = null;
                              statearr_109219_109245[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_109206 === 4) {
                                var inst_109150 = state_109205[5];
                                var inst_109152 = state_109205[7];
                                var inst_109157 = cljs.core._nth.call(null, inst_109150, inst_109152);
                                var inst_109158 = "broadsacting new block to peer " + inst_109157;
                                var inst_109159 = inst_109158 + " ";
                                var inst_109160 = logger.og.call(null, new cljs.core.Keyword(null, "broadcast", "broadcast", 1770276872), inst_109159, communications.blockk);
                                var inst_109161 = [];
                                var inst_109162 = communications.vectoR = inst_109161;
                                var inst_109163 = communications.vectoR.push(communications.blockk);
                                var inst_109166 = {"type":"peerdata", "data":message};
                                var state_109205__$1 = function() {
                                  var statearr_109220 = state_109205;
                                  statearr_109220[10] = inst_109163;
                                  statearr_109220[11] = inst_109160;
                                  statearr_109220[12] = inst_109162;
                                  return statearr_109220;
                                }();
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109205__$1, 7, inst_109157, inst_109166);
                              } else {
                                if (state_val_109206 === 13) {
                                  var inst_109196 = state_109205[2];
                                  var state_109205__$1 = state_109205;
                                  var statearr_109221_109246 = state_109205__$1;
                                  statearr_109221_109246[2] = inst_109196;
                                  statearr_109221_109246[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_109206 === 6) {
                                    var inst_109201 = state_109205[2];
                                    var state_109205__$1 = state_109205;
                                    var statearr_109222_109247 = state_109205__$1;
                                    statearr_109222_109247[2] = inst_109201;
                                    statearr_109222_109247[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_109206 === 3) {
                                      var inst_109203 = state_109205[2];
                                      var state_109205__$1 = state_109205;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109205__$1, inst_109203);
                                    } else {
                                      if (state_val_109206 === 12) {
                                        var inst_109172 = state_109205[13];
                                        var inst_109181 = cljs.core.first.call(null, inst_109172);
                                        var inst_109182 = "broadsacting new block to peer " + inst_109181;
                                        var inst_109183 = inst_109182 + " ";
                                        var inst_109184 = logger.og.call(null, new cljs.core.Keyword(null, "broadcast", "broadcast", 1770276872), inst_109183, communications.blockk);
                                        var inst_109185 = [];
                                        var inst_109186 = communications.vectoR = inst_109185;
                                        var inst_109187 = communications.vectoR.push(communications.blockk);
                                        var inst_109190 = {"type":"peerdata", "data":message};
                                        var state_109205__$1 = function() {
                                          var statearr_109223 = state_109205;
                                          statearr_109223[14] = inst_109186;
                                          statearr_109223[15] = inst_109187;
                                          statearr_109223[16] = inst_109184;
                                          return statearr_109223;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109205__$1, 14, inst_109181, inst_109190);
                                      } else {
                                        if (state_val_109206 === 2) {
                                          var inst_109151 = state_109205[6];
                                          var inst_109152 = state_109205[7];
                                          var inst_109154 = inst_109152 < inst_109151;
                                          var inst_109155 = inst_109154;
                                          var state_109205__$1 = state_109205;
                                          if (cljs.core.truth_(inst_109155)) {
                                            var statearr_109224_109248 = state_109205__$1;
                                            statearr_109224_109248[1] = 4;
                                          } else {
                                            var statearr_109225_109249 = state_109205__$1;
                                            statearr_109225_109249[1] = 5;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_109206 === 11) {
                                            var inst_109172 = state_109205[13];
                                            var inst_109176 = cljs.core.chunk_first.call(null, inst_109172);
                                            var inst_109177 = cljs.core.chunk_rest.call(null, inst_109172);
                                            var inst_109178 = cljs.core.count.call(null, inst_109176);
                                            var inst_109149 = inst_109177;
                                            var inst_109150 = inst_109176;
                                            var inst_109151 = inst_109178;
                                            var inst_109152 = 0;
                                            var state_109205__$1 = function() {
                                              var statearr_109226 = state_109205;
                                              statearr_109226[5] = inst_109150;
                                              statearr_109226[6] = inst_109151;
                                              statearr_109226[7] = inst_109152;
                                              statearr_109226[8] = inst_109149;
                                              return statearr_109226;
                                            }();
                                            var statearr_109227_109250 = state_109205__$1;
                                            statearr_109227_109250[2] = null;
                                            statearr_109227_109250[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_109206 === 9) {
                                              var state_109205__$1 = state_109205;
                                              var statearr_109228_109251 = state_109205__$1;
                                              statearr_109228_109251[2] = null;
                                              statearr_109228_109251[1] = 10;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_109206 === 5) {
                                                var inst_109172 = state_109205[13];
                                                var inst_109149 = state_109205[8];
                                                var inst_109172__$1 = cljs.core.seq.call(null, inst_109149);
                                                var state_109205__$1 = function() {
                                                  var statearr_109229 = state_109205;
                                                  statearr_109229[13] = inst_109172__$1;
                                                  return statearr_109229;
                                                }();
                                                if (inst_109172__$1) {
                                                  var statearr_109230_109252 = state_109205__$1;
                                                  statearr_109230_109252[1] = 8;
                                                } else {
                                                  var statearr_109231_109253 = state_109205__$1;
                                                  statearr_109231_109253[1] = 9;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_109206 === 14) {
                                                  var inst_109172 = state_109205[13];
                                                  var inst_109192 = state_109205[2];
                                                  var inst_109193 = cljs.core.next.call(null, inst_109172);
                                                  var inst_109149 = inst_109193;
                                                  var inst_109150 = null;
                                                  var inst_109151 = 0;
                                                  var inst_109152 = 0;
                                                  var state_109205__$1 = function() {
                                                    var statearr_109232 = state_109205;
                                                    statearr_109232[5] = inst_109150;
                                                    statearr_109232[6] = inst_109151;
                                                    statearr_109232[7] = inst_109152;
                                                    statearr_109232[8] = inst_109149;
                                                    statearr_109232[17] = inst_109192;
                                                    return statearr_109232;
                                                  }();
                                                  var statearr_109233_109254 = state_109205__$1;
                                                  statearr_109233_109254[2] = null;
                                                  statearr_109233_109254[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_109206 === 10) {
                                                    var inst_109199 = state_109205[2];
                                                    var state_109205__$1 = state_109205;
                                                    var statearr_109234_109255 = state_109205__$1;
                                                    statearr_109234_109255[2] = inst_109199;
                                                    statearr_109234_109255[1] = 6;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_109206 === 8) {
                                                      var inst_109172 = state_109205[13];
                                                      var inst_109174 = cljs.core.chunked_seq_QMARK_.call(null, inst_109172);
                                                      var state_109205__$1 = state_109205;
                                                      if (inst_109174) {
                                                        var statearr_109235_109256 = state_109205__$1;
                                                        statearr_109235_109256[1] = 11;
                                                      } else {
                                                        var statearr_109236_109257 = state_109205__$1;
                                                        statearr_109236_109257[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        };
                      }(c__6620__auto____$1, inst_109139, inst_109140, inst_109141, inst_109142, inst_109210, state_val_109215, c__6620__auto__);
                      return function(switch__6576__auto__, c__6620__auto____$1, inst_109139, inst_109140, inst_109141, inst_109142, inst_109210, state_val_109215, c__6620__auto__) {
                        return function() {
                          var state_machine__6577__auto__ = null;
                          var state_machine__6577__auto____0 = function() {
                            var statearr_109238 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                            statearr_109238[0] = state_machine__6577__auto__;
                            statearr_109238[1] = 1;
                            return statearr_109238;
                          };
                          var state_machine__6577__auto____1 = function(state_109205) {
                            while (true) {
                              var result__6578__auto__ = switch__6576__auto__.call(null, state_109205);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6578__auto__;
                              }
                              break;
                            }
                          };
                          state_machine__6577__auto__ = function(state_109205) {
                            switch(arguments.length) {
                              case 0:
                                return state_machine__6577__auto____0.call(this);
                              case 1:
                                return state_machine__6577__auto____1.call(this, state_109205);
                            }
                            throw new Error("Invalid arity: " + arguments.length);
                          };
                          state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
                          state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
                          return state_machine__6577__auto__;
                        }();
                      }(switch__6576__auto__, c__6620__auto____$1, inst_109139, inst_109140, inst_109141, inst_109142, inst_109210, state_val_109215, c__6620__auto__);
                    }();
                    var state__6622__auto__ = function() {
                      var statearr_109239 = f__6621__auto__.call(null);
                      statearr_109239[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto____$1;
                      return statearr_109239;
                    }();
                    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
                  };
                }(c__6620__auto____$1, inst_109139, inst_109140, inst_109141, inst_109142, inst_109210, state_val_109215, c__6620__auto__);
              }();
              var inst_109212 = cljs.core.async.impl.dispatch.run.call(null, inst_109211);
              var state_109214__$1 = function() {
                var statearr_109240 = state_109214;
                statearr_109240[5] = inst_109140;
                statearr_109240[6] = inst_109139;
                statearr_109240[7] = inst_109142;
                statearr_109240[8] = inst_109212;
                return statearr_109240;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109214__$1, inst_109210);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109242 = [null, null, null, null, null, null, null, null, null];
              statearr_109242[0] = state_machine__6577__auto__;
              statearr_109242[1] = 1;
              return statearr_109242;
            };
            var state_machine__6577__auto____1 = function(state_109214) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109214);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109214) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109214);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109243 = f__6621__auto__.call(null);
        statearr_109243[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109243;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.initial = function initial() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109312) {
            var state_val_109313 = state_109312[1];
            if (state_val_109313 === 5) {
              var inst_109306 = state_109312[2];
              var inst_109307 = pubsub.initpubsub.call(null);
              var inst_109308 = comm.setupComm.call(null);
              var inst_109309 = comm.startP2PCommLoop.call(null);
              var inst_109310 = ht.run.call(null, "Taras Bulba", "zaparozie r0x", "i4c32d4308e1fe.jpg", "- zaparozie");
              var state_109312__$1 = function() {
                var statearr_109314 = state_109312;
                statearr_109314[5] = inst_109309;
                statearr_109314[6] = inst_109308;
                statearr_109314[7] = inst_109306;
                statearr_109314[8] = inst_109307;
                return statearr_109314;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109312__$1, inst_109310);
            } else {
              if (state_val_109313 === 4) {
                var state_109312__$1 = state_109312;
                var statearr_109315_109324 = state_109312__$1;
                statearr_109315_109324[2] = null;
                statearr_109315_109324[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_109313 === 3) {
                  var inst_109297 = console.log(communications.id);
                  var inst_109298 = $("#id");
                  var inst_109299 = inst_109298.val(communications.id);
                  var inst_109300 = new Peer(communications.id, communications.peerParams);
                  var inst_109301 = communications.peerjs = inst_109300;
                  var inst_109302 = communications.init.call(null, communications.peerjs);
                  var inst_109303 = communications.peerjs.on("connection", comm.onConnection);
                  var state_109312__$1 = function() {
                    var statearr_109316 = state_109312;
                    statearr_109316[9] = inst_109297;
                    statearr_109316[10] = inst_109302;
                    statearr_109316[11] = inst_109301;
                    statearr_109316[12] = inst_109299;
                    return statearr_109316;
                  }();
                  var statearr_109317_109325 = state_109312__$1;
                  statearr_109317_109325[2] = inst_109303;
                  statearr_109317_109325[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_109313 === 2) {
                    var inst_109293 = state_109312[2];
                    var inst_109294 = communications.id = inst_109293;
                    var inst_109295 = logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", communications.id);
                    var state_109312__$1 = function() {
                      var statearr_109318 = state_109312;
                      statearr_109318[13] = inst_109295;
                      statearr_109318[14] = inst_109294;
                      return statearr_109318;
                    }();
                    if (cljs.core.truth_(communications.id)) {
                      var statearr_109319_109326 = state_109312__$1;
                      statearr_109319_109326[1] = 3;
                    } else {
                      var statearr_109320_109327 = state_109312__$1;
                      statearr_109320_109327[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_109313 === 1) {
                      var inst_109291 = communications.g.call(null, "lid");
                      var state_109312__$1 = state_109312;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109312__$1, 2, inst_109291);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109322 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_109322[0] = state_machine__6577__auto__;
              statearr_109322[1] = 1;
              return statearr_109322;
            };
            var state_machine__6577__auto____1 = function(state_109312) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109312);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109312) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109312);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109323 = f__6621__auto__.call(null);
        statearr_109323[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109323;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.bootstrapInternetDriverLayer = function bootstrapInternetDriverLayer() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109380) {
            var state_val_109381 = state_109380[1];
            if (state_val_109381 === 6) {
              var inst_109375 = state_109380[2];
              var state_109380__$1 = state_109380;
              var statearr_109382_109392 = state_109380__$1;
              statearr_109382_109392[2] = inst_109375;
              statearr_109382_109392[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_109381 === 5) {
                var inst_109377 = state_109380[2];
                var inst_109378 = comm.startP2PCommLoop.call(null);
                var state_109380__$1 = function() {
                  var statearr_109383 = state_109380;
                  statearr_109383[5] = inst_109377;
                  return statearr_109383;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109380__$1, inst_109378);
              } else {
                if (state_val_109381 === 4) {
                  var inst_109373 = pubsub.sia.call(null, "initdb", communications.initDBase);
                  var state_109380__$1 = state_109380;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109380__$1, 6, inst_109373);
                } else {
                  if (state_val_109381 === 3) {
                    var inst_109366 = console.log(communications.id);
                    var inst_109367 = $("#id");
                    var inst_109368 = inst_109367.val(communications.id);
                    var inst_109369 = new Peer(communications.id, communications.peerParams);
                    var inst_109370 = communications.peerjs = inst_109369;
                    var inst_109371 = communications.peerjs.on("connection", comm.onConnection);
                    var state_109380__$1 = function() {
                      var statearr_109384 = state_109380;
                      statearr_109384[6] = inst_109368;
                      statearr_109384[7] = inst_109366;
                      statearr_109384[8] = inst_109370;
                      return statearr_109384;
                    }();
                    var statearr_109385_109393 = state_109380__$1;
                    statearr_109385_109393[2] = inst_109371;
                    statearr_109385_109393[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_109381 === 2) {
                      var inst_109362 = state_109380[2];
                      var inst_109363 = communications.id = inst_109362;
                      var inst_109364 = logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", communications.id);
                      var state_109380__$1 = function() {
                        var statearr_109386 = state_109380;
                        statearr_109386[9] = inst_109363;
                        statearr_109386[10] = inst_109364;
                        return statearr_109386;
                      }();
                      if (cljs.core.truth_(communications.id)) {
                        var statearr_109387_109394 = state_109380__$1;
                        statearr_109387_109394[1] = 3;
                      } else {
                        var statearr_109388_109395 = state_109380__$1;
                        statearr_109388_109395[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_109381 === 1) {
                        var inst_109360 = pubsub.sia.call(null, "lid");
                        var state_109380__$1 = state_109380;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109380__$1, 2, inst_109360);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109390 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_109390[0] = state_machine__6577__auto__;
              statearr_109390[1] = 1;
              return statearr_109390;
            };
            var state_machine__6577__auto____1 = function(state_109380) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109380);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109380) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109380);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109391 = f__6621__auto__.call(null);
        statearr_109391[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109391;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.connectionch = cljs.core.async.chan.call(null);
communications.broadcastNewBlock = function broadcastNewBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block", blockk);
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block to ", communications.intercomMeta.knownPeersChannels);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109541) {
            var state_val_109542 = state_109541[1];
            if (state_val_109542 === 7) {
              var inst_109491 = state_109541[5];
              var inst_109489 = state_109541[6];
              var inst_109492 = state_109541[7];
              var inst_109490 = state_109541[8];
              var inst_109506 = state_109541[2];
              var inst_109507 = inst_109492 + 1;
              var tmp109543 = inst_109491;
              var tmp109544 = inst_109489;
              var tmp109545 = inst_109490;
              var inst_109489__$1 = tmp109544;
              var inst_109490__$1 = tmp109545;
              var inst_109491__$1 = tmp109543;
              var inst_109492__$1 = inst_109507;
              var state_109541__$1 = function() {
                var statearr_109546 = state_109541;
                statearr_109546[5] = inst_109491__$1;
                statearr_109546[6] = inst_109489__$1;
                statearr_109546[7] = inst_109492__$1;
                statearr_109546[8] = inst_109490__$1;
                statearr_109546[9] = inst_109506;
                return statearr_109546;
              }();
              var statearr_109547_109570 = state_109541__$1;
              statearr_109547_109570[2] = null;
              statearr_109547_109570[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_109542 === 1) {
                var inst_109487 = communications.intercomMeta.knownPeersChannels;
                var inst_109488 = cljs.core.seq.call(null, inst_109487);
                var inst_109489 = inst_109488;
                var inst_109490 = null;
                var inst_109491 = 0;
                var inst_109492 = 0;
                var state_109541__$1 = function() {
                  var statearr_109548 = state_109541;
                  statearr_109548[5] = inst_109491;
                  statearr_109548[6] = inst_109489;
                  statearr_109548[7] = inst_109492;
                  statearr_109548[8] = inst_109490;
                  return statearr_109548;
                }();
                var statearr_109549_109571 = state_109541__$1;
                statearr_109549_109571[2] = null;
                statearr_109549_109571[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_109542 === 4) {
                  var inst_109492 = state_109541[7];
                  var inst_109490 = state_109541[8];
                  var inst_109497 = cljs.core._nth.call(null, inst_109490, inst_109492);
                  var inst_109498 = "broadsacting new block to peer " + inst_109497;
                  var inst_109499 = inst_109498 + " ";
                  var inst_109500 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_109499, blockk);
                  var inst_109501 = [];
                  var inst_109502 = communications.vectoR = inst_109501;
                  var inst_109503 = communications.vectoR.push(blockk);
                  var inst_109504 = im.makeInv.call(null, "block", communications.vectoR);
                  var state_109541__$1 = function() {
                    var statearr_109550 = state_109541;
                    statearr_109550[10] = inst_109500;
                    statearr_109550[11] = inst_109502;
                    statearr_109550[12] = inst_109503;
                    return statearr_109550;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109541__$1, 7, inst_109497, inst_109504);
                } else {
                  if (state_val_109542 === 13) {
                    var inst_109532 = state_109541[2];
                    var state_109541__$1 = state_109541;
                    var statearr_109551_109572 = state_109541__$1;
                    statearr_109551_109572[2] = inst_109532;
                    statearr_109551_109572[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_109542 === 6) {
                      var inst_109537 = state_109541[2];
                      var state_109541__$1 = state_109541;
                      var statearr_109552_109573 = state_109541__$1;
                      statearr_109552_109573[2] = inst_109537;
                      statearr_109552_109573[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_109542 === 3) {
                        var inst_109539 = state_109541[2];
                        var state_109541__$1 = state_109541;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109541__$1, inst_109539);
                      } else {
                        if (state_val_109542 === 12) {
                          var inst_109510 = state_109541[13];
                          var inst_109519 = cljs.core.first.call(null, inst_109510);
                          var inst_109520 = "broadsacting new block to peer " + inst_109519;
                          var inst_109521 = inst_109520 + " ";
                          var inst_109522 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_109521, blockk);
                          var inst_109523 = [];
                          var inst_109524 = communications.vectoR = inst_109523;
                          var inst_109525 = communications.vectoR.push(blockk);
                          var inst_109526 = im.makeInv.call(null, "block", communications.vectoR);
                          var state_109541__$1 = function() {
                            var statearr_109553 = state_109541;
                            statearr_109553[14] = inst_109525;
                            statearr_109553[15] = inst_109524;
                            statearr_109553[16] = inst_109522;
                            return statearr_109553;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109541__$1, 14, inst_109519, inst_109526);
                        } else {
                          if (state_val_109542 === 2) {
                            var inst_109491 = state_109541[5];
                            var inst_109492 = state_109541[7];
                            var inst_109494 = inst_109492 < inst_109491;
                            var inst_109495 = inst_109494;
                            var state_109541__$1 = state_109541;
                            if (cljs.core.truth_(inst_109495)) {
                              var statearr_109554_109574 = state_109541__$1;
                              statearr_109554_109574[1] = 4;
                            } else {
                              var statearr_109555_109575 = state_109541__$1;
                              statearr_109555_109575[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_109542 === 11) {
                              var inst_109510 = state_109541[13];
                              var inst_109514 = cljs.core.chunk_first.call(null, inst_109510);
                              var inst_109515 = cljs.core.chunk_rest.call(null, inst_109510);
                              var inst_109516 = cljs.core.count.call(null, inst_109514);
                              var inst_109489 = inst_109515;
                              var inst_109490 = inst_109514;
                              var inst_109491 = inst_109516;
                              var inst_109492 = 0;
                              var state_109541__$1 = function() {
                                var statearr_109556 = state_109541;
                                statearr_109556[5] = inst_109491;
                                statearr_109556[6] = inst_109489;
                                statearr_109556[7] = inst_109492;
                                statearr_109556[8] = inst_109490;
                                return statearr_109556;
                              }();
                              var statearr_109557_109576 = state_109541__$1;
                              statearr_109557_109576[2] = null;
                              statearr_109557_109576[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_109542 === 9) {
                                var state_109541__$1 = state_109541;
                                var statearr_109558_109577 = state_109541__$1;
                                statearr_109558_109577[2] = null;
                                statearr_109558_109577[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_109542 === 5) {
                                  var inst_109489 = state_109541[6];
                                  var inst_109510 = state_109541[13];
                                  var inst_109510__$1 = cljs.core.seq.call(null, inst_109489);
                                  var state_109541__$1 = function() {
                                    var statearr_109559 = state_109541;
                                    statearr_109559[13] = inst_109510__$1;
                                    return statearr_109559;
                                  }();
                                  if (inst_109510__$1) {
                                    var statearr_109560_109578 = state_109541__$1;
                                    statearr_109560_109578[1] = 8;
                                  } else {
                                    var statearr_109561_109579 = state_109541__$1;
                                    statearr_109561_109579[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_109542 === 14) {
                                    var inst_109510 = state_109541[13];
                                    var inst_109528 = state_109541[2];
                                    var inst_109529 = cljs.core.next.call(null, inst_109510);
                                    var inst_109489 = inst_109529;
                                    var inst_109490 = null;
                                    var inst_109491 = 0;
                                    var inst_109492 = 0;
                                    var state_109541__$1 = function() {
                                      var statearr_109562 = state_109541;
                                      statearr_109562[5] = inst_109491;
                                      statearr_109562[6] = inst_109489;
                                      statearr_109562[7] = inst_109492;
                                      statearr_109562[8] = inst_109490;
                                      statearr_109562[17] = inst_109528;
                                      return statearr_109562;
                                    }();
                                    var statearr_109563_109580 = state_109541__$1;
                                    statearr_109563_109580[2] = null;
                                    statearr_109563_109580[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_109542 === 10) {
                                      var inst_109535 = state_109541[2];
                                      var state_109541__$1 = state_109541;
                                      var statearr_109564_109581 = state_109541__$1;
                                      statearr_109564_109581[2] = inst_109535;
                                      statearr_109564_109581[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_109542 === 8) {
                                        var inst_109510 = state_109541[13];
                                        var inst_109512 = cljs.core.chunked_seq_QMARK_.call(null, inst_109510);
                                        var state_109541__$1 = state_109541;
                                        if (inst_109512) {
                                          var statearr_109565_109582 = state_109541__$1;
                                          statearr_109565_109582[1] = 11;
                                        } else {
                                          var statearr_109566_109583 = state_109541__$1;
                                          statearr_109566_109583[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109568 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_109568[0] = state_machine__6577__auto__;
              statearr_109568[1] = 1;
              return statearr_109568;
            };
            var state_machine__6577__auto____1 = function(state_109541) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109541);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109541) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109541);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109569 = f__6621__auto__.call(null);
        statearr_109569[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109569;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.sendmsg = function sendmsg(peer, type, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "sending " + type, msg);
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "peer ", peer);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109601) {
            var state_val_109602 = state_109601[1];
            if (state_val_109602 === 2) {
              var inst_109599 = state_109601[2];
              var state_109601__$1 = state_109601;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109601__$1, inst_109599);
            } else {
              if (state_val_109602 === 1) {
                var inst_109597 = {"type":type, "msg":msg};
                var state_109601__$1 = state_109601;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109601__$1, 2, peer, inst_109597);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109604 = [null, null, null, null, null];
              statearr_109604[0] = state_machine__6577__auto__;
              statearr_109604[1] = 1;
              return statearr_109604;
            };
            var state_machine__6577__auto____1 = function(state_109601) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109601);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109601) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109601);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109605 = f__6621__auto__.call(null);
        statearr_109605[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109605;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onOpen = function onOpen(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection opened trying to send data trough");
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), conn);
  conn.connType = "saltan";
  var c__6620__auto___109622 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___109622) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto___109622) {
          return function(state_109617) {
            var state_val_109618 = state_109617[1];
            if (state_val_109618 === 2) {
              var inst_109615 = state_109617[2];
              var state_109617__$1 = state_109617;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109617__$1, inst_109615);
            } else {
              if (state_val_109618 === 1) {
                var state_109617__$1 = state_109617;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109617__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto___109622);
        return function(switch__6576__auto__, c__6620__auto___109622) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109620 = [null, null, null, null, null];
              statearr_109620[0] = state_machine__6577__auto__;
              statearr_109620[1] = 1;
              return statearr_109620;
            };
            var state_machine__6577__auto____1 = function(state_109617) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109617);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109617) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109617);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto___109622);
      }();
      var state__6622__auto__ = function() {
        var statearr_109621 = f__6621__auto__.call(null);
        statearr_109621[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___109622;
        return statearr_109621;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto___109622));
  return logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "conn: ", conn);
};
communications.onConnection = function onConnection(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection is opened now try to send something");
  conn.connType = "tsaritsa";
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109634) {
            var state_val_109635 = state_109634[1];
            if (state_val_109635 === 2) {
              var inst_109632 = state_109634[2];
              var state_109634__$1 = state_109634;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109634__$1, inst_109632);
            } else {
              if (state_val_109635 === 1) {
                var state_109634__$1 = state_109634;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109634__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109637 = [null, null, null, null, null];
              statearr_109637[0] = state_machine__6577__auto__;
              statearr_109637[1] = 1;
              return statearr_109637;
            };
            var state_machine__6577__auto____1 = function(state_109634) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109634);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109634) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109634);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109638 = f__6621__auto__.call(null);
        statearr_109638[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109638;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onData = function onData(read, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "data recieved", data);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109650) {
            var state_val_109651 = state_109650[1];
            if (state_val_109651 === 2) {
              var inst_109648 = state_109650[2];
              var state_109650__$1 = state_109650;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109650__$1, inst_109648);
            } else {
              if (state_val_109651 === 1) {
                var state_109650__$1 = state_109650;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_109650__$1, 2, read, data);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109653 = [null, null, null, null, null];
              statearr_109653[0] = state_machine__6577__auto__;
              statearr_109653[1] = 1;
              return statearr_109653;
            };
            var state_machine__6577__auto____1 = function(state_109650) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109650);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109650) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109650);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109654 = f__6621__auto__.call(null);
        statearr_109654[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109654;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.startP2PCommLoop = function startP2PCommLoop() {
  communications.stated = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.connectionch], null);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109824) {
            var state_val_109825 = state_109824[1];
            if (state_val_109825 === 7) {
              var inst_109819 = state_109824[2];
              var state_109824__$1 = function() {
                var statearr_109826 = state_109824;
                statearr_109826[5] = inst_109819;
                return statearr_109826;
              }();
              var statearr_109827_109855 = state_109824__$1;
              statearr_109827_109855[2] = null;
              statearr_109827_109855[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_109825 === 1) {
                var state_109824__$1 = state_109824;
                var statearr_109828_109856 = state_109824__$1;
                statearr_109828_109856[2] = null;
                statearr_109828_109856[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_109825 === 4) {
                  var inst_109759 = state_109824[2];
                  var inst_109760 = communications.v = inst_109759;
                  var inst_109761 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got from state", communications.v);
                  var inst_109762 = cljs.core.nth.call(null, communications.v, 0);
                  var inst_109763 = communications.vrecieved = inst_109762;
                  var inst_109764 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_109765 = communications.ch2 = inst_109764;
                  var inst_109766 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_109767 = inst_109766 === communications.connectionch;
                  var state_109824__$1 = function() {
                    var statearr_109829 = state_109824;
                    statearr_109829[6] = inst_109765;
                    statearr_109829[7] = inst_109763;
                    statearr_109829[8] = inst_109760;
                    statearr_109829[9] = inst_109761;
                    return statearr_109829;
                  }();
                  if (cljs.core.truth_(inst_109767)) {
                    var statearr_109830_109857 = state_109824__$1;
                    statearr_109830_109857[1] = 5;
                  } else {
                    var statearr_109831_109858 = state_109824__$1;
                    statearr_109831_109858[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_109825 === 15) {
                    var inst_109797 = state_109824[2];
                    var inst_109798 = communications.ch2.writec;
                    var inst_109799 = communications.vrecieved.peer = inst_109798;
                    var inst_109800 = communications.ch2.conn;
                    var inst_109801 = pubsub.sia.call(null, "intercomstatemachine", inst_109800, communications.vrecieved);
                    var state_109824__$1 = function() {
                      var statearr_109832 = state_109824;
                      statearr_109832[10] = inst_109799;
                      statearr_109832[11] = inst_109797;
                      return statearr_109832;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109824__$1, 16, inst_109801);
                  } else {
                    if (state_val_109825 === 13) {
                      var inst_109792 = communications.vrecieved.data;
                      var inst_109793 = JSON.parse(inst_109792);
                      var inst_109794 = communications.vrecieved = inst_109793;
                      var state_109824__$1 = state_109824;
                      var statearr_109833_109859 = state_109824__$1;
                      statearr_109833_109859[2] = inst_109794;
                      statearr_109833_109859[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_109825 === 6) {
                        var inst_109785 = communications.ch2.type;
                        var inst_109786 = inst_109785 === "readch";
                        var state_109824__$1 = state_109824;
                        if (cljs.core.truth_(inst_109786)) {
                          var statearr_109834_109860 = state_109824__$1;
                          statearr_109834_109860[1] = 10;
                        } else {
                          var statearr_109835_109861 = state_109824__$1;
                          statearr_109835_109861[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_109825 === 17) {
                          var inst_109808 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "sending to peer ", communications.vrecieved);
                          var inst_109809 = communications.ch2.conn;
                          var inst_109810 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "connection being sent to ", inst_109809);
                          var inst_109811 = communications.ch2.conn;
                          var inst_109812 = inst_109811.send(communications.vrecieved);
                          var state_109824__$1 = function() {
                            var statearr_109836 = state_109824;
                            statearr_109836[12] = inst_109810;
                            statearr_109836[13] = inst_109808;
                            return statearr_109836;
                          }();
                          var statearr_109837_109862 = state_109824__$1;
                          statearr_109837_109862[2] = inst_109812;
                          statearr_109837_109862[1] = 19;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_109825 === 3) {
                            var inst_109822 = state_109824[2];
                            var state_109824__$1 = state_109824;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109824__$1, inst_109822);
                          } else {
                            if (state_val_109825 === 12) {
                              var inst_109817 = state_109824[2];
                              var state_109824__$1 = state_109824;
                              var statearr_109838_109863 = state_109824__$1;
                              statearr_109838_109863[2] = inst_109817;
                              statearr_109838_109863[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_109825 === 2) {
                                var inst_109756 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "new iteration with state");
                                var inst_109757 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "state ", communications.stated);
                                var state_109824__$1 = function() {
                                  var statearr_109839 = state_109824;
                                  statearr_109839[14] = inst_109757;
                                  statearr_109839[15] = inst_109756;
                                  return statearr_109839;
                                }();
                                return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_109824__$1, 4, communications.stated);
                              } else {
                                if (state_val_109825 === 19) {
                                  var inst_109815 = state_109824[2];
                                  var state_109824__$1 = state_109824;
                                  var statearr_109840_109864 = state_109824__$1;
                                  statearr_109840_109864[2] = inst_109815;
                                  statearr_109840_109864[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_109825 === 11) {
                                    var inst_109805 = communications.ch2.type;
                                    var inst_109806 = inst_109805 === "writech";
                                    var state_109824__$1 = state_109824;
                                    if (cljs.core.truth_(inst_109806)) {
                                      var statearr_109841_109865 = state_109824__$1;
                                      statearr_109841_109865[1] = 17;
                                    } else {
                                      var statearr_109842_109866 = state_109824__$1;
                                      statearr_109842_109866[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_109825 === 9) {
                                      var inst_109783 = state_109824[2];
                                      var state_109824__$1 = state_109824;
                                      var statearr_109843_109867 = state_109824__$1;
                                      statearr_109843_109867[2] = inst_109783;
                                      statearr_109843_109867[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_109825 === 5) {
                                        var inst_109769 = cljs.core.PersistentVector.EMPTY;
                                        var inst_109770 = communications.onNewConnection.call(null, communications.vrecieved);
                                        var state_109824__$1 = function() {
                                          var statearr_109844 = state_109824;
                                          statearr_109844[16] = inst_109769;
                                          return statearr_109844;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109824__$1, 8, inst_109770);
                                      } else {
                                        if (state_val_109825 === 14) {
                                          var state_109824__$1 = state_109824;
                                          var statearr_109845_109868 = state_109824__$1;
                                          statearr_109845_109868[2] = null;
                                          statearr_109845_109868[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_109825 === 16) {
                                            var inst_109803 = state_109824[2];
                                            var state_109824__$1 = state_109824;
                                            var statearr_109846_109869 = state_109824__$1;
                                            statearr_109846_109869[2] = inst_109803;
                                            statearr_109846_109869[1] = 12;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_109825 === 10) {
                                              var inst_109788 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "recieved from peer ", communications.vrecieved);
                                              var inst_109789 = communications.vrecieved.type;
                                              var inst_109790 = inst_109789 === "json";
                                              var state_109824__$1 = function() {
                                                var statearr_109847 = state_109824;
                                                statearr_109847[17] = inst_109788;
                                                return statearr_109847;
                                              }();
                                              if (cljs.core.truth_(inst_109790)) {
                                                var statearr_109848_109870 = state_109824__$1;
                                                statearr_109848_109870[1] = 13;
                                              } else {
                                                var statearr_109849_109871 = state_109824__$1;
                                                statearr_109849_109871[1] = 14;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_109825 === 18) {
                                                var state_109824__$1 = state_109824;
                                                var statearr_109850_109872 = state_109824__$1;
                                                statearr_109850_109872[2] = null;
                                                statearr_109850_109872[1] = 19;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_109825 === 8) {
                                                  var inst_109769 = state_109824[16];
                                                  var inst_109772 = state_109824[2];
                                                  var inst_109773 = cljs.core.concat.call(null, communications.stated, inst_109772);
                                                  var inst_109774 = cljs.core.into.call(null, inst_109769, inst_109773);
                                                  var inst_109775 = communications.stated = inst_109774;
                                                  var inst_109776 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got connection in p2ploop", communications.vrecieved);
                                                  var inst_109777 = pubsub.pub.call(null, "peer", communications.vrecieved);
                                                  var inst_109780 = {"type":"conn", "data":communications.vrecieved};
                                                  var inst_109781 = pubsub.sia.call(null, "intercomstatemachine", communications.vrecieved, inst_109780);
                                                  var state_109824__$1 = function() {
                                                    var statearr_109851 = state_109824;
                                                    statearr_109851[18] = inst_109777;
                                                    statearr_109851[19] = inst_109776;
                                                    statearr_109851[20] = inst_109775;
                                                    return statearr_109851;
                                                  }();
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109824__$1, 9, inst_109781);
                                                } else {
                                                  return null;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109853 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_109853[0] = state_machine__6577__auto__;
              statearr_109853[1] = 1;
              return statearr_109853;
            };
            var state_machine__6577__auto____1 = function(state_109824) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109824);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109824) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109824);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109854 = f__6621__auto__.call(null);
        statearr_109854[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109854;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.channelsFromConnection = function channelsFromConnection(conn) {
  communications.readc = cljs.core.async.chan.call(null, 10);
  communications.writec = cljs.core.async.chan.call(null, 10);
  communications.readc.writec = communications.writec;
  communications.readc.type = "readch";
  communications.writec.type = "writech";
  conn.writec = communications.writec;
  conn.readc = communications.readc;
  communications.readc.conn = conn;
  communications.writec.conn = conn;
  conn.on("data", cljs.core.partial.call(null, communications.onData, communications.readc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.readc, communications.writec], null);
};
communications.onNewConnection = function onNewConnection(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109924) {
            var state_val_109925 = state_109924[1];
            if (state_val_109925 === 2) {
              var inst_109905 = state_109924[2];
              var inst_109906 = logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "got new connection", message);
              var inst_109907 = communications.channelsFromConnection.call(null, message);
              var inst_109908 = communications.peerChannels = inst_109907;
              var inst_109909 = communications.intercomMeta.knownPeers;
              var inst_109910 = message.peer;
              var inst_109911 = cljs.core.conj.call(null, inst_109909, inst_109910);
              var inst_109912 = communications.intercomMeta.knownPeers = inst_109911;
              var inst_109913 = cljs.core.nth.call(null, communications.peerChannels, 1);
              var inst_109914 = logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "adding w channel to kpeers ", inst_109913);
              var inst_109915 = communications.intercomMeta.p2pchans;
              var inst_109916 = cljs.core.concat.call(null, inst_109915, communications.peerChannels);
              var inst_109917 = communications.intercomMeta.p2pchans = inst_109916;
              var inst_109918 = communications.intercomMeta.knownPeersChannels;
              var inst_109919 = cljs.core.nth.call(null, communications.peerChannels, 1);
              var inst_109920 = cljs.core.conj.call(null, inst_109918, inst_109919);
              var inst_109921 = communications.intercomMeta.knownPeersChannels = inst_109920;
              var inst_109922 = logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "new state");
              var state_109924__$1 = function() {
                var statearr_109926 = state_109924;
                statearr_109926[5] = inst_109921;
                statearr_109926[6] = inst_109914;
                statearr_109926[7] = inst_109906;
                statearr_109926[8] = inst_109905;
                statearr_109926[9] = inst_109912;
                statearr_109926[10] = inst_109917;
                statearr_109926[11] = inst_109922;
                statearr_109926[12] = inst_109908;
                return statearr_109926;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109924__$1, communications.peerChannels);
            } else {
              if (state_val_109925 === 1) {
                var inst_109902 = communications.gconn = message;
                var inst_109903 = pubsub.sia.call(null, "setIntercomState", message, "start");
                var state_109924__$1 = function() {
                  var statearr_109927 = state_109924;
                  statearr_109927[13] = inst_109902;
                  return statearr_109927;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109924__$1, 2, inst_109903);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109929 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_109929[0] = state_machine__6577__auto__;
              statearr_109929[1] = 1;
              return statearr_109929;
            };
            var state_machine__6577__auto____1 = function(state_109924) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109924);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109924) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109924);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109930 = f__6621__auto__.call(null);
        statearr_109930[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109930;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onBlockMined = function onBlockMined(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_109978) {
            var state_val_109979 = state_109978[1];
            if (state_val_109979 === 4) {
              var inst_109973 = state_109978[2];
              var inst_109974 = communications.gotFromHash = inst_109973;
              var inst_109975 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got from hash ", communications.gotFromHash);
              var inst_109976 = communications.broadcastNewBlock.call(null, communications.gotFromHash);
              var state_109978__$1 = function() {
                var statearr_109980 = state_109978;
                statearr_109980[5] = inst_109974;
                statearr_109980[6] = inst_109975;
                return statearr_109980;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_109978__$1, inst_109976);
            } else {
              if (state_val_109979 === 3) {
                var inst_109969 = state_109978[2];
                var inst_109970 = communications.blockk.hash;
                var inst_109971 = db.g.call(null, inst_109970);
                var state_109978__$1 = function() {
                  var statearr_109981 = state_109978;
                  statearr_109981[7] = inst_109969;
                  return statearr_109981;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109978__$1, 4, inst_109971);
              } else {
                if (state_val_109979 === 2) {
                  var inst_109962 = state_109978[2];
                  var inst_109963 = communications.blockk = inst_109962;
                  var inst_109964 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "just made new block ", communications.blockk);
                  var inst_109965 = communications.blockk.hash;
                  var inst_109966 = logger.og.call(null, new cljs.core.Keyword(null, "message", "message", -406056002), "hash to get ", inst_109965);
                  var inst_109967 = b.saveBlock.call(null, app.pouchDB.dbase, communications.blockk);
                  var state_109978__$1 = function() {
                    var statearr_109982 = state_109978;
                    statearr_109982[8] = inst_109966;
                    statearr_109982[9] = inst_109963;
                    statearr_109982[10] = inst_109964;
                    return statearr_109982;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109978__$1, 3, inst_109967);
                } else {
                  if (state_val_109979 === 1) {
                    var inst_109959 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "recieved from worker ", message);
                    var inst_109960 = b.makeBlock.call(null, message);
                    var state_109978__$1 = function() {
                      var statearr_109983 = state_109978;
                      statearr_109983[11] = inst_109959;
                      return statearr_109983;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_109978__$1, 2, inst_109960);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_109985 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_109985[0] = state_machine__6577__auto__;
              statearr_109985[1] = 1;
              return statearr_109985;
            };
            var state_machine__6577__auto____1 = function(state_109978) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_109978);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_109978) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_109978);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_109986 = f__6621__auto__.call(null);
        statearr_109986[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_109986;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onTransaction = function onTransaction(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onTransaction", "onTransaction", 1991881135), "recieved new transaction ", message);
  return communications.sha256.call(null, message);
};
communications.onCrypto = function onCrypto(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "recieved from crypto ", message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "mempoll \x3d ", b.memPool);
  b.addTransactionToMemPool.call(null, message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), message["type"]);
  if (message["type"] === "fmr") {
    logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "merkle root ", message);
    communications.mine.call(null, message["value"]);
  } else {
  }
  if (cljs.core.count.call(null, b.memPool) > 3) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_110007) {
              var state_val_110008 = state_110007[1];
              if (state_val_110008 === 2) {
                var inst_110002 = state_110007[2];
                var inst_110003 = communications.fmroot = inst_110002;
                var inst_110004 = logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "calculating hash of transactions %s", communications.fmroot);
                var inst_110005 = communications.mine.call(null, communications.fmroot);
                var state_110007__$1 = function() {
                  var statearr_110009 = state_110007;
                  statearr_110009[5] = inst_110004;
                  statearr_110009[6] = inst_110003;
                  return statearr_110009;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110007__$1, inst_110005);
              } else {
                if (state_val_110008 === 1) {
                  var inst_110000 = crypto.merkleRoot.call(null, b.memPool);
                  var state_110007__$1 = state_110007;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110007__$1, 2, inst_110000);
                } else {
                  return null;
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_110011 = [null, null, null, null, null, null, null];
                statearr_110011[0] = state_machine__6577__auto__;
                statearr_110011[1] = 1;
                return statearr_110011;
              };
              var state_machine__6577__auto____1 = function(state_110007) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_110007);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_110007) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_110007);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_110012 = f__6621__auto__.call(null);
          statearr_110012[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_110012;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  } else {
    return null;
  }
};
communications.setupComm = function setupComm() {
  communications.sub.call(null, "blockMined", communications.onBlockMined);
  communications.sub.call(null, "crypto", communications.onCrypto);
  communications.sub.call(null, "transaction", communications.onTransaction);
  return communications.sub.call(null, "newConnection", communications.onNewConnection);
};
goog.provide("app.main");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("communications");
cljs.core.enable_console_print_BANG_.call(null);
$(document).on("transaction", function(a1, a2) {
  return pubsub.pub.call(null, "transaction", a2);
});
app.main.connectTo = function connectTo(ev, id) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110028) {
            var state_val_110029 = state_110028[1];
            if (state_val_110029 === 2) {
              var inst_110026 = state_110028[2];
              var state_110028__$1 = state_110028;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110028__$1, inst_110026);
            } else {
              if (state_val_110029 === 1) {
                var inst_110024 = pubsub.sia.call(null, "connectTo", ev, id);
                var state_110028__$1 = state_110028;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110028__$1, 2, inst_110024);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110031 = [null, null, null, null, null];
              statearr_110031[0] = state_machine__6577__auto__;
              statearr_110031[1] = 1;
              return statearr_110031;
            };
            var state_machine__6577__auto____1 = function(state_110028) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110028);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110028) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110028);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110032 = f__6621__auto__.call(null);
        statearr_110032[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110032;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
$(document).on("connectTo", app.main.connectTo);
app.main.dumpdb = function dumpdb() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110046) {
            var state_val_110047 = state_110046[1];
            if (state_val_110047 === 2) {
              var inst_110044 = state_110046[2];
              var state_110046__$1 = state_110046;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110046__$1, inst_110044);
            } else {
              if (state_val_110047 === 1) {
                var inst_110042 = pubsub.sia.call(null, "dumpdb");
                var state_110046__$1 = state_110046;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110046__$1, 2, inst_110042);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110049 = [null, null, null, null, null];
              statearr_110049[0] = state_machine__6577__auto__;
              statearr_110049[1] = 1;
              return statearr_110049;
            };
            var state_machine__6577__auto____1 = function(state_110046) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110046);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110046) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110046);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110050 = f__6621__auto__.call(null);
        statearr_110050[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110050;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
$(document).on("dumpdb", app.main.dumpdb);
app.main.cleandb = function cleandb(x, y) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110064) {
            var state_val_110065 = state_110064[1];
            if (state_val_110065 === 2) {
              var inst_110062 = state_110064[2];
              var state_110064__$1 = state_110064;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110064__$1, inst_110062);
            } else {
              if (state_val_110065 === 1) {
                var inst_110060 = pubsub.sia.call(null, "cleandb");
                var state_110064__$1 = state_110064;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110064__$1, 2, inst_110060);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110067 = [null, null, null, null, null];
              statearr_110067[0] = state_machine__6577__auto__;
              statearr_110067[1] = 1;
              return statearr_110067;
            };
            var state_machine__6577__auto____1 = function(state_110064) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110064);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110064) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110064);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110068 = f__6621__auto__.call(null);
        statearr_110068[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110068;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
$(document).on("flushdb", app.main.cleandb);
$(document).on("setid", function(x, y) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110071) {
            var state_val_110072 = state_110071[1];
            if (state_val_110072 === 1) {
              var inst_110069 = pubsub.sia.call(null, "setID", x, y);
              var state_110071__$1 = state_110071;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110071__$1, inst_110069);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110074 = [null, null, null, null, null];
              statearr_110074[0] = state_machine__6577__auto__;
              statearr_110074[1] = 1;
              return statearr_110074;
            };
            var state_machine__6577__auto____1 = function(state_110071) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110071);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110071) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110071);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110075 = f__6621__auto__.call(null);
        statearr_110075[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110075;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
});
app.main.replScratchFunction = function replScratchFunction() {
  pubsub.si.call(null, "dumpdb");
  var c__6620__auto___110094 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___110094) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto___110094) {
          return function(state_110089) {
            var state_val_110090 = state_110089[1];
            if (state_val_110090 === 2) {
              var inst_110087 = state_110089[2];
              var state_110089__$1 = state_110089;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110089__$1, inst_110087);
            } else {
              if (state_val_110090 === 1) {
                var inst_110085 = pubsub.sia.call(null, "hash", "s");
                var state_110089__$1 = state_110089;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110089__$1, 2, inst_110085);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto___110094);
        return function(switch__6576__auto__, c__6620__auto___110094) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110092 = [null, null, null, null, null];
              statearr_110092[0] = state_machine__6577__auto__;
              statearr_110092[1] = 1;
              return statearr_110092;
            };
            var state_machine__6577__auto____1 = function(state_110089) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110089);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110089) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110089);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto___110094);
      }();
      var state__6622__auto__ = function() {
        var statearr_110093 = f__6621__auto__.call(null);
        statearr_110093[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___110094;
        return statearr_110093;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto___110094));
  app.main._LT__BANG_.call(null, pubsub.sia.call(null, "makeBlock", "wadsdsad"));
  app.main.dumpdb.call(null);
  return app.main.cleandb.call(null);
};
app.main.empty_string = "";
app.main.pri = function pri(x) {
  cljs.core.println.call(null, x);
  return 3;
};
app.main.entryy = function entryy() {
  window["messages"] = function() {
    var obj110123 = {};
    return obj110123;
  }();
  window["hook"] = function() {
    var obj110125 = {};
    return obj110125;
  }();
  window["preroutinghook"] = function() {
    var obj110127 = {};
    return obj110127;
  }();
  window["postroutinghook"] = function() {
    var obj110129 = {};
    return obj110129;
  }();
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110142) {
            var state_val_110143 = state_110142[1];
            if (state_val_110143 === 3) {
              var inst_110140 = state_110142[2];
              var state_110142__$1 = state_110142;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110142__$1, inst_110140);
            } else {
              if (state_val_110143 === 2) {
                var inst_110135 = state_110142[2];
                var inst_110136 = pubsub.initpubsub.call(null);
                var inst_110137 = communications.startP2PCommLoop.call(null);
                var inst_110138 = pubsub.sia.call(null, "ui", "html");
                var state_110142__$1 = function() {
                  var statearr_110144 = state_110142;
                  statearr_110144[5] = inst_110136;
                  statearr_110144[6] = inst_110137;
                  statearr_110144[7] = inst_110135;
                  return statearr_110144;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110142__$1, 3, inst_110138);
              } else {
                if (state_val_110143 === 1) {
                  var inst_110130 = $(document);
                  var inst_110131 = inst_110130.trigger("setid");
                  var inst_110132 = [];
                  var inst_110133 = pubsub.sia.call(null, "db", "connections", inst_110132);
                  var state_110142__$1 = function() {
                    var statearr_110145 = state_110142;
                    statearr_110145[8] = inst_110131;
                    return statearr_110145;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110142__$1, 2, inst_110133);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110147 = [null, null, null, null, null, null, null, null, null];
              statearr_110147[0] = state_machine__6577__auto__;
              statearr_110147[1] = 1;
              return statearr_110147;
            };
            var state_machine__6577__auto____1 = function(state_110142) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110142);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110142) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110142);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110148 = f__6621__auto__.call(null);
        statearr_110148[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110148;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
window.onload = app.main.entryy;
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("pouchDB");
goog.require("cljs.core");
pouchDB.flushdb = cljs.core.PersistentVector.EMPTY;
pouchDB.dumpdb = cljs.core.PersistentVector.EMPTY;
pouchDB.dbase = function() {
  var obj124640 = {};
  return obj124640;
}();
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj27415 = {};
  return obj27415;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3969__auto__ = reader;
    if (and__3969__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4625__auto__ = reader == null ? null : reader;
    return function() {
      var or__3981__auto__ = cljs.reader.read_char[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.read_char["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3969__auto__ = reader;
    if (and__3969__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4625__auto__ = reader == null ? null : reader;
    return function() {
      var or__3981__auto__ = cljs.reader.unread[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.unread["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3981__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__27416__i = 0, G__27416__a = new Array(arguments.length - 1);
      while (G__27416__i < G__27416__a.length) {
        G__27416__a[G__27416__i] = arguments[G__27416__i + 1];
        ++G__27416__i;
      }
      msg = new cljs.core.IndexedSeq(G__27416__a, 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__27417) {
    var rdr = cljs.core.first(arglist__27417);
    var msg = cljs.core.rest(arglist__27417);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3969__auto__ = !(ch === "#");
  if (and__3969__auto__) {
    var and__3969__auto____$1 = !(ch === "'");
    if (and__3969__auto____$1) {
      var and__3969__auto____$2 = !(ch === ":");
      if (and__3969__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3969__auto____$2;
      }
    } else {
      return and__3969__auto____$1;
    }
  } else {
    return and__3969__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__27418 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__27419 = cljs.reader.read_char.call(null, rdr);
      sb = G__27418;
      ch = G__27419;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__27420 = cljs.reader.read_char.call(null, rdr);
      ch = G__27420;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__27421 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__27421;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__27422 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__27422;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = ch == null;
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3981__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__27423 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__27424 = cljs.reader.read_char.call(null, reader);
      buffer = G__27423;
      ch = G__27424;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__27425 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__27426 = cljs.reader.read_char.call(null, reader);
        buffer = G__27425;
        ch = G__27426;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__27427 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__27428 = cljs.reader.read_char.call(null, reader);
          buffer = G__27427;
          ch = G__27428;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__27433 = function() {
            var G__27431 = buffer;
            G__27431.append(nch);
            return G__27431;
          }();
          var G__27434 = cljs.reader.read_char.call(null, reader);
          buffer = G__27433;
          ch = G__27434;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__27435 = function() {
            var G__27432 = buffer;
            G__27432.append(ch);
            return G__27432;
          }();
          var G__27436 = cljs.reader.read_char.call(null, reader);
          buffer = G__27435;
          ch = G__27436;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(token.length === 1);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__27438 = o;
    if (G__27438) {
      var bit__4662__auto__ = G__27438.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4662__auto__ || G__27438.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__27438.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__27438);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__27438);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__27439 = reader;
        var G__27440 = eof_is_error;
        var G__27441 = sentinel;
        var G__27442 = is_recursive;
        reader = G__27439;
        eof_is_error = G__27440;
        sentinel = G__27441;
        is_recursive = G__27442;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__27443 = cljs.reader.read_comment.call(null, reader, ch);
          var G__27444 = eof_is_error;
          var G__27445 = sentinel;
          var G__27446 = is_recursive;
          reader = G__27443;
          eof_is_error = G__27444;
          sentinel = G__27445;
          is_recursive = G__27446;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__27447 = reader;
            var G__27448 = eof_is_error;
            var G__27449 = sentinel;
            var G__27450 = is_recursive;
            reader = G__27447;
            eof_is_error = G__27448;
            sentinel = G__27449;
            is_recursive = G__27450;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__27451 = b.append("0");
          b = G__27451;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__27453 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__27453, 0, null);
  var years = cljs.core.nth.call(null, vec__27453, 1, null);
  var months = cljs.core.nth.call(null, vec__27453, 2, null);
  var days = cljs.core.nth.call(null, vec__27453, 3, null);
  var hours = cljs.core.nth.call(null, vec__27453, 4, null);
  var minutes = cljs.core.nth.call(null, vec__27453, 5, null);
  var seconds = cljs.core.nth.call(null, vec__27453, 6, null);
  var fraction = cljs.core.nth.call(null, vec__27453, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__27453, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__27453, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__27453, 10, null);
  var v = vec__27453;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__27455 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__27455, 0, null);
    var months = cljs.core.nth.call(null, vec__27455, 1, null);
    var days = cljs.core.nth.call(null, vec__27455, 2, null);
    var hours = cljs.core.nth.call(null, vec__27455, 3, null);
    var minutes = cljs.core.nth.call(null, vec__27455, 4, null);
    var seconds = cljs.core.nth.call(null, vec__27455, 5, null);
    var ms = cljs.core.nth.call(null, vec__27455, 6, null);
    var offset = cljs.core.nth.call(null, vec__27455, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__27468_27480 = cljs.core.seq.call(null, form);
    var chunk__27469_27481 = null;
    var count__27470_27482 = 0;
    var i__27471_27483 = 0;
    while (true) {
      if (i__27471_27483 < count__27470_27482) {
        var x_27484 = cljs.core._nth.call(null, chunk__27469_27481, i__27471_27483);
        arr.push(x_27484);
        var G__27485 = seq__27468_27480;
        var G__27486 = chunk__27469_27481;
        var G__27487 = count__27470_27482;
        var G__27488 = i__27471_27483 + 1;
        seq__27468_27480 = G__27485;
        chunk__27469_27481 = G__27486;
        count__27470_27482 = G__27487;
        i__27471_27483 = G__27488;
        continue;
      } else {
        var temp__4126__auto___27489 = cljs.core.seq.call(null, seq__27468_27480);
        if (temp__4126__auto___27489) {
          var seq__27468_27490__$1 = temp__4126__auto___27489;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__27468_27490__$1)) {
            var c__4768__auto___27491 = cljs.core.chunk_first.call(null, seq__27468_27490__$1);
            var G__27492 = cljs.core.chunk_rest.call(null, seq__27468_27490__$1);
            var G__27493 = c__4768__auto___27491;
            var G__27494 = cljs.core.count.call(null, c__4768__auto___27491);
            var G__27495 = 0;
            seq__27468_27480 = G__27492;
            chunk__27469_27481 = G__27493;
            count__27470_27482 = G__27494;
            i__27471_27483 = G__27495;
            continue;
          } else {
            var x_27496 = cljs.core.first.call(null, seq__27468_27490__$1);
            arr.push(x_27496);
            var G__27497 = cljs.core.next.call(null, seq__27468_27490__$1);
            var G__27498 = null;
            var G__27499 = 0;
            var G__27500 = 0;
            seq__27468_27480 = G__27497;
            chunk__27469_27481 = G__27498;
            count__27470_27482 = G__27499;
            i__27471_27483 = G__27500;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj27473 = {};
        return obj27473;
      }();
      var seq__27474_27501 = cljs.core.seq.call(null, form);
      var chunk__27475_27502 = null;
      var count__27476_27503 = 0;
      var i__27477_27504 = 0;
      while (true) {
        if (i__27477_27504 < count__27476_27503) {
          var vec__27478_27505 = cljs.core._nth.call(null, chunk__27475_27502, i__27477_27504);
          var k_27506 = cljs.core.nth.call(null, vec__27478_27505, 0, null);
          var v_27507 = cljs.core.nth.call(null, vec__27478_27505, 1, null);
          obj[cljs.core.name.call(null, k_27506)] = v_27507;
          var G__27508 = seq__27474_27501;
          var G__27509 = chunk__27475_27502;
          var G__27510 = count__27476_27503;
          var G__27511 = i__27477_27504 + 1;
          seq__27474_27501 = G__27508;
          chunk__27475_27502 = G__27509;
          count__27476_27503 = G__27510;
          i__27477_27504 = G__27511;
          continue;
        } else {
          var temp__4126__auto___27512 = cljs.core.seq.call(null, seq__27474_27501);
          if (temp__4126__auto___27512) {
            var seq__27474_27513__$1 = temp__4126__auto___27512;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__27474_27513__$1)) {
              var c__4768__auto___27514 = cljs.core.chunk_first.call(null, seq__27474_27513__$1);
              var G__27515 = cljs.core.chunk_rest.call(null, seq__27474_27513__$1);
              var G__27516 = c__4768__auto___27514;
              var G__27517 = cljs.core.count.call(null, c__4768__auto___27514);
              var G__27518 = 0;
              seq__27474_27501 = G__27515;
              chunk__27475_27502 = G__27516;
              count__27476_27503 = G__27517;
              i__27477_27504 = G__27518;
              continue;
            } else {
              var vec__27479_27519 = cljs.core.first.call(null, seq__27474_27513__$1);
              var k_27520 = cljs.core.nth.call(null, vec__27479_27519, 0, null);
              var v_27521 = cljs.core.nth.call(null, vec__27479_27519, 1, null);
              obj[cljs.core.name.call(null, k_27520)] = v_27521;
              var G__27522 = cljs.core.next.call(null, seq__27474_27513__$1);
              var G__27523 = null;
              var G__27524 = 0;
              var G__27525 = 0;
              seq__27474_27501 = G__27522;
              chunk__27475_27502 = G__27523;
              count__27476_27503 = G__27524;
              i__27477_27504 = G__27525;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("servant.worker");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.core.async");
servant.worker.worker_fn_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
servant.worker.register_servant_fn = function register_servant_fn(fn_name, f) {
  return cljs.core.swap_BANG_.call(null, servant.worker.worker_fn_map, cljs.core.assoc, cljs.core.keyword.call(null, fn_name), f);
};
servant.worker.run_function_name = function run_function_name(message_data) {
  var fn_key = cljs.reader.read_string.call(null, message_data["fn"]);
  var f = cljs.core.get.call(null, cljs.core.deref.call(null, servant.worker.worker_fn_map), fn_key);
  var args = message_data["args"];
  return cljs.core.apply.call(null, f, args);
};
servant.worker.post_array_buffer = function post_array_buffer(p__27403) {
  var vec__27405 = p__27403;
  var result = cljs.core.nth.call(null, vec__27405, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__27405, 1, null);
  return self.postMessage(result, cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.worker.decode_message = function decode_message(event) {
  var pred__27409 = cljs.core._EQ_;
  var expr__27410 = event.data["command"];
  if (cljs.core.truth_(pred__27409.call(null, "channel", expr__27410))) {
    return self.postMessage(servant.worker.run_function_name.call(null, event.data));
  } else {
    if (cljs.core.truth_(pred__27409.call(null, "channel-arraybuffer", expr__27410))) {
      return servant.worker.post_array_buffer.call(null, servant.worker.run_function_name.call(null, event.data));
    } else {
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__27410)].join(""));
    }
  }
};
servant.worker.bootstrap = function bootstrap() {
  return self.onmessage = servant.worker.decode_message;
};
goog.provide("servant.core");
goog.require("cljs.core");
goog.require("servant.worker");
goog.require("cljs.core.async");
servant.core.webworker_QMARK_ = function webworker_QMARK_() {
  return void 0 === self.document;
};
servant.core.not_webworker_QMARK_ = cljs.core.complement.call(null, servant.core.webworker_QMARK_);
servant.core.spawn_servants = function spawn_servants(worker_count, worker_script) {
  var servant_channel = cljs.core.async.chan.call(null, worker_count);
  var c__6620__auto___27678 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___27678, servant_channel) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto___27678, servant_channel) {
          return function(state_27649) {
            var state_val_27650 = state_27649[1];
            if (state_val_27650 === 7) {
              var inst_27609 = state_27649[5];
              var inst_27612 = state_27649[6];
              var inst_27610 = state_27649[7];
              var inst_27611 = state_27649[8];
              var inst_27620 = state_27649[2];
              var inst_27621 = inst_27612 + 1;
              var tmp27651 = inst_27609;
              var tmp27652 = inst_27610;
              var tmp27653 = inst_27611;
              var inst_27609__$1 = tmp27651;
              var inst_27610__$1 = tmp27652;
              var inst_27611__$1 = tmp27653;
              var inst_27612__$1 = inst_27621;
              var state_27649__$1 = function() {
                var statearr_27654 = state_27649;
                statearr_27654[5] = inst_27609__$1;
                statearr_27654[6] = inst_27612__$1;
                statearr_27654[7] = inst_27610__$1;
                statearr_27654[9] = inst_27620;
                statearr_27654[8] = inst_27611__$1;
                return statearr_27654;
              }();
              var statearr_27655_27679 = state_27649__$1;
              statearr_27655_27679[2] = null;
              statearr_27655_27679[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_27650 === 1) {
                var inst_27607 = cljs.core.range.call(null, worker_count);
                var inst_27608 = cljs.core.seq.call(null, inst_27607);
                var inst_27609 = inst_27608;
                var inst_27610 = null;
                var inst_27611 = 0;
                var inst_27612 = 0;
                var state_27649__$1 = function() {
                  var statearr_27656 = state_27649;
                  statearr_27656[5] = inst_27609;
                  statearr_27656[6] = inst_27612;
                  statearr_27656[7] = inst_27610;
                  statearr_27656[8] = inst_27611;
                  return statearr_27656;
                }();
                var statearr_27657_27680 = state_27649__$1;
                statearr_27657_27680[2] = null;
                statearr_27657_27680[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27650 === 4) {
                  var inst_27612 = state_27649[6];
                  var inst_27610 = state_27649[7];
                  var inst_27617 = cljs.core._nth.call(null, inst_27610, inst_27612);
                  var inst_27618 = new Worker(worker_script);
                  var state_27649__$1 = function() {
                    var statearr_27658 = state_27649;
                    statearr_27658[10] = inst_27617;
                    return statearr_27658;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27649__$1, 7, servant_channel, inst_27618);
                } else {
                  if (state_val_27650 === 13) {
                    var inst_27640 = state_27649[2];
                    var state_27649__$1 = state_27649;
                    var statearr_27659_27681 = state_27649__$1;
                    statearr_27659_27681[2] = inst_27640;
                    statearr_27659_27681[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27650 === 6) {
                      var inst_27645 = state_27649[2];
                      var state_27649__$1 = state_27649;
                      var statearr_27660_27682 = state_27649__$1;
                      statearr_27660_27682[2] = inst_27645;
                      statearr_27660_27682[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27650 === 3) {
                        var inst_27647 = state_27649[2];
                        var state_27649__$1 = state_27649;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27649__$1, inst_27647);
                      } else {
                        if (state_val_27650 === 12) {
                          var inst_27624 = state_27649[11];
                          var inst_27633 = cljs.core.first.call(null, inst_27624);
                          var inst_27634 = new Worker(worker_script);
                          var state_27649__$1 = function() {
                            var statearr_27661 = state_27649;
                            statearr_27661[12] = inst_27633;
                            return statearr_27661;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27649__$1, 14, servant_channel, inst_27634);
                        } else {
                          if (state_val_27650 === 2) {
                            var inst_27612 = state_27649[6];
                            var inst_27611 = state_27649[8];
                            var inst_27614 = inst_27612 < inst_27611;
                            var inst_27615 = inst_27614;
                            var state_27649__$1 = state_27649;
                            if (cljs.core.truth_(inst_27615)) {
                              var statearr_27662_27683 = state_27649__$1;
                              statearr_27662_27683[1] = 4;
                            } else {
                              var statearr_27663_27684 = state_27649__$1;
                              statearr_27663_27684[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27650 === 11) {
                              var inst_27624 = state_27649[11];
                              var inst_27628 = cljs.core.chunk_first.call(null, inst_27624);
                              var inst_27629 = cljs.core.chunk_rest.call(null, inst_27624);
                              var inst_27630 = cljs.core.count.call(null, inst_27628);
                              var inst_27609 = inst_27629;
                              var inst_27610 = inst_27628;
                              var inst_27611 = inst_27630;
                              var inst_27612 = 0;
                              var state_27649__$1 = function() {
                                var statearr_27664 = state_27649;
                                statearr_27664[5] = inst_27609;
                                statearr_27664[6] = inst_27612;
                                statearr_27664[7] = inst_27610;
                                statearr_27664[8] = inst_27611;
                                return statearr_27664;
                              }();
                              var statearr_27665_27685 = state_27649__$1;
                              statearr_27665_27685[2] = null;
                              statearr_27665_27685[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_27650 === 9) {
                                var state_27649__$1 = state_27649;
                                var statearr_27666_27686 = state_27649__$1;
                                statearr_27666_27686[2] = null;
                                statearr_27666_27686[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27650 === 5) {
                                  var inst_27624 = state_27649[11];
                                  var inst_27609 = state_27649[5];
                                  var inst_27624__$1 = cljs.core.seq.call(null, inst_27609);
                                  var state_27649__$1 = function() {
                                    var statearr_27667 = state_27649;
                                    statearr_27667[11] = inst_27624__$1;
                                    return statearr_27667;
                                  }();
                                  if (inst_27624__$1) {
                                    var statearr_27668_27687 = state_27649__$1;
                                    statearr_27668_27687[1] = 8;
                                  } else {
                                    var statearr_27669_27688 = state_27649__$1;
                                    statearr_27669_27688[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27650 === 14) {
                                    var inst_27624 = state_27649[11];
                                    var inst_27636 = state_27649[2];
                                    var inst_27637 = cljs.core.next.call(null, inst_27624);
                                    var inst_27609 = inst_27637;
                                    var inst_27610 = null;
                                    var inst_27611 = 0;
                                    var inst_27612 = 0;
                                    var state_27649__$1 = function() {
                                      var statearr_27670 = state_27649;
                                      statearr_27670[5] = inst_27609;
                                      statearr_27670[6] = inst_27612;
                                      statearr_27670[7] = inst_27610;
                                      statearr_27670[13] = inst_27636;
                                      statearr_27670[8] = inst_27611;
                                      return statearr_27670;
                                    }();
                                    var statearr_27671_27689 = state_27649__$1;
                                    statearr_27671_27689[2] = null;
                                    statearr_27671_27689[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_27650 === 10) {
                                      var inst_27643 = state_27649[2];
                                      var state_27649__$1 = state_27649;
                                      var statearr_27672_27690 = state_27649__$1;
                                      statearr_27672_27690[2] = inst_27643;
                                      statearr_27672_27690[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_27650 === 8) {
                                        var inst_27624 = state_27649[11];
                                        var inst_27626 = cljs.core.chunked_seq_QMARK_.call(null, inst_27624);
                                        var state_27649__$1 = state_27649;
                                        if (inst_27626) {
                                          var statearr_27673_27691 = state_27649__$1;
                                          statearr_27673_27691[1] = 11;
                                        } else {
                                          var statearr_27674_27692 = state_27649__$1;
                                          statearr_27674_27692[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto___27678, servant_channel);
        return function(switch__6576__auto__, c__6620__auto___27678, servant_channel) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_27676 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_27676[0] = state_machine__6577__auto__;
              statearr_27676[1] = 1;
              return statearr_27676;
            };
            var state_machine__6577__auto____1 = function(state_27649) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_27649);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_27649) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_27649);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto___27678, servant_channel);
      }();
      var state__6622__auto__ = function() {
        var statearr_27677 = f__6621__auto__.call(null);
        statearr_27677[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___27678;
        return statearr_27677;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto___27678, servant_channel));
  return servant_channel;
};
servant.core.kill_servants = function kill_servants(servant_channel, worker_count) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_27814) {
            var state_val_27815 = state_27814[1];
            if (state_val_27815 === 7) {
              var inst_27774 = state_27814[5];
              var inst_27775 = state_27814[6];
              var inst_27776 = state_27814[7];
              var inst_27777 = state_27814[8];
              var inst_27784 = state_27814[2];
              var inst_27785 = inst_27784.terminate();
              var inst_27786 = inst_27777 + 1;
              var tmp27816 = inst_27774;
              var tmp27817 = inst_27775;
              var tmp27818 = inst_27776;
              var inst_27774__$1 = tmp27816;
              var inst_27775__$1 = tmp27817;
              var inst_27776__$1 = tmp27818;
              var inst_27777__$1 = inst_27786;
              var state_27814__$1 = function() {
                var statearr_27819 = state_27814;
                statearr_27819[9] = inst_27785;
                statearr_27819[5] = inst_27774__$1;
                statearr_27819[6] = inst_27775__$1;
                statearr_27819[7] = inst_27776__$1;
                statearr_27819[8] = inst_27777__$1;
                return statearr_27819;
              }();
              var statearr_27820_27843 = state_27814__$1;
              statearr_27820_27843[2] = null;
              statearr_27820_27843[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_27815 === 1) {
                var inst_27772 = cljs.core.range.call(null, worker_count);
                var inst_27773 = cljs.core.seq.call(null, inst_27772);
                var inst_27774 = inst_27773;
                var inst_27775 = null;
                var inst_27776 = 0;
                var inst_27777 = 0;
                var state_27814__$1 = function() {
                  var statearr_27821 = state_27814;
                  statearr_27821[5] = inst_27774;
                  statearr_27821[6] = inst_27775;
                  statearr_27821[7] = inst_27776;
                  statearr_27821[8] = inst_27777;
                  return statearr_27821;
                }();
                var statearr_27822_27844 = state_27814__$1;
                statearr_27822_27844[2] = null;
                statearr_27822_27844[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27815 === 4) {
                  var inst_27775 = state_27814[6];
                  var inst_27777 = state_27814[8];
                  var inst_27782 = cljs.core._nth.call(null, inst_27775, inst_27777);
                  var state_27814__$1 = function() {
                    var statearr_27823 = state_27814;
                    statearr_27823[10] = inst_27782;
                    return statearr_27823;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27814__$1, 7, servant_channel);
                } else {
                  if (state_val_27815 === 13) {
                    var inst_27805 = state_27814[2];
                    var state_27814__$1 = state_27814;
                    var statearr_27824_27845 = state_27814__$1;
                    statearr_27824_27845[2] = inst_27805;
                    statearr_27824_27845[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27815 === 6) {
                      var inst_27810 = state_27814[2];
                      var state_27814__$1 = state_27814;
                      var statearr_27825_27846 = state_27814__$1;
                      statearr_27825_27846[2] = inst_27810;
                      statearr_27825_27846[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27815 === 3) {
                        var inst_27812 = state_27814[2];
                        var state_27814__$1 = state_27814;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27814__$1, inst_27812);
                      } else {
                        if (state_val_27815 === 12) {
                          var inst_27789 = state_27814[11];
                          var inst_27798 = cljs.core.first.call(null, inst_27789);
                          var state_27814__$1 = function() {
                            var statearr_27826 = state_27814;
                            statearr_27826[12] = inst_27798;
                            return statearr_27826;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27814__$1, 14, servant_channel);
                        } else {
                          if (state_val_27815 === 2) {
                            var inst_27776 = state_27814[7];
                            var inst_27777 = state_27814[8];
                            var inst_27779 = inst_27777 < inst_27776;
                            var inst_27780 = inst_27779;
                            var state_27814__$1 = state_27814;
                            if (cljs.core.truth_(inst_27780)) {
                              var statearr_27827_27847 = state_27814__$1;
                              statearr_27827_27847[1] = 4;
                            } else {
                              var statearr_27828_27848 = state_27814__$1;
                              statearr_27828_27848[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27815 === 11) {
                              var inst_27789 = state_27814[11];
                              var inst_27793 = cljs.core.chunk_first.call(null, inst_27789);
                              var inst_27794 = cljs.core.chunk_rest.call(null, inst_27789);
                              var inst_27795 = cljs.core.count.call(null, inst_27793);
                              var inst_27774 = inst_27794;
                              var inst_27775 = inst_27793;
                              var inst_27776 = inst_27795;
                              var inst_27777 = 0;
                              var state_27814__$1 = function() {
                                var statearr_27829 = state_27814;
                                statearr_27829[5] = inst_27774;
                                statearr_27829[6] = inst_27775;
                                statearr_27829[7] = inst_27776;
                                statearr_27829[8] = inst_27777;
                                return statearr_27829;
                              }();
                              var statearr_27830_27849 = state_27814__$1;
                              statearr_27830_27849[2] = null;
                              statearr_27830_27849[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_27815 === 9) {
                                var state_27814__$1 = state_27814;
                                var statearr_27831_27850 = state_27814__$1;
                                statearr_27831_27850[2] = null;
                                statearr_27831_27850[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27815 === 5) {
                                  var inst_27774 = state_27814[5];
                                  var inst_27789 = state_27814[11];
                                  var inst_27789__$1 = cljs.core.seq.call(null, inst_27774);
                                  var state_27814__$1 = function() {
                                    var statearr_27832 = state_27814;
                                    statearr_27832[11] = inst_27789__$1;
                                    return statearr_27832;
                                  }();
                                  if (inst_27789__$1) {
                                    var statearr_27833_27851 = state_27814__$1;
                                    statearr_27833_27851[1] = 8;
                                  } else {
                                    var statearr_27834_27852 = state_27814__$1;
                                    statearr_27834_27852[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27815 === 14) {
                                    var inst_27789 = state_27814[11];
                                    var inst_27800 = state_27814[2];
                                    var inst_27801 = inst_27800.terminate();
                                    var inst_27802 = cljs.core.next.call(null, inst_27789);
                                    var inst_27774 = inst_27802;
                                    var inst_27775 = null;
                                    var inst_27776 = 0;
                                    var inst_27777 = 0;
                                    var state_27814__$1 = function() {
                                      var statearr_27835 = state_27814;
                                      statearr_27835[5] = inst_27774;
                                      statearr_27835[6] = inst_27775;
                                      statearr_27835[7] = inst_27776;
                                      statearr_27835[13] = inst_27801;
                                      statearr_27835[8] = inst_27777;
                                      return statearr_27835;
                                    }();
                                    var statearr_27836_27853 = state_27814__$1;
                                    statearr_27836_27853[2] = null;
                                    statearr_27836_27853[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_27815 === 10) {
                                      var inst_27808 = state_27814[2];
                                      var state_27814__$1 = state_27814;
                                      var statearr_27837_27854 = state_27814__$1;
                                      statearr_27837_27854[2] = inst_27808;
                                      statearr_27837_27854[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_27815 === 8) {
                                        var inst_27789 = state_27814[11];
                                        var inst_27791 = cljs.core.chunked_seq_QMARK_.call(null, inst_27789);
                                        var state_27814__$1 = state_27814;
                                        if (inst_27791) {
                                          var statearr_27838_27855 = state_27814__$1;
                                          statearr_27838_27855[1] = 11;
                                        } else {
                                          var statearr_27839_27856 = state_27814__$1;
                                          statearr_27839_27856[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_27841 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_27841[0] = state_machine__6577__auto__;
              statearr_27841[1] = 1;
              return statearr_27841;
            };
            var state_machine__6577__auto____1 = function(state_27814) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_27814);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_27814) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_27814);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_27842 = f__6621__auto__.call(null);
        statearr_27842[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_27842;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
servant.core.f__GT_key = function f__GT_key(f) {
  return cljs.core.ffirst.call(null, cljs.core.filter.call(null, function(p1__27857_SHARP_) {
    return cljs.core._EQ_.call(null, f, cljs.core.second.call(null, p1__27857_SHARP_));
  }, cljs.core.deref.call(null, servant.worker.worker_fn_map)));
};
servant.core.standard_message = function standard_message(worker, fn_key, args) {
  return worker.postMessage(function() {
    var obj27861 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args)};
    return obj27861;
  }());
};
servant.core.array_buffer_message = function array_buffer_message(worker, fn_key, args) {
  var vec__27865 = args;
  var args__$1 = cljs.core.nth.call(null, vec__27865, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__27865, 1, null);
  return worker.postMessage(function() {
    var obj27867 = {"command":"channel-arraybuffer", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj27867;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.array_buffer_message_standard_reply = function array_buffer_message_standard_reply(worker, fn_key, args) {
  var vec__27871 = args;
  var args__$1 = cljs.core.nth.call(null, vec__27871, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__27871, 1, null);
  return worker.postMessage(function() {
    var obj27873 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj27873;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.servant_thread_with_key = function() {
  var servant_thread_with_key__delegate = function(servant_channel, post_message_fn, fn_key, args) {
    var out_channel = cljs.core.async.chan.call(null, 1);
    var c__6620__auto___27925 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___27925, out_channel) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto___27925, out_channel) {
            return function(state_27907) {
              var state_val_27908 = state_27907[1];
              if (state_val_27908 === 2) {
                var inst_27901 = state_27907[2];
                var inst_27902 = cljs.core.pr_str.call(null, fn_key);
                var inst_27903 = post_message_fn.call(null, inst_27901, inst_27902, args);
                var inst_27904 = function() {
                  var worker = inst_27901;
                  return function(worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel) {
                    return function(p1__27874_SHARP_) {
                      var c__6620__auto____$1 = cljs.core.async.chan.call(null, 1);
                      cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto____$1, worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel) {
                        return function() {
                          var f__6621__auto__ = function() {
                            var switch__6576__auto__ = function(c__6620__auto____$1, worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel) {
                              return function(state_27915) {
                                var state_val_27916 = state_27915[1];
                                if (state_val_27916 === 3) {
                                  var inst_27913 = state_27915[2];
                                  var state_27915__$1 = state_27915;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27915__$1, inst_27913);
                                } else {
                                  if (state_val_27916 === 2) {
                                    var inst_27911 = state_27915[2];
                                    var state_27915__$1 = function() {
                                      var statearr_27917 = state_27915;
                                      statearr_27917[5] = inst_27911;
                                      return statearr_27917;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27915__$1, 3, servant_channel, worker);
                                  } else {
                                    if (state_val_27916 === 1) {
                                      var inst_27909 = p1__27874_SHARP_.data;
                                      var state_27915__$1 = state_27915;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27915__$1, 2, out_channel, inst_27909);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              };
                            }(c__6620__auto____$1, worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel);
                            return function(switch__6576__auto__, c__6620__auto____$1, worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel) {
                              return function() {
                                var state_machine__6577__auto__ = null;
                                var state_machine__6577__auto____0 = function() {
                                  var statearr_27919 = [null, null, null, null, null, null];
                                  statearr_27919[0] = state_machine__6577__auto__;
                                  statearr_27919[1] = 1;
                                  return statearr_27919;
                                };
                                var state_machine__6577__auto____1 = function(state_27915) {
                                  while (true) {
                                    var result__6578__auto__ = switch__6576__auto__.call(null, state_27915);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__6578__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__6577__auto__ = function(state_27915) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__6577__auto____0.call(this);
                                    case 1:
                                      return state_machine__6577__auto____1.call(this, state_27915);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
                                state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
                                return state_machine__6577__auto__;
                              }();
                            }(switch__6576__auto__, c__6620__auto____$1, worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel);
                          }();
                          var state__6622__auto__ = function() {
                            var statearr_27920 = f__6621__auto__.call(null);
                            statearr_27920[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto____$1;
                            return statearr_27920;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
                        };
                      }(c__6620__auto____$1, worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel));
                      return c__6620__auto____$1;
                    };
                  }(worker, inst_27901, inst_27902, inst_27903, state_val_27908, c__6620__auto___27925, out_channel);
                }();
                var inst_27905 = inst_27901.addEventListener("message", inst_27904);
                var state_27907__$1 = function() {
                  var statearr_27921 = state_27907;
                  statearr_27921[5] = inst_27903;
                  return statearr_27921;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27907__$1, inst_27905);
              } else {
                if (state_val_27908 === 1) {
                  var state_27907__$1 = state_27907;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27907__$1, 2, servant_channel);
                } else {
                  return null;
                }
              }
            };
          }(c__6620__auto___27925, out_channel);
          return function(switch__6576__auto__, c__6620__auto___27925, out_channel) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_27923 = [null, null, null, null, null, null];
                statearr_27923[0] = state_machine__6577__auto__;
                statearr_27923[1] = 1;
                return statearr_27923;
              };
              var state_machine__6577__auto____1 = function(state_27907) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_27907);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_27907) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_27907);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto___27925, out_channel);
        }();
        var state__6622__auto__ = function() {
          var statearr_27924 = f__6621__auto__.call(null);
          statearr_27924[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___27925;
          return statearr_27924;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto___27925, out_channel));
    return out_channel;
  };
  var servant_thread_with_key = function(servant_channel, post_message_fn, fn_key, var_args) {
    var args = null;
    if (arguments.length > 3) {
      var G__27926__i = 0, G__27926__a = new Array(arguments.length - 3);
      while (G__27926__i < G__27926__a.length) {
        G__27926__a[G__27926__i] = arguments[G__27926__i + 3];
        ++G__27926__i;
      }
      args = new cljs.core.IndexedSeq(G__27926__a, 0);
    }
    return servant_thread_with_key__delegate.call(this, servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$lang$maxFixedArity = 3;
  servant_thread_with_key.cljs$lang$applyTo = function(arglist__27927) {
    var servant_channel = cljs.core.first(arglist__27927);
    arglist__27927 = cljs.core.next(arglist__27927);
    var post_message_fn = cljs.core.first(arglist__27927);
    arglist__27927 = cljs.core.next(arglist__27927);
    var fn_key = cljs.core.first(arglist__27927);
    var args = cljs.core.rest(arglist__27927);
    return servant_thread_with_key__delegate(servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$core$IFn$_invoke$arity$variadic = servant_thread_with_key__delegate;
  return servant_thread_with_key;
}();
servant.core.servant_thread = function() {
  var servant_thread__delegate = function(servant_channel, post_message_fn, f, args) {
    return cljs.core.apply.call(null, servant.core.servant_thread_with_key, servant_channel, post_message_fn, servant.core.f__GT_key.call(null, f), args);
  };
  var servant_thread = function(servant_channel, post_message_fn, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      var G__27928__i = 0, G__27928__a = new Array(arguments.length - 3);
      while (G__27928__i < G__27928__a.length) {
        G__27928__a[G__27928__i] = arguments[G__27928__i + 3];
        ++G__27928__i;
      }
      args = new cljs.core.IndexedSeq(G__27928__a, 0);
    }
    return servant_thread__delegate.call(this, servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$lang$maxFixedArity = 3;
  servant_thread.cljs$lang$applyTo = function(arglist__27929) {
    var servant_channel = cljs.core.first(arglist__27929);
    arglist__27929 = cljs.core.next(arglist__27929);
    var post_message_fn = cljs.core.first(arglist__27929);
    arglist__27929 = cljs.core.next(arglist__27929);
    var f = cljs.core.first(arglist__27929);
    var args = cljs.core.rest(arglist__27929);
    return servant_thread__delegate(servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$core$IFn$_invoke$arity$variadic = servant_thread__delegate;
  return servant_thread;
}();
goog.provide("mining");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("cljs.core.async");
mining.hashmine = cljs.core.async.chan.call(null);
mining.hashmine.type = "workerch";
console.log("this runs in the browser");
mining.worker_count = 2;
mining.worker_script = "wrkr.js";
mining.servant_channel = servant.core.spawn_servants.call(null, mining.worker_count, mining.worker_script);
mining.mine = function mine(rootHash) {
  l.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to mine %s ", rootHash);
  mining.chann = servant.core.servant_thread.call(null, mining.servant_channel, servant.core.standard_message, "none", "newjob", rootHash);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96813) {
            var state_val_96814 = state_96813[1];
            if (state_val_96814 === 2) {
              var inst_96807 = state_96813[2];
              var inst_96808 = mining.v = inst_96807;
              var inst_96809 = l.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "recieved from mining", mining.v);
              var inst_96810 = JSON.parse(mining.v);
              var inst_96811 = mining.pub.call(null, "blockMined", inst_96810);
              var state_96813__$1 = function() {
                var statearr_96815 = state_96813;
                statearr_96815[5] = inst_96808;
                statearr_96815[6] = inst_96809;
                return statearr_96815;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96813__$1, inst_96811);
            } else {
              if (state_val_96814 === 1) {
                var inst_96805 = l.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to wait for mining to end ");
                var state_96813__$1 = function() {
                  var statearr_96816 = state_96813;
                  statearr_96816[7] = inst_96805;
                  return statearr_96816;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96813__$1, 2, mining.chann);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96818 = [null, null, null, null, null, null, null, null];
              statearr_96818[0] = state_machine__6577__auto__;
              statearr_96818[1] = 1;
              return statearr_96818;
            };
            var state_machine__6577__auto____1 = function(state_96813) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96813);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96813) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96813);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96819 = f__6621__auto__.call(null);
        statearr_96819[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96819;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function opts_merge(a, b) {
  var seq__28125_28129 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__28126_28130 = null;
  var count__28127_28131 = 0;
  var i__28128_28132 = 0;
  while (true) {
    if (i__28128_28132 < count__28127_28131) {
      var k_28133 = cljs.core._nth.call(null, chunk__28126_28130, i__28128_28132);
      var v_28134 = b[k_28133];
      a[k_28133] = v_28134;
      var G__28135 = seq__28125_28129;
      var G__28136 = chunk__28126_28130;
      var G__28137 = count__28127_28131;
      var G__28138 = i__28128_28132 + 1;
      seq__28125_28129 = G__28135;
      chunk__28126_28130 = G__28136;
      count__28127_28131 = G__28137;
      i__28128_28132 = G__28138;
      continue;
    } else {
      var temp__4126__auto___28139 = cljs.core.seq.call(null, seq__28125_28129);
      if (temp__4126__auto___28139) {
        var seq__28125_28140__$1 = temp__4126__auto___28139;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28125_28140__$1)) {
          var c__4768__auto___28141 = cljs.core.chunk_first.call(null, seq__28125_28140__$1);
          var G__28142 = cljs.core.chunk_rest.call(null, seq__28125_28140__$1);
          var G__28143 = c__4768__auto___28141;
          var G__28144 = cljs.core.count.call(null, c__4768__auto___28141);
          var G__28145 = 0;
          seq__28125_28129 = G__28142;
          chunk__28126_28130 = G__28143;
          count__28127_28131 = G__28144;
          i__28128_28132 = G__28145;
          continue;
        } else {
          var k_28146 = cljs.core.first.call(null, seq__28125_28140__$1);
          var v_28147 = b[k_28146];
          a[k_28146] = v_28147;
          var G__28148 = cljs.core.next.call(null, seq__28125_28140__$1);
          var G__28149 = null;
          var G__28150 = 0;
          var G__28151 = 0;
          seq__28125_28129 = G__28148;
          chunk__28126_28130 = G__28149;
          count__28127_28131 = G__28150;
          i__28128_28132 = G__28151;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function __GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function __GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var reader = null;
  var reader__1 = function(type) {
    return reader.call(null, type, null);
  };
  var reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__28152 = i + 2;
          var G__28153 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__28152;
          ret = G__28153;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return reader__1.call(this, type);
      case 2:
        return reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reader.cljs$core$IFn$_invoke$arity$1 = reader__1;
  reader.cljs$core$IFn$_invoke$arity$2 = reader__2;
  return reader;
}();
cognitect.transit.read = function read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function __GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function __GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__28154_28158 = cljs.core.seq.call(null, v);
  var chunk__28155_28159 = null;
  var count__28156_28160 = 0;
  var i__28157_28161 = 0;
  while (true) {
    if (i__28157_28161 < count__28156_28160) {
      var x_28162 = cljs.core._nth.call(null, chunk__28155_28159, i__28157_28161);
      ret.push(x_28162);
      var G__28163 = seq__28154_28158;
      var G__28164 = chunk__28155_28159;
      var G__28165 = count__28156_28160;
      var G__28166 = i__28157_28161 + 1;
      seq__28154_28158 = G__28163;
      chunk__28155_28159 = G__28164;
      count__28156_28160 = G__28165;
      i__28157_28161 = G__28166;
      continue;
    } else {
      var temp__4126__auto___28167 = cljs.core.seq.call(null, seq__28154_28158);
      if (temp__4126__auto___28167) {
        var seq__28154_28168__$1 = temp__4126__auto___28167;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28154_28168__$1)) {
          var c__4768__auto___28169 = cljs.core.chunk_first.call(null, seq__28154_28168__$1);
          var G__28170 = cljs.core.chunk_rest.call(null, seq__28154_28168__$1);
          var G__28171 = c__4768__auto___28169;
          var G__28172 = cljs.core.count.call(null, c__4768__auto___28169);
          var G__28173 = 0;
          seq__28154_28158 = G__28170;
          chunk__28155_28159 = G__28171;
          count__28156_28160 = G__28172;
          i__28157_28161 = G__28173;
          continue;
        } else {
          var x_28174 = cljs.core.first.call(null, seq__28154_28168__$1);
          ret.push(x_28174);
          var G__28175 = cljs.core.next.call(null, seq__28154_28168__$1);
          var G__28176 = null;
          var G__28177 = 0;
          var G__28178 = 0;
          seq__28154_28158 = G__28175;
          chunk__28155_28159 = G__28176;
          count__28156_28160 = G__28177;
          i__28157_28161 = G__28178;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function __GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function __GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__28179_28183 = cljs.core.seq.call(null, v);
  var chunk__28180_28184 = null;
  var count__28181_28185 = 0;
  var i__28182_28186 = 0;
  while (true) {
    if (i__28182_28186 < count__28181_28185) {
      var x_28187 = cljs.core._nth.call(null, chunk__28180_28184, i__28182_28186);
      ret.push(x_28187);
      var G__28188 = seq__28179_28183;
      var G__28189 = chunk__28180_28184;
      var G__28190 = count__28181_28185;
      var G__28191 = i__28182_28186 + 1;
      seq__28179_28183 = G__28188;
      chunk__28180_28184 = G__28189;
      count__28181_28185 = G__28190;
      i__28182_28186 = G__28191;
      continue;
    } else {
      var temp__4126__auto___28192 = cljs.core.seq.call(null, seq__28179_28183);
      if (temp__4126__auto___28192) {
        var seq__28179_28193__$1 = temp__4126__auto___28192;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28179_28193__$1)) {
          var c__4768__auto___28194 = cljs.core.chunk_first.call(null, seq__28179_28193__$1);
          var G__28195 = cljs.core.chunk_rest.call(null, seq__28179_28193__$1);
          var G__28196 = c__4768__auto___28194;
          var G__28197 = cljs.core.count.call(null, c__4768__auto___28194);
          var G__28198 = 0;
          seq__28179_28183 = G__28195;
          chunk__28180_28184 = G__28196;
          count__28181_28185 = G__28197;
          i__28182_28186 = G__28198;
          continue;
        } else {
          var x_28199 = cljs.core.first.call(null, seq__28179_28193__$1);
          ret.push(x_28199);
          var G__28200 = cljs.core.next.call(null, seq__28179_28193__$1);
          var G__28201 = null;
          var G__28202 = 0;
          var G__28203 = 0;
          seq__28179_28183 = G__28200;
          chunk__28180_28184 = G__28201;
          count__28181_28185 = G__28202;
          i__28182_28186 = G__28203;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function __GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__28204_28208 = cljs.core.seq.call(null, v);
  var chunk__28205_28209 = null;
  var count__28206_28210 = 0;
  var i__28207_28211 = 0;
  while (true) {
    if (i__28207_28211 < count__28206_28210) {
      var x_28212 = cljs.core._nth.call(null, chunk__28205_28209, i__28207_28211);
      ret.push(x_28212);
      var G__28213 = seq__28204_28208;
      var G__28214 = chunk__28205_28209;
      var G__28215 = count__28206_28210;
      var G__28216 = i__28207_28211 + 1;
      seq__28204_28208 = G__28213;
      chunk__28205_28209 = G__28214;
      count__28206_28210 = G__28215;
      i__28207_28211 = G__28216;
      continue;
    } else {
      var temp__4126__auto___28217 = cljs.core.seq.call(null, seq__28204_28208);
      if (temp__4126__auto___28217) {
        var seq__28204_28218__$1 = temp__4126__auto___28217;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28204_28218__$1)) {
          var c__4768__auto___28219 = cljs.core.chunk_first.call(null, seq__28204_28218__$1);
          var G__28220 = cljs.core.chunk_rest.call(null, seq__28204_28218__$1);
          var G__28221 = c__4768__auto___28219;
          var G__28222 = cljs.core.count.call(null, c__4768__auto___28219);
          var G__28223 = 0;
          seq__28204_28208 = G__28220;
          chunk__28205_28209 = G__28221;
          count__28206_28210 = G__28222;
          i__28207_28211 = G__28223;
          continue;
        } else {
          var x_28224 = cljs.core.first.call(null, seq__28204_28218__$1);
          ret.push(x_28224);
          var G__28225 = cljs.core.next.call(null, seq__28204_28218__$1);
          var G__28226 = null;
          var G__28227 = 0;
          var G__28228 = 0;
          seq__28204_28208 = G__28225;
          chunk__28205_28209 = G__28226;
          count__28206_28210 = G__28227;
          i__28207_28211 = G__28228;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function __GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function __GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function() {
  var writer = null;
  var writer__1 = function(type) {
    return writer.call(null, type, null);
  };
  var writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var uuid_handler = new cognitect.transit.UUIDHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
    symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
      var x28238 = cljs.core.clone.call(null, handlers);
      x28238.forEach = function(x28238, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__28239 = cljs.core.seq.call(null, coll);
          var chunk__28240 = null;
          var count__28241 = 0;
          var i__28242 = 0;
          while (true) {
            if (i__28242 < count__28241) {
              var vec__28243 = cljs.core._nth.call(null, chunk__28240, i__28242);
              var k = cljs.core.nth.call(null, vec__28243, 0, null);
              var v = cljs.core.nth.call(null, vec__28243, 1, null);
              f.call(null, v, k);
              var G__28245 = seq__28239;
              var G__28246 = chunk__28240;
              var G__28247 = count__28241;
              var G__28248 = i__28242 + 1;
              seq__28239 = G__28245;
              chunk__28240 = G__28246;
              count__28241 = G__28247;
              i__28242 = G__28248;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__28239);
              if (temp__4126__auto__) {
                var seq__28239__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__28239__$1)) {
                  var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__28239__$1);
                  var G__28249 = cljs.core.chunk_rest.call(null, seq__28239__$1);
                  var G__28250 = c__4768__auto__;
                  var G__28251 = cljs.core.count.call(null, c__4768__auto__);
                  var G__28252 = 0;
                  seq__28239 = G__28249;
                  chunk__28240 = G__28250;
                  count__28241 = G__28251;
                  i__28242 = G__28252;
                  continue;
                } else {
                  var vec__28244 = cljs.core.first.call(null, seq__28239__$1);
                  var k = cljs.core.nth.call(null, vec__28244, 0, null);
                  var v = cljs.core.nth.call(null, vec__28244, 1, null);
                  f.call(null, v, k);
                  var G__28253 = cljs.core.next.call(null, seq__28239__$1);
                  var G__28254 = null;
                  var G__28255 = 0;
                  var G__28256 = 0;
                  seq__28239 = G__28253;
                  chunk__28240 = G__28254;
                  count__28241 = G__28255;
                  i__28242 = G__28256;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x28238, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
      return x28238;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
          return function(obj, k, v) {
            var G__28237 = obj;
            G__28237.push(kfn.call(null, k), vfn.call(null, v));
            return G__28237;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return writer__1.call(this, type);
      case 2:
        return writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  writer.cljs$core$IFn$_invoke$arity$1 = writer__1;
  writer.cljs$core$IFn$_invoke$arity$2 = writer__2;
  return writer;
}();
cognitect.transit.write = function write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var write_handler = null;
  var write_handler__2 = function(tag_fn, rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t28260 !== "undefined") {
    } else {
      cognitect.transit.t28260 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta28261) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta28261 = meta28261;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t28260.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t28260.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t28260.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t28260.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t28260.prototype.cljs$core$IMeta$_meta$arity$1 = function(_28262) {
        var self__ = this;
        var _28262__$1 = this;
        return self__.meta28261;
      };
      cognitect.transit.t28260.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_28262, meta28261__$1) {
        var self__ = this;
        var _28262__$1 = this;
        return new cognitect.transit.t28260(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta28261__$1);
      };
      cognitect.transit.t28260.cljs$lang$type = true;
      cognitect.transit.t28260.cljs$lang$ctorStr = "cognitect.transit/t28260";
      cognitect.transit.t28260.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/t28260");
      };
      cognitect.transit.__GT_t28260 = function __GT_t28260(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta28261) {
        return new cognitect.transit.t28260(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta28261);
      };
    }
    return new cognitect.transit.t28260(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, cljs.core.PersistentArrayMap.EMPTY);
  };
  write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  write_handler.cljs$core$IFn$_invoke$arity$2 = write_handler__2;
  write_handler.cljs$core$IFn$_invoke$arity$3 = write_handler__3;
  write_handler.cljs$core$IFn$_invoke$arity$4 = write_handler__4;
  return write_handler;
}();
cognitect.transit.tagged_value = function tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__28101 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__28102 = cljs.core.next.call(null, coll__$1);
        sb = G__28101;
        coll__$1 = G__28102;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__28103 = sb;
        var G__28104 = coll__$2;
        sb = G__28103;
        coll__$1 = G__28104;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__28105 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__28105;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__28109 = cljs.core._EQ_;
    var expr__28110 = limit;
    if (cljs.core.truth_(pred__28109.call(null, 1, expr__28110))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__28109.call(null, 2, expr__28110))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__28112 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__28113 = limit__$1 - 1;
            var G__28114 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__28112;
            limit__$1 = G__28113;
            parts = G__28114;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__28115 = index - 1;
        index = G__28115;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___28116 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___28116)) {
        var replacement_28117 = temp__4124__auto___28116;
        buffer.append([cljs.core.str(replacement_28117)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__28118 = index + 1;
      index = G__28118;
      continue;
    }
    break;
  }
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.json");
goog.require("goog.Uri.QueryData");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.net.ErrorCode");
ajax.core.AjaxImpl = function() {
  var obj27972 = {};
  return obj27972;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
ajax.core.AjaxRequest = function() {
  var obj27974 = {};
  return obj27974;
}();
ajax.core._abort = function _abort(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxRequest$_abort$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxRequest$_abort$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._abort[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._abort["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core.DirectlySubmittable = function() {
  var obj27976 = {};
  return obj27976;
}();
ajax.core.AjaxResponse = function() {
  var obj27978 = {};
  return obj27978;
}();
ajax.core._status = function _status(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_status$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._status[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._status["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._status_text = function _status_text(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_status_text$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status_text$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._status_text[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._status_text["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status-text", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._body = function _body(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_body$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_body$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._body[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._body["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-body", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._get_response_header = function _get_response_header(this$, header) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_get_response_header$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_get_response_header$arity$2(this$, header);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._get_response_header[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._get_response_header["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-get-response-header", this$);
        }
      }
    }().call(null, this$, header);
  }
};
ajax.core._was_aborted = function _was_aborted(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_was_aborted$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_was_aborted$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._was_aborted[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._was_aborted["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-was-aborted", this$);
        }
      }
    }().call(null, this$);
  }
};
if (typeof FormData !== "undefined") {
  FormData.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof ArrayBufferView !== "undefined") {
  ArrayBufferView.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Blob !== "undefined") {
  Blob.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Document !== "undefined") {
  Document.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
ajax.core.submittable_QMARK_ = function submittable_QMARK_(params) {
  var or__3981__auto__ = function() {
    var G__27982 = params;
    if (G__27982) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__27982.ajax$core$DirectlySubmittable$;
        }
      }())) {
        return true;
      } else {
        if (!G__27982.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__27982);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__27982);
    }
  }();
  if (or__3981__auto__) {
    return or__3981__auto__;
  } else {
    return typeof params === "string";
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getResponseText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatus();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatusText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, this$__$1.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort(goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__27984) {
  var map__27985 = p__27984;
  var map__27985__$1 = cljs.core.seq_QMARK_.call(null, map__27985) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27985) : map__27985;
  var with_credentials = cljs.core.get.call(null, map__27985__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__27985__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  var G__27986 = this$__$1;
  goog.events.listen(G__27986, goog.net.EventType.COMPLETE, function(G__27986, this$__$1, map__27985, map__27985__$1, with_credentials, timeout) {
    return function(p1__27983_SHARP_) {
      return handler.call(null, p1__27983_SHARP_.target);
    };
  }(G__27986, this$__$1, map__27985, map__27985__$1, with_credentials, timeout));
  G__27986.setTimeoutInterval(timeout);
  G__27986.setWithCredentials(with_credentials);
  G__27986.send(uri, method, body, cljs.core.clj__GT_js.call(null, headers));
  return G__27986;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.response;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.status;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.statusText;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, 0, this$__$1.readyState);
};
XMLHttpRequest.prototype.ajax$core$AjaxRequest$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort();
};
XMLHttpRequest.prototype.ajax$core$AjaxImpl$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__27987) {
  var map__27988 = p__27987;
  var map__27988__$1 = cljs.core.seq_QMARK_.call(null, map__27988) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27988) : map__27988;
  var with_credentials = cljs.core.get.call(null, map__27988__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__27988__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  this$__$1.timeout = timeout;
  this$__$1.withCredentials = with_credentials;
  this$__$1.onreadystatechange = function(this$__$1, map__27988, map__27988__$1, with_credentials, timeout) {
    return function() {
      return handler.call(null, this$__$1);
    };
  }(this$__$1, map__27988, map__27988__$1, with_credentials, timeout);
  var G__27989 = this$__$1;
  G__27989.open(method, uri, true);
  var t_27996 = G__27989;
  var t_27997__$1 = function() {
    var seq__27990 = cljs.core.seq.call(null, headers);
    var chunk__27991 = null;
    var count__27992 = 0;
    var i__27993 = 0;
    while (true) {
      if (i__27993 < count__27992) {
        var vec__27994 = cljs.core._nth.call(null, chunk__27991, i__27993);
        var k = cljs.core.nth.call(null, vec__27994, 0, null);
        var v = cljs.core.nth.call(null, vec__27994, 1, null);
        t_27996.setRequestHeader(k, v);
        var G__27998 = seq__27990;
        var G__27999 = chunk__27991;
        var G__28000 = count__27992;
        var G__28001 = i__27993 + 1;
        seq__27990 = G__27998;
        chunk__27991 = G__27999;
        count__27992 = G__28000;
        i__27993 = G__28001;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__27990);
        if (temp__4126__auto__) {
          var seq__27990__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__27990__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__27990__$1);
            var G__28002 = cljs.core.chunk_rest.call(null, seq__27990__$1);
            var G__28003 = c__4768__auto__;
            var G__28004 = cljs.core.count.call(null, c__4768__auto__);
            var G__28005 = 0;
            seq__27990 = G__28002;
            chunk__27991 = G__28003;
            count__27992 = G__28004;
            i__27993 = G__28005;
            continue;
          } else {
            var vec__27995 = cljs.core.first.call(null, seq__27990__$1);
            var k = cljs.core.nth.call(null, vec__27995, 0, null);
            var v = cljs.core.nth.call(null, vec__27995, 1, null);
            t_27996.setRequestHeader(k, v);
            var G__28006 = cljs.core.next.call(null, seq__27990__$1);
            var G__28007 = null;
            var G__28008 = 0;
            var G__28009 = 0;
            seq__27990 = G__28006;
            chunk__27991 = G__28007;
            count__27992 = G__28008;
            i__27993 = G__28009;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  G__27989.send(function() {
    var or__3981__auto__ = body;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "";
    }
  }());
  return G__27989;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__28010) {
  var map__28011 = p__28010;
  var map__28011__$1 = cljs.core.seq_QMARK_.call(null, map__28011) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28011) : map__28011;
  var max_retries = cljs.core.get.call(null, map__28011__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var priority = cljs.core.get.call(null, map__28011__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var timeout = cljs.core.get.call(null, map__28011__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var id = cljs.core.get.call(null, map__28011__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, cljs.core.clj__GT_js.call(null, headers), priority, handler, max_retries);
};
ajax.core.abort = function abort(this$) {
  return ajax.core._abort.call(null, this$);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, ajax.core._body.call(null, xhrio));
};
ajax.core.edn_response_format = function() {
  var edn_response_format = null;
  var edn_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", -1428560544), "EDN", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
  };
  var edn_response_format__1 = function(opts) {
    return edn_response_format.call(null);
  };
  edn_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return edn_response_format__0.call(this);
      case 1:
        return edn_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edn_response_format.cljs$core$IFn$_invoke$arity$0 = edn_response_format__0;
  edn_response_format.cljs$core$IFn$_invoke$arity$1 = edn_response_format__1;
  return edn_response_format;
}();
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
};
ajax.core.transit_content_type = "application/transit+json; charset\x3dutf-8";
ajax.core.transit_write = function() {
  var transit_write = null;
  var transit_write__1 = function(writer) {
    return function(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  };
  var transit_write__2 = function(writer, params) {
    return cognitect.transit.write.call(null, writer, params);
  };
  transit_write = function(writer, params) {
    switch(arguments.length) {
      case 1:
        return transit_write__1.call(this, writer);
      case 2:
        return transit_write__2.call(this, writer, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_write.cljs$core$IFn$_invoke$arity$1 = transit_write__1;
  transit_write.cljs$core$IFn$_invoke$arity$2 = transit_write__2;
  return transit_write;
}();
ajax.core.transit_request_format = function() {
  var transit_request_format = null;
  var transit_request_format__0 = function() {
    return transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_request_format__1 = function(p__28012) {
    var map__28014 = p__28012;
    var map__28014__$1 = cljs.core.seq_QMARK_.call(null, map__28014) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28014) : map__28014;
    var opts = map__28014__$1;
    var writer = cljs.core.get.call(null, map__28014__$1, new cljs.core.Keyword(null, "writer", "writer", -277568236));
    var type = cljs.core.get.call(null, map__28014__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var writer__$1 = function() {
      var or__3981__auto__ = writer;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cognitect.transit.writer.call(null, function() {
          var or__3981__auto____$1 = type;
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write.call(null, writer__$1), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), ajax.core.transit_content_type], null);
  };
  transit_request_format = function(p__28012) {
    switch(arguments.length) {
      case 0:
        return transit_request_format__0.call(this);
      case 1:
        return transit_request_format__1.call(this, p__28012);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_request_format.cljs$core$IFn$_invoke$arity$0 = transit_request_format__0;
  transit_request_format.cljs$core$IFn$_invoke$arity$1 = transit_request_format__1;
  return transit_request_format;
}();
ajax.core.transit_read = function() {
  var transit_read = null;
  var transit_read__1 = function(reader) {
    return function(raw, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__2 = function(reader, raw) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__3 = function(reader, raw, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var data = cognitect.transit.read.call(null, reader, text);
    if (cljs.core.truth_(raw)) {
      return data;
    } else {
      return cljs.core.js__GT_clj.call(null, data);
    }
  };
  transit_read = function(reader, raw, xhrio) {
    switch(arguments.length) {
      case 1:
        return transit_read__1.call(this, reader);
      case 2:
        return transit_read__2.call(this, reader, raw);
      case 3:
        return transit_read__3.call(this, reader, raw, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_read.cljs$core$IFn$_invoke$arity$1 = transit_read__1;
  transit_read.cljs$core$IFn$_invoke$arity$2 = transit_read__2;
  transit_read.cljs$core$IFn$_invoke$arity$3 = transit_read__3;
  return transit_read;
}();
ajax.core.transit_response_format = function() {
  var transit_response_format = null;
  var transit_response_format__0 = function() {
    return transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_response_format__1 = function(p__28015) {
    var map__28017 = p__28015;
    var map__28017__$1 = cljs.core.seq_QMARK_.call(null, map__28017) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28017) : map__28017;
    var opts = map__28017__$1;
    var raw = cljs.core.get.call(null, map__28017__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var reader = cljs.core.get.call(null, map__28017__$1, new cljs.core.Keyword(null, "reader", "reader", 169660853));
    var type = cljs.core.get.call(null, map__28017__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var reader__$1 = function() {
      var or__3981__auto__ = reader;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cognitect.transit.reader.call(null, function() {
          var or__3981__auto____$1 = type;
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read.call(null, reader__$1, raw), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/transit+json"], null);
  };
  transit_response_format = function(p__28015) {
    switch(arguments.length) {
      case 0:
        return transit_response_format__0.call(this);
      case 1:
        return transit_response_format__1.call(this, p__28015);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_response_format.cljs$core$IFn$_invoke$arity$0 = transit_response_format__0;
  transit_response_format.cljs$core$IFn$_invoke$arity$1 = transit_response_format__1;
  return transit_response_format;
}();
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function() {
  var raw_response_format = null;
  var raw_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core._body, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
  };
  var raw_response_format__1 = function(opts) {
    return raw_response_format.call(null);
  };
  raw_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return raw_response_format__0.call(this);
      case 1:
        return raw_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  raw_response_format.cljs$core$IFn$_invoke$arity$0 = raw_response_format__0;
  raw_response_format.cljs$core$IFn$_invoke$arity$1 = raw_response_format__1;
  return raw_response_format;
}();
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.json_read = function() {
  var json_read = null;
  var json_read__1 = function(prefix) {
    return function(raw, keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__2 = function(prefix, raw) {
    return function(keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__3 = function(prefix, raw, keywords_QMARK_) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__4 = function(prefix, raw, keywords_QMARK_, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var text__$1 = cljs.core.truth_(function() {
      var and__3969__auto__ = prefix;
      if (cljs.core.truth_(and__3969__auto__)) {
        return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
      } else {
        return and__3969__auto__;
      }
    }()) ? text.substring(prefix.length()) : text;
    var json = goog.json.parse(text__$1);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
  json_read = function(prefix, raw, keywords_QMARK_, xhrio) {
    switch(arguments.length) {
      case 1:
        return json_read__1.call(this, prefix);
      case 2:
        return json_read__2.call(this, prefix, raw);
      case 3:
        return json_read__3.call(this, prefix, raw, keywords_QMARK_);
      case 4:
        return json_read__4.call(this, prefix, raw, keywords_QMARK_, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_read.cljs$core$IFn$_invoke$arity$1 = json_read__1;
  json_read.cljs$core$IFn$_invoke$arity$2 = json_read__2;
  json_read.cljs$core$IFn$_invoke$arity$3 = json_read__3;
  json_read.cljs$core$IFn$_invoke$arity$4 = json_read__4;
  return json_read;
}();
ajax.core.json_response_format = function() {
  var json_response_format = null;
  var json_response_format__0 = function() {
    return json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var json_response_format__1 = function(p__28018) {
    var map__28020 = p__28018;
    var map__28020__$1 = cljs.core.seq_QMARK_.call(null, map__28020) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28020) : map__28020;
    var raw = cljs.core.get.call(null, map__28020__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var keywords_QMARK_ = cljs.core.get.call(null, map__28020__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
    var prefix = cljs.core.get.call(null, map__28020__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join(""), new cljs.core.Keyword(null, 
    "content-type", "content-type", -508222634), "application/json"], null);
  };
  json_response_format = function(p__28018) {
    switch(arguments.length) {
      case 0:
        return json_response_format__0.call(this);
      case 1:
        return json_response_format__1.call(this, p__28018);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_response_format.cljs$core$IFn$_invoke$arity$0 = json_response_format__0;
  json_response_format.cljs$core$IFn$_invoke$arity$1 = json_response_format__1;
  return json_response_format;
}();
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.json_response_format, ajax.core.edn_response_format, ajax.core.transit_response_format, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.raw_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.raw_response_format], null), ajax.core.raw_response_format], 
null);
ajax.core.get_format = function() {
  var get_format = null;
  var get_format__1 = function(opts) {
    return function(format_entry) {
      if (cljs.core.vector_QMARK_.call(null, format_entry)) {
        return get_format.call(null, opts, cljs.core.second.call(null, format_entry));
      } else {
        if (cljs.core.map_QMARK_.call(null, format_entry)) {
          return format_entry;
        } else {
          return format_entry.call(null, opts);
        }
      }
    };
  };
  var get_format__2 = function(opts, format_entry) {
    if (cljs.core.vector_QMARK_.call(null, format_entry)) {
      return get_format.call(null, opts, cljs.core.second.call(null, format_entry));
    } else {
      if (cljs.core.map_QMARK_.call(null, format_entry)) {
        return format_entry;
      } else {
        return format_entry.call(null, opts);
      }
    }
  };
  get_format = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return get_format__1.call(this, opts);
      case 2:
        return get_format__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_format.cljs$core$IFn$_invoke$arity$1 = get_format__1;
  get_format.cljs$core$IFn$_invoke$arity$2 = get_format__2;
  return get_format;
}();
ajax.core.accept_entry = function() {
  var accept_entry = null;
  var accept_entry__1 = function(opts) {
    return function(format_entry) {
      var or__3981__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return "*/*";
      }
    };
  };
  var accept_entry__2 = function(opts, format_entry) {
    var or__3981__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "*/*";
    }
  };
  accept_entry = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return accept_entry__1.call(this, opts);
      case 2:
        return accept_entry__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  accept_entry.cljs$core$IFn$_invoke$arity$1 = accept_entry__1;
  accept_entry.cljs$core$IFn$_invoke$arity$2 = accept_entry__2;
  return accept_entry;
}();
ajax.core.detect_content_type = function() {
  var detect_content_type = null;
  var detect_content_type__1 = function(content_type) {
    return function(opts, format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var detect_content_type__2 = function(content_type, opts) {
    return function(format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var detect_content_type__3 = function(content_type, opts, format_entry) {
    var accept = ajax.core.accept_entry.call(null, opts, format_entry);
    return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
  };
  detect_content_type = function(content_type, opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return detect_content_type__1.call(this, content_type);
      case 2:
        return detect_content_type__2.call(this, content_type, opts);
      case 3:
        return detect_content_type__3.call(this, content_type, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_content_type.cljs$core$IFn$_invoke$arity$1 = detect_content_type__1;
  detect_content_type.cljs$core$IFn$_invoke$arity$2 = detect_content_type__2;
  detect_content_type.cljs$core$IFn$_invoke$arity$3 = detect_content_type__3;
  return detect_content_type;
}();
ajax.core.get_default_format = function get_default_format(xhrio, p__28021) {
  var map__28023 = p__28021;
  var map__28023__$1 = cljs.core.seq_QMARK_.call(null, map__28023) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28023) : map__28023;
  var opts = map__28023__$1;
  var response_format = cljs.core.get.call(null, map__28023__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var f = ajax.core.detect_content_type.call(null, function() {
    var or__3981__auto__ = ajax.core._get_response_header.call(null, xhrio, "Content-Type");
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "";
    }
  }(), opts);
  return ajax.core.get_format.call(null, opts, cljs.core.first.call(null, cljs.core.filter.call(null, f, response_format)));
};
ajax.core.detect_response_format_read = function() {
  var detect_response_format_read = null;
  var detect_response_format_read__1 = function(opts) {
    return function(xhrio) {
      return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
    };
  };
  var detect_response_format_read__2 = function(opts, xhrio) {
    return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
  };
  detect_response_format_read = function(opts, xhrio) {
    switch(arguments.length) {
      case 1:
        return detect_response_format_read__1.call(this, opts);
      case 2:
        return detect_response_format_read__2.call(this, opts, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = detect_response_format_read__1;
  detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = detect_response_format_read__2;
  return detect_response_format_read;
}();
ajax.core.accept_header = function accept_header(p__28024) {
  var map__28026 = p__28024;
  var map__28026__$1 = cljs.core.seq_QMARK_.call(null, map__28026) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28026) : map__28026;
  var opts = map__28026__$1;
  var response_format = cljs.core.get.call(null, map__28026__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return clojure.string.join.call(null, ", ", cljs.core.map.call(null, ajax.core.accept_entry.call(null, opts), response_format));
  } else {
    return ajax.core.accept_entry.call(null, opts, response_format);
  }
};
ajax.core.detect_response_format = function() {
  var detect_response_format = null;
  var detect_response_format__0 = function() {
    return detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.default_formats], null));
  };
  var detect_response_format__1 = function(opts) {
    var accept = ajax.core.accept_header.call(null, opts);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), [cljs.core.str("(from "), cljs.core.str(accept), cljs.core.str(")")].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), accept], null);
  };
  detect_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return detect_response_format__0.call(this);
      case 1:
        return detect_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format.cljs$core$IFn$_invoke$arity$0 = detect_response_format__0;
  detect_response_format.cljs$core$IFn$_invoke$arity$1 = detect_response_format__1;
  return detect_response_format;
}();
ajax.core.get_response_format = function get_response_format(p__28027) {
  var map__28029 = p__28027;
  var map__28029__$1 = cljs.core.seq_QMARK_.call(null, map__28029) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28029) : map__28029;
  var opts = map__28029__$1;
  var response_format = cljs.core.get.call(null, map__28029__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return ajax.core.detect_response_format.call(null, opts);
  } else {
    if (cljs.core.map_QMARK_.call(null, response_format)) {
      return response_format;
    } else {
      if (cljs.core.ifn_QMARK_.call(null, response_format)) {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), response_format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
      } else {
        throw new Error([cljs.core.str("unrecognized response format: "), cljs.core.str(response_format)].join(""));
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__28030, xhrio) {
  var map__28032 = p__28030;
  var map__28032__$1 = cljs.core.seq_QMARK_.call(null, map__28032) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28032) : map__28032;
  var description = cljs.core.get.call(null, map__28032__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), ajax.core._body.call(null, xhrio));
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function() {
  var fail__delegate = function(status, status_text, failure, params) {
    var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
  };
  var fail = function(status, status_text, failure, var_args) {
    var params = null;
    if (arguments.length > 3) {
      var G__28033__i = 0, G__28033__a = new Array(arguments.length - 3);
      while (G__28033__i < G__28033__a.length) {
        G__28033__a[G__28033__i] = arguments[G__28033__i + 3];
        ++G__28033__i;
      }
      params = new cljs.core.IndexedSeq(G__28033__a, 0);
    }
    return fail__delegate.call(this, status, status_text, failure, params);
  };
  fail.cljs$lang$maxFixedArity = 3;
  fail.cljs$lang$applyTo = function(arglist__28034) {
    var status = cljs.core.first(arglist__28034);
    arglist__28034 = cljs.core.next(arglist__28034);
    var status_text = cljs.core.first(arglist__28034);
    arglist__28034 = cljs.core.next(arglist__28034);
    var failure = cljs.core.first(arglist__28034);
    var params = cljs.core.rest(arglist__28034);
    return fail__delegate(status, status_text, failure, params);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
ajax.core.interpret_response = function interpret_response(p__28035, xhrio) {
  var map__28039 = p__28035;
  var map__28039__$1 = cljs.core.seq_QMARK_.call(null, map__28039) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28039) : map__28039;
  var format = map__28039__$1;
  var read = cljs.core.get.call(null, map__28039__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var status = ajax.core._status.call(null, xhrio);
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    if (cljs.core._EQ_.call(null, -1, status)) {
      if (cljs.core.truth_(ajax.core._was_aborted.call(null, xhrio))) {
        return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
      } else {
        return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
      }
    } else {
      try {
        var response = read.call(null, xhrio);
        if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response], null);
        } else {
          return fail.call(null, ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response);
        }
      } catch (e28041) {
        if (e28041 instanceof Object) {
          var e = e28041;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format, xhrio)], null);
        } else {
          throw e28041;
        }
      }
    }
  } catch (e28040) {
    if (e28040 instanceof Object) {
      var e = e28040;
      return ajax.core.fail.call(null, 0, e.message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e28040;
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.get_request_format = function get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return null;
    }
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.process_inputs = function process_inputs(p__28042, p__28043) {
  var map__28047 = p__28042;
  var map__28047__$1 = cljs.core.seq_QMARK_.call(null, map__28047) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28047) : map__28047;
  var headers = cljs.core.get.call(null, map__28047__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__28047__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var format = cljs.core.get.call(null, map__28047__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__28047__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__28047__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var map__28048 = p__28043;
  var map__28048__$1 = cljs.core.seq_QMARK_.call(null, map__28048) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28048) : map__28048;
  var content_type = cljs.core.get.call(null, map__28048__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["Accept", content_type], null), function() {
    var or__3981__auto__ = headers;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }());
  if (cljs.core._EQ_.call(null, ajax.core.normalize_method.call(null, method), "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers__$1], null);
  } else {
    var map__28049 = ajax.core.get_request_format.call(null, format);
    var map__28049__$1 = cljs.core.seq_QMARK_.call(null, map__28049) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28049) : map__28049;
    var content_type__$1 = cljs.core.get.call(null, map__28049__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
    var write = cljs.core.get.call(null, map__28049__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
    var body = !(write == null) ? write.call(null, params) : ajax.core.submittable_QMARK_.call(null, params) ? params : function() {
      throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
    }();
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$2 = cljs.core.merge.call(null, headers__$1, content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$2], null);
  }
};
ajax.core.js_handler = function() {
  var js_handler = null;
  var js_handler__1 = function(response_format) {
    return function(handler, xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__2 = function(response_format, handler) {
    return function(xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__3 = function(response_format, handler, xhrio) {
    var response = ajax.core.interpret_response.call(null, response_format, xhrio);
    return handler.call(null, response);
  };
  js_handler = function(response_format, handler, xhrio) {
    switch(arguments.length) {
      case 1:
        return js_handler__1.call(this, response_format);
      case 2:
        return js_handler__2.call(this, response_format, handler);
      case 3:
        return js_handler__3.call(this, response_format, handler, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_handler.cljs$core$IFn$_invoke$arity$1 = js_handler__1;
  js_handler.cljs$core$IFn$_invoke$arity$2 = js_handler__2;
  js_handler.cljs$core$IFn$_invoke$arity$3 = js_handler__3;
  return js_handler;
}();
ajax.core.base_handler = function base_handler(response_format, p__28050) {
  var map__28052 = p__28050;
  var map__28052__$1 = cljs.core.seq_QMARK_.call(null, map__28052) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28052) : map__28052;
  var handler = cljs.core.get.call(null, map__28052__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, response_format, handler);
  } else {
    throw new Error("No ajax handler provided.");
  }
};
ajax.core.ajax_request = function ajax_request(p__28053) {
  var map__28056 = p__28053;
  var map__28056__$1 = cljs.core.seq_QMARK_.call(null, map__28056) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28056) : map__28056;
  var opts = map__28056__$1;
  var api = cljs.core.get.call(null, map__28056__$1, new cljs.core.Keyword(null, "api", "api", -899839580));
  var method = cljs.core.get.call(null, map__28056__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var response_format = ajax.core.get_response_format.call(null, opts);
  var method__$1 = ajax.core.normalize_method.call(null, method);
  var vec__28057 = ajax.core.process_inputs.call(null, opts, response_format);
  var uri = cljs.core.nth.call(null, vec__28057, 0, null);
  var body = cljs.core.nth.call(null, vec__28057, 1, null);
  var headers = cljs.core.nth.call(null, vec__28057, 2, null);
  var handler = ajax.core.base_handler.call(null, response_format, opts);
  var api__$1 = function() {
    var or__3981__auto__ = api;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return new goog.net.XhrIo;
    }
  }();
  return ajax.core._js_ajax_request.call(null, api__$1, uri, method__$1, body, headers, handler, opts);
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__28059 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__28059) {
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_request_format.call(null);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format_2 = function keyword_response_format_2(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, format), keyword_response_format_2.call(null, cljs.core.second.call(null, format), format_params)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, format)) {
      return format;
    } else {
      if (cljs.core.fn_QMARK_.call(null, format)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
      } else {
        if (format == null) {
          return ajax.core.detect_response_format.call(null);
        } else {
          var G__28062 = format instanceof cljs.core.Keyword ? format.fqn : null;
          switch(G__28062) {
            case "detect":
              return ajax.core.detect_response_format.call(null);
              break;
            case "raw":
              return ajax.core.raw_response_format.call(null);
              break;
            case "edn":
              return ajax.core.edn_response_format.call(null);
              break;
            case "json":
              return ajax.core.json_response_format.call(null, format_params);
              break;
            case "transit":
              return ajax.core.transit_response_format.call(null, format_params);
              break;
            default:
              return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return cljs.core.apply.call(null, cljs.core.vector, cljs.core.map.call(null, function(p1__28064_SHARP_) {
      return ajax.core.keyword_response_format_2.call(null, p1__28064_SHARP_, format_params);
    }, format));
  } else {
    return ajax.core.keyword_response_format_2.call(null, format, format_params);
  }
};
ajax.core.transform_handler = function() {
  var transform_handler = null;
  var transform_handler__1 = function(p__28067) {
    var map__28075 = p__28067;
    var map__28075__$1 = cljs.core.seq_QMARK_.call(null, map__28075) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28075) : map__28075;
    var finally$ = cljs.core.get.call(null, map__28075__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__28075__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__28075__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    return function(map__28075, map__28075__$1, finally$, error_handler, handler) {
      return function(p__28076) {
        var vec__28077 = p__28076;
        var ok = cljs.core.nth.call(null, vec__28077, 0, null);
        var result = cljs.core.nth.call(null, vec__28077, 1, null);
        var temp__4124__auto___28078 = cljs.core.truth_(ok) ? handler : error_handler;
        if (cljs.core.truth_(temp__4124__auto___28078)) {
          var h_28079 = temp__4124__auto___28078;
          h_28079.call(null, result);
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, finally$)) {
          return finally$.call(null);
        } else {
          return null;
        }
      };
    }(map__28075, map__28075__$1, finally$, error_handler, handler);
  };
  var transform_handler__2 = function(p__28065, p__28066) {
    var map__28073 = p__28065;
    var map__28073__$1 = cljs.core.seq_QMARK_.call(null, map__28073) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28073) : map__28073;
    var finally$ = cljs.core.get.call(null, map__28073__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__28073__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__28073__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    var vec__28074 = p__28066;
    var ok = cljs.core.nth.call(null, vec__28074, 0, null);
    var result = cljs.core.nth.call(null, vec__28074, 1, null);
    var temp__4124__auto___28080 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4124__auto___28080)) {
      var h_28081 = temp__4124__auto___28080;
      h_28081.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
  transform_handler = function(p__28065, p__28066) {
    switch(arguments.length) {
      case 1:
        return transform_handler__1.call(this, p__28065);
      case 2:
        return transform_handler__2.call(this, p__28065, p__28066);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transform_handler.cljs$core$IFn$_invoke$arity$1 = transform_handler__1;
  transform_handler.cljs$core$IFn$_invoke$arity$2 = transform_handler__2;
  return transform_handler;
}();
ajax.core.transform_opts = function transform_opts(p__28082) {
  var map__28084 = p__28082;
  var map__28084__$1 = cljs.core.seq_QMARK_.call(null, map__28084) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28084) : map__28084;
  var opts = map__28084__$1;
  var params = cljs.core.get.call(null, map__28084__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var response_format = cljs.core.get.call(null, map__28084__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var format = cljs.core.get.call(null, map__28084__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__28084__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var needs_format = !(ajax.core.submittable_QMARK_.call(null, params) || cljs.core._EQ_.call(null, method, "GET"));
  var rf = cljs.core.truth_(function() {
    var or__3981__auto__ = format;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), rf, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, ajax.core.transform_opts.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method)));
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, opts) {
    var f__9105__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "GET", f__9105__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__9105__auto__);
  };
  var GET = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__28085__i = 0, G__28085__a = new Array(arguments.length - 1);
      while (G__28085__i < G__28085__a.length) {
        G__28085__a[G__28085__i] = arguments[G__28085__i + 1];
        ++G__28085__i;
      }
      opts = new cljs.core.IndexedSeq(G__28085__a, 0);
    }
    return GET__delegate.call(this, uri, opts);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__28086) {
    var uri = cljs.core.first(arglist__28086);
    var opts = cljs.core.rest(arglist__28086);
    return GET__delegate(uri, opts);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.HEAD = function() {
  var HEAD__delegate = function(uri, opts) {
    var f__9105__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__9105__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__9105__auto__);
  };
  var HEAD = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__28087__i = 0, G__28087__a = new Array(arguments.length - 1);
      while (G__28087__i < G__28087__a.length) {
        G__28087__a[G__28087__i] = arguments[G__28087__i + 1];
        ++G__28087__i;
      }
      opts = new cljs.core.IndexedSeq(G__28087__a, 0);
    }
    return HEAD__delegate.call(this, uri, opts);
  };
  HEAD.cljs$lang$maxFixedArity = 1;
  HEAD.cljs$lang$applyTo = function(arglist__28088) {
    var uri = cljs.core.first(arglist__28088);
    var opts = cljs.core.rest(arglist__28088);
    return HEAD__delegate(uri, opts);
  };
  HEAD.cljs$core$IFn$_invoke$arity$variadic = HEAD__delegate;
  return HEAD;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, opts) {
    var f__9105__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "POST", f__9105__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__9105__auto__);
  };
  var POST = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__28089__i = 0, G__28089__a = new Array(arguments.length - 1);
      while (G__28089__i < G__28089__a.length) {
        G__28089__a[G__28089__i] = arguments[G__28089__i + 1];
        ++G__28089__i;
      }
      opts = new cljs.core.IndexedSeq(G__28089__a, 0);
    }
    return POST__delegate.call(this, uri, opts);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__28090) {
    var uri = cljs.core.first(arglist__28090);
    var opts = cljs.core.rest(arglist__28090);
    return POST__delegate(uri, opts);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, opts) {
    var f__9105__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__9105__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__9105__auto__);
  };
  var PUT = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__28091__i = 0, G__28091__a = new Array(arguments.length - 1);
      while (G__28091__i < G__28091__a.length) {
        G__28091__a[G__28091__i] = arguments[G__28091__i + 1];
        ++G__28091__i;
      }
      opts = new cljs.core.IndexedSeq(G__28091__a, 0);
    }
    return PUT__delegate.call(this, uri, opts);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__28092) {
    var uri = cljs.core.first(arglist__28092);
    var opts = cljs.core.rest(arglist__28092);
    return PUT__delegate(uri, opts);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.DELETE = function() {
  var DELETE__delegate = function(uri, opts) {
    var f__9105__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__9105__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__9105__auto__);
  };
  var DELETE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__28093__i = 0, G__28093__a = new Array(arguments.length - 1);
      while (G__28093__i < G__28093__a.length) {
        G__28093__a[G__28093__i] = arguments[G__28093__i + 1];
        ++G__28093__i;
      }
      opts = new cljs.core.IndexedSeq(G__28093__a, 0);
    }
    return DELETE__delegate.call(this, uri, opts);
  };
  DELETE.cljs$lang$maxFixedArity = 1;
  DELETE.cljs$lang$applyTo = function(arglist__28094) {
    var uri = cljs.core.first(arglist__28094);
    var opts = cljs.core.rest(arglist__28094);
    return DELETE__delegate(uri, opts);
  };
  DELETE.cljs$core$IFn$_invoke$arity$variadic = DELETE__delegate;
  return DELETE;
}();
ajax.core.OPTIONS = function() {
  var OPTIONS__delegate = function(uri, opts) {
    var f__9105__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__9105__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__9105__auto__);
  };
  var OPTIONS = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__28095__i = 0, G__28095__a = new Array(arguments.length - 1);
      while (G__28095__i < G__28095__a.length) {
        G__28095__a[G__28095__i] = arguments[G__28095__i + 1];
        ++G__28095__i;
      }
      opts = new cljs.core.IndexedSeq(G__28095__a, 0);
    }
    return OPTIONS__delegate.call(this, uri, opts);
  };
  OPTIONS.cljs$lang$maxFixedArity = 1;
  OPTIONS.cljs$lang$applyTo = function(arglist__28096) {
    var uri = cljs.core.first(arglist__28096);
    var opts = cljs.core.rest(arglist__28096);
    return OPTIONS__delegate(uri, opts);
  };
  OPTIONS.cljs$core$IFn$_invoke$arity$variadic = OPTIONS__delegate;
  return OPTIONS;
}();
ajax.core.TRACE = function() {
  var TRACE__delegate = function(uri, opts) {
    var f__9105__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__9105__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__9105__auto__);
  };
  var TRACE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__28097__i = 0, G__28097__a = new Array(arguments.length - 1);
      while (G__28097__i < G__28097__a.length) {
        G__28097__a[G__28097__i] = arguments[G__28097__i + 1];
        ++G__28097__i;
      }
      opts = new cljs.core.IndexedSeq(G__28097__a, 0);
    }
    return TRACE__delegate.call(this, uri, opts);
  };
  TRACE.cljs$lang$maxFixedArity = 1;
  TRACE.cljs$lang$applyTo = function(arglist__28098) {
    var uri = cljs.core.first(arglist__28098);
    var opts = cljs.core.rest(arglist__28098);
    return TRACE__delegate(uri, opts);
  };
  TRACE.cljs$core$IFn$_invoke$arity$variadic = TRACE__delegate;
  return TRACE;
}();
goog.provide("plainText");
goog.require("cljs.core");
goog.provide("peerjs");
goog.require("cljs.core");
peerjs.peerParams = function() {
  var obj124636 = {"host":"localhost", "port":8E3, "key":"peerjs", "debug":true};
  return obj124636;
}();
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("servantWorkers");
goog.require("cljs.core");
goog.require("servant.worker");
goog.require("servant.core");
servantWorkers.worker_count = 2;
servantWorkers.worker_script = "wrkr.js";
servantWorkers.servant_channel = servant.core.spawn_servants.call(null, servantWorkers.worker_count, servantWorkers.worker_script);
goog.provide("intercomMake");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
intercomMake.makeInv = function makeInv(typ, message) {
  var obj93764 = {"type":"json", "data":JSON.stringify(function() {
    var obj93766 = {"type":"inv", "data":function() {
      var obj93768 = {"type":typ, "vector":message};
      return obj93768;
    }()};
    return obj93766;
  }())};
  return obj93764;
};
intercomMake.makeData = function makeData(typ, message) {
  return null;
};
intercomMake.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
intercomMake.makeVersion = function makeVersion(message) {
  var obj93772 = {"type":"version", "data":message};
  return obj93772;
};
intercomMake.makeConn = function makeConn(conn) {
  l.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj93776 = {"type":"conn", "data":conn};
  return obj93776;
};
intercomMake.makeGetBlock = function makeGetBlock(hash) {
  l.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_93882) {
            var state_val_93883 = state_93882[1];
            if (state_val_93883 === 7) {
              var state_93882__$1 = state_93882;
              var statearr_93884_93903 = state_93882__$1;
              statearr_93884_93903[2] = null;
              statearr_93884_93903[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_93883 === 1) {
                var inst_93842 = [];
                var inst_93843 = {"count":0, "blocks":inst_93842};
                var inst_93844 = inst_93843[intercomMake.hash_stop] = 0;
                var inst_93845 = intercomMake.gtBlock = inst_93843;
                var inst_93846 = app.blockchain.blockchainHeight.call(null, 1);
                var state_93882__$1 = function() {
                  var statearr_93885 = state_93882;
                  statearr_93885[5] = inst_93845;
                  statearr_93885[6] = inst_93844;
                  return statearr_93885;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93882__$1, 2, inst_93846);
              } else {
                if (state_val_93883 === 4) {
                  var inst_93880 = state_93882[2];
                  var state_93882__$1 = function() {
                    var statearr_93886 = state_93882;
                    statearr_93886[7] = inst_93880;
                    return statearr_93886;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_93882__$1, intercomMake.gtBlock);
                } else {
                  if (state_val_93883 === 6) {
                    var inst_93851 = state_93882[8];
                    var inst_93867 = inst_93851 < 10;
                    var state_93882__$1 = state_93882;
                    if (cljs.core.truth_(inst_93867)) {
                      var statearr_93887_93904 = state_93882__$1;
                      statearr_93887_93904[1] = 9;
                    } else {
                      var statearr_93888_93905 = state_93882__$1;
                      statearr_93888_93905[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_93883 === 3) {
                      var inst_93851 = state_93882[8];
                      var inst_93850 = state_93882[9];
                      var inst_93853 = "new loop " + inst_93850;
                      var inst_93854 = inst_93853 + " ";
                      var inst_93855 = l.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_93854, inst_93851);
                      var inst_93856 = "b" + inst_93850;
                      var inst_93857 = db.g.call(null, inst_93856);
                      var state_93882__$1 = function() {
                        var statearr_93889 = state_93882;
                        statearr_93889[10] = inst_93855;
                        return statearr_93889;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_93882__$1, 5, inst_93857);
                    } else {
                      if (state_val_93883 === 2) {
                        var inst_93848 = state_93882[2];
                        var inst_93849 = intercomMake.heightForBlock = inst_93848;
                        var inst_93850 = intercomMake.heightForBlock;
                        var inst_93851 = 0;
                        var state_93882__$1 = function() {
                          var statearr_93890 = state_93882;
                          statearr_93890[8] = inst_93851;
                          statearr_93890[11] = inst_93849;
                          statearr_93890[9] = inst_93850;
                          return statearr_93890;
                        }();
                        var statearr_93891_93906 = state_93882__$1;
                        statearr_93891_93906[2] = null;
                        statearr_93891_93906[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_93883 === 11) {
                          var inst_93851 = state_93882[8];
                          var inst_93873 = state_93882[2];
                          var inst_93874 = inst_93851 + 1;
                          var inst_93850 = inst_93873;
                          var inst_93851__$1 = inst_93874;
                          var state_93882__$1 = function() {
                            var statearr_93892 = state_93882;
                            statearr_93892[8] = inst_93851__$1;
                            statearr_93892[9] = inst_93850;
                            return statearr_93892;
                          }();
                          var statearr_93893_93907 = state_93882__$1;
                          statearr_93893_93907[2] = null;
                          statearr_93893_93907[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_93883 === 9) {
                            var inst_93850 = state_93882[9];
                            var inst_93869 = inst_93850 - 1;
                            var state_93882__$1 = state_93882;
                            var statearr_93894_93908 = state_93882__$1;
                            statearr_93894_93908[2] = inst_93869;
                            statearr_93894_93908[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_93883 === 5) {
                              var inst_93850 = state_93882[9];
                              var inst_93859 = state_93882[2];
                              var inst_93860 = intercomMake.blockg = inst_93859;
                              var inst_93861 = l.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_93862 = intercomMake.gtBlock.count = inst_93850;
                              var inst_93863 = intercomMake.gtBlock.blocks;
                              var inst_93864 = inst_93863.push(intercomMake.blockg);
                              var inst_93865 = 0 < inst_93850;
                              var state_93882__$1 = function() {
                                var statearr_93895 = state_93882;
                                statearr_93895[12] = inst_93861;
                                statearr_93895[13] = inst_93862;
                                statearr_93895[14] = inst_93860;
                                statearr_93895[15] = inst_93864;
                                return statearr_93895;
                              }();
                              if (cljs.core.truth_(inst_93865)) {
                                var statearr_93896_93909 = state_93882__$1;
                                statearr_93896_93909[1] = 6;
                              } else {
                                var statearr_93897_93910 = state_93882__$1;
                                statearr_93897_93910[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_93883 === 10) {
                                var inst_93850 = state_93882[9];
                                var inst_93871 = cljs.core.quot.call(null, inst_93850, 2);
                                var state_93882__$1 = state_93882;
                                var statearr_93898_93911 = state_93882__$1;
                                statearr_93898_93911[2] = inst_93871;
                                statearr_93898_93911[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_93883 === 8) {
                                  var inst_93878 = state_93882[2];
                                  var state_93882__$1 = state_93882;
                                  var statearr_93899_93912 = state_93882__$1;
                                  statearr_93899_93912[2] = inst_93878;
                                  statearr_93899_93912[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_93901 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_93901[0] = state_machine__6577__auto__;
              statearr_93901[1] = 1;
              return statearr_93901;
            };
            var state_machine__6577__auto____1 = function(state_93882) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_93882);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_93882) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_93882);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_93902 = f__6621__auto__.call(null);
        statearr_93902[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_93902;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("crypt");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
crypt.arraybtostring = function arraybtostring(buff) {
  return arrayBToString(buff);
};
crypt.encode = function encode(x) {
  return(new TextEncoder("utf-8")).encode(x);
};
crypt.shaC = cljs.core.async.chan.call(null);
crypt.resultToCh = function resultToCh(chan, digest) {
  crypt.m = crypt.arraybtostring.call(null, digest);
  l.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "to channel: %s", crypt.m);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96277) {
            var state_val_96278 = state_96277[1];
            if (state_val_96278 === 2) {
              var inst_96275 = state_96277[2];
              var state_96277__$1 = state_96277;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96277__$1, inst_96275);
            } else {
              if (state_val_96278 === 1) {
                var state_96277__$1 = state_96277;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_96277__$1, 2, chan, crypt.m);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96280 = [null, null, null, null, null];
              statearr_96280[0] = state_machine__6577__auto__;
              statearr_96280[1] = 1;
              return statearr_96280;
            };
            var state_machine__6577__auto____1 = function(state_96277) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96277);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96277) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96277);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96281 = f__6621__auto__.call(null);
        statearr_96281[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96281;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
crypt.shaCallb = function shaCallb(digest) {
  l.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "%s", "about to do hash2");
  crypt.h = crypt.arraybtostring.call(null, digest);
  l.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "", crypt.h);
  return pubsub.pub.call(null, "crypto", crypt.h);
};
crypt.sha256 = function sha256(x) {
  l.og.call(null, new cljs.core.Keyword(null, "sha256", "sha256", 1890611800), "sha256 %s", x);
  return crypto.subtle.digest(function() {
    var obj96285 = {"name":"SHA-256"};
    return obj96285;
  }(), crypt.encode.call(null, x)).then(crypt.shaCallb);
};
crypt.sha256c = function sha256c(c, x) {
  return crypto.subtle.digest(function() {
    var obj96289 = {"name":"SHA-256"};
    return obj96289;
  }(), crypt.encode.call(null, x)).then(c);
};
crypt.s256 = function s256(k) {
  console.log((new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049)).toString(), "about to sha256 ", k);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96330) {
            var state_val_96331 = state_96330[1];
            if (state_val_96331 === 2) {
              var inst_96323 = state_96330[2];
              var inst_96324 = crypt.arraybtostring.call(null, inst_96323);
              var inst_96325 = crypt.r = inst_96324;
              var inst_96326 = (new cljs.core.Keyword(null, "s256", "s256", -1445609188)).toString();
              var inst_96327 = "got from sha256 " + k;
              var inst_96328 = console.log(inst_96326, inst_96327, crypt.r);
              var state_96330__$1 = function() {
                var statearr_96332 = state_96330;
                statearr_96332[5] = inst_96328;
                statearr_96332[6] = inst_96325;
                return statearr_96332;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96330__$1, crypt.r);
            } else {
              if (state_val_96331 === 1) {
                var inst_96314 = cljs.core.async.chan.call(null);
                var inst_96317 = {"name":"SHA-256"};
                var inst_96318 = crypt.encode.call(null, k);
                var inst_96319 = crypto.subtle.digest(inst_96317, inst_96318);
                var inst_96320 = function() {
                  var c = inst_96314;
                  return function(c, inst_96314, inst_96317, inst_96318, inst_96319, state_val_96331, c__6620__auto__) {
                    return function(p1__96290_SHARP_) {
                      return cljs.core.async.put_BANG_.call(null, c, p1__96290_SHARP_);
                    };
                  }(c, inst_96314, inst_96317, inst_96318, inst_96319, state_val_96331, c__6620__auto__);
                }();
                var inst_96321 = inst_96319.then(inst_96320);
                var state_96330__$1 = function() {
                  var statearr_96333 = state_96330;
                  statearr_96333[7] = inst_96321;
                  return statearr_96333;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96330__$1, 2, inst_96314);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96335 = [null, null, null, null, null, null, null, null];
              statearr_96335[0] = state_machine__6577__auto__;
              statearr_96335[1] = 1;
              return statearr_96335;
            };
            var state_machine__6577__auto____1 = function(state_96330) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96330);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96330) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96330);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96336 = f__6621__auto__.call(null);
        statearr_96336[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96336;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
crypt.bHash = function bHash(blockHeader) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96360) {
            var state_val_96361 = state_96360[1];
            if (state_val_96361 === 2) {
              var inst_96357 = state_96360[2];
              var inst_96358 = crypt.blockHash = inst_96357;
              var state_96360__$1 = function() {
                var statearr_96362 = state_96360;
                statearr_96362[5] = inst_96358;
                return statearr_96362;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96360__$1, crypt.blockHash);
            } else {
              if (state_val_96361 === 1) {
                var inst_96352 = JSON.stringify(blockHeader);
                var inst_96353 = crypt.stringified = inst_96352;
                var inst_96354 = l.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "stringified", crypt.stringified);
                var inst_96355 = crypt.s256.call(null, crypt.stringified);
                var state_96360__$1 = function() {
                  var statearr_96363 = state_96360;
                  statearr_96363[6] = inst_96354;
                  statearr_96363[7] = inst_96353;
                  return statearr_96363;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96360__$1, 2, inst_96355);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96365 = [null, null, null, null, null, null, null, null];
              statearr_96365[0] = state_machine__6577__auto__;
              statearr_96365[1] = 1;
              return statearr_96365;
            };
            var state_machine__6577__auto____1 = function(state_96360) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96360);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96360) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96360);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96366 = f__6621__auto__.call(null);
        statearr_96366[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96366;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
crypt.merkleRoot = function merkleRoot(transactions) {
  l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions ", transactions);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96508) {
            var state_val_96509 = state_96508[1];
            if (state_val_96509 === 9) {
              var inst_96500 = state_96508[2];
              var inst_96501 = crypt.fromC = inst_96500;
              var inst_96502 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "from ch ", crypt.fromC);
              var inst_96503 = crypt.fromC.type = "fmr";
              var inst_96506 = {"value":crypt.fromC, "type":"fmr"};
              var state_96508__$1 = function() {
                var statearr_96511 = state_96508;
                statearr_96511[5] = inst_96501;
                statearr_96511[6] = inst_96502;
                statearr_96511[7] = inst_96503;
                return statearr_96511;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96508__$1, inst_96506);
            } else {
              if (state_val_96509 === 8) {
                var inst_96496 = state_96508[2];
                var state_96508__$1 = state_96508;
                var statearr_96512_96531 = state_96508__$1;
                statearr_96512_96531[2] = inst_96496;
                statearr_96512_96531[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_96509 === 7) {
                  var inst_96474 = state_96508[8];
                  var inst_96492 = inst_96474.shift();
                  var inst_96493 = inst_96474.length;
                  var tmp96510 = inst_96474;
                  var inst_96472 = inst_96492;
                  var inst_96473 = inst_96493;
                  var inst_96474__$1 = tmp96510;
                  var state_96508__$1 = function() {
                    var statearr_96513 = state_96508;
                    statearr_96513[9] = inst_96473;
                    statearr_96513[8] = inst_96474__$1;
                    statearr_96513[10] = inst_96472;
                    return statearr_96513;
                  }();
                  var statearr_96514_96532 = state_96508__$1;
                  statearr_96514_96532[2] = null;
                  statearr_96514_96532[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_96509 === 6) {
                    var inst_96473 = state_96508[9];
                    var inst_96474 = state_96508[8];
                    var inst_96472 = state_96508[10];
                    var inst_96488 = cljs.core.async.chan.call(null, 1);
                    var inst_96489 = function() {
                      var c__6620__auto____$1 = inst_96488;
                      var next = inst_96472;
                      var cnt = inst_96473;
                      var txs = inst_96474;
                      return function(c__6620__auto____$1, next, cnt, txs, inst_96473, inst_96474, inst_96472, inst_96488, state_val_96509, c__6620__auto__) {
                        return function() {
                          var f__6621__auto__ = function() {
                            var switch__6576__auto__ = function(c__6620__auto____$1, next, cnt, txs, inst_96473, inst_96474, inst_96472, inst_96488, state_val_96509, c__6620__auto__) {
                              return function(state_96486) {
                                var state_val_96487 = state_96486[1];
                                if (state_val_96487 === 1) {
                                  var state_96486__$1 = state_96486;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96486__$1, null);
                                } else {
                                  return null;
                                }
                              };
                            }(c__6620__auto____$1, next, cnt, txs, inst_96473, inst_96474, inst_96472, inst_96488, state_val_96509, c__6620__auto__);
                            return function(switch__6576__auto__, c__6620__auto____$1, next, cnt, txs, inst_96473, inst_96474, inst_96472, inst_96488, state_val_96509, c__6620__auto__) {
                              return function() {
                                var state_machine__6577__auto__ = null;
                                var state_machine__6577__auto____0 = function() {
                                  var statearr_96516 = [null, null, null, null, null];
                                  statearr_96516[0] = state_machine__6577__auto__;
                                  statearr_96516[1] = 1;
                                  return statearr_96516;
                                };
                                var state_machine__6577__auto____1 = function(state_96486) {
                                  while (true) {
                                    var result__6578__auto__ = switch__6576__auto__.call(null, state_96486);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__6578__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__6577__auto__ = function(state_96486) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__6577__auto____0.call(this);
                                    case 1:
                                      return state_machine__6577__auto____1.call(this, state_96486);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
                                state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
                                return state_machine__6577__auto__;
                              }();
                            }(switch__6576__auto__, c__6620__auto____$1, next, cnt, txs, inst_96473, inst_96474, inst_96472, inst_96488, state_val_96509, c__6620__auto__);
                          }();
                          var state__6622__auto__ = function() {
                            var statearr_96517 = f__6621__auto__.call(null);
                            statearr_96517[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto____$1;
                            return statearr_96517;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
                        };
                      }(c__6620__auto____$1, next, cnt, txs, inst_96473, inst_96474, inst_96472, inst_96488, state_val_96509, c__6620__auto__);
                    }();
                    var inst_96490 = cljs.core.async.impl.dispatch.run.call(null, inst_96489);
                    var state_96508__$1 = function() {
                      var statearr_96518 = state_96508;
                      statearr_96518[11] = inst_96490;
                      return statearr_96518;
                    }();
                    var statearr_96519_96533 = state_96508__$1;
                    statearr_96519_96533[2] = inst_96488;
                    statearr_96519_96533[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_96509 === 5) {
                      var inst_96473 = state_96508[9];
                      var inst_96472 = state_96508[10];
                      var inst_96478 = state_96508[2];
                      var inst_96479 = crypt.tx = inst_96478;
                      var inst_96480 = cljs.core.partial.call(null, crypt.resultToCh, crypt.shaC);
                      var inst_96481 = crypt.tx + inst_96472;
                      var inst_96482 = crypt.sha256c.call(null, inst_96480, inst_96481);
                      var inst_96483 = 0 === inst_96473;
                      var state_96508__$1 = function() {
                        var statearr_96520 = state_96508;
                        statearr_96520[12] = inst_96479;
                        statearr_96520[13] = inst_96482;
                        return statearr_96520;
                      }();
                      if (cljs.core.truth_(inst_96483)) {
                        var statearr_96521_96534 = state_96508__$1;
                        statearr_96521_96534[1] = 6;
                      } else {
                        var statearr_96522_96535 = state_96508__$1;
                        statearr_96522_96535[1] = 7;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_96509 === 4) {
                        var inst_96498 = state_96508[2];
                        var state_96508__$1 = function() {
                          var statearr_96523 = state_96508;
                          statearr_96523[14] = inst_96498;
                          return statearr_96523;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96508__$1, 9, crypt.shaC);
                      } else {
                        if (state_val_96509 === 3) {
                          var inst_96473 = state_96508[9];
                          var inst_96476 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "count  %s", inst_96473);
                          var state_96508__$1 = function() {
                            var statearr_96524 = state_96508;
                            statearr_96524[15] = inst_96476;
                            return statearr_96524;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96508__$1, 5, crypt.shaC);
                        } else {
                          if (state_val_96509 === 2) {
                            var inst_96457 = state_96508[2];
                            var inst_96458 = cljs.core.async.chan.call(null);
                            var inst_96459 = crypt.shaC = inst_96458;
                            var inst_96460 = transactions.length;
                            var inst_96461 = crypt.originl = inst_96460;
                            var inst_96462 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions length ", crypt.originl);
                            var inst_96463 = transactions.shift();
                            var inst_96464 = crypt.tx = inst_96463;
                            var inst_96465 = transactions.shift();
                            var inst_96466 = crypt.next = inst_96465;
                            var inst_96467 = cljs.core.partial.call(null, crypt.resultToCh, crypt.shaC);
                            var inst_96468 = crypt.tx + crypt.next;
                            var inst_96469 = crypt.sha256c.call(null, inst_96467, inst_96468);
                            var inst_96470 = transactions.shift();
                            var inst_96471 = transactions.length;
                            var inst_96472 = inst_96470;
                            var inst_96473 = inst_96471;
                            var inst_96474 = transactions;
                            var state_96508__$1 = function() {
                              var statearr_96525 = state_96508;
                              statearr_96525[9] = inst_96473;
                              statearr_96525[16] = inst_96462;
                              statearr_96525[17] = inst_96459;
                              statearr_96525[8] = inst_96474;
                              statearr_96525[18] = inst_96469;
                              statearr_96525[19] = inst_96466;
                              statearr_96525[10] = inst_96472;
                              statearr_96525[20] = inst_96464;
                              statearr_96525[21] = inst_96461;
                              statearr_96525[22] = inst_96457;
                              return statearr_96525;
                            }();
                            var statearr_96526_96536 = state_96508__$1;
                            statearr_96526_96536[2] = null;
                            statearr_96526_96536[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_96509 === 1) {
                              var inst_96449 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions2 ", transactions);
                              var inst_96450 = crypt.tr = transactions;
                              var inst_96451 = function() {
                                return function(inst_96449, inst_96450, state_val_96509, c__6620__auto__) {
                                  return function(x) {
                                    console.log("OLD : ", x);
                                    console.log("NEW : ", crypt.tr);
                                    return crypt.tr;
                                  };
                                }(inst_96449, inst_96450, state_val_96509, c__6620__auto__);
                              }();
                              var inst_96452 = crypt.a = inst_96451;
                              var inst_96453 = function() {
                                return function(inst_96449, inst_96450, inst_96451, inst_96452, state_val_96509, c__6620__auto__) {
                                  return function() {
                                    return db.update.call(null, "txs", crypt.a);
                                  };
                                }(inst_96449, inst_96450, inst_96451, inst_96452, state_val_96509, c__6620__auto__);
                              }();
                              var inst_96454 = crypt.utx = inst_96453;
                              var inst_96455 = db.update.call(null, "txs", crypt.a);
                              var state_96508__$1 = function() {
                                var statearr_96527 = state_96508;
                                statearr_96527[23] = inst_96452;
                                statearr_96527[24] = inst_96454;
                                statearr_96527[25] = inst_96449;
                                statearr_96527[26] = inst_96450;
                                return statearr_96527;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96508__$1, 2, inst_96455);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96529 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_96529[0] = state_machine__6577__auto__;
              statearr_96529[1] = 1;
              return statearr_96529;
            };
            var state_machine__6577__auto____1 = function(state_96508) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96508);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96508) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96508);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96530 = f__6621__auto__.call(null);
        statearr_96530[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96530;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("reagent.interop");
goog.require("cljs.core");
reagent.interop.fvars = {};
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__28465 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__28465, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__28465, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__28467__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__3981__auto___28468 = self__.p;
    if (cljs.core.truth_(or__3981__auto___28468)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__28467 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__28469__i = 0, G__28469__a = new Array(arguments.length - 1);
      while (G__28469__i < G__28469__a.length) {
        G__28469__a[G__28469__i] = arguments[G__28469__i + 1];
        ++G__28469__i;
      }
      a = new cljs.core.IndexedSeq(G__28469__a, 0);
    }
    return G__28467__delegate.call(this, self__, a);
  };
  G__28467.cljs$lang$maxFixedArity = 1;
  G__28467.cljs$lang$applyTo = function(arglist__28470) {
    var self__ = cljs.core.first(arglist__28470);
    var a = cljs.core.rest(arglist__28470);
    return G__28467__delegate(self__, a);
  };
  G__28467.cljs$core$IFn$_invoke$arity$variadic = G__28467__delegate;
  return G__28467;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args28466) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args28466)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__28471__delegate = function(a) {
    var _ = this;
    var or__3981__auto___28472 = self__.p;
    if (cljs.core.truth_(or__3981__auto___28472)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__28471 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__28473__i = 0, G__28473__a = new Array(arguments.length - 0);
      while (G__28473__i < G__28473__a.length) {
        G__28473__a[G__28473__i] = arguments[G__28473__i + 0];
        ++G__28473__i;
      }
      a = new cljs.core.IndexedSeq(G__28473__a, 0);
    }
    return G__28471__delegate.call(this, a);
  };
  G__28471.cljs$lang$maxFixedArity = 0;
  G__28471.cljs$lang$applyTo = function(arglist__28474) {
    var a = cljs.core.seq(arglist__28474);
    return G__28471__delegate(a);
  };
  G__28471.cljs$core$IFn$_invoke$arity$variadic = G__28471__delegate;
  return G__28471;
}();
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function __GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return[cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null))))].join(""));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e28476) {
    if (e28476 instanceof Object) {
      var e = e28476;
      if (typeof console !== "undefined") {
        console.log("Error unmounting:");
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e28476;
    }
  }
};
reagent.impl.util.render_component = function render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_28481 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_28481) {
        return function() {
          var _STAR_always_update_STAR_28482 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_28482;
          }
        };
      }(_STAR_always_update_STAR_28481));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_28481;
    }
  } catch (e28480) {
    if (e28480 instanceof Object) {
      var e = e28480;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e28480;
    }
  }
};
reagent.impl.util.re_render_component = function re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function force_update_all() {
  var seq__28487_28491 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__28488_28492 = null;
  var count__28489_28493 = 0;
  var i__28490_28494 = 0;
  while (true) {
    if (i__28490_28494 < count__28489_28493) {
      var v_28495 = cljs.core._nth.call(null, chunk__28488_28492, i__28490_28494);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_28495);
      var G__28496 = seq__28487_28491;
      var G__28497 = chunk__28488_28492;
      var G__28498 = count__28489_28493;
      var G__28499 = i__28490_28494 + 1;
      seq__28487_28491 = G__28496;
      chunk__28488_28492 = G__28497;
      count__28489_28493 = G__28498;
      i__28490_28494 = G__28499;
      continue;
    } else {
      var temp__4126__auto___28500 = cljs.core.seq.call(null, seq__28487_28491);
      if (temp__4126__auto___28500) {
        var seq__28487_28501__$1 = temp__4126__auto___28500;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28487_28501__$1)) {
          var c__4768__auto___28502 = cljs.core.chunk_first.call(null, seq__28487_28501__$1);
          var G__28503 = cljs.core.chunk_rest.call(null, seq__28487_28501__$1);
          var G__28504 = c__4768__auto___28502;
          var G__28505 = cljs.core.count.call(null, c__4768__auto___28502);
          var G__28506 = 0;
          seq__28487_28491 = G__28503;
          chunk__28488_28492 = G__28504;
          count__28489_28493 = G__28505;
          i__28490_28494 = G__28506;
          continue;
        } else {
          var v_28507 = cljs.core.first.call(null, seq__28487_28501__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_28507);
          var G__28508 = cljs.core.next.call(null, seq__28487_28501__$1);
          var G__28509 = null;
          var G__28510 = 0;
          var G__28511 = 0;
          seq__28487_28491 = G__28508;
          chunk__28488_28492 = G__28509;
          count__28489_28493 = G__28510;
          i__28490_28494 = G__28511;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
reagent.impl.util.Wrapper = function(state, callback, changed) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114688;
};
reagent.impl.util.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.impl.util.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.impl.util.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.impl.util.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  self__.changed = true;
  self__.state = newval;
  self__.callback.call(null, newval);
  return self__.state;
};
reagent.impl.util.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.state;
};
reagent.impl.util.Wrapper.cljs$lang$type = true;
reagent.impl.util.Wrapper.cljs$lang$ctorStr = "reagent.impl.util/Wrapper";
reagent.impl.util.Wrapper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.impl.util/Wrapper");
};
reagent.impl.util.__GT_Wrapper = function __GT_Wrapper(state, callback, changed) {
  return new reagent.impl.util.Wrapper(state, callback, changed);
};
reagent.impl.util.make_wrapper = function make_wrapper(value, callback_fn, args) {
  return new reagent.impl.util.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false);
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_28362 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_28362;
  }
};
reagent.ratom.captured = function captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function __GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__28366__delegate = function(x, p__28363) {
      var map__28365 = p__28363;
      var map__28365__$1 = cljs.core.seq_QMARK_.call(null, map__28365) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28365) : map__28365;
      var validator = cljs.core.get.call(null, map__28365__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__28365__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__28366 = function(x, var_args) {
      var p__28363 = null;
      if (arguments.length > 1) {
        var G__28367__i = 0, G__28367__a = new Array(arguments.length - 1);
        while (G__28367__i < G__28367__a.length) {
          G__28367__a[G__28367__i] = arguments[G__28367__i + 1];
          ++G__28367__i;
        }
        p__28363 = new cljs.core.IndexedSeq(G__28367__a, 0);
      }
      return G__28366__delegate.call(this, x, p__28363);
    };
    G__28366.cljs$lang$maxFixedArity = 1;
    G__28366.cljs$lang$applyTo = function(arglist__28368) {
      var x = cljs.core.first(arglist__28368);
      var p__28363 = cljs.core.rest(arglist__28368);
      return G__28366__delegate(x, p__28363);
    };
    G__28366.cljs$core$IFn$_invoke$arity$variadic = G__28366__delegate;
    return G__28366;
  }();
  atom = function(x, var_args) {
    var p__28363 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__28369 = null;
        if (arguments.length > 1) {
          var G__28370__i = 0, G__28370__a = new Array(arguments.length - 1);
          while (G__28370__i < G__28370__a.length) {
            G__28370__a[G__28370__i] = arguments[G__28370__i + 1];
            ++G__28370__i;
          }
          G__28369 = new cljs.core.IndexedSeq(G__28370__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__28369);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.ratom.peek_at = function peek_at(a, path) {
  var _STAR_ratom_context_STAR_28372 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, a), path);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_28372;
  }
};
reagent.ratom.RCursor = function(path, ratom, setf, reaction) {
  this.path = path;
  this.ratom = ratom;
  this.setf = setf;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path, self__.setf], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, self__.ratom, oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, self__.ratom, key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, self__.ratom, key);
};
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cCursor: ");
  cljs.core.pr_writer.call(null, self__.path, writer, opts);
  cljs.core._write.call(null, writer, " ");
  cljs.core.pr_writer.call(null, self__.ratom, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path)));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y, more));
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.setf == null) {
    return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, new_value);
  } else {
    return self__.setf.call(null, new_value);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
  } else {
    if (self__.reaction == null) {
      self__.reaction = reagent.ratom.make_reaction.call(null, function(this$__$1) {
        return function() {
          return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
        };
      }(this$__$1));
    } else {
    }
    return cljs.core.deref.call(null, self__.reaction);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom) && cljs.core._EQ_.call(null, self__.setf, other.setf);
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function __GT_RCursor(path, ratom, setf, reaction) {
  return new reagent.ratom.RCursor(path, ratom, setf, reaction);
};
reagent.ratom.cursor = function() {
  var cursor = null;
  var cursor__2 = function(path, ra) {
    return new reagent.ratom.RCursor(path, ra, null, null);
  };
  var cursor__4 = function(path, ra, setf, args) {
    return new reagent.ratom.RCursor(path, ra, new reagent.impl.util.partial_ifn(setf, args, null), null);
  };
  cursor = function(path, ra, setf, args) {
    switch(arguments.length) {
      case 2:
        return cursor__2.call(this, path, ra);
      case 4:
        return cursor__4.call(this, path, ra, setf, args);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$4 = cursor__4;
  return cursor;
}();
reagent.ratom.IDisposable = function() {
  var obj28374 = {};
  return obj28374;
}();
reagent.ratom.dispose_BANG_ = function dispose_BANG_(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj28376 = {};
  return obj28376;
}();
reagent.ratom.run = function run(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = reagent.ratom.run[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom.run["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj28378 = {};
  return obj28378;
}();
reagent.ratom._update_watching = function _update_watching(this$, derefed) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function _handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__3969__auto__ = k;
    if (and__3969__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4625__auto__ = k == null ? null : k;
    return function() {
      var or__3981__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom.call_watches = function call_watches(obs, watches, oldval, newval) {
  return cljs.core.reduce_kv.call(null, function(_, key, f) {
    f.call(null, key, obs, oldval, newval);
    return null;
  }, null, watches);
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__3969__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__3969__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__3981__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__28379_28391 = cljs.core.seq.call(null, derefed);
  var chunk__28380_28392 = null;
  var count__28381_28393 = 0;
  var i__28382_28394 = 0;
  while (true) {
    if (i__28382_28394 < count__28381_28393) {
      var w_28395 = cljs.core._nth.call(null, chunk__28380_28392, i__28382_28394);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_28395)) {
      } else {
        cljs.core.add_watch.call(null, w_28395, this$__$1, reagent.ratom._handle_change);
      }
      var G__28396 = seq__28379_28391;
      var G__28397 = chunk__28380_28392;
      var G__28398 = count__28381_28393;
      var G__28399 = i__28382_28394 + 1;
      seq__28379_28391 = G__28396;
      chunk__28380_28392 = G__28397;
      count__28381_28393 = G__28398;
      i__28382_28394 = G__28399;
      continue;
    } else {
      var temp__4126__auto___28400 = cljs.core.seq.call(null, seq__28379_28391);
      if (temp__4126__auto___28400) {
        var seq__28379_28401__$1 = temp__4126__auto___28400;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28379_28401__$1)) {
          var c__4768__auto___28402 = cljs.core.chunk_first.call(null, seq__28379_28401__$1);
          var G__28403 = cljs.core.chunk_rest.call(null, seq__28379_28401__$1);
          var G__28404 = c__4768__auto___28402;
          var G__28405 = cljs.core.count.call(null, c__4768__auto___28402);
          var G__28406 = 0;
          seq__28379_28391 = G__28403;
          chunk__28380_28392 = G__28404;
          count__28381_28393 = G__28405;
          i__28382_28394 = G__28406;
          continue;
        } else {
          var w_28407 = cljs.core.first.call(null, seq__28379_28401__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_28407)) {
          } else {
            cljs.core.add_watch.call(null, w_28407, this$__$1, reagent.ratom._handle_change);
          }
          var G__28408 = cljs.core.next.call(null, seq__28379_28401__$1);
          var G__28409 = null;
          var G__28410 = 0;
          var G__28411 = 0;
          seq__28379_28391 = G__28408;
          chunk__28380_28392 = G__28409;
          count__28381_28393 = G__28410;
          i__28382_28394 = G__28411;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__28383_28412 = cljs.core.seq.call(null, self__.watching);
  var chunk__28384_28413 = null;
  var count__28385_28414 = 0;
  var i__28386_28415 = 0;
  while (true) {
    if (i__28386_28415 < count__28385_28414) {
      var w_28416 = cljs.core._nth.call(null, chunk__28384_28413, i__28386_28415);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_28416)) {
      } else {
        cljs.core.remove_watch.call(null, w_28416, this$__$1);
      }
      var G__28417 = seq__28383_28412;
      var G__28418 = chunk__28384_28413;
      var G__28419 = count__28385_28414;
      var G__28420 = i__28386_28415 + 1;
      seq__28383_28412 = G__28417;
      chunk__28384_28413 = G__28418;
      count__28385_28414 = G__28419;
      i__28386_28415 = G__28420;
      continue;
    } else {
      var temp__4126__auto___28421 = cljs.core.seq.call(null, seq__28383_28412);
      if (temp__4126__auto___28421) {
        var seq__28383_28422__$1 = temp__4126__auto___28421;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28383_28422__$1)) {
          var c__4768__auto___28423 = cljs.core.chunk_first.call(null, seq__28383_28422__$1);
          var G__28424 = cljs.core.chunk_rest.call(null, seq__28383_28422__$1);
          var G__28425 = c__4768__auto___28423;
          var G__28426 = cljs.core.count.call(null, c__4768__auto___28423);
          var G__28427 = 0;
          seq__28383_28412 = G__28424;
          chunk__28384_28413 = G__28425;
          count__28385_28414 = G__28426;
          i__28386_28415 = G__28427;
          continue;
        } else {
          var w_28428 = cljs.core.first.call(null, seq__28383_28422__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_28428)) {
          } else {
            cljs.core.remove_watch.call(null, w_28428, this$__$1);
          }
          var G__28429 = cljs.core.next.call(null, seq__28383_28422__$1);
          var G__28430 = null;
          var G__28431 = 0;
          var G__28432 = 0;
          seq__28383_28412 = G__28429;
          chunk__28384_28413 = G__28430;
          count__28385_28414 = G__28431;
          i__28386_28415 = G__28432;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__28387_28433 = cljs.core.seq.call(null, self__.watching);
  var chunk__28388_28434 = null;
  var count__28389_28435 = 0;
  var i__28390_28436 = 0;
  while (true) {
    if (i__28390_28436 < count__28389_28435) {
      var w_28437 = cljs.core._nth.call(null, chunk__28388_28434, i__28390_28436);
      cljs.core.remove_watch.call(null, w_28437, this$__$1);
      var G__28438 = seq__28387_28433;
      var G__28439 = chunk__28388_28434;
      var G__28440 = count__28389_28435;
      var G__28441 = i__28390_28436 + 1;
      seq__28387_28433 = G__28438;
      chunk__28388_28434 = G__28439;
      count__28389_28435 = G__28440;
      i__28390_28436 = G__28441;
      continue;
    } else {
      var temp__4126__auto___28442 = cljs.core.seq.call(null, seq__28387_28433);
      if (temp__4126__auto___28442) {
        var seq__28387_28443__$1 = temp__4126__auto___28442;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28387_28443__$1)) {
          var c__4768__auto___28444 = cljs.core.chunk_first.call(null, seq__28387_28443__$1);
          var G__28445 = cljs.core.chunk_rest.call(null, seq__28387_28443__$1);
          var G__28446 = c__4768__auto___28444;
          var G__28447 = cljs.core.count.call(null, c__4768__auto___28444);
          var G__28448 = 0;
          seq__28387_28433 = G__28445;
          chunk__28388_28434 = G__28446;
          count__28389_28435 = G__28447;
          i__28390_28436 = G__28448;
          continue;
        } else {
          var w_28449 = cljs.core.first.call(null, seq__28387_28443__$1);
          cljs.core.remove_watch.call(null, w_28449, this$__$1);
          var G__28450 = cljs.core.next.call(null, seq__28387_28443__$1);
          var G__28451 = null;
          var G__28452 = 0;
          var G__28453 = 0;
          seq__28387_28433 = G__28450;
          chunk__28388_28434 = G__28451;
          count__28389_28435 = G__28452;
          i__28390_28436 = G__28453;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = cljs.core.PersistentHashSet.EMPTY;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  var old_value = self__.state;
  self__.state = new_value;
  cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  return new_value;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, self__.state, x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(self__.on_set)) {
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  return reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldval, newval);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, function() {
    var or__3981__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
    var x__10684__auto___28454 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.auto_run, reagent.ratom._STAR_ratom_context_STAR_], null);
    if (typeof console !== "undefined") {
      console.log([cljs.core.str([cljs.core.str("dbg "), cljs.core.str("reagent.ratom"), cljs.core.str(":"), cljs.core.str(249), cljs.core.str(": "), cljs.core.str("[auto-run *ratom-context*]"), cljs.core.str(": "), cljs.core.str(cljs.core.pr_str.call(null, x__10684__auto___28454))].join(""))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(function() {
    var or__3981__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Reaction derefed outside auto-running context"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), new cljs.core.Symbol(null, "auto-run", "auto-run", -696035332, null), new cljs.core.Symbol(null, "*ratom-context*", "*ratom-context*", -1557728360, null))))].join(""));
  }
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  if (cljs.core.truth_(self__.dirty_QMARK_)) {
    return reagent.ratom.run.call(null, this$__$1);
  } else {
    return self__.state;
  }
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function __GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var make_reaction__delegate = function(f, p__28455) {
    var map__28457 = p__28455;
    var map__28457__$1 = cljs.core.seq_QMARK_.call(null, map__28457) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28457) : map__28457;
    var derefed = cljs.core.get.call(null, map__28457__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__28457__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__28457__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__28457__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, cljs.core.PersistentArrayMap.EMPTY, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var make_reaction = function(f, var_args) {
    var p__28455 = null;
    if (arguments.length > 1) {
      var G__28458__i = 0, G__28458__a = new Array(arguments.length - 1);
      while (G__28458__i < G__28458__a.length) {
        G__28458__a[G__28458__i] = arguments[G__28458__i + 1];
        ++G__28458__i;
      }
      p__28455 = new cljs.core.IndexedSeq(G__28458__a, 0);
    }
    return make_reaction__delegate.call(this, f, p__28455);
  };
  make_reaction.cljs$lang$maxFixedArity = 1;
  make_reaction.cljs$lang$applyTo = function(arglist__28459) {
    var f = cljs.core.first(arglist__28459);
    var p__28455 = cljs.core.rest(arglist__28459);
    return make_reaction__delegate(f, p__28455);
  };
  make_reaction.cljs$core$IFn$_invoke$arity$variadic = make_reaction__delegate;
  return make_reaction;
}();
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__3981__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var or__3981__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__3981__auto____$1)) {
      return or__3981__auto____$1;
    } else {
      var or__3981__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__3981__auto____$2)) {
        return or__3981__auto____$2;
      } else {
        var or__3981__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__3981__auto____$3)) {
          return or__3981__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__4868__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4868__auto__) {
      var c_28316 = a[i];
      if (cljs.core.truth_(c_28316["cljsIsDirty"])) {
        c_28316["forceUpdate"]();
      } else {
      }
      var G__28317 = i + 1;
      i = G__28317;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function run_funs(a) {
  var n__4868__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4868__auto__) {
      a[i].call(null);
      var G__28318 = i + 1;
      i = G__28318;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function __GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function is_reagent_component(c) {
  var G__28320 = c;
  var G__28320__$1 = G__28320 == null ? null : G__28320["props"];
  var G__28320__$2 = G__28320__$1 == null ? null : G__28320__$1["argv"];
  return G__28320__$2;
};
reagent.impl.batching.run_reactively = function run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function dispose(c) {
  var G__28322_28323 = c["cljsRatom"];
  var G__28322_28324__$1 = G__28322_28323 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__28322_28323);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.state = function state(this$) {
  return cljs.core.deref.call(null, reagent.impl.component.state_atom.call(null, this$));
};
reagent.impl.component.replace_state = function replace_state(this$, new_state) {
  return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), new_state);
};
reagent.impl.component.set_state = function set_state(this$, new_state) {
  return cljs.core.swap_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.impl.component.as_element = function as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function do_render(c) {
  var _STAR_current_component_STAR_28298 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }();
    var p = c["props"];
    var res = c["componentFunction"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__28299 = n;
      switch(G__28299) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_28298;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function custom_wrapper(key, f) {
  var G__28302 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__28302) {
    case "componentWillUnmount":
      return function(G__28302) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__28302);
      break;
    case "componentWillMount":
      return function(G__28302) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__28302);
      break;
    case "componentDidUpdate":
      return function(G__28302) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__28302);
      break;
    case "componentWillUpdate":
      return function(G__28302) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__28302);
      break;
    case "shouldComponentUpdate":
      return function(G__28302) {
        return function(nextprops, nextstate) {
          var or__3981__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__28302);
      break;
    case "componentWillReceiveProps":
      return function(G__28302) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__28302);
      break;
    case "getInitialState":
      return function(G__28302) {
        return function() {
          var c = this;
          return reagent.impl.component.set_state.call(null, c, f.call(null, c));
        };
      }(G__28302);
      break;
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__28304__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__28304 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__28305__i = 0, G__28305__a = new Array(arguments.length - 0);
          while (G__28305__i < G__28305__a.length) {
            G__28305__a[G__28305__i] = arguments[G__28305__i + 0];
            ++G__28305__i;
          }
          args = new cljs.core.IndexedSeq(G__28305__a, 0);
        }
        return G__28304__delegate.call(this, args);
      };
      G__28304.cljs$lang$maxFixedArity = 0;
      G__28304.cljs$lang$applyTo = function(arglist__28306) {
        var args = cljs.core.seq(arglist__28306);
        return G__28304__delegate(args);
      };
      G__28304.cljs$core$IFn$_invoke$arity$variadic = G__28304__delegate;
      return G__28304;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104), null], null), null);
reagent.impl.component.dont_bind = function dont_bind(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    var G__28308 = f;
    G__28308["__reactDontBind"] = true;
    return G__28308;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = wrap;
      if (cljs.core.truth_(and__3969__auto__)) {
        return f;
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
      }
    } else {
    }
    var or__3981__auto__ = wrap;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function add_render(fun_map, render_f) {
  return cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
};
reagent.impl.component.wrap_funs = function wrap_funs(fun_map) {
  var render_fun = function() {
    var or__3981__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null))))].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__3981__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      var or__3981__auto____$1 = render_fun["displayName"];
      if (cljs.core.truth_(or__3981__auto____$1)) {
        return or__3981__auto____$1;
      } else {
        var or__3981__auto____$2 = render_fun["name"];
        if (cljs.core.truth_(or__3981__auto____$2)) {
          return or__3981__auto____$2;
        } else {
          return "";
        }
      }
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : name;
  var fmap = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun);
  return cljs.core.reduce_kv.call(null, function(render_fun, _, name, name_SINGLEQUOTE_, fmap) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(render_fun, _, name, name_SINGLEQUOTE_, fmap), cljs.core.PersistentArrayMap.EMPTY, fmap);
};
reagent.impl.component.map_to_js = function map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__28310 = o;
    G__28310[cljs.core.name.call(null, k)] = v;
    return G__28310;
  }, {}, m);
};
reagent.impl.component.cljsify = function cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null))))].join(""));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__28311__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__28311 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__28312__i = 0, G__28312__a = new Array(arguments.length - 0);
          while (G__28312__i < G__28312__a.length) {
            G__28312__a[G__28312__i] = arguments[G__28312__i + 0];
            ++G__28312__i;
          }
          args = new cljs.core.IndexedSeq(G__28312__a, 0);
        }
        return G__28311__delegate.call(this, args);
      };
      G__28311.cljs$lang$maxFixedArity = 0;
      G__28311.cljs$lang$applyTo = function(arglist__28313) {
        var args = cljs.core.seq(arglist__28313);
        return G__28311__delegate(args);
      };
      G__28311.cljs$core$IFn$_invoke$arity$variadic = G__28311__delegate;
      return G__28311;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.attr_aliases = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "className", new cljs.core.Keyword(null, "for", "for", -1323786319), "htmlFor", new cljs.core.Keyword(null, "charset", "charset", -1063822193), "charSet"], null);
reagent.impl.template.hiccup_tag_QMARK_ = function hiccup_tag_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || cljs.core.ifn_QMARK_.call(null, x);
};
reagent.impl.template.to_js_val = function to_js_val(v) {
  if (typeof v === "string" || typeof v === "number") {
    return v;
  } else {
    if (function() {
      var G__28328 = v;
      if (G__28328) {
        var bit__4655__auto__ = G__28328.cljs$lang$protocol_mask$partition1$ & 4096;
        if (bit__4655__auto__ || G__28328.cljs$core$INamed$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.name.call(null, v);
    } else {
      if (cljs.core.coll_QMARK_.call(null, v)) {
        return cljs.core.clj__GT_js.call(null, v);
      } else {
        if (cljs.core.ifn_QMARK_.call(null, v)) {
          return function() {
            var G__28329__delegate = function(args) {
              return cljs.core.apply.call(null, v, args);
            };
            var G__28329 = function(var_args) {
              var args = null;
              if (arguments.length > 0) {
                var G__28330__i = 0, G__28330__a = new Array(arguments.length - 0);
                while (G__28330__i < G__28330__a.length) {
                  G__28330__a[G__28330__i] = arguments[G__28330__i + 0];
                  ++G__28330__i;
                }
                args = new cljs.core.IndexedSeq(G__28330__a, 0);
              }
              return G__28329__delegate.call(this, args);
            };
            G__28329.cljs$lang$maxFixedArity = 0;
            G__28329.cljs$lang$applyTo = function(arglist__28331) {
              var args = cljs.core.seq(arglist__28331);
              return G__28329__delegate(args);
            };
            G__28329.cljs$core$IFn$_invoke$arity$variadic = G__28329__delegate;
            return G__28329;
          }();
        } else {
          return v;
        }
      }
    }
  }
};
reagent.impl.template.undash_prop_name = function undash_prop_name(n) {
  var or__3981__auto__ = reagent.impl.template.attr_aliases.call(null, n);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return reagent.impl.util.dash_to_camel.call(null, n);
  }
};
reagent.impl.template.cached_prop_name = reagent.impl.util.memoize_1.call(null, reagent.impl.template.undash_prop_name);
reagent.impl.template.convert_prop_value = function convert_prop_value(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (typeof x === "number") {
      return x;
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__28333 = o;
          G__28333[reagent.impl.template.cached_prop_name.call(null, k)] = reagent.impl.template.to_js_val.call(null, v);
          return G__28333;
        }, {}, x);
      } else {
        return reagent.impl.template.to_js_val.call(null, x);
      }
    }
  }
};
reagent.impl.template.set_id_class = function set_id_class(props, p__28334) {
  var vec__28336 = p__28334;
  var id = cljs.core.nth.call(null, vec__28336, 0, null);
  var class$ = cljs.core.nth.call(null, vec__28336, 1, null);
  var pid = props["id"];
  props["id"] = cljs.core.some_QMARK_.call(null, pid) ? pid : id;
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old = props["className"];
    return props["className"] = cljs.core.some_QMARK_.call(null, old) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old)].join("") : class$;
  } else {
    return null;
  }
};
reagent.impl.template.convert_props = function convert_props(props, id_class) {
  if (cljs.core.empty_QMARK_.call(null, props) && id_class == null) {
    return null;
  } else {
    var objprops = cljs.core.reduce_kv.call(null, function(o, k, v) {
      var pname_28337 = reagent.impl.template.cached_prop_name.call(null, k);
      o[pname_28337] = reagent.impl.template.convert_prop_value.call(null, v);
      return o;
    }, {}, props);
    if (cljs.core.some_QMARK_.call(null, id_class)) {
      reagent.impl.template.set_id_class.call(null, objprops, id_class);
    } else {
    }
    return objprops;
  }
};
reagent.impl.template.input_unmount = function input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__3969__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__3969__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__28340 = jsprops;
    G__28340["defaultValue"] = value;
    G__28340["onChange"] = function(G__28340, v, value, on_change) {
      return function(p1__28338_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__28338_SHARP_);
      };
    }(G__28340, v, value, on_change);
    return G__28340;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function parse_tag(hiccup_tag) {
  var vec__28342 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__28342, 0, null);
  var id = cljs.core.nth.call(null, vec__28342, 1, null);
  var class$ = cljs.core.nth.call(null, vec__28342, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Unknown tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))].join(""));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, cljs.core.truth_(function() {
    var or__3981__auto__ = id;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return class_SINGLEQUOTE_;
    }
  }()) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, class_SINGLEQUOTE_], null) : null], null);
};
reagent.impl.template.fn_to_class = function fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.reag_element = function reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var key_28347 = function() {
    var temp__4128__auto__ = function() {
      var G__28345 = cljs.core.meta.call(null, v);
      var G__28345__$1 = G__28345 == null ? null : reagent.impl.template.get_key.call(null, G__28345);
      return G__28345__$1;
    }();
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
    } else {
      var k = temp__4128__auto__;
      return k;
    }
  }();
  var G__28346_28348 = key_28347;
  var G__28346_28349__$1 = G__28346_28348 == null ? null : jsprops["key"] = G__28346_28348;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.cached_parse = reagent.impl.util.memoize_1.call(null, reagent.impl.template.parse_tag);
reagent.impl.template.native_element = function native_element(tag, argv) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, tag)) {
    var vec__28353 = reagent.impl.template.cached_parse.call(null, tag);
    var comp = cljs.core.nth.call(null, vec__28353, 0, null);
    var id_class = cljs.core.nth.call(null, vec__28353, 1, null);
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, id_class);
    var first_child = hasprops ? 2 : 1;
    if (reagent.impl.template.input_component_QMARK_.call(null, comp)) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__28354 = cljs.core.meta.call(null, argv);
          var G__28354__$1 = G__28354 == null ? null : reagent.impl.template.get_key.call(null, G__28354);
          return G__28354__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__28355 = jsprops == null ? {} : jsprops;
          G__28355["key"] = key;
          return G__28355;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Hiccup form should not be empty"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)))))].join(""));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (reagent.impl.template.valid_tag_QMARK_.call(null, tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))))].join(""));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.seq_ctx = {};
reagent.impl.template.warn_on_deref = function warn_on_deref(x) {
  if (cljs.core.truth_(reagent.impl.template.seq_ctx["warned"])) {
    return null;
  } else {
    if (typeof console !== "undefined") {
      console.log("Warning: Reactive deref not supported in seq in ", cljs.core.pr_str.call(null, x));
    } else {
    }
    return reagent.impl.template.seq_ctx["warned"] = true;
  }
};
reagent.impl.template.as_element = function as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
          return reagent.impl.template.expand_seq.call(null, x);
        } else {
          var s = reagent.ratom.capture_derefed.call(null, function() {
            return reagent.impl.template.expand_seq.call(null, x);
          }, reagent.impl.template.seq_ctx);
          if (cljs.core.truth_(reagent.ratom.captured.call(null, reagent.impl.template.seq_ctx))) {
            reagent.impl.template.warn_on_deref.call(null, x);
          } else {
          }
          return s;
        }
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__4868__auto___28356 = a.length;
  var i_28357 = 0;
  while (true) {
    if (i_28357 < n__4868__auto___28356) {
      a[i_28357] = reagent.impl.template.as_element.call(null, a[i_28357]);
      var G__28358 = i_28357 + 1;
      i_28357 = G__28358;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.make_element = function make_element(argv, comp, jsprops, first_child) {
  if (cljs.core.count.call(null, argv) === first_child + 1) {
    return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
  } else {
    return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(a, k, v) {
      if (k >= first_child) {
        a.push(reagent.impl.template.as_element.call(null, v));
      } else {
      }
      return a;
    }, [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function() {
  var create_element = null;
  var create_element__1 = function(type) {
    return create_element.call(null, type, null);
  };
  var create_element__2 = function(type, props) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props);
  };
  var create_element__3 = function(type, props, child) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props, child);
  };
  var create_element__4 = function() {
    var G__28265__delegate = function(type, props, child, children) {
      if (!cljs.core.map_QMARK_.call(null, props)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
      }
      return cljs.core.apply.call(null, React.createElement, type, props, child, children);
    };
    var G__28265 = function(type, props, child, var_args) {
      var children = null;
      if (arguments.length > 3) {
        var G__28266__i = 0, G__28266__a = new Array(arguments.length - 3);
        while (G__28266__i < G__28266__a.length) {
          G__28266__a[G__28266__i] = arguments[G__28266__i + 3];
          ++G__28266__i;
        }
        children = new cljs.core.IndexedSeq(G__28266__a, 0);
      }
      return G__28265__delegate.call(this, type, props, child, children);
    };
    G__28265.cljs$lang$maxFixedArity = 3;
    G__28265.cljs$lang$applyTo = function(arglist__28267) {
      var type = cljs.core.first(arglist__28267);
      arglist__28267 = cljs.core.next(arglist__28267);
      var props = cljs.core.first(arglist__28267);
      arglist__28267 = cljs.core.next(arglist__28267);
      var child = cljs.core.first(arglist__28267);
      var children = cljs.core.rest(arglist__28267);
      return G__28265__delegate(type, props, child, children);
    };
    G__28265.cljs$core$IFn$_invoke$arity$variadic = G__28265__delegate;
    return G__28265;
  }();
  create_element = function(type, props, child, var_args) {
    var children = var_args;
    switch(arguments.length) {
      case 1:
        return create_element__1.call(this, type);
      case 2:
        return create_element__2.call(this, type, props);
      case 3:
        return create_element__3.call(this, type, props, child);
      default:
        var G__28268 = null;
        if (arguments.length > 3) {
          var G__28269__i = 0, G__28269__a = new Array(arguments.length - 3);
          while (G__28269__i < G__28269__a.length) {
            G__28269__a[G__28269__i] = arguments[G__28269__i + 3];
            ++G__28269__i;
          }
          G__28268 = new cljs.core.IndexedSeq(G__28269__a, 0);
        }
        return create_element__4.cljs$core$IFn$_invoke$arity$variadic(type, props, child, G__28268);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_element.cljs$lang$maxFixedArity = 3;
  create_element.cljs$lang$applyTo = create_element__4.cljs$lang$applyTo;
  create_element.cljs$core$IFn$_invoke$arity$1 = create_element__1;
  create_element.cljs$core$IFn$_invoke$arity$2 = create_element__2;
  create_element.cljs$core$IFn$_invoke$arity$3 = create_element__3;
  create_element.cljs$core$IFn$_invoke$arity$variadic = create_element__4.cljs$core$IFn$_invoke$arity$variadic;
  return create_element;
}();
reagent.core.as_element = function as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.render = function() {
  var render = null;
  var render__2 = function(comp, container) {
    return render.call(null, comp, container, null);
  };
  var render__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  render = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return render__2.call(this, comp, container);
      case 3:
        return render__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render.cljs$core$IFn$_invoke$arity$2 = render__2;
  render.cljs$core$IFn$_invoke$arity$3 = render__3;
  return render;
}();
reagent.core.unmount_component_at_node = function unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function render_to_string(component) {
  var _STAR_non_reactive_STAR_28271 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_28271;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_28273 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_28273;
  }
};
reagent.core.force_update_all = function force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state = function state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.component.state.call(null, this$);
};
reagent.core.replace_state = function replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return reagent.impl.component.replace_state.call(null, this$, new_state);
};
reagent.core.set_state = function set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return reagent.impl.component.set_state.call(null, this$, new_state);
};
reagent.core.props = function props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var atom__2 = function() {
    var G__28274__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__28274 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        var G__28275__i = 0, G__28275__a = new Array(arguments.length - 1);
        while (G__28275__i < G__28275__a.length) {
          G__28275__a[G__28275__i] = arguments[G__28275__i + 1];
          ++G__28275__i;
        }
        rest = new cljs.core.IndexedSeq(G__28275__a, 0);
      }
      return G__28274__delegate.call(this, x, rest);
    };
    G__28274.cljs$lang$maxFixedArity = 1;
    G__28274.cljs$lang$applyTo = function(arglist__28276) {
      var x = cljs.core.first(arglist__28276);
      var rest = cljs.core.rest(arglist__28276);
      return G__28274__delegate(x, rest);
    };
    G__28274.cljs$core$IFn$_invoke$arity$variadic = G__28274__delegate;
    return G__28274;
  }();
  atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__28277 = null;
        if (arguments.length > 1) {
          var G__28278__i = 0, G__28278__a = new Array(arguments.length - 1);
          while (G__28278__i < G__28278__a.length) {
            G__28278__a[G__28278__i] = arguments[G__28278__i + 1];
            ++G__28278__i;
          }
          G__28277 = new cljs.core.IndexedSeq(G__28278__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__28277);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.core.wrap = function() {
  var wrap__delegate = function(value, reset_fn, args) {
    if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
    }
    return reagent.impl.util.make_wrapper.call(null, value, reset_fn, args);
  };
  var wrap = function(value, reset_fn, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__28279__i = 0, G__28279__a = new Array(arguments.length - 2);
      while (G__28279__i < G__28279__a.length) {
        G__28279__a[G__28279__i] = arguments[G__28279__i + 2];
        ++G__28279__i;
      }
      args = new cljs.core.IndexedSeq(G__28279__a, 0);
    }
    return wrap__delegate.call(this, value, reset_fn, args);
  };
  wrap.cljs$lang$maxFixedArity = 2;
  wrap.cljs$lang$applyTo = function(arglist__28280) {
    var value = cljs.core.first(arglist__28280);
    arglist__28280 = cljs.core.next(arglist__28280);
    var reset_fn = cljs.core.first(arglist__28280);
    var args = cljs.core.rest(arglist__28280);
    return wrap__delegate(value, reset_fn, args);
  };
  wrap.cljs$core$IFn$_invoke$arity$variadic = wrap__delegate;
  return wrap;
}();
reagent.core.cursor = function() {
  var cursor = null;
  var cursor__1 = function(path) {
    return function(ra) {
      return cursor.call(null, path, ra);
    };
  };
  var cursor__2 = function(path, ra) {
    if (function() {
      var G__28283 = ra;
      if (G__28283) {
        var bit__4662__auto__ = G__28283.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4662__auto__ || G__28283.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__28283.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__28283);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__28283);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null))))].join(""));
    }
    return reagent.ratom.cursor.call(null, path, ra);
  };
  var cursor__4 = function() {
    var G__28285__delegate = function(path, ra, reset_fn, args) {
      if (function() {
        var G__28284 = ra;
        if (G__28284) {
          var bit__4662__auto__ = G__28284.cljs$lang$protocol_mask$partition0$ & 32768;
          if (bit__4662__auto__ || G__28284.cljs$core$IDeref$) {
            return true;
          } else {
            if (!G__28284.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__28284);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__28284);
        }
      }()) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null))))].join(""));
      }
      if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
      }
      return reagent.ratom.cursor.call(null, path, ra, reset_fn, args);
    };
    var G__28285 = function(path, ra, reset_fn, var_args) {
      var args = null;
      if (arguments.length > 3) {
        var G__28286__i = 0, G__28286__a = new Array(arguments.length - 3);
        while (G__28286__i < G__28286__a.length) {
          G__28286__a[G__28286__i] = arguments[G__28286__i + 3];
          ++G__28286__i;
        }
        args = new cljs.core.IndexedSeq(G__28286__a, 0);
      }
      return G__28285__delegate.call(this, path, ra, reset_fn, args);
    };
    G__28285.cljs$lang$maxFixedArity = 3;
    G__28285.cljs$lang$applyTo = function(arglist__28287) {
      var path = cljs.core.first(arglist__28287);
      arglist__28287 = cljs.core.next(arglist__28287);
      var ra = cljs.core.first(arglist__28287);
      arglist__28287 = cljs.core.next(arglist__28287);
      var reset_fn = cljs.core.first(arglist__28287);
      var args = cljs.core.rest(arglist__28287);
      return G__28285__delegate(path, ra, reset_fn, args);
    };
    G__28285.cljs$core$IFn$_invoke$arity$variadic = G__28285__delegate;
    return G__28285;
  }();
  cursor = function(path, ra, reset_fn, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cursor__1.call(this, path);
      case 2:
        return cursor__2.call(this, path, ra);
      default:
        var G__28288 = null;
        if (arguments.length > 3) {
          var G__28289__i = 0, G__28289__a = new Array(arguments.length - 3);
          while (G__28289__i < G__28289__a.length) {
            G__28289__a[G__28289__i] = arguments[G__28289__i + 3];
            ++G__28289__i;
          }
          G__28288 = new cljs.core.IndexedSeq(G__28289__a, 0);
        }
        return cursor__4.cljs$core$IFn$_invoke$arity$variadic(path, ra, reset_fn, G__28288);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$lang$maxFixedArity = 3;
  cursor.cljs$lang$applyTo = cursor__4.cljs$lang$applyTo;
  cursor.cljs$core$IFn$_invoke$arity$1 = cursor__1;
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$variadic = cursor__4.cljs$core$IFn$_invoke$arity$variadic;
  return cursor;
}();
reagent.core.next_tick = function next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__28290__i = 0, G__28290__a = new Array(arguments.length - 1);
      while (G__28290__i < G__28290__a.length) {
        G__28290__a[G__28290__i] = arguments[G__28290__i + 1];
        ++G__28290__i;
      }
      args = new cljs.core.IndexedSeq(G__28290__a, 0);
    }
    return partial__delegate.call(this, f, args);
  };
  partial.cljs$lang$maxFixedArity = 1;
  partial.cljs$lang$applyTo = function(arglist__28291) {
    var f = cljs.core.first(arglist__28291);
    var args = cljs.core.rest(arglist__28291);
    return partial__delegate(f, args);
  };
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__delegate;
  return partial;
}();
goog.provide("blockchain");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("pubsub");
cljs.core.enable_console_print_BANG_.call(null);
blockchain.memPool = [];
blockchain.blockhainInfo = function() {
  var obj95383 = {};
  return obj95383;
}();
blockchain.blockhainInfo.dificulty = 5;
blockchain.addTransactionToMemPool = function addTransactionToMemPool(x) {
  blockchain.memPool.push(x);
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after adding ", blockchain.memPool);
};
blockchain.removeTransactionFromMemPool = function removeTransactionFromMemPool(x) {
  blockchain.memPool.splice(blockchain.memPool.indexOf(x));
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after remove ", blockchain.memPool);
};
blockchain.makeBlockHeader1 = function makeBlockHeader1(version, previous, fmroot, timestamp, bits, nonce, txcount) {
  var obj95387 = {"version":1, "heightFromRoot":0, "previous":previous, "merkleRoot":fmroot, "timestamp":timestamp, "bits":bits, "nonce":nonce, "txcount":txcount};
  return obj95387;
};
blockchain.makeTransaction = function makeTransaction() {
  var obj95391 = {"":1};
  return obj95391;
};
blockchain.addTransactionToBlock = function addTransactionToBlock() {
  var obj95395 = {"":1};
  return obj95395;
};
blockchain.prevblk = function prevblk(blockk) {
  blockchain._LT__BANG_.call(null, pubsub.sia.call(null, "log", new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), "about to get prev blk ", blockk));
  return blockk.header.previous;
};
blockchain.blockKnown_QMARK_ = function blockKnown_QMARK_(blockk) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95473) {
            var state_val_95474 = state_95473[1];
            if (state_val_95474 === 7) {
              var inst_95467 = state_95473[2];
              var inst_95468 = blockchain.res = inst_95467;
              var state_95473__$1 = function() {
                var statearr_95475 = state_95473;
                statearr_95475[5] = inst_95468;
                return statearr_95475;
              }();
              var statearr_95476_95496 = state_95473__$1;
              statearr_95476_95496[2] = blockchain.res;
              statearr_95476_95496[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_95474 === 1) {
                var state_95473__$1 = state_95473;
                if (cljs.core.truth_(blockk)) {
                  var statearr_95477_95497 = state_95473__$1;
                  statearr_95477_95497[1] = 2;
                } else {
                  var statearr_95478_95498 = state_95473__$1;
                  statearr_95478_95498[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_95474 === 4) {
                  var inst_95471 = state_95473[2];
                  var state_95473__$1 = state_95473;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95473__$1, inst_95471);
                } else {
                  if (state_val_95474 === 15) {
                    var inst_95465 = state_95473[2];
                    var state_95473__$1 = state_95473;
                    var statearr_95479_95499 = state_95473__$1;
                    statearr_95479_95499[2] = inst_95465;
                    statearr_95479_95499[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_95474 === 13) {
                      var state_95473__$1 = state_95473;
                      var statearr_95480_95500 = state_95473__$1;
                      statearr_95480_95500[2] = true;
                      statearr_95480_95500[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_95474 === 6) {
                        var inst_95459 = pubsub.sia.call(null, "g", blockk);
                        var state_95473__$1 = state_95473;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95473__$1, 12, inst_95459);
                      } else {
                        if (state_val_95474 === 3) {
                          var state_95473__$1 = state_95473;
                          var statearr_95481_95501 = state_95473__$1;
                          statearr_95481_95501[2] = false;
                          statearr_95481_95501[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_95474 === 12) {
                            var inst_95461 = state_95473[2];
                            var state_95473__$1 = state_95473;
                            if (cljs.core.truth_(inst_95461)) {
                              var statearr_95482_95502 = state_95473__$1;
                              statearr_95482_95502[1] = 13;
                            } else {
                              var statearr_95483_95503 = state_95473__$1;
                              statearr_95483_95503[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_95474 === 2) {
                              var inst_95447 = logger.og.call(null, new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), "block known? ", blockk);
                              var inst_95448 = blockk.hash;
                              var state_95473__$1 = function() {
                                var statearr_95484 = state_95473;
                                statearr_95484[6] = inst_95447;
                                return statearr_95484;
                              }();
                              if (cljs.core.truth_(inst_95448)) {
                                var statearr_95485_95504 = state_95473__$1;
                                statearr_95485_95504[1] = 5;
                              } else {
                                var statearr_95486_95505 = state_95473__$1;
                                statearr_95486_95505[1] = 6;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_95474 === 11) {
                                var inst_95457 = state_95473[2];
                                var state_95473__$1 = state_95473;
                                var statearr_95487_95506 = state_95473__$1;
                                statearr_95487_95506[2] = inst_95457;
                                statearr_95487_95506[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_95474 === 9) {
                                  var state_95473__$1 = state_95473;
                                  var statearr_95488_95507 = state_95473__$1;
                                  statearr_95488_95507[2] = true;
                                  statearr_95488_95507[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_95474 === 5) {
                                    var inst_95450 = blockk.hash;
                                    var inst_95451 = pubsub.sia.call(null, "g", inst_95450);
                                    var state_95473__$1 = state_95473;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95473__$1, 8, inst_95451);
                                  } else {
                                    if (state_val_95474 === 14) {
                                      var state_95473__$1 = state_95473;
                                      var statearr_95489_95508 = state_95473__$1;
                                      statearr_95489_95508[2] = false;
                                      statearr_95489_95508[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_95474 === 10) {
                                        var state_95473__$1 = state_95473;
                                        var statearr_95490_95509 = state_95473__$1;
                                        statearr_95490_95509[2] = false;
                                        statearr_95490_95509[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_95474 === 8) {
                                          var inst_95453 = state_95473[2];
                                          var state_95473__$1 = state_95473;
                                          if (cljs.core.truth_(inst_95453)) {
                                            var statearr_95491_95510 = state_95473__$1;
                                            statearr_95491_95510[1] = 9;
                                          } else {
                                            var statearr_95492_95511 = state_95473__$1;
                                            statearr_95492_95511[1] = 10;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95494 = [null, null, null, null, null, null, null];
              statearr_95494[0] = state_machine__6577__auto__;
              statearr_95494[1] = 1;
              return statearr_95494;
            };
            var state_machine__6577__auto____1 = function(state_95473) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95473);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95473) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95473);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95495 = f__6621__auto__.call(null);
        statearr_95495[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95495;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.last_QMARK_ = function last_QMARK_(blockk) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95598) {
            var state_val_95599 = state_95598[1];
            if (state_val_95599 === 7) {
              var state_95598__$1 = state_95598;
              var statearr_95600_95618 = state_95598__$1;
              statearr_95600_95618[2] = true;
              statearr_95600_95618[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_95599 === 1) {
                var inst_95565 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "block known? ", blockk);
                var inst_95566 = pubsub.sia.call(null, "g", "last");
                var state_95598__$1 = function() {
                  var statearr_95601 = state_95598;
                  statearr_95601[5] = inst_95565;
                  return statearr_95601;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95598__$1, 2, inst_95566);
              } else {
                if (state_val_95599 === 4) {
                  var inst_95584 = pubsub.sia.call(null, "g", blockk);
                  var state_95598__$1 = state_95598;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95598__$1, 10, inst_95584);
                } else {
                  if (state_val_95599 === 13) {
                    var inst_95593 = state_95598[2];
                    var state_95598__$1 = state_95598;
                    var statearr_95602_95619 = state_95598__$1;
                    statearr_95602_95619[2] = inst_95593;
                    statearr_95602_95619[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_95599 === 6) {
                      var inst_95575 = state_95598[2];
                      var inst_95576 = inst_95575.hash;
                      var inst_95577 = blockk.hash;
                      var inst_95578 = inst_95576 === inst_95577;
                      var state_95598__$1 = state_95598;
                      if (cljs.core.truth_(inst_95578)) {
                        var statearr_95603_95620 = state_95598__$1;
                        statearr_95603_95620[1] = 7;
                      } else {
                        var statearr_95604_95621 = state_95598__$1;
                        statearr_95604_95621[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_95599 === 3) {
                        var inst_95572 = blockk.hash;
                        var inst_95573 = pubsub.sia.call(null, "g", inst_95572);
                        var state_95598__$1 = state_95598;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95598__$1, 6, inst_95573);
                      } else {
                        if (state_val_95599 === 12) {
                          var state_95598__$1 = state_95598;
                          var statearr_95605_95622 = state_95598__$1;
                          statearr_95605_95622[2] = false;
                          statearr_95605_95622[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_95599 === 2) {
                            var inst_95568 = state_95598[2];
                            var inst_95569 = blockchain.lastt = inst_95568;
                            var inst_95570 = blockk.hash;
                            var state_95598__$1 = function() {
                              var statearr_95606 = state_95598;
                              statearr_95606[6] = inst_95569;
                              return statearr_95606;
                            }();
                            if (cljs.core.truth_(inst_95570)) {
                              var statearr_95607_95623 = state_95598__$1;
                              statearr_95607_95623[1] = 3;
                            } else {
                              var statearr_95608_95624 = state_95598__$1;
                              statearr_95608_95624[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_95599 === 11) {
                              var state_95598__$1 = state_95598;
                              var statearr_95609_95625 = state_95598__$1;
                              statearr_95609_95625[2] = true;
                              statearr_95609_95625[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_95599 === 9) {
                                var inst_95582 = state_95598[2];
                                var state_95598__$1 = state_95598;
                                var statearr_95610_95626 = state_95598__$1;
                                statearr_95610_95626[2] = inst_95582;
                                statearr_95610_95626[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_95599 === 5) {
                                  var inst_95595 = state_95598[2];
                                  var inst_95596 = blockchain.res = inst_95595;
                                  var state_95598__$1 = function() {
                                    var statearr_95611 = state_95598;
                                    statearr_95611[7] = inst_95596;
                                    return statearr_95611;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95598__$1, blockchain.res);
                                } else {
                                  if (state_val_95599 === 10) {
                                    var inst_95586 = state_95598[2];
                                    var inst_95587 = inst_95586.hash;
                                    var inst_95588 = blockk.hash;
                                    var inst_95589 = inst_95587 === inst_95588;
                                    var state_95598__$1 = state_95598;
                                    if (cljs.core.truth_(inst_95589)) {
                                      var statearr_95612_95627 = state_95598__$1;
                                      statearr_95612_95627[1] = 11;
                                    } else {
                                      var statearr_95613_95628 = state_95598__$1;
                                      statearr_95613_95628[1] = 12;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_95599 === 8) {
                                      var state_95598__$1 = state_95598;
                                      var statearr_95614_95629 = state_95598__$1;
                                      statearr_95614_95629[2] = false;
                                      statearr_95614_95629[1] = 9;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95616 = [null, null, null, null, null, null, null, null];
              statearr_95616[0] = state_machine__6577__auto__;
              statearr_95616[1] = 1;
              return statearr_95616;
            };
            var state_machine__6577__auto____1 = function(state_95598) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95598);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95598) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95598);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95617 = f__6621__auto__.call(null);
        statearr_95617[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95617;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.heightFromBlock = function heightFromBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), "getting height from block ", blockk);
  return blockk.header.heightFromRoot;
};
blockchain.makeBlock = function makeBlock(work) {
  console.log((new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString(), "about to make block ", work);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95710) {
            var state_val_95711 = state_95710[1];
            if (state_val_95711 === 4) {
              var inst_95704 = state_95710[2];
              var inst_95705 = {"header":blockchain.blockHeader, "hash":inst_95704, "transactions":blockchain.transactions};
              var inst_95706 = blockchain.blockk = inst_95705;
              var inst_95707 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
              var inst_95708 = console.log(inst_95707, "newly made block ", blockchain.blockk);
              var state_95710__$1 = function() {
                var statearr_95712 = state_95710;
                statearr_95712[5] = inst_95708;
                statearr_95712[6] = inst_95706;
                return statearr_95712;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95710__$1, blockchain.blockk);
            } else {
              if (state_val_95711 === 3) {
                var inst_95682 = state_95710[2];
                var inst_95683 = blockchain.transactions = inst_95682;
                var inst_95684 = blockchain.lastv = blockchain.lastt2;
                var inst_95685 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                var inst_95686 = console.log(inst_95685, "last ", blockchain.lastv);
                var inst_95687 = blockchain.lastv.hash;
                var inst_95688 = work.root;
                var inst_95689 = new Date;
                var inst_95690 = inst_95689.getTime();
                var inst_95691 = blockchain.blockhainInfo.dificulty;
                var inst_95692 = work.nonce;
                var inst_95693 = blockchain.transactions.lenght;
                var inst_95694 = blockchain.makeBlockHeader1.call(null, "0", inst_95687, inst_95688, inst_95690, inst_95691, inst_95692, inst_95693);
                var inst_95695 = blockchain.blockHeader = inst_95694;
                var inst_95696 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                var inst_95697 = console.log(inst_95696, "block header ", blockchain.blockHeader);
                var inst_95698 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                var inst_95699 = console.log(inst_95698, "transactions when saving block ", blockchain.transactions);
                var inst_95702 = pubsub.sia.call(null, "hash", blockchain.blockHeader);
                var state_95710__$1 = function() {
                  var statearr_95713 = state_95710;
                  statearr_95713[7] = inst_95686;
                  statearr_95713[8] = inst_95684;
                  statearr_95713[9] = inst_95683;
                  statearr_95713[10] = inst_95697;
                  statearr_95713[11] = inst_95699;
                  statearr_95713[12] = inst_95695;
                  return statearr_95713;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95710__$1, 4, inst_95702);
              } else {
                if (state_val_95711 === 2) {
                  var inst_95676 = state_95710[2];
                  var inst_95677 = blockchain.lastt2 = inst_95676;
                  var inst_95678 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                  var inst_95679 = console.log(inst_95678, "last ", blockchain.lastt2);
                  var inst_95680 = pubsub.sia.call(null, "g", "txs");
                  var state_95710__$1 = function() {
                    var statearr_95714 = state_95710;
                    statearr_95714[13] = inst_95679;
                    statearr_95714[14] = inst_95677;
                    return statearr_95714;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95710__$1, 3, inst_95680);
                } else {
                  if (state_val_95711 === 1) {
                    var inst_95674 = pubsub.sia.call(null, "g", "last");
                    var state_95710__$1 = state_95710;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95710__$1, 2, inst_95674);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95716 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_95716[0] = state_machine__6577__auto__;
              statearr_95716[1] = 1;
              return statearr_95716;
            };
            var state_machine__6577__auto____1 = function(state_95710) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95710);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95710) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95710);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95717 = f__6621__auto__.call(null);
        statearr_95717[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95717;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.saveBlock = function saveBlock(blockR) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95771) {
            var state_val_95772 = state_95771[1];
            if (state_val_95772 === 5) {
              var inst_95769 = state_95771[2];
              var state_95771__$1 = state_95771;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95771__$1, inst_95769);
            } else {
              if (state_val_95772 === 4) {
                var inst_95765 = state_95771[2];
                var inst_95766 = "b" + blockchain.heightForBlock;
                var inst_95767 = pubsub.sia.call(null, "db", inst_95766, blockR);
                var state_95771__$1 = function() {
                  var statearr_95773 = state_95771;
                  statearr_95773[5] = inst_95765;
                  return statearr_95773;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95771__$1, 5, inst_95767);
              } else {
                if (state_val_95772 === 3) {
                  var inst_95761 = state_95771[2];
                  var inst_95762 = blockR.hash;
                  var inst_95763 = pubsub.sia.call(null, "db", inst_95762, blockR);
                  var state_95771__$1 = function() {
                    var statearr_95774 = state_95771;
                    statearr_95774[6] = inst_95761;
                    return statearr_95774;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95771__$1, 4, inst_95763);
                } else {
                  if (state_val_95772 === 2) {
                    var inst_95752 = state_95771[2];
                    var inst_95753 = blockchain.heightForBlock = inst_95752;
                    var inst_95754 = blockR.header;
                    var inst_95755 = inst_95754.heightFromRoot = blockchain.heightForBlock;
                    var inst_95756 = function() {
                      return function(inst_95752, inst_95753, inst_95754, inst_95755, state_val_95772, c__6620__auto__) {
                        return function() {
                          return blockR;
                        };
                      }(inst_95752, inst_95753, inst_95754, inst_95755, state_val_95772, c__6620__auto__);
                    }();
                    var inst_95757 = blockchain.a = inst_95756;
                    var inst_95758 = blockR.hash;
                    var inst_95759 = pubsub.sia.call(null, "db", "last", inst_95758, blockR);
                    var state_95771__$1 = function() {
                      var statearr_95775 = state_95771;
                      statearr_95775[7] = inst_95753;
                      statearr_95775[8] = inst_95755;
                      statearr_95775[9] = inst_95757;
                      return statearr_95775;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95771__$1, 3, inst_95759);
                  } else {
                    if (state_val_95772 === 1) {
                      var inst_95749 = logger.og.call(null, new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), "saving ", blockR);
                      var inst_95750 = pubsub.sia.call(null, "blockchainHeight", 1);
                      var state_95771__$1 = function() {
                        var statearr_95776 = state_95771;
                        statearr_95776[10] = inst_95749;
                        return statearr_95776;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95771__$1, 2, inst_95750);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95778 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_95778[0] = state_machine__6577__auto__;
              statearr_95778[1] = 1;
              return statearr_95778;
            };
            var state_machine__6577__auto____1 = function(state_95771) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95771);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95771) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95771);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95779 = f__6621__auto__.call(null);
        statearr_95779[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95779;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.addToChain = function addToChain(schain) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95859) {
            var state_val_95860 = state_95859[1];
            if (state_val_95860 === 7) {
              var inst_95831 = state_95859[5];
              var inst_95845 = state_95859[2];
              var inst_95846 = schain.length;
              var inst_95847 = inst_95831 < inst_95846;
              var state_95859__$1 = function() {
                var statearr_95861 = state_95859;
                statearr_95861[6] = inst_95845;
                return statearr_95861;
              }();
              if (cljs.core.truth_(inst_95847)) {
                var statearr_95862_95880 = state_95859__$1;
                statearr_95862_95880[1] = 8;
              } else {
                var statearr_95863_95881 = state_95859__$1;
                statearr_95863_95881[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_95860 === 1) {
                var inst_95830 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to add to chain");
                var inst_95831 = 0;
                var state_95859__$1 = function() {
                  var statearr_95864 = state_95859;
                  statearr_95864[7] = inst_95830;
                  statearr_95864[5] = inst_95831;
                  return statearr_95864;
                }();
                var statearr_95865_95882 = state_95859__$1;
                statearr_95865_95882[2] = null;
                statearr_95865_95882[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_95860 === 4) {
                  var inst_95838 = state_95859[2];
                  var state_95859__$1 = state_95859;
                  if (cljs.core.truth_(inst_95838)) {
                    var statearr_95866_95883 = state_95859__$1;
                    statearr_95866_95883[1] = 5;
                  } else {
                    var statearr_95867_95884 = state_95859__$1;
                    statearr_95867_95884[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_95860 === 6) {
                    var inst_95831 = state_95859[5];
                    var inst_95842 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is not known ", inst_95831);
                    var inst_95843 = blockchain.saveBlock.call(null, inst_95831);
                    var state_95859__$1 = function() {
                      var statearr_95868 = state_95859;
                      statearr_95868[8] = inst_95842;
                      return statearr_95868;
                    }();
                    var statearr_95869_95885 = state_95859__$1;
                    statearr_95869_95885[2] = inst_95843;
                    statearr_95869_95885[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_95860 === 3) {
                      var inst_95855 = state_95859[2];
                      var inst_95856 = cljs.core.last.call(null, schain);
                      var inst_95857 = db.update.call(null, "last", inst_95856);
                      var state_95859__$1 = function() {
                        var statearr_95870 = state_95859;
                        statearr_95870[9] = inst_95855;
                        return statearr_95870;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95859__$1, inst_95857);
                    } else {
                      if (state_val_95860 === 2) {
                        var inst_95831 = state_95859[5];
                        var inst_95833 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "itterating current step ", inst_95831);
                        var inst_95834 = schain[inst_95831];
                        var inst_95835 = blockchain.prevblk.call(null, inst_95834);
                        var inst_95836 = blockchain.blockKnown_QMARK_.call(null, inst_95835);
                        var state_95859__$1 = function() {
                          var statearr_95871 = state_95859;
                          statearr_95871[10] = inst_95833;
                          return statearr_95871;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95859__$1, 4, inst_95836);
                      } else {
                        if (state_val_95860 === 9) {
                          var state_95859__$1 = state_95859;
                          var statearr_95872_95886 = state_95859__$1;
                          statearr_95872_95886[2] = null;
                          statearr_95872_95886[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_95860 === 5) {
                            var inst_95831 = state_95859[5];
                            var inst_95840 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ", inst_95831);
                            var state_95859__$1 = state_95859;
                            var statearr_95873_95887 = state_95859__$1;
                            statearr_95873_95887[2] = inst_95840;
                            statearr_95873_95887[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_95860 === 10) {
                              var inst_95853 = state_95859[2];
                              var state_95859__$1 = state_95859;
                              var statearr_95874_95888 = state_95859__$1;
                              statearr_95874_95888[2] = inst_95853;
                              statearr_95874_95888[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_95860 === 8) {
                                var inst_95831 = state_95859[5];
                                var inst_95849 = inst_95831 + 1;
                                var inst_95831__$1 = inst_95849;
                                var state_95859__$1 = function() {
                                  var statearr_95875 = state_95859;
                                  statearr_95875[5] = inst_95831__$1;
                                  return statearr_95875;
                                }();
                                var statearr_95876_95889 = state_95859__$1;
                                statearr_95876_95889[2] = null;
                                statearr_95876_95889[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95878 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_95878[0] = state_machine__6577__auto__;
              statearr_95878[1] = 1;
              return statearr_95878;
            };
            var state_machine__6577__auto____1 = function(state_95859) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95859);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95859) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95859);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95879 = f__6621__auto__.call(null);
        statearr_95879[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95879;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.blockchainHeight = function blockchainHeight(x) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95928) {
            var state_val_95929 = state_95928[1];
            if (state_val_95929 === 6) {
              var inst_95923 = state_95928[2];
              var state_95928__$1 = state_95928;
              var statearr_95930_95938 = state_95928__$1;
              statearr_95930_95938[2] = inst_95923;
              statearr_95930_95938[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_95929 === 5) {
                var inst_95926 = state_95928[2];
                var state_95928__$1 = state_95928;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95928__$1, inst_95926);
              } else {
                if (state_val_95929 === 4) {
                  var state_95928__$1 = state_95928;
                  var statearr_95931_95939 = state_95928__$1;
                  statearr_95931_95939[2] = blockchain.hght;
                  statearr_95931_95939[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_95929 === 3) {
                    var inst_95920 = blockchain.hght + 1;
                    var inst_95921 = pubsub.sia.call(null, "db", "height", inst_95920);
                    var state_95928__$1 = state_95928;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95928__$1, 6, inst_95921);
                  } else {
                    if (state_val_95929 === 2) {
                      var inst_95916 = state_95928[2];
                      var inst_95917 = blockchain.hght = inst_95916;
                      var inst_95918 = logger.og.call(null, new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), "blockchain height ", blockchain.hght);
                      var state_95928__$1 = function() {
                        var statearr_95932 = state_95928;
                        statearr_95932[5] = inst_95918;
                        statearr_95932[6] = inst_95917;
                        return statearr_95932;
                      }();
                      if (cljs.core.truth_(x)) {
                        var statearr_95933_95940 = state_95928__$1;
                        statearr_95933_95940[1] = 3;
                      } else {
                        var statearr_95934_95941 = state_95928__$1;
                        statearr_95934_95941[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_95929 === 1) {
                        var inst_95914 = pubsub.sia.call(null, "db", "height");
                        var state_95928__$1 = state_95928;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95928__$1, 2, inst_95914);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95936 = [null, null, null, null, null, null, null];
              statearr_95936[0] = state_machine__6577__auto__;
              statearr_95936[1] = 1;
              return statearr_95936;
            };
            var state_machine__6577__auto____1 = function(state_95928) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95928);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95928) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95928);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95937 = f__6621__auto__.call(null);
        statearr_95937[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95937;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.popA = function popA(a) {
  return a.splice(0, 1);
};
blockchain.log2 = function log2(n) {
  return Math.log.call(null, n) / Math.log.call(null, 2);
};
goog.provide("intercomTakeUtil");
goog.require("cljs.core");
goog.provide("display.html");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("ajax.core");
goog.require("reagent.core");
goog.require("conf");
goog.require("pubsub");
goog.require("logger");
display.html.timer = reagent.core.atom.call(null, new Date);
display.html.time_color = reagent.core.atom.call(null, "#f34");
display.html.update_time = function update_time(time) {
  return setTimeout(function() {
    return cljs.core.reset_BANG_.call(null, time, new Date);
  }, 100);
};
display.html.greeting = function greeting(message) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), message], null);
};
display.html.proFile = function proFile(name, desc, pic, extra) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "width", "width", -384071477), "200px"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", 
  "ul.unstyled", -1948620308), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.list-item", "a.list-item", -1757304900), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.pull-left", "div.pull-left", 727555294), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.circle", "div.circle", 2134211799), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", -1651076051), pic, new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "width", "width", 
  -384071477), "40px", new cljs.core.Keyword(null, "height", "height", 1025178622), "40px"], null)], null)], null)], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.text", "div.text", 645060726), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), desc, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.small", "span.small", 1761756015), name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.text-grey", "span.text-grey", 391584589), extra], null)], null)], null)], null)], null)], null)], null)], null);
};
display.html.clock = function clock() {
  display.html.update_time.call(null, display.html.timer);
  var time_str = cljs.core.first.call(null, clojure.string.split.call(null, cljs.core.deref.call(null, display.html.timer).toTimeString(), " "));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.example-clock", "div.example-clock", 1559289088), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), cljs.core.deref.call(null, display.html.time_color)], null)], null), time_str], null);
};
display.html.color_input = function color_input() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-input", "div.color-input", -879914246), "Time color: ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, 
  display.html.time_color), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__111058_SHARP_) {
    return cljs.core.reset_BANG_.call(null, display.html.time_color, p1__111058_SHARP_.target.value);
  }], null)], null)], null);
};
display.html.connetorForm = function connetorForm() {
  return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "inputs"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input.form-control", "input.form-control", -1123419636), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
  "placeholder", "placeholder", -104873083), "label", new cljs.core.Keyword(null, "type", "type", 1174270348), "text"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("cleandb");
  }], null), "cleand"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input.form-control", "input.form-control", -1123419636), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "label", new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "id", "id", -1388402092), "id"], null)], null), new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("setid", $("#id").val());
  }], null), "setid"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input.form-control", "input.form-control", -1123419636), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "label", new cljs.core.Keyword(null, "type", 
  "type", 1174270348), "text"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("connectTo", $("#idt").val());
  }], null), "connect"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("flushdb", 0);
  }], null), "flushdb"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("dumpdb", 0);
  }], null), "dumpdb"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("transaction", (new Date).getTime());
  }], null), "transact"], null)], null);
};
display.html.connection = function connection(peer) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.list-item", "a.list-item", -1757304900), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.text", "div.text", 645060726), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "span", "span", 1394872991), peer.peer], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.text-grey.small", "span.text-grey.small", -250272740), peer.peerConnection.remoteDescription.sdp.split(" ")[5].split("\n")[0]], null)], null)], null)], null);
};
display.html.messag = function messag(m) {
  return display.html.proFile.call(null, m.id, m.data);
};
display.html.messages = function messages() {
  var state = reagent.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  display.html.handler = function(state) {
    return function handler(response) {
      console.log("message ", response);
      return cljs.core.swap_BANG_.call(null, state, function(state) {
        return function() {
          return cljs.core.conj.call(null, cljs.core.deref.call(null, state), response);
        };
      }(state));
    };
  }(state);
  pubsub.sub.call(null, "peermessage", display.html.handler);
  return function(state) {
    return function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "messages"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", "ul.unstyled", -1948620308), cljs.core.map.call(null, display.html.messag, 
      cljs.core.deref.call(null, state))], null)], null);
    };
  }(state);
};
display.html.connected = function connected() {
  var state = reagent.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  return function(state) {
    return function() {
      display.html.handler = function(state) {
        return function handler(response) {
          return cljs.core.swap_BANG_.call(null, state, function(state) {
            return function() {
              return cljs.core.conj.call(null, cljs.core.deref.call(null, state), response);
            };
          }(state));
        };
      }(state);
      pubsub.sub.call(null, "peer", display.html.handler);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "connections made"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", "ul.unstyled", -1948620308), cljs.core.map.call(null, display.html.connection, 
      cljs.core.deref.call(null, state))], null)], null);
    };
  }(state);
};
display.html.transactions = function transactions() {
  var seconds_elapsed = reagent.core.atom.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["none r now"], null));
  return function(seconds_elapsed) {
    return function() {
      display.html.handler = function(seconds_elapsed) {
        return function handler(response) {
          return cljs.core.swap_BANG_.call(null, seconds_elapsed, function(seconds_elapsed) {
            return function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [response], null);
            };
          }(seconds_elapsed));
        };
      }(seconds_elapsed);
      pubsub.sub.call(null, "transaction", display.html.handler);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", "ul.unstyled", -1948620308), cljs.core.map.call(null, display.html.peer, cljs.core.deref.call(null, seconds_elapsed))], null);
    };
  }(seconds_elapsed);
};
display.html.peer = function peer(peer__$1) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.list-item", "a.list-item", -1757304900), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.text", "div.text", 645060726), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "on-click", "on-click", 1632826543), function() {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_111072) {
              var state_val_111073 = state_111072[1];
              if (state_val_111073 === 2) {
                var inst_111070 = state_111072[2];
                var state_111072__$1 = state_111072;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111072__$1, inst_111070);
              } else {
                if (state_val_111073 === 1) {
                  var inst_111068 = pubsub.sia.call(null, "connectTo", 0, peer__$1);
                  var state_111072__$1 = state_111072;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111072__$1, 2, inst_111068);
                } else {
                  return null;
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_111075 = [null, null, null, null, null];
                statearr_111075[0] = state_machine__6577__auto__;
                statearr_111075[1] = 1;
                return statearr_111075;
              };
              var state_machine__6577__auto____1 = function(state_111072) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_111072);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_111072) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_111072);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_111076 = f__6621__auto__.call(null);
          statearr_111076[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_111076;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), peer__$1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.text-grey.small", "span.text-grey.small", -250272740)], null)], null)], 
  null)], null);
};
display.html.tbox = function tbox() {
  var seconds_elapsed = reagent.core.atom.call(null, "text");
  return function(seconds_elapsed) {
    return function() {
      display.html.save = function(seconds_elapsed) {
        return function save(ev) {
          var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__, seconds_elapsed) {
            return function() {
              var f__6621__auto__ = function() {
                var switch__6576__auto__ = function(c__6620__auto__, seconds_elapsed) {
                  return function(state_111153) {
                    var state_val_111154 = state_111153[1];
                    if (state_val_111154 === 1) {
                      var inst_111139 = function() {
                        return function(state_val_111154, c__6620__auto__, seconds_elapsed) {
                          return function() {
                            return(new $("#inputbx")).val();
                          };
                        }(state_val_111154, c__6620__auto__, seconds_elapsed);
                      }();
                      var inst_111140 = cljs.core.swap_BANG_.call(null, seconds_elapsed, inst_111139);
                      var inst_111141 = cljs.core.deref.call(null, seconds_elapsed);
                      var inst_111142 = [cljs.core.str(inst_111141)].join("");
                      var inst_111143 = console.log(inst_111142);
                      var inst_111146 = cljs.core.deref.call(null, seconds_elapsed);
                      var inst_111147 = {"id":"me", "data":inst_111146};
                      var inst_111148 = pubsub.pub.call(null, "peermessage", inst_111147);
                      var inst_111149 = cljs.core.deref.call(null, seconds_elapsed);
                      var inst_111150 = [cljs.core.str(inst_111149)].join("");
                      var inst_111151 = pubsub.sia.call(null, "broadcast", inst_111150);
                      var state_111153__$1 = function() {
                        var statearr_111155 = state_111153;
                        statearr_111155[5] = inst_111148;
                        statearr_111155[6] = inst_111140;
                        statearr_111155[7] = inst_111143;
                        return statearr_111155;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111153__$1, inst_111151);
                    } else {
                      return null;
                    }
                  };
                }(c__6620__auto__, seconds_elapsed);
                return function(switch__6576__auto__, c__6620__auto__, seconds_elapsed) {
                  return function() {
                    var state_machine__6577__auto__ = null;
                    var state_machine__6577__auto____0 = function() {
                      var statearr_111157 = [null, null, null, null, null, null, null, null];
                      statearr_111157[0] = state_machine__6577__auto__;
                      statearr_111157[1] = 1;
                      return statearr_111157;
                    };
                    var state_machine__6577__auto____1 = function(state_111153) {
                      while (true) {
                        var result__6578__auto__ = switch__6576__auto__.call(null, state_111153);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6578__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6577__auto__ = function(state_111153) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6577__auto____0.call(this);
                        case 1:
                          return state_machine__6577__auto____1.call(this, state_111153);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
                    state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
                    return state_machine__6577__auto__;
                  }();
                }(switch__6576__auto__, c__6620__auto__, seconds_elapsed);
              }();
              var state__6622__auto__ = function() {
                var statearr_111158 = f__6621__auto__.call(null);
                statearr_111158[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
                return statearr_111158;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
            };
          }(c__6620__auto__, seconds_elapsed));
          return c__6620__auto__;
        };
      }(seconds_elapsed);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "entr messag"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
      "id", "id", -1388402092), "inputbx", new cljs.core.Keyword(null, "on-key-up", "on-key-up", 884441808), function(seconds_elapsed) {
        return function(p1__111077_SHARP_) {
          var G__111159 = p1__111077_SHARP_.which;
          switch(G__111159) {
            case 13:
              return display.html.save.call(null);
              break;
            case 27:
              return display.html.stop.call(null);
              break;
            default:
              return null;
          }
        };
      }(seconds_elapsed)], null)], null)], null);
    };
  }(seconds_elapsed);
};
display.html.peers = function peers() {
  var seconds_elapsed = reagent.core.atom.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["none r now"], null));
  setTimeout(function(seconds_elapsed) {
    return function() {
      display.html.handler = function(seconds_elapsed) {
        return function handler(response) {
          return cljs.core.swap_BANG_.call(null, seconds_elapsed, function(seconds_elapsed) {
            return function() {
              return response;
            };
          }(seconds_elapsed));
        };
      }(seconds_elapsed);
      return ajax.core.GET.call(null, [cljs.core.str("http://"), cljs.core.str(conf.signalingd), cljs.core.str("/prokletdajepapa/peers")].join(""), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "handler", "handler", -195596612), display.html.handler, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), new cljs.core.Keyword(null, "json", "json", 1279968570)], null));
    };
  }(seconds_elapsed), 1E3);
  return function(seconds_elapsed) {
    return function() {
      setTimeout(function(seconds_elapsed) {
        return function() {
          display.html.handler = function(seconds_elapsed) {
            return function handler(response) {
              return cljs.core.swap_BANG_.call(null, seconds_elapsed, function(seconds_elapsed) {
                return function() {
                  return response;
                };
              }(seconds_elapsed));
            };
          }(seconds_elapsed);
          return ajax.core.GET.call(null, [cljs.core.str("http://"), cljs.core.str(conf.signalingd), cljs.core.str("/prokletdajepapa/peers")].join(""), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "handler", "handler", -195596612), display.html.handler, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), new cljs.core.Keyword(null, "json", "json", 1279968570)], null));
        };
      }(seconds_elapsed), conf.interval);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "peers"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", "ul.unstyled", -1948620308), cljs.core.map.call(null, display.html.peer, 
      cljs.core.deref.call(null, seconds_elapsed))], null)], null);
    };
  }(seconds_elapsed);
};
display.html.simple_example = function simple_example(name, desc, pic, extra) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.proFile, name, desc, pic, extra], null);
};
display.html.run = function run(name, desc, pic, extra) {
  return reagent.core.render_component.call(null, function() {
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.container.fluid", "div.container.fluid", -1065423250), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.ws-2", "div.ws-2", -266951137), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.crow", "div.crow", -1931321925), new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.ws-12", "div.ws-12", -1925599897), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.connected], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.ws-12", "div.ws-12", -1925599897), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.peers], null)], 
    null)], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.col-md-8.container.fluid", "div.col-md-8.container.fluid", 1154353770), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.col-md-8", "div.col-md-8", 754224778), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.container", "div.container", 
    72419955), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.col-md-6", "div.col-md-6", 230002699)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.col-md-6", "div.col-md-6", 230002699), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.messages], null)], null)], null)], null)], null), new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.emitter", "div.emitter", -864675077), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.tbox], null)], null)], null);
  }, document.body);
};
display.html.ui = function ui() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_111170) {
            var state_val_111171 = state_111170[1];
            if (state_val_111171 === 1) {
              var inst_111168 = display.html.run.call(null, "Taras Bulba", "zaparozie r0x", "i4c32d4308e1fe.jpg", "- zaparozie");
              var state_111170__$1 = state_111170;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111170__$1, inst_111168);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_111173 = [null, null, null, null, null];
              statearr_111173[0] = state_machine__6577__auto__;
              statearr_111173[1] = 1;
              return statearr_111173;
            };
            var state_machine__6577__auto____1 = function(state_111170) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_111170);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_111170) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_111170);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_111174 = f__6621__auto__.call(null);
        statearr_111174[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_111174;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("display.renderStrategy");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("display.html");
display.renderStrategy.run = function run(renderer) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_111186) {
            var state_val_111187 = state_111186[1];
            if (state_val_111187 === 1) {
              var inst_111184 = display.html.ui.call(null);
              var state_111186__$1 = state_111186;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111186__$1, inst_111184);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_111189 = [null, null, null, null, null];
              statearr_111189[0] = state_machine__6577__auto__;
              statearr_111189[1] = 1;
              return statearr_111189;
            };
            var state_machine__6577__auto____1 = function(state_111186) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_111186);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_111186) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_111186);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_111190 = f__6621__auto__.call(null);
        statearr_111190[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_111190;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("intercomTake");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
intercomTake.sendm = function sendm(peer, payload) {
  l.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  l.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95955) {
            var state_val_95956 = state_95955[1];
            if (state_val_95956 === 2) {
              var inst_95953 = state_95955[2];
              var state_95955__$1 = state_95955;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95955__$1, inst_95953);
            } else {
              if (state_val_95956 === 1) {
                var state_95955__$1 = state_95955;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_95955__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95958 = [null, null, null, null, null];
              statearr_95958[0] = state_machine__6577__auto__;
              statearr_95958[1] = 1;
              return statearr_95958;
            };
            var state_machine__6577__auto____1 = function(state_95955) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95955);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95955) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95955);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95959 = f__6621__auto__.call(null);
        statearr_95959[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95959;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeInv = function takeInv(fullMessage) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96091) {
            var state_val_96092 = state_96091[1];
            if (state_val_96092 === 7) {
              var inst_96058 = state_96091[2];
              var inst_96059 = intercomTake.heightFromBlock.call(null, inst_96058);
              var inst_96060 = intercomTake.blocks.vector;
              var inst_96061 = inst_96060.length;
              var inst_96062 = inst_96059 + inst_96061;
              var inst_96063 = inst_96062 + 1;
              var inst_96064 = intercomTake.newHeight = inst_96063;
              var inst_96065 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercomTake.newHeight);
              var inst_96066 = intercomTake.bchainHeight < intercomTake.newHeight;
              var state_96091__$1 = function() {
                var statearr_96093 = state_96091;
                statearr_96093[5] = inst_96064;
                statearr_96093[6] = inst_96065;
                return statearr_96093;
              }();
              if (cljs.core.truth_(inst_96066)) {
                var statearr_96094_96112 = state_96091__$1;
                statearr_96094_96112[1] = 8;
              } else {
                var statearr_96095_96113 = state_96091__$1;
                statearr_96095_96113[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_96092 === 1) {
                var inst_96036 = fullMessage.data;
                var inst_96037 = intercomTake.blocks = inst_96036;
                var inst_96038 = l.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercomTake.blocks);
                var inst_96039 = intercomTake.blocks.vector;
                var inst_96040 = inst_96039[0];
                var inst_96041 = blockchain.prevblk.call(null, inst_96040);
                var inst_96042 = blockchain.blockKnown_QMARK_.call(null, inst_96041);
                var state_96091__$1 = function() {
                  var statearr_96096 = state_96091;
                  statearr_96096[7] = inst_96038;
                  statearr_96096[8] = inst_96037;
                  return statearr_96096;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96091__$1, 2, inst_96042);
              } else {
                if (state_val_96092 === 4) {
                  var inst_96075 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercomTake.blocks);
                  var inst_96076 = db.g.call(null, "last");
                  var state_96091__$1 = function() {
                    var statearr_96097 = state_96091;
                    statearr_96097[9] = inst_96075;
                    return statearr_96097;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96091__$1, 11, inst_96076);
                } else {
                  if (state_val_96092 === 13) {
                    var inst_96082 = state_96091[10];
                    var inst_96085 = state_96091[2];
                    var state_96091__$1 = state_96091;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_96091__$1, 12, inst_96082, inst_96085);
                  } else {
                    if (state_val_96092 === 6) {
                      var inst_96050 = state_96091[2];
                      var inst_96051 = intercomTake.bchainHeight = inst_96050;
                      var inst_96052 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercomTake.bchainHeight);
                      var inst_96053 = intercomTake.blocks.vector;
                      var inst_96054 = inst_96053[0];
                      var inst_96055 = blockchain.prevblk.call(null, inst_96054);
                      var inst_96056 = db.g.call(null, inst_96055);
                      var state_96091__$1 = function() {
                        var statearr_96098 = state_96091;
                        statearr_96098[11] = inst_96051;
                        statearr_96098[12] = inst_96052;
                        return statearr_96098;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96091__$1, 7, inst_96056);
                    } else {
                      if (state_val_96092 === 3) {
                        var inst_96046 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                        var inst_96047 = "blockchainHeight".call(null);
                        var inst_96048 = cljs.core.apply.call(null, pubsub.sia, inst_96047);
                        var state_96091__$1 = function() {
                          var statearr_96099 = state_96091;
                          statearr_96099[13] = inst_96046;
                          return statearr_96099;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96091__$1, 6, inst_96048);
                      } else {
                        if (state_val_96092 === 12) {
                          var inst_96087 = state_96091[2];
                          var state_96091__$1 = state_96091;
                          var statearr_96100_96114 = state_96091__$1;
                          statearr_96100_96114[2] = inst_96087;
                          statearr_96100_96114[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_96092 === 2) {
                            var inst_96044 = state_96091[2];
                            var state_96091__$1 = state_96091;
                            if (cljs.core.truth_(inst_96044)) {
                              var statearr_96101_96115 = state_96091__$1;
                              statearr_96101_96115[1] = 3;
                            } else {
                              var statearr_96102_96116 = state_96091__$1;
                              statearr_96102_96116[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_96092 === 11) {
                              var inst_96078 = state_96091[2];
                              var inst_96079 = inst_96078.hash;
                              var inst_96080 = intercomTake.lblock = inst_96079;
                              var inst_96081 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercomTake.lblock);
                              var inst_96082 = fullMessage.peer;
                              var inst_96083 = im.makeGetBlock.call(null, intercomTake.lblock);
                              var state_96091__$1 = function() {
                                var statearr_96103 = state_96091;
                                statearr_96103[14] = inst_96081;
                                statearr_96103[15] = inst_96080;
                                statearr_96103[10] = inst_96082;
                                return statearr_96103;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96091__$1, 13, inst_96083);
                            } else {
                              if (state_val_96092 === 9) {
                                var inst_96071 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                var state_96091__$1 = state_96091;
                                var statearr_96104_96117 = state_96091__$1;
                                statearr_96104_96117[2] = inst_96071;
                                statearr_96104_96117[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_96092 === 5) {
                                  var inst_96089 = state_96091[2];
                                  var state_96091__$1 = function() {
                                    var statearr_96105 = state_96091;
                                    statearr_96105[16] = inst_96089;
                                    return statearr_96105;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96091__$1, "grind");
                                } else {
                                  if (state_val_96092 === 10) {
                                    var inst_96073 = state_96091[2];
                                    var state_96091__$1 = state_96091;
                                    var statearr_96106_96118 = state_96091__$1;
                                    statearr_96106_96118[2] = inst_96073;
                                    statearr_96106_96118[1] = 5;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_96092 === 8) {
                                      var inst_96068 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
                                      var inst_96069 = blockchain.addToChain.call(null, intercomTake.blocks);
                                      var state_96091__$1 = function() {
                                        var statearr_96107 = state_96091;
                                        statearr_96107[17] = inst_96068;
                                        return statearr_96107;
                                      }();
                                      var statearr_96108_96119 = state_96091__$1;
                                      statearr_96108_96119[2] = inst_96069;
                                      statearr_96108_96119[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96110 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_96110[0] = state_machine__6577__auto__;
              statearr_96110[1] = 1;
              return statearr_96110;
            };
            var state_machine__6577__auto____1 = function(state_96091) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96091);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96091) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96091);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96111 = f__6621__auto__.call(null);
        statearr_96111[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96111;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeData = function takeData(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96140) {
            var state_val_96141 = state_96140[1];
            if (state_val_96141 === 1) {
              var inst_96133 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_96134 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_96135 = intercomTake.v.data;
              var inst_96136 = it.handleInvBlock.call(null, inst_96135, intercomTake.v);
              var inst_96137 = intercomTake.tostate.call(null, "grind");
              var inst_96138 = intercomTake.tostate.call(null, "grind", intercomTake.handleInvBlock);
              var state_96140__$1 = function() {
                var statearr_96142 = state_96140;
                statearr_96142[5] = inst_96133;
                statearr_96142[6] = inst_96137;
                statearr_96142[7] = inst_96136;
                statearr_96142[8] = inst_96134;
                return statearr_96142;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96140__$1, inst_96138);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96144 = [null, null, null, null, null, null, null, null, null];
              statearr_96144[0] = state_machine__6577__auto__;
              statearr_96144[1] = 1;
              return statearr_96144;
            };
            var state_machine__6577__auto____1 = function(state_96140) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96140);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96140) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96140);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96145 = f__6621__auto__.call(null);
        statearr_96145[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96145;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeGetVersion = function takeGetVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96162) {
            var state_val_96163 = state_96162[1];
            if (state_val_96163 === 1) {
              var inst_96157 = intercomTake.v.peer;
              var inst_96158 = intercomTake.sendmsg.call(null, inst_96157, "version", "0");
              var inst_96159 = intercomTake.tostate.call(null, "grind");
              var inst_96160 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_96162__$1 = function() {
                var statearr_96164 = state_96162;
                statearr_96164[5] = inst_96158;
                statearr_96164[6] = inst_96159;
                return statearr_96164;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96162__$1, inst_96160);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96166 = [null, null, null, null, null, null, null];
              statearr_96166[0] = state_machine__6577__auto__;
              statearr_96166[1] = 1;
              return statearr_96166;
            };
            var state_machine__6577__auto____1 = function(state_96162) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96162);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96162) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96162);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96167 = f__6621__auto__.call(null);
        statearr_96167[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96167;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeVersion = function takeVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96178) {
            var state_val_96179 = state_96178[1];
            if (state_val_96179 === 1) {
              var inst_96176 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_96178__$1 = function() {
                var statearr_96180 = state_96178;
                statearr_96180[5] = inst_96176;
                return statearr_96180;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96178__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96182 = [null, null, null, null, null, null];
              statearr_96182[0] = state_machine__6577__auto__;
              statearr_96182[1] = 1;
              return statearr_96182;
            };
            var state_machine__6577__auto____1 = function(state_96178) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96178);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96178) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96178);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96183 = f__6621__auto__.call(null);
        statearr_96183[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96183;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeConn = function takeConn(conn) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96224) {
            var state_val_96225 = state_96224[1];
            if (state_val_96225 === 4) {
              var inst_96222 = state_96224[2];
              var state_96224__$1 = state_96224;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96224__$1, inst_96222);
            } else {
              if (state_val_96225 === 3) {
                var state_96224__$1 = state_96224;
                var statearr_96226_96234 = state_96224__$1;
                statearr_96226_96234[2] = "version";
                statearr_96226_96234[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_96225 === 2) {
                  var state_96224__$1 = state_96224;
                  var statearr_96227_96235 = state_96224__$1;
                  statearr_96227_96235[2] = "grind";
                  statearr_96227_96235[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_96225 === 1) {
                    var inst_96209 = l.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_96210 = conn.data;
                    var inst_96211 = inst_96210.writec;
                    var inst_96212 = im.makeVersion.call(null, "0");
                    var inst_96213 = intercomTake.sendm.call(null, inst_96211, inst_96212);
                    var inst_96214 = conn.connType;
                    var inst_96215 = l.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_96214);
                    var inst_96216 = conn.data;
                    var inst_96217 = inst_96216.connType;
                    var inst_96218 = inst_96217 === "saltan";
                    var state_96224__$1 = function() {
                      var statearr_96228 = state_96224;
                      statearr_96228[5] = inst_96215;
                      statearr_96228[6] = inst_96209;
                      statearr_96228[7] = inst_96213;
                      return statearr_96228;
                    }();
                    if (cljs.core.truth_(inst_96218)) {
                      var statearr_96229_96236 = state_96224__$1;
                      statearr_96229_96236[1] = 2;
                    } else {
                      var statearr_96230_96237 = state_96224__$1;
                      statearr_96230_96237[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96232 = [null, null, null, null, null, null, null, null];
              statearr_96232[0] = state_machine__6577__auto__;
              statearr_96232[1] = 1;
              return statearr_96232;
            };
            var state_machine__6577__auto____1 = function(state_96224) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96224);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96224) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96224);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96233 = f__6621__auto__.call(null);
        statearr_96233[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96233;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_96258) {
            var state_val_96259 = state_96258[1];
            if (state_val_96259 === 2) {
              var inst_96255 = state_96258[2];
              var inst_96256 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_96255);
              var state_96258__$1 = state_96258;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_96258__$1, inst_96256);
            } else {
              if (state_val_96259 === 1) {
                var inst_96251 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_96252 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_96253 = intercomTake.makeGetBlock.call(null, hash);
                var state_96258__$1 = function() {
                  var statearr_96260 = state_96258;
                  statearr_96260[5] = inst_96251;
                  statearr_96260[6] = inst_96252;
                  return statearr_96260;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_96258__$1, 2, inst_96253);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_96262 = [null, null, null, null, null, null, null];
              statearr_96262[0] = state_machine__6577__auto__;
              statearr_96262[1] = 1;
              return statearr_96262;
            };
            var state_machine__6577__auto____1 = function(state_96258) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_96258);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_96258) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_96258);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_96263 = f__6621__auto__.call(null);
        statearr_96263[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_96263;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("mockdatabasew");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("pubsub");
mockdatabasew.states = function() {
  var obj94976 = {};
  return obj94976;
}();
mockdatabasew.cleandb = function cleandb() {
  logger.og.call(null, new cljs.core.Keyword(null, "cleandb", "cleandb", -510162900), "cleandb ", mockdatabasew.mdbase);
  mockdatabasew.states = function() {
    var obj94986 = {};
    return obj94986;
  }();
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_94988) {
            var state_val_94989 = state_94988[1];
            if (state_val_94989 === 1) {
              var state_94988__$1 = state_94988;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_94988__$1, 1);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_94991 = [null, null, null, null, null];
              statearr_94991[0] = state_machine__6577__auto__;
              statearr_94991[1] = 1;
              return statearr_94991;
            };
            var state_machine__6577__auto____1 = function(state_94988) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_94988);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_94988) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_94988);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_94992 = f__6621__auto__.call(null);
        statearr_94992[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_94992;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.dumpdb = function dumpdb() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95003) {
            var state_val_95004 = state_95003[1];
            if (state_val_95004 === 1) {
              var inst_95001 = logger.og.call(null, new cljs.core.Keyword(null, "dumpdb", "dumpdb", 1809492694), "dbase ", mockdatabasew.states);
              var state_95003__$1 = function() {
                var statearr_95005 = state_95003;
                statearr_95005[5] = inst_95001;
                return statearr_95005;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95003__$1, 1);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95007 = [null, null, null, null, null, null];
              statearr_95007[0] = state_machine__6577__auto__;
              statearr_95007[1] = 1;
              return statearr_95007;
            };
            var state_machine__6577__auto____1 = function(state_95003) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95003);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95003) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95003);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95008 = f__6621__auto__.call(null);
        statearr_95008[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95008;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.g = function g(k) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95018) {
            var state_val_95019 = state_95018[1];
            if (state_val_95019 === 1) {
              var inst_95016 = m.g.call(null, k);
              var state_95018__$1 = state_95018;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95018__$1, inst_95016);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95021 = [null, null, null, null, null];
              statearr_95021[0] = state_machine__6577__auto__;
              statearr_95021[1] = 1;
              return statearr_95021;
            };
            var state_machine__6577__auto____1 = function(state_95018) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95018);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95018) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95018);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95022 = f__6621__auto__.call(null);
        statearr_95022[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95022;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.update = function update(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95032) {
            var state_val_95033 = state_95032[1];
            if (state_val_95033 === 1) {
              var inst_95030 = m.update.call(null, k, v);
              var state_95032__$1 = state_95032;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95032__$1, inst_95030);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95035 = [null, null, null, null, null];
              statearr_95035[0] = state_machine__6577__auto__;
              statearr_95035[1] = 1;
              return statearr_95035;
            };
            var state_machine__6577__auto____1 = function(state_95032) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95032);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95032) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95032);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95036 = f__6621__auto__.call(null);
        statearr_95036[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95036;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.p = function p(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95046) {
            var state_val_95047 = state_95046[1];
            if (state_val_95047 === 1) {
              var inst_95044 = m.p.call(null, k, v);
              var state_95046__$1 = state_95046;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95046__$1, inst_95044);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95049 = [null, null, null, null, null];
              statearr_95049[0] = state_machine__6577__auto__;
              statearr_95049[1] = 1;
              return statearr_95049;
            };
            var state_machine__6577__auto____1 = function(state_95046) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95046);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95046) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95046);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95050 = f__6621__auto__.call(null);
        statearr_95050[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95050;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.ps = function ps(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95060) {
            var state_val_95061 = state_95060[1];
            if (state_val_95061 === 1) {
              var inst_95058 = m.ps.call(null, k, v);
              var state_95060__$1 = state_95060;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95060__$1, inst_95058);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95063 = [null, null, null, null, null];
              statearr_95063[0] = state_machine__6577__auto__;
              statearr_95063[1] = 1;
              return statearr_95063;
            };
            var state_machine__6577__auto____1 = function(state_95060) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95060);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95060) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95060);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95064 = f__6621__auto__.call(null);
        statearr_95064[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95064;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.reg = function reg(typ, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95103) {
            var state_val_95104 = state_95103[1];
            if (state_val_95104 === 7) {
              var inst_95099 = state_95103[2];
              var state_95103__$1 = state_95103;
              var statearr_95105_95117 = state_95103__$1;
              statearr_95105_95117[2] = inst_95099;
              statearr_95105_95117[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_95104 === 6) {
                var state_95103__$1 = state_95103;
                var statearr_95106_95118 = state_95103__$1;
                statearr_95106_95118[2] = 0;
                statearr_95106_95118[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_95104 === 5) {
                  var inst_95096 = mockdatabasew.states[typ];
                  var state_95103__$1 = state_95103;
                  var statearr_95107_95119 = state_95103__$1;
                  statearr_95107_95119[2] = inst_95096;
                  statearr_95107_95119[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_95104 === 4) {
                    var inst_95101 = state_95103[2];
                    var state_95103__$1 = state_95103;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95103__$1, inst_95101);
                  } else {
                    if (state_val_95104 === 3) {
                      var inst_95094 = mockdatabasew.states[typ];
                      var state_95103__$1 = state_95103;
                      if (cljs.core.truth_(inst_95094)) {
                        var statearr_95108_95120 = state_95103__$1;
                        statearr_95108_95120[1] = 5;
                      } else {
                        var statearr_95109_95121 = state_95103__$1;
                        statearr_95109_95121[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_95104 === 2) {
                        var inst_95092 = mockdatabasew.states[typ] = v;
                        var state_95103__$1 = function() {
                          var statearr_95110 = state_95103;
                          statearr_95110[5] = inst_95092;
                          return statearr_95110;
                        }();
                        var statearr_95111_95122 = state_95103__$1;
                        statearr_95111_95122[2] = v;
                        statearr_95111_95122[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_95104 === 1) {
                          var state_95103__$1 = state_95103;
                          if (cljs.core.truth_(v)) {
                            var statearr_95112_95123 = state_95103__$1;
                            statearr_95112_95123[1] = 2;
                          } else {
                            var statearr_95113_95124 = state_95103__$1;
                            statearr_95113_95124[1] = 3;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95115 = [null, null, null, null, null, null];
              statearr_95115[0] = state_machine__6577__auto__;
              statearr_95115[1] = 1;
              return statearr_95115;
            };
            var state_machine__6577__auto____1 = function(state_95103) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95103);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95103) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95103);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95116 = f__6621__auto__.call(null);
        statearr_95116[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95116;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.fixture1 = function fixture1() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95248) {
            var state_val_95249 = state_95248[1];
            if (state_val_95249 === 7) {
              var inst_95225 = state_95248[2];
              var inst_95226 = cljs.core.PersistentVector.EMPTY;
              var inst_95227 = {"header":0, "hash":inst_95225, "transactions":inst_95226};
              var inst_95228 = mockdatabasew.blck2 = inst_95227;
              var inst_95231 = pubsub.sia.call(null, "hash", 3);
              var state_95248__$1 = function() {
                var statearr_95250 = state_95248;
                statearr_95250[5] = inst_95228;
                return statearr_95250;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 8, inst_95231);
            } else {
              if (state_val_95249 === 1) {
                var inst_95196 = {"root":"somehash", "nonce":"somenonce", "newhash":"found"};
                var inst_95197 = mockdatabasew.fwork = inst_95196;
                var inst_95198 = pubsub.sia.call(null, "initdb");
                var state_95248__$1 = function() {
                  var statearr_95251 = state_95248;
                  statearr_95251[6] = inst_95197;
                  return statearr_95251;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 2, inst_95198);
              } else {
                if (state_val_95249 === 4) {
                  var inst_95210 = state_95248[2];
                  var inst_95211 = cljs.core.PersistentVector.EMPTY;
                  var inst_95212 = {"header":0, "hash":inst_95210, "transactions":inst_95211};
                  var inst_95213 = mockdatabasew.blck1 = inst_95212;
                  var inst_95214 = pubsub.sia.call(null, "saveBlock", mockdatabasew.blck1);
                  var state_95248__$1 = function() {
                    var statearr_95252 = state_95248;
                    statearr_95252[7] = inst_95213;
                    return statearr_95252;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 5, inst_95214);
                } else {
                  if (state_val_95249 === 6) {
                    var inst_95219 = state_95248[2];
                    var inst_95220 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_95219);
                    var inst_95223 = pubsub.sia.call(null, "hash", 2);
                    var state_95248__$1 = function() {
                      var statearr_95253 = state_95248;
                      statearr_95253[8] = inst_95220;
                      return statearr_95253;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 7, inst_95223);
                  } else {
                    if (state_val_95249 === 3) {
                      var inst_95204 = state_95248[2];
                      var inst_95205 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_95204);
                      var inst_95208 = pubsub.sia.call(null, "hash", 1);
                      var state_95248__$1 = function() {
                        var statearr_95254 = state_95248;
                        statearr_95254[9] = inst_95205;
                        return statearr_95254;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 4, inst_95208);
                    } else {
                      if (state_val_95249 === 2) {
                        var inst_95200 = state_95248[2];
                        var inst_95201 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_95200);
                        var inst_95202 = pubsub.sia.call(null, "dumpdb");
                        var state_95248__$1 = function() {
                          var statearr_95255 = state_95248;
                          statearr_95255[10] = inst_95201;
                          return statearr_95255;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 3, inst_95202);
                      } else {
                        if (state_val_95249 === 11) {
                          var inst_95245 = state_95248[2];
                          var inst_95246 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_95245);
                          var state_95248__$1 = state_95248;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95248__$1, inst_95246);
                        } else {
                          if (state_val_95249 === 9) {
                            var inst_95239 = state_95248[2];
                            var inst_95240 = pubsub.sia.call(null, "saveBlock", mockdatabasew.blck3);
                            var state_95248__$1 = function() {
                              var statearr_95256 = state_95248;
                              statearr_95256[11] = inst_95239;
                              return statearr_95256;
                            }();
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 10, inst_95240);
                          } else {
                            if (state_val_95249 === 5) {
                              var inst_95216 = state_95248[2];
                              var inst_95217 = pubsub.sia.call(null, "dumpdb");
                              var state_95248__$1 = function() {
                                var statearr_95257 = state_95248;
                                statearr_95257[12] = inst_95216;
                                return statearr_95257;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 6, inst_95217);
                            } else {
                              if (state_val_95249 === 10) {
                                var inst_95242 = state_95248[2];
                                var inst_95243 = pubsub.sia.call(null, "dumpdb");
                                var state_95248__$1 = function() {
                                  var statearr_95258 = state_95248;
                                  statearr_95258[13] = inst_95242;
                                  return statearr_95258;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 11, inst_95243);
                              } else {
                                if (state_val_95249 === 8) {
                                  var inst_95233 = state_95248[2];
                                  var inst_95234 = cljs.core.PersistentVector.EMPTY;
                                  var inst_95235 = {"header":0, "hash":inst_95233, "transactions":inst_95234};
                                  var inst_95236 = mockdatabasew.blck3 = inst_95235;
                                  var inst_95237 = pubsub.sia.call(null, "saveBlock", mockdatabasew.blck2);
                                  var state_95248__$1 = function() {
                                    var statearr_95259 = state_95248;
                                    statearr_95259[14] = inst_95236;
                                    return statearr_95259;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95248__$1, 9, inst_95237);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95261 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_95261[0] = state_machine__6577__auto__;
              statearr_95261[1] = 1;
              return statearr_95261;
            };
            var state_machine__6577__auto____1 = function(state_95248) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95248);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95248) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95248);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95262 = f__6621__auto__.call(null);
        statearr_95262[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95262;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.initDBase = function initDBase(x) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_95360) {
            var state_val_95361 = state_95360[1];
            if (state_val_95361 === 7) {
              var inst_95339 = state_95360[2];
              var inst_95340 = cljs.core.PersistentVector.EMPTY;
              var inst_95341 = {"header":0, "hash":inst_95339, "transactions":inst_95340};
              var inst_95342 = mockdatabasew.blck = inst_95341;
              var inst_95343 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "saving ", mockdatabasew.blck);
              var inst_95344 = mockdatabasew.blck.header;
              var inst_95345 = inst_95344.heightFromRoot = 0;
              var inst_95346 = pubsub.sia.call(null, "db", "last", mockdatabasew.blck);
              var state_95360__$1 = function() {
                var statearr_95362 = state_95360;
                statearr_95362[5] = inst_95343;
                statearr_95362[6] = inst_95345;
                statearr_95362[7] = inst_95342;
                return statearr_95362;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95360__$1, 8, inst_95346);
            } else {
              if (state_val_95361 === 1) {
                var inst_95320 = logger.og.call(null, new cljs.core.Keyword(null, "initdbwraper2", "initdbwraper2", 161886543), "wrapper", x);
                var inst_95321 = cljs.core.async.chan.call(null);
                var inst_95322 = pubsub.sia.call(null, "db", "last");
                var state_95360__$1 = function() {
                  var statearr_95363 = state_95360;
                  statearr_95363[8] = inst_95320;
                  statearr_95363[9] = inst_95321;
                  return statearr_95363;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95360__$1, 2, inst_95322);
              } else {
                if (state_val_95361 === 4) {
                  var inst_95331 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "nothing in database");
                  var inst_95332 = pubsub.sia.call(null, "db", "height", 0);
                  var state_95360__$1 = function() {
                    var statearr_95364 = state_95360;
                    statearr_95364[10] = inst_95331;
                    return statearr_95364;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95360__$1, 6, inst_95332);
                } else {
                  if (state_val_95361 === 6) {
                    var inst_95334 = state_95360[2];
                    var inst_95337 = pubsub.sia.call(null, "hash", 0);
                    var state_95360__$1 = function() {
                      var statearr_95365 = state_95360;
                      statearr_95365[11] = inst_95334;
                      return statearr_95365;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95360__$1, 7, inst_95337);
                  } else {
                    if (state_val_95361 === 3) {
                      var inst_95329 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database is ", mockdatabasew.lastone);
                      var state_95360__$1 = state_95360;
                      var statearr_95366_95377 = state_95360__$1;
                      statearr_95366_95377[2] = inst_95329;
                      statearr_95366_95377[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_95361 === 2) {
                        var inst_95324 = state_95360[2];
                        var inst_95325 = mockdatabasew.lastone = inst_95324;
                        var inst_95326 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "about to init");
                        var inst_95327 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database ", mockdatabasew.lastone);
                        var state_95360__$1 = function() {
                          var statearr_95367 = state_95360;
                          statearr_95367[12] = inst_95325;
                          statearr_95367[13] = inst_95327;
                          statearr_95367[14] = inst_95326;
                          return statearr_95367;
                        }();
                        var statearr_95369_95378 = state_95360__$1;
                        statearr_95369_95378[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_95361 === 9) {
                          var inst_95352 = state_95360[2];
                          var inst_95353 = "b" + 0;
                          var inst_95354 = pubsub.sia.call(null, "db", inst_95353, mockdatabasew.blck);
                          var state_95360__$1 = function() {
                            var statearr_95370 = state_95360;
                            statearr_95370[15] = inst_95352;
                            return statearr_95370;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95360__$1, 10, inst_95354);
                        } else {
                          if (state_val_95361 === 5) {
                            var inst_95358 = state_95360[2];
                            var state_95360__$1 = function() {
                              var statearr_95371 = state_95360;
                              statearr_95371[16] = inst_95358;
                              return statearr_95371;
                            }();
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_95360__$1, 1);
                          } else {
                            if (state_val_95361 === 10) {
                              var inst_95356 = state_95360[2];
                              var state_95360__$1 = state_95360;
                              var statearr_95372_95379 = state_95360__$1;
                              statearr_95372_95379[2] = inst_95356;
                              statearr_95372_95379[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_95361 === 8) {
                                var inst_95348 = state_95360[2];
                                var inst_95349 = mockdatabasew.blck.hash;
                                var inst_95350 = pubsub.sia.call(null, "db", inst_95349, mockdatabasew.blck);
                                var state_95360__$1 = function() {
                                  var statearr_95373 = state_95360;
                                  statearr_95373[17] = inst_95348;
                                  return statearr_95373;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_95360__$1, 9, inst_95350);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_95375 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_95375[0] = state_machine__6577__auto__;
              statearr_95375[1] = 1;
              return statearr_95375;
            };
            var state_machine__6577__auto____1 = function(state_95360) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_95360);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_95360) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_95360);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_95376 = f__6621__auto__.call(null);
        statearr_95376[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_95376;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("routing");
goog.require("cljs.core");
goog.require("display.renderStrategy");
goog.require("intercomMake");
goog.require("blockchain");
goog.require("cljs.core.async");
goog.require("mockdatabasew");
goog.require("communications");
goog.require("intercomTake");
goog.require("crypt");
goog.require("logger");
goog.require("mining");
routing.routea = function routea(f, rch, sch) {
  return f.call(null, rch, sch, "cleandb", mockdatabasew.cleandb, "connectTo", communications.connectTo, "dumpdb", mockdatabasew.dumpdb, "g", mockdatabasew.reg, "db", mockdatabasew.reg, "initdb", mockdatabasew.initDBase, "onDatabaseChange", mockdatabasew.onDatabaseChange, "p", mockdatabasew.reg, "s", mockdatabasew.s, "update", mockdatabasew.update, "database", mockdatabasew.reg, "ui", display.renderStrategy.run, "addToChain", blockchain.addToChain, "addTransactionToBlock", blockchain.addTransactionToBlock, 
  "blockKnown?", blockchain.blockKnown_QMARK_, "blockchainHeight", blockchain.blockchainHeight, "heightFromBlock", blockchain.heightFromBlock, "last?", blockchain.last_QMARK_, "log2", blockchain.log2, "makeBlock", blockchain.makeBlock, "makeBlockHeader", blockchain.makeBlockHeader, "makeTransaction", blockchain.makeTransaction, "popA", blockchain.popA, "prevblk", blockchain.prevblk, "removeTransactionFromMemPool", blockchain.removeTransactionFromMemPool, "saveBlock", blockchain.saveBlock, "broadcast", 
  communications.broadcast, "broadcastNewBlock", communications.broadcastNewBlock, "channelsFromConnection", communications.channelsFromConnection, "cryptoCh", communications.cryptoCh, "initial", communications.initial, "intercomMeta", communications.intercomMeta, "onBlockMined", communications.onBlockMined, "onConnection", communications.onConnection, "onCrypto", communications.onCrypto, "onData", communications.onData, "onNewConnection", communications.onNewConnection, "onOpen", communications.onOpen, 
  "onTransaction", communications.onTransaction, "sendmsg", communications.sendmsg, "setID", communications.setID, "setupComm", communications.setupComm, "startP2PCommLoop", communications.startP2PCommLoop, "arraybtostring", crypt.arraybtostring, "bHash", crypt.bHash, "encode", crypt.encode, "hash", crypt.s256, "merkleRoot", crypt.merkleRoot, "resultToCh", crypt.resultToCh, "s256", crypt.s256, "sha256", crypt.sha256, "sha256c", crypt.sha256c, "shaCallb", crypt.shaCallb, "getIntercomState", intercom.getIntercomState, 
  "intercomstatemachine", intercom.intercomstatemachine, "is?", intercom.is_QMARK_, "onMessage", intercom.onMessage, "setIntercomState", intercom.setIntercomState, "tostateu", intercom.tostateu, "typeof?", intercom.typeof_QMARK_, "makeConn", intercomMake.makeConn, "makeData", intercomMake.makeData, "makeGetBlock", intercomMake.makeGetBlock, "makeInv", intercomMake.makeGetVersion, "makeInv", intercomMake.makeInv, "makeVersion", intercomMake.makeVersion, "sendm", intercomTake.sendm, "takeConn", intercomTake.takeConn, 
  "takeData", intercomTake.takeData, "takeGetBlocks", intercomTake.takeGetBlocks, "takeGetVersion", intercomTake.takeGetVersion, "takeInv", intercomTake.takeInv, "log", logger.og, "mine", mining.mine, "mg", mockdatabase.g, "mp", mockdatabase.p, "mps", mockdatabase.ps, "mupdate", mockdatabase.update, "mcleandb", mockdatabasew.cleandb, "mdumpdb", mockdatabasew.dumpdb, "mg", mockdatabasew.g, "minitDBase", mockdatabasew.initDBase, "mp", mockdatabasew.p, "mps", mockdatabasew.ps, "mupdate", mockdatabasew.update);
};
goog.provide("database");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
database.states = function() {
  var obj123599 = {};
  return obj123599;
}();
database.cleandb = function cleandb() {
  return m.cleandb.call(null);
};
database.dumpdb = function dumpdb() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_123610) {
            var state_val_123611 = state_123610[1];
            if (state_val_123611 === 1) {
              var inst_123608 = logger.og.call(null, database.states);
              var state_123610__$1 = function() {
                var statearr_123612 = state_123610;
                statearr_123612[5] = inst_123608;
                return statearr_123612;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_123610__$1, 1);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_123614 = [null, null, null, null, null, null];
              statearr_123614[0] = state_machine__6577__auto__;
              statearr_123614[1] = 1;
              return statearr_123614;
            };
            var state_machine__6577__auto____1 = function(state_123610) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_123610);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_123610) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_123610);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_123615 = f__6621__auto__.call(null);
        statearr_123615[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_123615;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.onDatabaseChange = cljs.core.async.chan.call(null);
database.onDatabaseChange.type = "databaseChange";
database.update = function update(k, f) {
  return logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "getting from db ", k);
};
database.g = function g(k) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_123629) {
            var state_val_123630 = state_123629[1];
            if (state_val_123630 === 2) {
              var inst_123627 = state_123629[2];
              var state_123629__$1 = state_123629;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_123629__$1, inst_123627);
            } else {
              if (state_val_123630 === 1) {
                var inst_123625 = m.g.call(null, k);
                var state_123629__$1 = state_123629;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_123629__$1, 2, inst_123625);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_123632 = [null, null, null, null, null];
              statearr_123632[0] = state_machine__6577__auto__;
              statearr_123632[1] = 1;
              return statearr_123632;
            };
            var state_machine__6577__auto____1 = function(state_123629) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_123629);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_123629) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_123629);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_123633 = f__6621__auto__.call(null);
        statearr_123633[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_123633;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.update = function update(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_123647) {
            var state_val_123648 = state_123647[1];
            if (state_val_123648 === 2) {
              var inst_123645 = state_123647[2];
              var state_123647__$1 = state_123647;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_123647__$1, inst_123645);
            } else {
              if (state_val_123648 === 1) {
                var inst_123643 = m.update.call(null, k, v);
                var state_123647__$1 = state_123647;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_123647__$1, 2, inst_123643);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_123650 = [null, null, null, null, null];
              statearr_123650[0] = state_machine__6577__auto__;
              statearr_123650[1] = 1;
              return statearr_123650;
            };
            var state_machine__6577__auto____1 = function(state_123647) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_123647);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_123647) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_123647);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_123651 = f__6621__auto__.call(null);
        statearr_123651[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_123651;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.p = function p(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_123665) {
            var state_val_123666 = state_123665[1];
            if (state_val_123666 === 2) {
              var inst_123663 = state_123665[2];
              var state_123665__$1 = state_123665;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_123665__$1, inst_123663);
            } else {
              if (state_val_123666 === 1) {
                var inst_123661 = m.p.call(null, k, v);
                var state_123665__$1 = state_123665;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_123665__$1, 2, inst_123661);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_123668 = [null, null, null, null, null];
              statearr_123668[0] = state_machine__6577__auto__;
              statearr_123668[1] = 1;
              return statearr_123668;
            };
            var state_machine__6577__auto____1 = function(state_123665) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_123665);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_123665) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_123665);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_123669 = f__6621__auto__.call(null);
        statearr_123669[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_123669;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.ps = function ps(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_123683) {
            var state_val_123684 = state_123683[1];
            if (state_val_123684 === 2) {
              var inst_123681 = state_123683[2];
              var state_123683__$1 = state_123683;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_123683__$1, inst_123681);
            } else {
              if (state_val_123684 === 1) {
                var inst_123679 = m.p.call(null, k, v);
                var state_123683__$1 = state_123683;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_123683__$1, 2, inst_123679);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_123686 = [null, null, null, null, null];
              statearr_123686[0] = state_machine__6577__auto__;
              statearr_123686[1] = 1;
              return statearr_123686;
            };
            var state_machine__6577__auto____1 = function(state_123683) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_123683);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_123683) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_123683);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_123687 = f__6621__auto__.call(null);
        statearr_123687[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_123687;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.reg = function reg(typ, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_123728) {
            var state_val_123729 = state_123728[1];
            if (state_val_123729 === 7) {
              var inst_123724 = state_123728[2];
              var state_123728__$1 = state_123728;
              var statearr_123730_123742 = state_123728__$1;
              statearr_123730_123742[2] = inst_123724;
              statearr_123730_123742[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_123729 === 6) {
                var state_123728__$1 = state_123728;
                var statearr_123731_123743 = state_123728__$1;
                statearr_123731_123743[2] = 0;
                statearr_123731_123743[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_123729 === 5) {
                  var inst_123721 = database.states[typ];
                  var state_123728__$1 = state_123728;
                  var statearr_123732_123744 = state_123728__$1;
                  statearr_123732_123744[2] = inst_123721;
                  statearr_123732_123744[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_123729 === 4) {
                    var inst_123726 = state_123728[2];
                    var state_123728__$1 = state_123728;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_123728__$1, inst_123726);
                  } else {
                    if (state_val_123729 === 3) {
                      var inst_123719 = database.states[typ];
                      var state_123728__$1 = state_123728;
                      if (cljs.core.truth_(inst_123719)) {
                        var statearr_123733_123745 = state_123728__$1;
                        statearr_123733_123745[1] = 5;
                      } else {
                        var statearr_123734_123746 = state_123728__$1;
                        statearr_123734_123746[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_123729 === 2) {
                        var inst_123717 = database.states[typ] = v;
                        var state_123728__$1 = state_123728;
                        var statearr_123735_123747 = state_123728__$1;
                        statearr_123735_123747[2] = inst_123717;
                        statearr_123735_123747[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_123729 === 1) {
                          var inst_123715 = logger.og.call(null, new cljs.core.Keyword(null, "reg", "reg", 1636216344), typ, v);
                          var state_123728__$1 = function() {
                            var statearr_123736 = state_123728;
                            statearr_123736[5] = inst_123715;
                            return statearr_123736;
                          }();
                          if (cljs.core.truth_(v)) {
                            var statearr_123737_123748 = state_123728__$1;
                            statearr_123737_123748[1] = 2;
                          } else {
                            var statearr_123738_123749 = state_123728__$1;
                            statearr_123738_123749[1] = 3;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_123740 = [null, null, null, null, null, null];
              statearr_123740[0] = state_machine__6577__auto__;
              statearr_123740[1] = 1;
              return statearr_123740;
            };
            var state_machine__6577__auto____1 = function(state_123728) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_123728);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_123728) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_123728);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_123741 = f__6621__auto__.call(null);
        statearr_123741[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_123741;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.initDBase = function initDBase(x) {
  logger.og.call(null, new cljs.core.Keyword(null, "initdbwraper", "initdbwraper", 631490056), "wrapper", x);
  return m.initDBase.call(null, x);
};
goog.provide("intercomMakeUtil");
goog.require("cljs.core");
goog.provide("intercom");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("pubsub");
cljs.core.enable_console_print_BANG_.call(null);
intercom.intercomState = "start";
intercom.state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
intercom.inputch = cljs.core.async.chan.call(null);
intercom.outputch = cljs.core.async.chan.call(null);
intercom.statech = cljs.core.async.chan.call(null);
intercom.onMessage = function onMessage(wch, type, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), type + " message in intercom", data);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110168) {
            var state_val_110169 = state_110168[1];
            if (state_val_110169 === 2) {
              var inst_110166 = state_110168[2];
              var state_110168__$1 = state_110168;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110168__$1, inst_110166);
            } else {
              if (state_val_110169 === 1) {
                var inst_110164 = {"type":type, "data":data, "peer":wch};
                var state_110168__$1 = state_110168;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_110168__$1, 2, intercom.inputch, inst_110164);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110171 = [null, null, null, null, null];
              statearr_110171[0] = state_machine__6577__auto__;
              statearr_110171[1] = 1;
              return statearr_110171;
            };
            var state_machine__6577__auto____1 = function(state_110168) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110168);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110168) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110168);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110172 = f__6621__auto__.call(null);
        statearr_110172[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110172;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.setIntercomState = function setIntercomState(conn, state) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110182) {
            var state_val_110183 = state_110182[1];
            if (state_val_110183 === 1) {
              var inst_110180 = conn.intercomstate = state;
              var state_110182__$1 = state_110182;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110182__$1, inst_110180);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110185 = [null, null, null, null, null];
              statearr_110185[0] = state_machine__6577__auto__;
              statearr_110185[1] = 1;
              return statearr_110185;
            };
            var state_machine__6577__auto____1 = function(state_110182) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110182);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110182) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110182);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110186 = f__6621__auto__.call(null);
        statearr_110186[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110186;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.getIntercomState = function getIntercomState(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "getIntercomState", "getIntercomState", -1128989799), "intercom state", conn);
  return conn["intercomstate"];
};
intercom.tostateu = function tostateu(conn, statename) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "changing state to: ", statename);
  return conn["intercomstate"] = statename;
};
intercom.typeof_QMARK_ = function typeof_QMARK_(message, type) {
  return message.type === type;
};
intercom.is_QMARK_ = function is_QMARK_(state, qstate) {
  return state === qstate;
};
intercom.intercomstatemachine = function intercomstatemachine(conn, message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110458) {
            var state_val_110459 = state_110458[1];
            if (state_val_110459 === 7) {
              var inst_110382 = intercom.is_QMARK_.call(null, intercom.state, "grind");
              var state_110458__$1 = state_110458;
              if (inst_110382) {
                var statearr_110460_110513 = state_110458__$1;
                statearr_110460_110513[1] = 13;
              } else {
                var statearr_110461_110514 = state_110458__$1;
                statearr_110461_110514[1] = 14;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_110459 === 20) {
                var inst_110394 = intercom.typeof_QMARK_.call(null, message, "getdata");
                var state_110458__$1 = state_110458;
                if (inst_110394) {
                  var statearr_110462_110515 = state_110458__$1;
                  statearr_110462_110515[1] = 22;
                } else {
                  var statearr_110463_110516 = state_110458__$1;
                  statearr_110463_110516[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_110459 === 27) {
                  var inst_110443 = state_110458[2];
                  var state_110458__$1 = state_110458;
                  var statearr_110464_110517 = state_110458__$1;
                  statearr_110464_110517[2] = inst_110443;
                  statearr_110464_110517[1] = 24;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_110459 === 1) {
                    var inst_110350 = cljs.core.partial.call(null, intercom.tostateu, conn);
                    var inst_110351 = intercom.tostate = inst_110350;
                    var inst_110352 = intercom.getIntercomState.call(null, conn);
                    var inst_110353 = intercom.state = inst_110352;
                    var inst_110354 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "starting loop in intercom");
                    var inst_110355 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state in intercom ", intercom.state);
                    var inst_110356 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message in intercom ", message);
                    var inst_110357 = message.data;
                    var inst_110358 = intercom.v = inst_110357;
                    var inst_110359 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state ", intercom.state);
                    var inst_110360 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message ", message);
                    var inst_110361 = intercom.is_QMARK_.call(null, intercom.state, "start");
                    var state_110458__$1 = function() {
                      var statearr_110465 = state_110458;
                      statearr_110465[5] = inst_110353;
                      statearr_110465[6] = inst_110358;
                      statearr_110465[7] = inst_110351;
                      statearr_110465[8] = inst_110360;
                      statearr_110465[9] = inst_110356;
                      statearr_110465[10] = inst_110359;
                      statearr_110465[11] = inst_110355;
                      statearr_110465[12] = inst_110354;
                      return statearr_110465;
                    }();
                    if (inst_110361) {
                      var statearr_110466_110518 = state_110458__$1;
                      statearr_110466_110518[1] = 2;
                    } else {
                      var statearr_110467_110519 = state_110458__$1;
                      statearr_110467_110519[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_110459 === 24) {
                      var inst_110445 = state_110458[2];
                      var state_110458__$1 = state_110458;
                      var statearr_110468_110520 = state_110458__$1;
                      statearr_110468_110520[2] = inst_110445;
                      statearr_110468_110520[1] = 21;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_110459 === 39) {
                        var inst_110435 = state_110458[2];
                        var state_110458__$1 = state_110458;
                        var statearr_110469_110521 = state_110458__$1;
                        statearr_110469_110521[2] = inst_110435;
                        statearr_110469_110521[1] = 36;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_110459 === 4) {
                          var inst_110456 = state_110458[2];
                          var state_110458__$1 = state_110458;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110458__$1, inst_110456);
                        } else {
                          if (state_val_110459 === 15) {
                            var inst_110452 = state_110458[2];
                            var state_110458__$1 = state_110458;
                            var statearr_110470_110522 = state_110458__$1;
                            statearr_110470_110522[2] = inst_110452;
                            statearr_110470_110522[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_110459 === 21) {
                              var inst_110447 = state_110458[2];
                              var state_110458__$1 = state_110458;
                              var statearr_110471_110523 = state_110458__$1;
                              statearr_110471_110523[2] = inst_110447;
                              statearr_110471_110523[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_110459 === 31) {
                                var inst_110411 = intercom.takeData.call(null, message);
                                var inst_110412 = intercom.tostate.call(null, inst_110411);
                                var state_110458__$1 = state_110458;
                                var statearr_110472_110524 = state_110458__$1;
                                statearr_110472_110524[2] = inst_110412;
                                statearr_110472_110524[1] = 33;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_110459 === 32) {
                                  var inst_110414 = intercom.typeof_QMARK_.call(null, message, "peerdata");
                                  var state_110458__$1 = state_110458;
                                  if (inst_110414) {
                                    var statearr_110473_110525 = state_110458__$1;
                                    statearr_110473_110525[1] = 34;
                                  } else {
                                    var statearr_110474_110526 = state_110458__$1;
                                    statearr_110474_110526[1] = 35;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_110459 === 33) {
                                    var inst_110439 = state_110458[2];
                                    var state_110458__$1 = state_110458;
                                    var statearr_110475_110527 = state_110458__$1;
                                    statearr_110475_110527[2] = inst_110439;
                                    statearr_110475_110527[1] = 30;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_110459 === 13) {
                                      var inst_110384 = intercom.typeof_QMARK_.call(null, message, "conn");
                                      var state_110458__$1 = state_110458;
                                      if (inst_110384) {
                                        var statearr_110476_110528 = state_110458__$1;
                                        statearr_110476_110528[1] = 16;
                                      } else {
                                        var statearr_110477_110529 = state_110458__$1;
                                        statearr_110477_110529[1] = 17;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_110459 === 22) {
                                        var inst_110396 = intercom.takeGetData.call(null, message);
                                        var inst_110397 = intercom.tostate.call(null, inst_110396);
                                        var state_110458__$1 = state_110458;
                                        var statearr_110478_110530 = state_110458__$1;
                                        statearr_110478_110530[2] = inst_110397;
                                        statearr_110478_110530[1] = 24;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_110459 === 36) {
                                          var inst_110437 = state_110458[2];
                                          var state_110458__$1 = state_110458;
                                          var statearr_110479_110531 = state_110458__$1;
                                          statearr_110479_110531[2] = inst_110437;
                                          statearr_110479_110531[1] = 33;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_110459 === 29) {
                                            var inst_110409 = intercom.typeof_QMARK_.call(null, message, "data");
                                            var state_110458__$1 = state_110458;
                                            if (inst_110409) {
                                              var statearr_110480_110532 = state_110458__$1;
                                              statearr_110480_110532[1] = 31;
                                            } else {
                                              var statearr_110481_110533 = state_110458__$1;
                                              statearr_110481_110533[1] = 32;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_110459 === 6) {
                                              var inst_110372 = intercom.typeof_QMARK_.call(null, message, "version");
                                              var state_110458__$1 = state_110458;
                                              if (inst_110372) {
                                                var statearr_110482_110534 = state_110458__$1;
                                                statearr_110482_110534[1] = 9;
                                              } else {
                                                var statearr_110483_110535 = state_110458__$1;
                                                statearr_110483_110535[1] = 10;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_110459 === 28) {
                                                var inst_110406 = intercom.takeTx.call(null, message);
                                                var inst_110407 = intercom.tostate.call(null, inst_110406);
                                                var state_110458__$1 = state_110458;
                                                var statearr_110484_110536 = state_110458__$1;
                                                statearr_110484_110536[2] = inst_110407;
                                                statearr_110484_110536[1] = 30;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_110459 === 25) {
                                                  var inst_110401 = intercom.takeGetTx.call(null, message);
                                                  var inst_110402 = intercom.tostate.call(null, inst_110401);
                                                  var state_110458__$1 = state_110458;
                                                  var statearr_110485_110537 = state_110458__$1;
                                                  statearr_110485_110537[2] = inst_110402;
                                                  statearr_110485_110537[1] = 27;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_110459 === 34) {
                                                    var inst_110418 = message.data;
                                                    var inst_110419 = message.peer;
                                                    var inst_110420 = inst_110419.conn;
                                                    var inst_110421 = inst_110420.peerConnection;
                                                    var inst_110422 = inst_110421.remoteDescription;
                                                    var inst_110423 = inst_110422.sdp;
                                                    var inst_110424 = inst_110423.split(" ");
                                                    var inst_110425 = inst_110424[5];
                                                    var inst_110426 = inst_110425.split("\n");
                                                    var inst_110427 = inst_110426[0];
                                                    var inst_110428 = {"data":inst_110418, "id":inst_110427};
                                                    var inst_110429 = pubsub.pub.call(null, "peermessage", inst_110428);
                                                    var state_110458__$1 = state_110458;
                                                    var statearr_110486_110538 = state_110458__$1;
                                                    statearr_110486_110538[2] = inst_110429;
                                                    statearr_110486_110538[1] = 36;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_110459 === 17) {
                                                      var inst_110389 = intercom.typeof_QMARK_.call(null, message, "inv");
                                                      var state_110458__$1 = state_110458;
                                                      if (inst_110389) {
                                                        var statearr_110487_110539 = state_110458__$1;
                                                        statearr_110487_110539[1] = 19;
                                                      } else {
                                                        var statearr_110488_110540 = state_110458__$1;
                                                        statearr_110488_110540[1] = 20;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_110459 === 3) {
                                                        var inst_110370 = intercom.is_QMARK_.call(null, intercom.state, "version");
                                                        var state_110458__$1 = state_110458;
                                                        if (inst_110370) {
                                                          var statearr_110489_110541 = state_110458__$1;
                                                          statearr_110489_110541[1] = 6;
                                                        } else {
                                                          var statearr_110490_110542 = state_110458__$1;
                                                          statearr_110490_110542[1] = 7;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_110459 === 12) {
                                                          var inst_110376 = state_110458[2];
                                                          var inst_110377 = intercom.tostate.call(null, inst_110376);
                                                          var state_110458__$1 = state_110458;
                                                          var statearr_110491_110543 = state_110458__$1;
                                                          statearr_110491_110543[2] = inst_110377;
                                                          statearr_110491_110543[1] = 11;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_110459 === 2) {
                                                            var inst_110363 = intercom.takeConn.call(null, message);
                                                            var state_110458__$1 = state_110458;
                                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110458__$1, 5, inst_110363);
                                                          } else {
                                                            if (state_val_110459 === 23) {
                                                              var inst_110399 = intercom.typeof_QMARK_.call(null, message, "gettx");
                                                              var state_110458__$1 = state_110458;
                                                              if (inst_110399) {
                                                                var statearr_110492_110544 = state_110458__$1;
                                                                statearr_110492_110544[1] = 25;
                                                              } else {
                                                                var statearr_110493_110545 = state_110458__$1;
                                                                statearr_110493_110545[1] = 26;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_110459 === 35) {
                                                                var state_110458__$1 = state_110458;
                                                                var statearr_110494_110546 = state_110458__$1;
                                                                statearr_110494_110546[1] = 37;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_110459 === 19) {
                                                                  var inst_110391 = intercom.takeInv.call(null, message);
                                                                  var inst_110392 = intercom.tostate.call(null, inst_110391);
                                                                  var state_110458__$1 = state_110458;
                                                                  var statearr_110496_110547 = state_110458__$1;
                                                                  statearr_110496_110547[2] = inst_110392;
                                                                  statearr_110496_110547[1] = 21;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_110459 === 11) {
                                                                    var inst_110380 = state_110458[2];
                                                                    var state_110458__$1 = state_110458;
                                                                    var statearr_110497_110548 = state_110458__$1;
                                                                    statearr_110497_110548[2] = inst_110380;
                                                                    statearr_110497_110548[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_110459 === 9) {
                                                                      var inst_110374 = intercom.takeVersion.call(null, message);
                                                                      var state_110458__$1 = state_110458;
                                                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110458__$1, 12, inst_110374);
                                                                    } else {
                                                                      if (state_val_110459 === 5) {
                                                                        var inst_110365 = state_110458[2];
                                                                        var inst_110366 = intercom.newstate = inst_110365;
                                                                        var inst_110367 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "start -\x3e ", intercom.newstate);
                                                                        var inst_110368 = intercom.tostate.call(null, intercom.newstate);
                                                                        var state_110458__$1 = function() {
                                                                          var statearr_110498 = state_110458;
                                                                          statearr_110498[13] = inst_110366;
                                                                          statearr_110498[14] = inst_110367;
                                                                          return statearr_110498;
                                                                        }();
                                                                        var statearr_110499_110549 = state_110458__$1;
                                                                        statearr_110499_110549[2] = inst_110368;
                                                                        statearr_110499_110549[1] = 4;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_110459 === 14) {
                                                                          var state_110458__$1 = state_110458;
                                                                          var statearr_110500_110550 = state_110458__$1;
                                                                          statearr_110500_110550[2] = null;
                                                                          statearr_110500_110550[1] = 15;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_110459 === 26) {
                                                                            var inst_110404 = intercom.typeof_QMARK_.call(null, message, "tx");
                                                                            var state_110458__$1 = state_110458;
                                                                            if (inst_110404) {
                                                                              var statearr_110501_110551 = state_110458__$1;
                                                                              statearr_110501_110551[1] = 28;
                                                                            } else {
                                                                              var statearr_110502_110552 = state_110458__$1;
                                                                              statearr_110502_110552[1] = 29;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_110459 === 16) {
                                                                              var inst_110386 = intercom.takeConn.call(null, message);
                                                                              var inst_110387 = intercom.tostate.call(null, inst_110386);
                                                                              var state_110458__$1 = state_110458;
                                                                              var statearr_110503_110553 = state_110458__$1;
                                                                              statearr_110503_110553[2] = inst_110387;
                                                                              statearr_110503_110553[1] = 18;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_110459 === 38) {
                                                                                var state_110458__$1 = state_110458;
                                                                                var statearr_110504_110554 = state_110458__$1;
                                                                                statearr_110504_110554[2] = null;
                                                                                statearr_110504_110554[1] = 39;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_110459 === 30) {
                                                                                  var inst_110441 = state_110458[2];
                                                                                  var state_110458__$1 = state_110458;
                                                                                  var statearr_110505_110555 = state_110458__$1;
                                                                                  statearr_110505_110555[2] = inst_110441;
                                                                                  statearr_110505_110555[1] = 27;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_110459 === 10) {
                                                                                    var state_110458__$1 = state_110458;
                                                                                    var statearr_110506_110556 = state_110458__$1;
                                                                                    statearr_110506_110556[2] = null;
                                                                                    statearr_110506_110556[1] = 11;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_110459 === 18) {
                                                                                      var inst_110449 = state_110458[2];
                                                                                      var state_110458__$1 = state_110458;
                                                                                      var statearr_110507_110557 = state_110458__$1;
                                                                                      statearr_110507_110557[2] = inst_110449;
                                                                                      statearr_110507_110557[1] = 15;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_110459 === 37) {
                                                                                        var inst_110432 = intercom.tostate.call(null, "grind");
                                                                                        var state_110458__$1 = state_110458;
                                                                                        var statearr_110508_110558 = state_110458__$1;
                                                                                        statearr_110508_110558[2] = inst_110432;
                                                                                        statearr_110508_110558[1] = 39;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_110459 === 8) {
                                                                                          var inst_110454 = state_110458[2];
                                                                                          var state_110458__$1 = state_110458;
                                                                                          var statearr_110509_110559 = state_110458__$1;
                                                                                          statearr_110509_110559[2] = inst_110454;
                                                                                          statearr_110509_110559[1] = 4;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          return null;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110511 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_110511[0] = state_machine__6577__auto__;
              statearr_110511[1] = 1;
              return statearr_110511;
            };
            var state_machine__6577__auto____1 = function(state_110458) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110458);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110458) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110458);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110512 = f__6621__auto__.call(null);
        statearr_110512[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110512;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.sendm = function sendm(peer, payload) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110571) {
            var state_val_110572 = state_110571[1];
            if (state_val_110572 === 2) {
              var inst_110569 = state_110571[2];
              var state_110571__$1 = state_110571;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110571__$1, inst_110569);
            } else {
              if (state_val_110572 === 1) {
                var state_110571__$1 = state_110571;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_110571__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110574 = [null, null, null, null, null];
              statearr_110574[0] = state_machine__6577__auto__;
              statearr_110574[1] = 1;
              return statearr_110574;
            };
            var state_machine__6577__auto____1 = function(state_110571) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110571);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110571) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110571);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110575 = f__6621__auto__.call(null);
        statearr_110575[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110575;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeInv = function takeInv(fullMessage) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110707) {
            var state_val_110708 = state_110707[1];
            if (state_val_110708 === 7) {
              var inst_110674 = state_110707[2];
              var inst_110675 = intercom.heightFromBlock.call(null, inst_110674);
              var inst_110676 = intercom.blocks.vector;
              var inst_110677 = inst_110676.length;
              var inst_110678 = inst_110675 + inst_110677;
              var inst_110679 = inst_110678 + 1;
              var inst_110680 = intercom.newHeight = inst_110679;
              var inst_110681 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercom.newHeight);
              var inst_110682 = intercom.bchainHeight < intercom.newHeight;
              var state_110707__$1 = function() {
                var statearr_110709 = state_110707;
                statearr_110709[5] = inst_110681;
                statearr_110709[6] = inst_110680;
                return statearr_110709;
              }();
              if (cljs.core.truth_(inst_110682)) {
                var statearr_110710_110728 = state_110707__$1;
                statearr_110710_110728[1] = 8;
              } else {
                var statearr_110711_110729 = state_110707__$1;
                statearr_110711_110729[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_110708 === 1) {
                var inst_110652 = fullMessage.data;
                var inst_110653 = intercom.blocks = inst_110652;
                var inst_110654 = logger.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercom.blocks);
                var inst_110655 = intercom.blocks.vector;
                var inst_110656 = inst_110655[0];
                var inst_110657 = blockchain.prevblk.call(null, inst_110656);
                var inst_110658 = blockchain.blockKnown_QMARK_.call(null, inst_110657);
                var state_110707__$1 = function() {
                  var statearr_110712 = state_110707;
                  statearr_110712[7] = inst_110653;
                  statearr_110712[8] = inst_110654;
                  return statearr_110712;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110707__$1, 2, inst_110658);
              } else {
                if (state_val_110708 === 4) {
                  var inst_110691 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercom.blocks);
                  var inst_110692 = db.g.call(null, "last");
                  var state_110707__$1 = function() {
                    var statearr_110713 = state_110707;
                    statearr_110713[9] = inst_110691;
                    return statearr_110713;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110707__$1, 11, inst_110692);
                } else {
                  if (state_val_110708 === 13) {
                    var inst_110698 = state_110707[10];
                    var inst_110701 = state_110707[2];
                    var state_110707__$1 = state_110707;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_110707__$1, 12, inst_110698, inst_110701);
                  } else {
                    if (state_val_110708 === 6) {
                      var inst_110666 = state_110707[2];
                      var inst_110667 = intercom.bchainHeight = inst_110666;
                      var inst_110668 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercom.bchainHeight);
                      var inst_110669 = intercom.blocks.vector;
                      var inst_110670 = inst_110669[0];
                      var inst_110671 = blockchain.prevblk.call(null, inst_110670);
                      var inst_110672 = db.g.call(null, inst_110671);
                      var state_110707__$1 = function() {
                        var statearr_110714 = state_110707;
                        statearr_110714[11] = inst_110667;
                        statearr_110714[12] = inst_110668;
                        return statearr_110714;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110707__$1, 7, inst_110672);
                    } else {
                      if (state_val_110708 === 3) {
                        var inst_110662 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                        var inst_110663 = "blockchainHeight".call(null);
                        var inst_110664 = cljs.core.apply.call(null, pubsub.sia, inst_110663);
                        var state_110707__$1 = function() {
                          var statearr_110715 = state_110707;
                          statearr_110715[13] = inst_110662;
                          return statearr_110715;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110707__$1, 6, inst_110664);
                      } else {
                        if (state_val_110708 === 12) {
                          var inst_110703 = state_110707[2];
                          var state_110707__$1 = state_110707;
                          var statearr_110716_110730 = state_110707__$1;
                          statearr_110716_110730[2] = inst_110703;
                          statearr_110716_110730[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_110708 === 2) {
                            var inst_110660 = state_110707[2];
                            var state_110707__$1 = state_110707;
                            if (cljs.core.truth_(inst_110660)) {
                              var statearr_110717_110731 = state_110707__$1;
                              statearr_110717_110731[1] = 3;
                            } else {
                              var statearr_110718_110732 = state_110707__$1;
                              statearr_110718_110732[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_110708 === 11) {
                              var inst_110694 = state_110707[2];
                              var inst_110695 = inst_110694.hash;
                              var inst_110696 = intercom.lblock = inst_110695;
                              var inst_110697 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercom.lblock);
                              var inst_110698 = fullMessage.peer;
                              var inst_110699 = intercom.makeGetBlock.call(null, intercom.lblock);
                              var state_110707__$1 = function() {
                                var statearr_110719 = state_110707;
                                statearr_110719[10] = inst_110698;
                                statearr_110719[14] = inst_110697;
                                statearr_110719[15] = inst_110696;
                                return statearr_110719;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110707__$1, 13, inst_110699);
                            } else {
                              if (state_val_110708 === 9) {
                                var inst_110687 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                var state_110707__$1 = state_110707;
                                var statearr_110720_110733 = state_110707__$1;
                                statearr_110720_110733[2] = inst_110687;
                                statearr_110720_110733[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_110708 === 5) {
                                  var inst_110705 = state_110707[2];
                                  var state_110707__$1 = function() {
                                    var statearr_110721 = state_110707;
                                    statearr_110721[16] = inst_110705;
                                    return statearr_110721;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110707__$1, "grind");
                                } else {
                                  if (state_val_110708 === 10) {
                                    var inst_110689 = state_110707[2];
                                    var state_110707__$1 = state_110707;
                                    var statearr_110722_110734 = state_110707__$1;
                                    statearr_110722_110734[2] = inst_110689;
                                    statearr_110722_110734[1] = 5;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_110708 === 8) {
                                      var inst_110684 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
                                      var inst_110685 = blockchain.addToChain.call(null, intercom.blocks);
                                      var state_110707__$1 = function() {
                                        var statearr_110723 = state_110707;
                                        statearr_110723[17] = inst_110684;
                                        return statearr_110723;
                                      }();
                                      var statearr_110724_110735 = state_110707__$1;
                                      statearr_110724_110735[2] = inst_110685;
                                      statearr_110724_110735[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110726 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_110726[0] = state_machine__6577__auto__;
              statearr_110726[1] = 1;
              return statearr_110726;
            };
            var state_machine__6577__auto____1 = function(state_110707) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110707);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110707) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110707);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110727 = f__6621__auto__.call(null);
        statearr_110727[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110727;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeData = function takeData(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110756) {
            var state_val_110757 = state_110756[1];
            if (state_val_110757 === 1) {
              var inst_110749 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_110750 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_110751 = intercom.v.data;
              var inst_110752 = intercom.handleInvBlock.call(null, inst_110751, intercom.v);
              var inst_110753 = intercom.tostate.call(null, "grind");
              var inst_110754 = intercom.tostate.call(null, "grind", intercom.handleInvBlock);
              var state_110756__$1 = function() {
                var statearr_110758 = state_110756;
                statearr_110758[5] = inst_110753;
                statearr_110758[6] = inst_110749;
                statearr_110758[7] = inst_110750;
                statearr_110758[8] = inst_110752;
                return statearr_110758;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110756__$1, inst_110754);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110760 = [null, null, null, null, null, null, null, null, null];
              statearr_110760[0] = state_machine__6577__auto__;
              statearr_110760[1] = 1;
              return statearr_110760;
            };
            var state_machine__6577__auto____1 = function(state_110756) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110756);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110756) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110756);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110761 = f__6621__auto__.call(null);
        statearr_110761[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110761;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.broadcast = function broadcast(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110777) {
            var state_val_110778 = state_110777[1];
            if (state_val_110778 === 2) {
              var inst_110774 = state_110777[2];
              var inst_110775 = intercom.connections = inst_110774;
              var state_110777__$1 = state_110777;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110777__$1, inst_110775);
            } else {
              if (state_val_110778 === 1) {
                var inst_110772 = pubsub.sia.call(null, "db", "connections");
                var state_110777__$1 = state_110777;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110777__$1, 2, inst_110772);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110780 = [null, null, null, null, null];
              statearr_110780[0] = state_machine__6577__auto__;
              statearr_110780[1] = 1;
              return statearr_110780;
            };
            var state_machine__6577__auto____1 = function(state_110777) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110777);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110777) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110777);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110781 = f__6621__auto__.call(null);
        statearr_110781[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110781;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeGetVersion = function takeGetVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110798) {
            var state_val_110799 = state_110798[1];
            if (state_val_110799 === 1) {
              var inst_110793 = intercom.v.peer;
              var inst_110794 = intercom.sendmsg.call(null, inst_110793, "version", "0");
              var inst_110795 = intercom.tostate.call(null, "grind");
              var inst_110796 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_110798__$1 = function() {
                var statearr_110800 = state_110798;
                statearr_110800[5] = inst_110794;
                statearr_110800[6] = inst_110795;
                return statearr_110800;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110798__$1, inst_110796);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110802 = [null, null, null, null, null, null, null];
              statearr_110802[0] = state_machine__6577__auto__;
              statearr_110802[1] = 1;
              return statearr_110802;
            };
            var state_machine__6577__auto____1 = function(state_110798) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110798);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110798) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110798);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110803 = f__6621__auto__.call(null);
        statearr_110803[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110803;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeVersion = function takeVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110814) {
            var state_val_110815 = state_110814[1];
            if (state_val_110815 === 1) {
              var inst_110812 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_110814__$1 = function() {
                var statearr_110816 = state_110814;
                statearr_110816[5] = inst_110812;
                return statearr_110816;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110814__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110818 = [null, null, null, null, null, null];
              statearr_110818[0] = state_machine__6577__auto__;
              statearr_110818[1] = 1;
              return statearr_110818;
            };
            var state_machine__6577__auto____1 = function(state_110814) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110814);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110814) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110814);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110819 = f__6621__auto__.call(null);
        statearr_110819[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110819;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeConn = function takeConn(conn) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110860) {
            var state_val_110861 = state_110860[1];
            if (state_val_110861 === 4) {
              var inst_110858 = state_110860[2];
              var state_110860__$1 = state_110860;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110860__$1, inst_110858);
            } else {
              if (state_val_110861 === 3) {
                var state_110860__$1 = state_110860;
                var statearr_110862_110870 = state_110860__$1;
                statearr_110862_110870[2] = "version";
                statearr_110862_110870[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_110861 === 2) {
                  var state_110860__$1 = state_110860;
                  var statearr_110863_110871 = state_110860__$1;
                  statearr_110863_110871[2] = "grind";
                  statearr_110863_110871[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_110861 === 1) {
                    var inst_110845 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_110846 = conn.data;
                    var inst_110847 = inst_110846.writec;
                    var inst_110848 = intercom.makeVersion.call(null, "0");
                    var inst_110849 = intercom.sendm.call(null, inst_110847, inst_110848);
                    var inst_110850 = conn.connType;
                    var inst_110851 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_110850);
                    var inst_110852 = conn.data;
                    var inst_110853 = inst_110852.connType;
                    var inst_110854 = inst_110853 === "saltan";
                    var state_110860__$1 = function() {
                      var statearr_110864 = state_110860;
                      statearr_110864[5] = inst_110845;
                      statearr_110864[6] = inst_110849;
                      statearr_110864[7] = inst_110851;
                      return statearr_110864;
                    }();
                    if (cljs.core.truth_(inst_110854)) {
                      var statearr_110865_110872 = state_110860__$1;
                      statearr_110865_110872[1] = 2;
                    } else {
                      var statearr_110866_110873 = state_110860__$1;
                      statearr_110866_110873[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110868 = [null, null, null, null, null, null, null, null];
              statearr_110868[0] = state_machine__6577__auto__;
              statearr_110868[1] = 1;
              return statearr_110868;
            };
            var state_machine__6577__auto____1 = function(state_110860) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110860);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110860) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110860);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110869 = f__6621__auto__.call(null);
        statearr_110869[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110869;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_110894) {
            var state_val_110895 = state_110894[1];
            if (state_val_110895 === 2) {
              var inst_110891 = state_110894[2];
              var inst_110892 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_110891);
              var state_110894__$1 = state_110894;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_110894__$1, inst_110892);
            } else {
              if (state_val_110895 === 1) {
                var inst_110887 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_110888 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_110889 = intercom.makeGetBlock.call(null, hash);
                var state_110894__$1 = function() {
                  var statearr_110896 = state_110894;
                  statearr_110896[5] = inst_110888;
                  statearr_110896[6] = inst_110887;
                  return statearr_110896;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_110894__$1, 2, inst_110889);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_110898 = [null, null, null, null, null, null, null];
              statearr_110898[0] = state_machine__6577__auto__;
              statearr_110898[1] = 1;
              return statearr_110898;
            };
            var state_machine__6577__auto____1 = function(state_110894) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_110894);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_110894) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_110894);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_110899 = f__6621__auto__.call(null);
        statearr_110899[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_110899;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.makeInv = function makeInv(typ, message) {
  var obj110907 = {"type":"json", "data":JSON.stringify(function() {
    var obj110909 = {"type":"inv", "data":function() {
      var obj110911 = {"type":typ, "vector":message};
      return obj110911;
    }()};
    return obj110909;
  }())};
  return obj110907;
};
intercom.makeData = function makeData(typ, message) {
  return null;
};
intercom.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
intercom.makeVersion = function makeVersion(message) {
  var obj110915 = {"type":"version", "data":message};
  return obj110915;
};
intercom.makeConn = function makeConn(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj110919 = {"type":"conn", "data":conn};
  return obj110919;
};
intercom.makeGetBlock = function makeGetBlock(hash) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_111025) {
            var state_val_111026 = state_111025[1];
            if (state_val_111026 === 7) {
              var state_111025__$1 = state_111025;
              var statearr_111027_111046 = state_111025__$1;
              statearr_111027_111046[2] = null;
              statearr_111027_111046[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_111026 === 1) {
                var inst_110985 = [];
                var inst_110986 = {"count":0, "blocks":inst_110985};
                var inst_110987 = inst_110986[intercom.hash_stop] = 0;
                var inst_110988 = intercom.gtBlock = inst_110986;
                var inst_110989 = app.blockchain.blockchainHeight.call(null, 1);
                var state_111025__$1 = function() {
                  var statearr_111028 = state_111025;
                  statearr_111028[5] = inst_110988;
                  statearr_111028[6] = inst_110987;
                  return statearr_111028;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111025__$1, 2, inst_110989);
              } else {
                if (state_val_111026 === 4) {
                  var inst_111023 = state_111025[2];
                  var state_111025__$1 = function() {
                    var statearr_111029 = state_111025;
                    statearr_111029[7] = inst_111023;
                    return statearr_111029;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_111025__$1, intercom.gtBlock);
                } else {
                  if (state_val_111026 === 6) {
                    var inst_110994 = state_111025[8];
                    var inst_111010 = inst_110994 < 10;
                    var state_111025__$1 = state_111025;
                    if (cljs.core.truth_(inst_111010)) {
                      var statearr_111030_111047 = state_111025__$1;
                      statearr_111030_111047[1] = 9;
                    } else {
                      var statearr_111031_111048 = state_111025__$1;
                      statearr_111031_111048[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_111026 === 3) {
                      var inst_110994 = state_111025[8];
                      var inst_110993 = state_111025[9];
                      var inst_110996 = "new loop " + inst_110993;
                      var inst_110997 = inst_110996 + " ";
                      var inst_110998 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_110997, inst_110994);
                      var inst_110999 = "b" + inst_110993;
                      var inst_111000 = db.g.call(null, inst_110999);
                      var state_111025__$1 = function() {
                        var statearr_111032 = state_111025;
                        statearr_111032[10] = inst_110998;
                        return statearr_111032;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_111025__$1, 5, inst_111000);
                    } else {
                      if (state_val_111026 === 2) {
                        var inst_110991 = state_111025[2];
                        var inst_110992 = intercom.heightForBlock = inst_110991;
                        var inst_110993 = intercom.heightForBlock;
                        var inst_110994 = 0;
                        var state_111025__$1 = function() {
                          var statearr_111033 = state_111025;
                          statearr_111033[8] = inst_110994;
                          statearr_111033[9] = inst_110993;
                          statearr_111033[11] = inst_110992;
                          return statearr_111033;
                        }();
                        var statearr_111034_111049 = state_111025__$1;
                        statearr_111034_111049[2] = null;
                        statearr_111034_111049[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_111026 === 11) {
                          var inst_110994 = state_111025[8];
                          var inst_111016 = state_111025[2];
                          var inst_111017 = inst_110994 + 1;
                          var inst_110993 = inst_111016;
                          var inst_110994__$1 = inst_111017;
                          var state_111025__$1 = function() {
                            var statearr_111035 = state_111025;
                            statearr_111035[8] = inst_110994__$1;
                            statearr_111035[9] = inst_110993;
                            return statearr_111035;
                          }();
                          var statearr_111036_111050 = state_111025__$1;
                          statearr_111036_111050[2] = null;
                          statearr_111036_111050[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_111026 === 9) {
                            var inst_110993 = state_111025[9];
                            var inst_111012 = inst_110993 - 1;
                            var state_111025__$1 = state_111025;
                            var statearr_111037_111051 = state_111025__$1;
                            statearr_111037_111051[2] = inst_111012;
                            statearr_111037_111051[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_111026 === 5) {
                              var inst_110993 = state_111025[9];
                              var inst_111002 = state_111025[2];
                              var inst_111003 = intercom.blockg = inst_111002;
                              var inst_111004 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_111005 = intercom.gtBlock.count = inst_110993;
                              var inst_111006 = intercom.gtBlock.blocks;
                              var inst_111007 = inst_111006.push(intercom.blockg);
                              var inst_111008 = 0 < inst_110993;
                              var state_111025__$1 = function() {
                                var statearr_111038 = state_111025;
                                statearr_111038[12] = inst_111007;
                                statearr_111038[13] = inst_111003;
                                statearr_111038[14] = inst_111004;
                                statearr_111038[15] = inst_111005;
                                return statearr_111038;
                              }();
                              if (cljs.core.truth_(inst_111008)) {
                                var statearr_111039_111052 = state_111025__$1;
                                statearr_111039_111052[1] = 6;
                              } else {
                                var statearr_111040_111053 = state_111025__$1;
                                statearr_111040_111053[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_111026 === 10) {
                                var inst_110993 = state_111025[9];
                                var inst_111014 = cljs.core.quot.call(null, inst_110993, 2);
                                var state_111025__$1 = state_111025;
                                var statearr_111041_111054 = state_111025__$1;
                                statearr_111041_111054[2] = inst_111014;
                                statearr_111041_111054[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_111026 === 8) {
                                  var inst_111021 = state_111025[2];
                                  var state_111025__$1 = state_111025;
                                  var statearr_111042_111055 = state_111025__$1;
                                  statearr_111042_111055[2] = inst_111021;
                                  statearr_111042_111055[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_111044 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_111044[0] = state_machine__6577__auto__;
              statearr_111044[1] = 1;
              return statearr_111044;
            };
            var state_machine__6577__auto____1 = function(state_111025) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_111025);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_111025) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_111025);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_111045 = f__6621__auto__.call(null);
        statearr_111045[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_111045;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("mockdatabase");
goog.require("cljs.core");
goog.require("cljs.core.async");
mockdatabase.mdbase = function() {
  var obj127795 = {};
  return obj127795;
}();
mockdatabase.g = function g(kie) {
  return mockdatabase.mdbase[kie];
};
mockdatabase.p = function p(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.ps = function ps(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.update = function update(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
goog.provide("router");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
router.a = function a(x) {
  var obj93754 = {"a":1};
  return obj93754;
};
