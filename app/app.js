if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2913";
cljs.core._STAR_unchecked_if_STAR_ = false;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__16680__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__16679 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__16679) : cljs.core.into_array.call(null, G__16679);
      }());
    };
    var G__16680 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__16681__i = 0, G__16681__a = new Array(arguments.length - 0);
        while (G__16681__i < G__16681__a.length) {
          G__16681__a[G__16681__i] = arguments[G__16681__i + 0];
          ++G__16681__i;
        }
        args = new cljs.core.IndexedSeq(G__16681__a, 0);
      }
      return G__16680__delegate.call(this, args);
    };
    G__16680.cljs$lang$maxFixedArity = 0;
    G__16680.cljs$lang$applyTo = function(arglist__16682) {
      var args = cljs.core.seq(arglist__16682);
      return G__16680__delegate(args);
    };
    G__16680.cljs$core$IFn$_invoke$arity$variadic = G__16680__delegate;
    return G__16680;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var G__16684 = x;
  return goog.isString(G__16684);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__16686 = x__$1;
    return goog.typeOf(G__16686);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3969__auto__ = ty;
    if (cljs.core.truth_(and__3969__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3969__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__16688 = obj;
    return goog.typeOf(G__16688);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.importScript_(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__16690 = Symbol;
  return goog.typeOf(G__16690);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4868__auto___16692 = len;
  var i_16693 = 0;
  while (true) {
    if (i_16693 < n__4868__auto___16692) {
      new_arr[i_16693] = arr[i_16693];
      var G__16694 = i_16693 + 1;
      i_16693 = G__16694;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__16695 = i + 1;
      i = G__16695;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__16704__delegate = function(array, i, idxs) {
      var G__16701 = aget;
      var G__16702 = aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__16703 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__16701, G__16702, G__16703) : cljs.core.apply.call(null, G__16701, G__16702, G__16703);
    };
    var G__16704 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__16705__i = 0, G__16705__a = new Array(arguments.length - 2);
        while (G__16705__i < G__16705__a.length) {
          G__16705__a[G__16705__i] = arguments[G__16705__i + 2];
          ++G__16705__i;
        }
        idxs = new cljs.core.IndexedSeq(G__16705__a, 0);
      }
      return G__16704__delegate.call(this, array, i, idxs);
    };
    G__16704.cljs$lang$maxFixedArity = 2;
    G__16704.cljs$lang$applyTo = function(arglist__16706) {
      var array = cljs.core.first(arglist__16706);
      arglist__16706 = cljs.core.next(arglist__16706);
      var i = cljs.core.first(arglist__16706);
      var idxs = cljs.core.rest(arglist__16706);
      return G__16704__delegate(array, i, idxs);
    };
    G__16704.cljs$core$IFn$_invoke$arity$variadic = G__16704__delegate;
    return G__16704;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        var G__16707 = null;
        if (arguments.length > 2) {
          var G__16708__i = 0, G__16708__a = new Array(arguments.length - 2);
          while (G__16708__i < G__16708__a.length) {
            G__16708__a[G__16708__i] = arguments[G__16708__i + 2];
            ++G__16708__i;
          }
          G__16707 = new cljs.core.IndexedSeq(G__16708__a, 0);
        }
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__16707);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__16717__delegate = function(array, idx, idx2, idxv) {
      var G__16713 = aset;
      var G__16714 = array[idx];
      var G__16715 = idx2;
      var G__16716 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__16713, G__16714, G__16715, G__16716) : cljs.core.apply.call(null, G__16713, G__16714, G__16715, G__16716);
    };
    var G__16717 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__16718__i = 0, G__16718__a = new Array(arguments.length - 3);
        while (G__16718__i < G__16718__a.length) {
          G__16718__a[G__16718__i] = arguments[G__16718__i + 3];
          ++G__16718__i;
        }
        idxv = new cljs.core.IndexedSeq(G__16718__a, 0);
      }
      return G__16717__delegate.call(this, array, idx, idx2, idxv);
    };
    G__16717.cljs$lang$maxFixedArity = 3;
    G__16717.cljs$lang$applyTo = function(arglist__16719) {
      var array = cljs.core.first(arglist__16719);
      arglist__16719 = cljs.core.next(arglist__16719);
      var idx = cljs.core.first(arglist__16719);
      arglist__16719 = cljs.core.next(arglist__16719);
      var idx2 = cljs.core.first(arglist__16719);
      var idxv = cljs.core.rest(arglist__16719);
      return G__16717__delegate(array, idx, idx2, idxv);
    };
    G__16717.cljs$core$IFn$_invoke$arity$variadic = G__16717__delegate;
    return G__16717;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        var G__16720 = null;
        if (arguments.length > 3) {
          var G__16721__i = 0, G__16721__a = new Array(arguments.length - 3);
          while (G__16721__i < G__16721__a.length) {
            G__16721__a[G__16721__i] = arguments[G__16721__i + 3];
            ++G__16721__i;
          }
          G__16720 = new cljs.core.IndexedSeq(G__16721__a, 0);
        }
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__16720);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    var G__16727 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__16728 = [];
    var G__16729 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__16727, G__16728, G__16729) : cljs.core.reduce.call(null, G__16727, G__16728, G__16729);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.js_invoke = function() {
  var js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__16730__i = 0, G__16730__a = new Array(arguments.length - 2);
      while (G__16730__i < G__16730__a.length) {
        G__16730__a[G__16730__i] = arguments[G__16730__i + 2];
        ++G__16730__i;
      }
      args = new cljs.core.IndexedSeq(G__16730__a, 0);
    }
    return js_invoke__delegate.call(this, obj, s, args);
  };
  js_invoke.cljs$lang$maxFixedArity = 2;
  js_invoke.cljs$lang$applyTo = function(arglist__16731) {
    var obj = cljs.core.first(arglist__16731);
    arglist__16731 = cljs.core.next(arglist__16731);
    var s = cljs.core.first(arglist__16731);
    var args = cljs.core.rest(arglist__16731);
    return js_invoke__delegate(obj, s, args);
  };
  js_invoke.cljs$core$IFn$_invoke$arity$variadic = js_invoke__delegate;
  return js_invoke;
}();
cljs.core.Fn = function() {
  var obj16733 = {};
  return obj16733;
}();
cljs.core.IFn = function() {
  var obj16735 = {};
  return obj16735;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16781 = x__4625__auto__;
          return goog.typeOf(G__16781);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16783 = x__4625__auto__;
          return goog.typeOf(G__16783);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16785 = x__4625__auto__;
          return goog.typeOf(G__16785);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16787 = x__4625__auto__;
          return goog.typeOf(G__16787);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16789 = x__4625__auto__;
          return goog.typeOf(G__16789);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16791 = x__4625__auto__;
          return goog.typeOf(G__16791);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16793 = x__4625__auto__;
          return goog.typeOf(G__16793);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16795 = x__4625__auto__;
          return goog.typeOf(G__16795);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16797 = x__4625__auto__;
          return goog.typeOf(G__16797);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16799 = x__4625__auto__;
          return goog.typeOf(G__16799);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16801 = x__4625__auto__;
          return goog.typeOf(G__16801);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16803 = x__4625__auto__;
          return goog.typeOf(G__16803);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16805 = x__4625__auto__;
          return goog.typeOf(G__16805);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16807 = x__4625__auto__;
          return goog.typeOf(G__16807);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16809 = x__4625__auto__;
          return goog.typeOf(G__16809);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16811 = x__4625__auto__;
          return goog.typeOf(G__16811);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16813 = x__4625__auto__;
          return goog.typeOf(G__16813);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16815 = x__4625__auto__;
          return goog.typeOf(G__16815);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16817 = x__4625__auto__;
          return goog.typeOf(G__16817);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16819 = x__4625__auto__;
          return goog.typeOf(G__16819);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16821 = x__4625__auto__;
          return goog.typeOf(G__16821);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__16823 = x__4625__auto__;
          return goog.typeOf(G__16823);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj16825 = {};
  return obj16825;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3969__auto__ = value;
    if (and__3969__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4625__auto__ = value == null ? null : value;
    return function() {
      var or__3981__auto__ = cljs.core._clone[function() {
        var G__16829 = x__4625__auto__;
        return goog.typeOf(G__16829);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._clone["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj16831 = {};
  return obj16831;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._count[function() {
        var G__16835 = x__4625__auto__;
        return goog.typeOf(G__16835);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._count["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj16837 = {};
  return obj16837;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._empty[function() {
        var G__16841 = x__4625__auto__;
        return goog.typeOf(G__16841);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._empty["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj16843 = {};
  return obj16843;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._conj[function() {
        var G__16847 = x__4625__auto__;
        return goog.typeOf(G__16847);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._conj["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj16849 = {};
  return obj16849;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._nth[function() {
          var G__16855 = x__4625__auto__;
          return goog.typeOf(G__16855);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._nth["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._nth[function() {
          var G__16857 = x__4625__auto__;
          return goog.typeOf(G__16857);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._nth["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj16859 = {};
  return obj16859;
}();
cljs.core.ISeq = function() {
  var obj16861 = {};
  return obj16861;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._first[function() {
        var G__16865 = x__4625__auto__;
        return goog.typeOf(G__16865);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._rest[function() {
        var G__16869 = x__4625__auto__;
        return goog.typeOf(G__16869);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._rest["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj16871 = {};
  return obj16871;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._next[function() {
        var G__16875 = x__4625__auto__;
        return goog.typeOf(G__16875);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._next["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj16877 = {};
  return obj16877;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._lookup[function() {
          var G__16883 = x__4625__auto__;
          return goog.typeOf(G__16883);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._lookup["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._lookup[function() {
          var G__16885 = x__4625__auto__;
          return goog.typeOf(G__16885);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._lookup["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj16887 = {};
  return obj16887;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__16891 = x__4625__auto__;
        return goog.typeOf(G__16891);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc[function() {
        var G__16895 = x__4625__auto__;
        return goog.typeOf(G__16895);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj16897 = {};
  return obj16897;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._dissoc[function() {
        var G__16901 = x__4625__auto__;
        return goog.typeOf(G__16901);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._dissoc["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj16903 = {};
  return obj16903;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._key[function() {
        var G__16907 = x__4625__auto__;
        return goog.typeOf(G__16907);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._key["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._val[function() {
        var G__16911 = x__4625__auto__;
        return goog.typeOf(G__16911);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._val["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj16913 = {};
  return obj16913;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._disjoin[function() {
        var G__16917 = x__4625__auto__;
        return goog.typeOf(G__16917);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._disjoin["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj16919 = {};
  return obj16919;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._peek[function() {
        var G__16923 = x__4625__auto__;
        return goog.typeOf(G__16923);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._peek["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._pop[function() {
        var G__16927 = x__4625__auto__;
        return goog.typeOf(G__16927);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pop["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj16929 = {};
  return obj16929;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_n[function() {
        var G__16933 = x__4625__auto__;
        return goog.typeOf(G__16933);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj16935 = {};
  return obj16935;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._deref[function() {
        var G__16939 = x__4625__auto__;
        return goog.typeOf(G__16939);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._deref["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj16941 = {};
  return obj16941;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._deref_with_timeout[function() {
        var G__16945 = x__4625__auto__;
        return goog.typeOf(G__16945);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj16947 = {};
  return obj16947;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._meta[function() {
        var G__16951 = x__4625__auto__;
        return goog.typeOf(G__16951);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._meta["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj16953 = {};
  return obj16953;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._with_meta[function() {
        var G__16957 = x__4625__auto__;
        return goog.typeOf(G__16957);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._with_meta["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj16959 = {};
  return obj16959;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._reduce[function() {
          var G__16965 = x__4625__auto__;
          return goog.typeOf(G__16965);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._reduce["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._reduce[function() {
          var G__16967 = x__4625__auto__;
          return goog.typeOf(G__16967);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._reduce["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj16969 = {};
  return obj16969;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._kv_reduce[function() {
        var G__16973 = x__4625__auto__;
        return goog.typeOf(G__16973);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj16975 = {};
  return obj16975;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._equiv[function() {
        var G__16979 = x__4625__auto__;
        return goog.typeOf(G__16979);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._equiv["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj16981 = {};
  return obj16981;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._hash[function() {
        var G__16985 = x__4625__auto__;
        return goog.typeOf(G__16985);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._hash["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj16987 = {};
  return obj16987;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._seq[function() {
        var G__16991 = x__4625__auto__;
        return goog.typeOf(G__16991);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._seq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj16993 = {};
  return obj16993;
}();
cljs.core.IList = function() {
  var obj16995 = {};
  return obj16995;
}();
cljs.core.IRecord = function() {
  var obj16997 = {};
  return obj16997;
}();
cljs.core.IReversible = function() {
  var obj16999 = {};
  return obj16999;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._rseq[function() {
        var G__17003 = x__4625__auto__;
        return goog.typeOf(G__17003);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._rseq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj17005 = {};
  return obj17005;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._sorted_seq[function() {
        var G__17009 = x__4625__auto__;
        return goog.typeOf(G__17009);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._sorted_seq_from[function() {
        var G__17013 = x__4625__auto__;
        return goog.typeOf(G__17013);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._entry_key[function() {
        var G__17017 = x__4625__auto__;
        return goog.typeOf(G__17017);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._entry_key["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._comparator[function() {
        var G__17021 = x__4625__auto__;
        return goog.typeOf(G__17021);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._comparator["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj17023 = {};
  return obj17023;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3969__auto__ = writer;
    if (and__3969__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4625__auto__ = writer == null ? null : writer;
    return function() {
      var or__3981__auto__ = cljs.core._write[function() {
        var G__17027 = x__4625__auto__;
        return goog.typeOf(G__17027);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._write["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3969__auto__ = writer;
    if (and__3969__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4625__auto__ = writer == null ? null : writer;
    return function() {
      var or__3981__auto__ = cljs.core._flush[function() {
        var G__17031 = x__4625__auto__;
        return goog.typeOf(G__17031);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._flush["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj17033 = {};
  return obj17033;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._pr_writer[function() {
        var G__17037 = x__4625__auto__;
        return goog.typeOf(G__17037);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj17039 = {};
  return obj17039;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3969__auto__ = d;
    if (and__3969__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4625__auto__ = d == null ? null : d;
    return function() {
      var or__3981__auto__ = cljs.core._realized_QMARK_[function() {
        var G__17043 = x__4625__auto__;
        return goog.typeOf(G__17043);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj17045 = {};
  return obj17045;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._notify_watches[function() {
        var G__17049 = x__4625__auto__;
        return goog.typeOf(G__17049);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._add_watch[function() {
        var G__17053 = x__4625__auto__;
        return goog.typeOf(G__17053);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._add_watch["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._remove_watch[function() {
        var G__17057 = x__4625__auto__;
        return goog.typeOf(G__17057);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj17059 = {};
  return obj17059;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._as_transient[function() {
        var G__17063 = x__4625__auto__;
        return goog.typeOf(G__17063);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._as_transient["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj17065 = {};
  return obj17065;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._conj_BANG_[function() {
        var G__17069 = x__4625__auto__;
        return goog.typeOf(G__17069);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._persistent_BANG_[function() {
        var G__17073 = x__4625__auto__;
        return goog.typeOf(G__17073);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj17075 = {};
  return obj17075;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_BANG_[function() {
        var G__17079 = x__4625__auto__;
        return goog.typeOf(G__17079);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj17081 = {};
  return obj17081;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__17085 = x__4625__auto__;
        return goog.typeOf(G__17085);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj17087 = {};
  return obj17087;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__17091 = x__4625__auto__;
        return goog.typeOf(G__17091);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._pop_BANG_[function() {
        var G__17095 = x__4625__auto__;
        return goog.typeOf(G__17095);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj17097 = {};
  return obj17097;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__17101 = x__4625__auto__;
        return goog.typeOf(G__17101);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj17103 = {};
  return obj17103;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._compare[function() {
        var G__17107 = x__4625__auto__;
        return goog.typeOf(G__17107);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._compare["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj17109 = {};
  return obj17109;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._drop_first[function() {
        var G__17113 = x__4625__auto__;
        return goog.typeOf(G__17113);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._drop_first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj17115 = {};
  return obj17115;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_first[function() {
        var G__17119 = x__4625__auto__;
        return goog.typeOf(G__17119);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_rest[function() {
        var G__17123 = x__4625__auto__;
        return goog.typeOf(G__17123);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj17125 = {};
  return obj17125;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_next[function() {
        var G__17129 = x__4625__auto__;
        return goog.typeOf(G__17129);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj17131 = {};
  return obj17131;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._name[function() {
        var G__17135 = x__4625__auto__;
        return goog.typeOf(G__17135);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._name["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._namespace[function() {
        var G__17139 = x__4625__auto__;
        return goog.typeOf(G__17139);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._namespace["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj17141 = {};
  return obj17141;
}();
cljs.core.IReset = function() {
  var obj17143 = {};
  return obj17143;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._reset_BANG_[function() {
        var G__17147 = x__4625__auto__;
        return goog.typeOf(G__17147);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj17149 = {};
  return obj17149;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__17159 = x__4625__auto__;
          return goog.typeOf(G__17159);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__17161 = x__4625__auto__;
          return goog.typeOf(G__17161);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__17163 = x__4625__auto__;
          return goog.typeOf(G__17163);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__17165 = x__4625__auto__;
          return goog.typeOf(G__17165);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj17167 = {};
  return obj17167;
}();
cljs.core._vreset_BANG_ = function _vreset_BANG_(o, new_value) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._vreset_BANG_[function() {
        var G__17171 = x__4625__auto__;
        return goog.typeOf(G__17171);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj17173 = {};
  return obj17173;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._iterator[function() {
        var G__17177 = x__4625__auto__;
        return goog.typeOf(G__17177);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._iterator["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__17180 = 4294967295;
  var G__17181 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__17180, G__17181) : Math.imul.call(null, G__17180, G__17181);
}() === 0)) {
  cljs.core.imul = function imul(a, b) {
    var G__17184 = a;
    var G__17185 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__17184, G__17185) : Math.imul.call(null, G__17184, G__17185);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__17186 = i + 2;
        var G__17187 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__17186;
        h1 = G__17187;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj17189 = {};
  return obj17189;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__17190 = i + 1;
          var G__17191 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__17190;
          hash = G__17191;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj17195 = {};
      return obj17195;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__17198 = o;
    if (G__17198) {
      var bit__4655__auto__ = G__17198.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4655__auto__ || G__17198.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__17199 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__17199) : Math.floor.call(null, G__17199);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = cljs.core.not(a.ns);
      if (and__3969__auto__) {
        return b.ns;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__17206 = a.ns;
            var G__17207 = b.ns;
            return goog.array.defaultCompare(G__17206, G__17207);
          }();
          if (0 === nsc) {
            var G__17208 = a.name;
            var G__17209 = b.name;
            return goog.array.defaultCompare(G__17208, G__17209);
          } else {
            return nsc;
          }
        }
      } else {
        var G__17210 = a.name;
        var G__17211 = b.name;
        return goog.array.defaultCompare(G__17210, G__17211);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4402__auto__ = self__._hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__17213 = null;
  var G__17213__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__17213__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__17213 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17213__2.call(this, self__, coll);
      case 3:
        return G__17213__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17213.cljs$core$IFn$_invoke$arity$2 = G__17213__2;
  G__17213.cljs$core$IFn$_invoke$arity$3 = G__17213__3;
  return G__17213;
}();
cljs.core.Symbol.prototype.apply = function(self__, args17212) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17212)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__17261 = null;
  var G__17261__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__17261__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__17261__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__17261__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__17261__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__17261__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__17261__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__17261__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__17261__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__17261__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__17261__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__17261__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__17261__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__17261__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__17261__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__17261__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__17261__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__17261__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__17261__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__17261__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__17261__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__17261__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17217 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__17218 = a;
    var G__17219 = b;
    var G__17220 = c;
    var G__17221 = d;
    var G__17222 = e;
    var G__17223 = f;
    var G__17224 = g;
    var G__17225 = h;
    var G__17226 = i;
    var G__17227 = j;
    var G__17228 = k;
    var G__17229 = l;
    var G__17230 = m;
    var G__17231 = n;
    var G__17232 = o;
    var G__17233 = p;
    var G__17234 = q;
    var G__17235 = r;
    var G__17236 = s;
    var G__17237 = t;
    var G__17238 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__17217, G__17218, G__17219, G__17220, G__17221, G__17222, G__17223, G__17224, G__17225, G__17226, G__17227, G__17228, G__17229, G__17230, G__17231, G__17232, G__17233, G__17234, G__17235, G__17236, G__17237, G__17238) : cljs.core.apply.call(null, G__17217, G__17218, G__17219, G__17220, G__17221, G__17222, G__17223, G__17224, G__17225, G__17226, G__17227, G__17228, G__17229, G__17230, G__17231, 
    G__17232, G__17233, G__17234, G__17235, G__17236, G__17237, G__17238);
  };
  G__17261 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__17261__1.call(this, self__);
      case 2:
        return G__17261__2.call(this, self__, a);
      case 3:
        return G__17261__3.call(this, self__, a, b);
      case 4:
        return G__17261__4.call(this, self__, a, b, c);
      case 5:
        return G__17261__5.call(this, self__, a, b, c, d);
      case 6:
        return G__17261__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__17261__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__17261__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__17261__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__17261__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__17261__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__17261__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__17261__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__17261__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__17261__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__17261__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__17261__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__17261__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__17261__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__17261__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__17261__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__17261__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17261.cljs$core$IFn$_invoke$arity$1 = G__17261__1;
  G__17261.cljs$core$IFn$_invoke$arity$2 = G__17261__2;
  G__17261.cljs$core$IFn$_invoke$arity$3 = G__17261__3;
  G__17261.cljs$core$IFn$_invoke$arity$4 = G__17261__4;
  G__17261.cljs$core$IFn$_invoke$arity$5 = G__17261__5;
  G__17261.cljs$core$IFn$_invoke$arity$6 = G__17261__6;
  G__17261.cljs$core$IFn$_invoke$arity$7 = G__17261__7;
  G__17261.cljs$core$IFn$_invoke$arity$8 = G__17261__8;
  G__17261.cljs$core$IFn$_invoke$arity$9 = G__17261__9;
  G__17261.cljs$core$IFn$_invoke$arity$10 = G__17261__10;
  G__17261.cljs$core$IFn$_invoke$arity$11 = G__17261__11;
  G__17261.cljs$core$IFn$_invoke$arity$12 = G__17261__12;
  G__17261.cljs$core$IFn$_invoke$arity$13 = G__17261__13;
  G__17261.cljs$core$IFn$_invoke$arity$14 = G__17261__14;
  G__17261.cljs$core$IFn$_invoke$arity$15 = G__17261__15;
  G__17261.cljs$core$IFn$_invoke$arity$16 = G__17261__16;
  G__17261.cljs$core$IFn$_invoke$arity$17 = G__17261__17;
  G__17261.cljs$core$IFn$_invoke$arity$18 = G__17261__18;
  G__17261.cljs$core$IFn$_invoke$arity$19 = G__17261__19;
  G__17261.cljs$core$IFn$_invoke$arity$20 = G__17261__20;
  G__17261.cljs$core$IFn$_invoke$arity$21 = G__17261__21;
  G__17261.cljs$core$IFn$_invoke$arity$22 = G__17261__22;
  return G__17261;
}();
cljs.core.Var.prototype.apply = function(self__, args17216) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17216)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__17239 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__17240 = a;
  var G__17241 = b;
  var G__17242 = c;
  var G__17243 = d;
  var G__17244 = e;
  var G__17245 = f;
  var G__17246 = g;
  var G__17247 = h;
  var G__17248 = i;
  var G__17249 = j;
  var G__17250 = k;
  var G__17251 = l;
  var G__17252 = m;
  var G__17253 = n;
  var G__17254 = o;
  var G__17255 = p;
  var G__17256 = q;
  var G__17257 = r;
  var G__17258 = s;
  var G__17259 = t;
  var G__17260 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__17239, G__17240, G__17241, G__17242, G__17243, G__17244, G__17245, G__17246, G__17247, G__17248, G__17249, G__17250, G__17251, G__17252, G__17253, G__17254, G__17255, G__17256, G__17257, G__17258, G__17259, G__17260) : cljs.core.apply.call(null, G__17239, G__17240, G__17241, G__17242, G__17243, G__17244, G__17245, G__17246, G__17247, G__17248, G__17249, G__17250, G__17251, G__17252, G__17253, 
  G__17254, G__17255, G__17256, G__17257, G__17258, G__17259, G__17260);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function __GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__17263 = x;
  if (G__17263) {
    var bit__4662__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = bit__4662__auto__;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return G__17263.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__17263.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__17263);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__17263);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__17265 = value;
  if (G__17265) {
    var bit__4662__auto__ = G__17265.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4662__auto__ || G__17265.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__17265.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__17265);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__17265);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__17267 = coll;
      if (G__17267) {
        var bit__4655__auto__ = G__17267.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4655__auto__ || G__17267.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__17269 = coll;
      if (G__17269) {
        var bit__4655__auto__ = G__17269.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__17269.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__17271 = coll;
      if (G__17271) {
        var bit__4655__auto__ = G__17271.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__17271.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__17273 = coll;
      if (G__17273) {
        var bit__4655__auto__ = G__17273.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4655__auto__ || G__17273.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var _EQ___3 = function() {
    var G__17278__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__17279 = y;
            var G__17280 = cljs.core.first(more);
            var G__17281 = cljs.core.next(more);
            x = G__17279;
            y = G__17280;
            more = G__17281;
            continue;
          } else {
            return _EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17278 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17282__i = 0, G__17282__a = new Array(arguments.length - 2);
        while (G__17282__i < G__17282__a.length) {
          G__17282__a[G__17282__i] = arguments[G__17282__i + 2];
          ++G__17282__i;
        }
        more = new cljs.core.IndexedSeq(G__17282__a, 0);
      }
      return G__17278__delegate.call(this, x, y, more);
    };
    G__17278.cljs$lang$maxFixedArity = 2;
    G__17278.cljs$lang$applyTo = function(arglist__17283) {
      var x = cljs.core.first(arglist__17283);
      arglist__17283 = cljs.core.next(arglist__17283);
      var y = cljs.core.first(arglist__17283);
      var more = cljs.core.rest(arglist__17283);
      return G__17278__delegate(x, y, more);
    };
    G__17278.cljs$core$IFn$_invoke$arity$variadic = G__17278__delegate;
    return G__17278;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        var G__17284 = null;
        if (arguments.length > 2) {
          var G__17285__i = 0, G__17285__a = new Array(arguments.length - 2);
          while (G__17285__i < G__17285__a.length) {
            G__17285__a[G__17285__i] = arguments[G__17285__i + 2];
            ++G__17285__i;
          }
          G__17284 = new cljs.core.IndexedSeq(G__17285__a, 0);
        }
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17284);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__17286 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__17286) : cljs.core.es6_iterator_seq.call(null, G__17286);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function __GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__17287 = n + 1;
      var G__17288 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__17289 = cljs.core.next(coll__$1);
      n = G__17287;
      hash_code = G__17288;
      coll__$1 = G__17289;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__17290 = n + 1;
      var G__17291 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__17292 = cljs.core.next(coll__$1);
      n = G__17290;
      hash_code = G__17291;
      coll__$1 = G__17292;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__17293 = o;
  return goog.getUid(G__17293);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__17295 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17295) : cljs.core.deref.call(null, G__17295);
  } else {
    return x;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__17302 = val;
            var G__17303 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17302, G__17303) : f.call(null, G__17302, G__17303);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__17308 = nval;
            var G__17309 = n + 1;
            val = G__17308;
            n = G__17309;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__17304 = val__$1;
          var G__17305 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17304, G__17305) : f.call(null, G__17304, G__17305);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__17310 = nval;
          var G__17311 = n + 1;
          val__$1 = G__17310;
          n = G__17311;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__17306 = val__$1;
          var G__17307 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17306, G__17307) : f.call(null, G__17306, G__17307);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__17312 = nval;
          var G__17313 = n + 1;
          val__$1 = G__17312;
          n = G__17313;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__17320 = val;
            var G__17321 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17320, G__17321) : f.call(null, G__17320, G__17321);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__17326 = nval;
            var G__17327 = n + 1;
            val = G__17326;
            n = G__17327;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__17322 = val__$1;
          var G__17323 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17322, G__17323) : f.call(null, G__17322, G__17323);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__17328 = nval;
          var G__17329 = n + 1;
          val__$1 = G__17328;
          n = G__17329;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__17324 = val__$1;
          var G__17325 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17324, G__17325) : f.call(null, G__17324, G__17325);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__17330 = nval;
          var G__17331 = n + 1;
          val__$1 = G__17330;
          n = G__17331;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__17333 = x;
  if (G__17333) {
    var bit__4662__auto__ = G__17333.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4662__auto__ || G__17333.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__17333.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__17333);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__17333);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__17335 = x;
  if (G__17335) {
    var bit__4662__auto__ = G__17335.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4662__auto__ || G__17335.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__17335.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__17335);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__17335);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__17336 = coll__$1;
  var G__17337 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__17336, G__17337) : cljs.core.equiv_sequential.call(null, G__17336, G__17337);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__17338 = o;
  var G__17339 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__17338, G__17339) : cljs.core.cons.call(null, G__17338, G__17339);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__17342 = coll__$1;
  var G__17343 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__17342, G__17343) : cljs.core.equiv_sequential.call(null, G__17342, G__17343);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__17344 = cljs.core.List.EMPTY;
  var G__17345 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__17344, G__17345) : cljs.core.with_meta.call(null, G__17344, G__17345);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__17346 = f;
  var G__17347 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__17346, G__17347) : cljs.core.seq_reduce.call(null, G__17346, G__17347);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__17348 = f;
  var G__17349 = start;
  var G__17350 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__17348, G__17349, G__17350) : cljs.core.seq_reduce.call(null, G__17348, G__17349, G__17350);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__17351 = o;
  var G__17352 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__17351, G__17352) : cljs.core.cons.call(null, G__17351, G__17352);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.second = function second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__17353 = sn;
      s = G__17353;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__17358__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__17359 = conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__17360 = cljs.core.first(xs);
          var G__17361 = cljs.core.next(xs);
          coll = G__17359;
          x = G__17360;
          xs = G__17361;
          continue;
        } else {
          return conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__17358 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__17362__i = 0, G__17362__a = new Array(arguments.length - 2);
        while (G__17362__i < G__17362__a.length) {
          G__17362__a[G__17362__i] = arguments[G__17362__i + 2];
          ++G__17362__i;
        }
        xs = new cljs.core.IndexedSeq(G__17362__a, 0);
      }
      return G__17358__delegate.call(this, coll, x, xs);
    };
    G__17358.cljs$lang$maxFixedArity = 2;
    G__17358.cljs$lang$applyTo = function(arglist__17363) {
      var coll = cljs.core.first(arglist__17363);
      arglist__17363 = cljs.core.next(arglist__17363);
      var x = cljs.core.first(arglist__17363);
      var xs = cljs.core.rest(arglist__17363);
      return G__17358__delegate(coll, x, xs);
    };
    G__17358.cljs$core$IFn$_invoke$arity$variadic = G__17358__delegate;
    return G__17358;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        var G__17364 = null;
        if (arguments.length > 2) {
          var G__17365__i = 0, G__17365__a = new Array(arguments.length - 2);
          while (G__17365__i < G__17365__a.length) {
            G__17365__a[G__17365__i] = arguments[G__17365__i + 2];
            ++G__17365__i;
          }
          G__17364 = new cljs.core.IndexedSeq(G__17365__a, 0);
        }
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__17364);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__17366 = cljs.core.next(s);
      var G__17367 = acc + 1;
      s = G__17366;
      acc = G__17367;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__17369 = coll;
      if (G__17369) {
        var bit__4655__auto__ = G__17369.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4655__auto__ || G__17369.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__17370 = cljs.core.next(coll);
              var G__17371 = n - 1;
              coll = G__17370;
              n = G__17371;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__17372 = cljs.core.next(coll);
              var G__17373 = n - 1;
              var G__17374 = not_found;
              coll = G__17372;
              n = G__17373;
              not_found = G__17374;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__17379 = coll;
          if (G__17379) {
            var bit__4655__auto__ = G__17379.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4655__auto__ || G__17379.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__17380 = coll;
                  if (G__17380) {
                    var bit__4662__auto__ = G__17380.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4662__auto__ || G__17380.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__17380.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17380);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17380);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__17381 = coll;
          if (G__17381) {
            var bit__4655__auto__ = G__17381.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4655__auto__ || G__17381.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__17382 = coll;
                  if (G__17382) {
                    var bit__4662__auto__ = G__17382.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4662__auto__ || G__17382.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__17382.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17382);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17382);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.nthrest = function nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__17383 = n__$1 - 1;
      var G__17384 = cljs.core.rest(xs);
      n__$1 = G__17383;
      xs = G__17384;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__17387 = o;
        if (G__17387) {
          var bit__4655__auto__ = G__17387.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4655__auto__ || G__17387.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__17388 = o;
        if (G__17388) {
          var bit__4655__auto__ = G__17388.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4655__auto__ || G__17388.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__17392__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__17393 = ret;
          var G__17394 = cljs.core.first(kvs);
          var G__17395 = cljs.core.second(kvs);
          var G__17396 = cljs.core.nnext(kvs);
          coll = G__17393;
          k = G__17394;
          v = G__17395;
          kvs = G__17396;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__17392 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__17397__i = 0, G__17397__a = new Array(arguments.length - 3);
        while (G__17397__i < G__17397__a.length) {
          G__17397__a[G__17397__i] = arguments[G__17397__i + 3];
          ++G__17397__i;
        }
        kvs = new cljs.core.IndexedSeq(G__17397__a, 0);
      }
      return G__17392__delegate.call(this, coll, k, v, kvs);
    };
    G__17392.cljs$lang$maxFixedArity = 3;
    G__17392.cljs$lang$applyTo = function(arglist__17398) {
      var coll = cljs.core.first(arglist__17398);
      arglist__17398 = cljs.core.next(arglist__17398);
      var k = cljs.core.first(arglist__17398);
      arglist__17398 = cljs.core.next(arglist__17398);
      var v = cljs.core.first(arglist__17398);
      var kvs = cljs.core.rest(arglist__17398);
      return G__17392__delegate(coll, k, v, kvs);
    };
    G__17392.cljs$core$IFn$_invoke$arity$variadic = G__17392__delegate;
    return G__17392;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        var G__17399 = null;
        if (arguments.length > 3) {
          var G__17400__i = 0, G__17400__a = new Array(arguments.length - 3);
          while (G__17400__i < G__17400__a.length) {
            G__17400__a[G__17400__i] = arguments[G__17400__i + 3];
            ++G__17400__i;
          }
          G__17399 = new cljs.core.IndexedSeq(G__17400__a, 0);
        }
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__17399);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__17403__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__17404 = ret;
            var G__17405 = cljs.core.first(ks);
            var G__17406 = cljs.core.next(ks);
            coll = G__17404;
            k = G__17405;
            ks = G__17406;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__17403 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__17407__i = 0, G__17407__a = new Array(arguments.length - 2);
        while (G__17407__i < G__17407__a.length) {
          G__17407__a[G__17407__i] = arguments[G__17407__i + 2];
          ++G__17407__i;
        }
        ks = new cljs.core.IndexedSeq(G__17407__a, 0);
      }
      return G__17403__delegate.call(this, coll, k, ks);
    };
    G__17403.cljs$lang$maxFixedArity = 2;
    G__17403.cljs$lang$applyTo = function(arglist__17408) {
      var coll = cljs.core.first(arglist__17408);
      arglist__17408 = cljs.core.next(arglist__17408);
      var k = cljs.core.first(arglist__17408);
      var ks = cljs.core.rest(arglist__17408);
      return G__17403__delegate(coll, k, ks);
    };
    G__17403.cljs$core$IFn$_invoke$arity$variadic = G__17403__delegate;
    return G__17403;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        var G__17409 = null;
        if (arguments.length > 2) {
          var G__17410__i = 0, G__17410__a = new Array(arguments.length - 2);
          while (G__17410__i < G__17410__a.length) {
            G__17410__a[G__17410__i] = arguments[G__17410__i + 2];
            ++G__17410__i;
          }
          G__17409 = new cljs.core.IndexedSeq(G__17410__a, 0);
        }
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__17409);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3981__auto__ = function() {
    var G__17415 = f;
    return goog.isFunction(G__17415);
  }();
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var G__17416 = f;
    if (G__17416) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto____$1 = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto____$1)) {
          return or__3981__auto____$1;
        } else {
          return G__17416.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__17416.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__17416);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__17416);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__17882 = null;
  var G__17882__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__17882__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17418 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__17418) : self__.afn.call(null, G__17418);
  };
  var G__17882__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17419 = a;
    var G__17420 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__17419, G__17420) : self__.afn.call(null, G__17419, G__17420);
  };
  var G__17882__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17421 = a;
    var G__17422 = b;
    var G__17423 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__17421, G__17422, G__17423) : self__.afn.call(null, G__17421, G__17422, G__17423);
  };
  var G__17882__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17424 = a;
    var G__17425 = b;
    var G__17426 = c;
    var G__17427 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__17424, G__17425, G__17426, G__17427) : self__.afn.call(null, G__17424, G__17425, G__17426, G__17427);
  };
  var G__17882__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17428 = a;
    var G__17429 = b;
    var G__17430 = c;
    var G__17431 = d;
    var G__17432 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__17428, G__17429, G__17430, G__17431, G__17432) : self__.afn.call(null, G__17428, G__17429, G__17430, G__17431, G__17432);
  };
  var G__17882__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17433 = a;
    var G__17434 = b;
    var G__17435 = c;
    var G__17436 = d;
    var G__17437 = e;
    var G__17438 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__17433, G__17434, G__17435, G__17436, G__17437, G__17438) : self__.afn.call(null, G__17433, G__17434, G__17435, G__17436, G__17437, G__17438);
  };
  var G__17882__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17439 = a;
    var G__17440 = b;
    var G__17441 = c;
    var G__17442 = d;
    var G__17443 = e;
    var G__17444 = f;
    var G__17445 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__17439, G__17440, G__17441, G__17442, G__17443, G__17444, G__17445) : self__.afn.call(null, G__17439, G__17440, G__17441, G__17442, G__17443, G__17444, G__17445);
  };
  var G__17882__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17446 = a;
    var G__17447 = b;
    var G__17448 = c;
    var G__17449 = d;
    var G__17450 = e;
    var G__17451 = f;
    var G__17452 = g;
    var G__17453 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__17446, G__17447, G__17448, G__17449, G__17450, G__17451, G__17452, G__17453) : self__.afn.call(null, G__17446, G__17447, G__17448, G__17449, G__17450, G__17451, G__17452, G__17453);
  };
  var G__17882__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17454 = a;
    var G__17455 = b;
    var G__17456 = c;
    var G__17457 = d;
    var G__17458 = e;
    var G__17459 = f;
    var G__17460 = g;
    var G__17461 = h;
    var G__17462 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__17454, G__17455, G__17456, G__17457, G__17458, G__17459, G__17460, G__17461, G__17462) : self__.afn.call(null, G__17454, G__17455, G__17456, G__17457, G__17458, G__17459, G__17460, G__17461, G__17462);
  };
  var G__17882__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17463 = a;
    var G__17464 = b;
    var G__17465 = c;
    var G__17466 = d;
    var G__17467 = e;
    var G__17468 = f;
    var G__17469 = g;
    var G__17470 = h;
    var G__17471 = i;
    var G__17472 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__17463, G__17464, G__17465, G__17466, G__17467, G__17468, G__17469, G__17470, G__17471, G__17472) : self__.afn.call(null, G__17463, G__17464, G__17465, G__17466, G__17467, G__17468, G__17469, G__17470, G__17471, G__17472);
  };
  var G__17882__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17473 = a;
    var G__17474 = b;
    var G__17475 = c;
    var G__17476 = d;
    var G__17477 = e;
    var G__17478 = f;
    var G__17479 = g;
    var G__17480 = h;
    var G__17481 = i;
    var G__17482 = j;
    var G__17483 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__17473, G__17474, G__17475, G__17476, G__17477, G__17478, G__17479, G__17480, G__17481, G__17482, G__17483) : self__.afn.call(null, G__17473, G__17474, G__17475, G__17476, G__17477, G__17478, G__17479, G__17480, G__17481, G__17482, G__17483);
  };
  var G__17882__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17484 = a;
    var G__17485 = b;
    var G__17486 = c;
    var G__17487 = d;
    var G__17488 = e;
    var G__17489 = f;
    var G__17490 = g;
    var G__17491 = h;
    var G__17492 = i;
    var G__17493 = j;
    var G__17494 = k;
    var G__17495 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__17484, G__17485, G__17486, G__17487, G__17488, G__17489, G__17490, G__17491, G__17492, G__17493, G__17494, G__17495) : self__.afn.call(null, G__17484, G__17485, G__17486, G__17487, G__17488, G__17489, G__17490, G__17491, G__17492, G__17493, G__17494, G__17495);
  };
  var G__17882__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17496 = a;
    var G__17497 = b;
    var G__17498 = c;
    var G__17499 = d;
    var G__17500 = e;
    var G__17501 = f;
    var G__17502 = g;
    var G__17503 = h;
    var G__17504 = i;
    var G__17505 = j;
    var G__17506 = k;
    var G__17507 = l;
    var G__17508 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__17496, G__17497, G__17498, G__17499, G__17500, G__17501, G__17502, G__17503, G__17504, G__17505, G__17506, G__17507, G__17508) : self__.afn.call(null, G__17496, G__17497, G__17498, G__17499, G__17500, G__17501, G__17502, G__17503, G__17504, G__17505, G__17506, G__17507, G__17508);
  };
  var G__17882__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17509 = a;
    var G__17510 = b;
    var G__17511 = c;
    var G__17512 = d;
    var G__17513 = e;
    var G__17514 = f;
    var G__17515 = g;
    var G__17516 = h;
    var G__17517 = i;
    var G__17518 = j;
    var G__17519 = k;
    var G__17520 = l;
    var G__17521 = m;
    var G__17522 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__17509, G__17510, G__17511, G__17512, G__17513, G__17514, G__17515, G__17516, G__17517, G__17518, G__17519, G__17520, G__17521, G__17522) : self__.afn.call(null, G__17509, G__17510, G__17511, G__17512, G__17513, G__17514, G__17515, G__17516, G__17517, G__17518, G__17519, G__17520, G__17521, G__17522);
  };
  var G__17882__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17523 = a;
    var G__17524 = b;
    var G__17525 = c;
    var G__17526 = d;
    var G__17527 = e;
    var G__17528 = f;
    var G__17529 = g;
    var G__17530 = h;
    var G__17531 = i;
    var G__17532 = j;
    var G__17533 = k;
    var G__17534 = l;
    var G__17535 = m;
    var G__17536 = n;
    var G__17537 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__17523, G__17524, G__17525, G__17526, G__17527, G__17528, G__17529, G__17530, G__17531, G__17532, G__17533, G__17534, G__17535, G__17536, G__17537) : self__.afn.call(null, G__17523, G__17524, G__17525, G__17526, G__17527, G__17528, G__17529, G__17530, G__17531, G__17532, G__17533, G__17534, G__17535, G__17536, G__17537);
  };
  var G__17882__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17538 = a;
    var G__17539 = b;
    var G__17540 = c;
    var G__17541 = d;
    var G__17542 = e;
    var G__17543 = f;
    var G__17544 = g;
    var G__17545 = h;
    var G__17546 = i;
    var G__17547 = j;
    var G__17548 = k;
    var G__17549 = l;
    var G__17550 = m;
    var G__17551 = n;
    var G__17552 = o;
    var G__17553 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__17538, G__17539, G__17540, G__17541, G__17542, G__17543, G__17544, G__17545, G__17546, G__17547, G__17548, G__17549, G__17550, G__17551, G__17552, G__17553) : self__.afn.call(null, G__17538, G__17539, G__17540, G__17541, G__17542, G__17543, G__17544, G__17545, G__17546, G__17547, G__17548, G__17549, G__17550, G__17551, G__17552, G__17553);
  };
  var G__17882__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17554 = a;
    var G__17555 = b;
    var G__17556 = c;
    var G__17557 = d;
    var G__17558 = e;
    var G__17559 = f;
    var G__17560 = g;
    var G__17561 = h;
    var G__17562 = i;
    var G__17563 = j;
    var G__17564 = k;
    var G__17565 = l;
    var G__17566 = m;
    var G__17567 = n;
    var G__17568 = o;
    var G__17569 = p;
    var G__17570 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__17554, G__17555, G__17556, G__17557, G__17558, G__17559, G__17560, G__17561, G__17562, G__17563, G__17564, G__17565, G__17566, G__17567, G__17568, G__17569, G__17570) : self__.afn.call(null, G__17554, G__17555, G__17556, G__17557, G__17558, G__17559, G__17560, G__17561, G__17562, G__17563, G__17564, G__17565, G__17566, G__17567, G__17568, G__17569, G__17570);
  };
  var G__17882__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17571 = a;
    var G__17572 = b;
    var G__17573 = c;
    var G__17574 = d;
    var G__17575 = e;
    var G__17576 = f;
    var G__17577 = g;
    var G__17578 = h;
    var G__17579 = i;
    var G__17580 = j;
    var G__17581 = k;
    var G__17582 = l;
    var G__17583 = m;
    var G__17584 = n;
    var G__17585 = o;
    var G__17586 = p;
    var G__17587 = q;
    var G__17588 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__17571, G__17572, G__17573, G__17574, G__17575, G__17576, G__17577, G__17578, G__17579, G__17580, G__17581, G__17582, G__17583, G__17584, G__17585, G__17586, G__17587, G__17588) : self__.afn.call(null, G__17571, G__17572, G__17573, G__17574, G__17575, G__17576, G__17577, G__17578, G__17579, G__17580, G__17581, G__17582, G__17583, G__17584, G__17585, G__17586, G__17587, G__17588);
  };
  var G__17882__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17589 = a;
    var G__17590 = b;
    var G__17591 = c;
    var G__17592 = d;
    var G__17593 = e;
    var G__17594 = f;
    var G__17595 = g;
    var G__17596 = h;
    var G__17597 = i;
    var G__17598 = j;
    var G__17599 = k;
    var G__17600 = l;
    var G__17601 = m;
    var G__17602 = n;
    var G__17603 = o;
    var G__17604 = p;
    var G__17605 = q;
    var G__17606 = r;
    var G__17607 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__17589, G__17590, G__17591, G__17592, G__17593, G__17594, G__17595, G__17596, G__17597, G__17598, G__17599, G__17600, G__17601, G__17602, G__17603, G__17604, G__17605, G__17606, G__17607) : self__.afn.call(null, G__17589, G__17590, G__17591, G__17592, G__17593, G__17594, G__17595, G__17596, G__17597, G__17598, G__17599, G__17600, G__17601, G__17602, G__17603, G__17604, G__17605, G__17606, G__17607);
  };
  var G__17882__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17608 = a;
    var G__17609 = b;
    var G__17610 = c;
    var G__17611 = d;
    var G__17612 = e;
    var G__17613 = f;
    var G__17614 = g;
    var G__17615 = h;
    var G__17616 = i;
    var G__17617 = j;
    var G__17618 = k;
    var G__17619 = l;
    var G__17620 = m;
    var G__17621 = n;
    var G__17622 = o;
    var G__17623 = p;
    var G__17624 = q;
    var G__17625 = r;
    var G__17626 = s;
    var G__17627 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__17608, G__17609, G__17610, G__17611, G__17612, G__17613, G__17614, G__17615, G__17616, G__17617, G__17618, G__17619, G__17620, G__17621, G__17622, G__17623, G__17624, G__17625, G__17626, G__17627) : self__.afn.call(null, G__17608, G__17609, G__17610, G__17611, G__17612, G__17613, G__17614, G__17615, G__17616, G__17617, G__17618, G__17619, G__17620, G__17621, G__17622, G__17623, G__17624, G__17625, 
    G__17626, G__17627);
  };
  var G__17882__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__17628 = self__.afn;
    var G__17629 = a;
    var G__17630 = b;
    var G__17631 = c;
    var G__17632 = d;
    var G__17633 = e;
    var G__17634 = f;
    var G__17635 = g;
    var G__17636 = h;
    var G__17637 = i;
    var G__17638 = j;
    var G__17639 = k;
    var G__17640 = l;
    var G__17641 = m;
    var G__17642 = n;
    var G__17643 = o;
    var G__17644 = p;
    var G__17645 = q;
    var G__17646 = r;
    var G__17647 = s;
    var G__17648 = t;
    var G__17649 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__17628, G__17629, G__17630, G__17631, G__17632, G__17633, G__17634, G__17635, G__17636, G__17637, G__17638, G__17639, G__17640, G__17641, G__17642, G__17643, G__17644, G__17645, G__17646, G__17647, G__17648, G__17649) : cljs.core.apply.call(null, G__17628, G__17629, G__17630, G__17631, G__17632, G__17633, G__17634, G__17635, G__17636, G__17637, G__17638, G__17639, G__17640, G__17641, G__17642, 
    G__17643, G__17644, G__17645, G__17646, G__17647, G__17648, G__17649);
  };
  G__17882 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__17882__1.call(this, self__);
      case 2:
        return G__17882__2.call(this, self__, a);
      case 3:
        return G__17882__3.call(this, self__, a, b);
      case 4:
        return G__17882__4.call(this, self__, a, b, c);
      case 5:
        return G__17882__5.call(this, self__, a, b, c, d);
      case 6:
        return G__17882__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__17882__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__17882__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__17882__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__17882__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__17882__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__17882__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__17882__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__17882__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__17882__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__17882__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__17882__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__17882__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__17882__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__17882__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__17882__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__17882__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17882.cljs$core$IFn$_invoke$arity$1 = G__17882__1;
  G__17882.cljs$core$IFn$_invoke$arity$2 = G__17882__2;
  G__17882.cljs$core$IFn$_invoke$arity$3 = G__17882__3;
  G__17882.cljs$core$IFn$_invoke$arity$4 = G__17882__4;
  G__17882.cljs$core$IFn$_invoke$arity$5 = G__17882__5;
  G__17882.cljs$core$IFn$_invoke$arity$6 = G__17882__6;
  G__17882.cljs$core$IFn$_invoke$arity$7 = G__17882__7;
  G__17882.cljs$core$IFn$_invoke$arity$8 = G__17882__8;
  G__17882.cljs$core$IFn$_invoke$arity$9 = G__17882__9;
  G__17882.cljs$core$IFn$_invoke$arity$10 = G__17882__10;
  G__17882.cljs$core$IFn$_invoke$arity$11 = G__17882__11;
  G__17882.cljs$core$IFn$_invoke$arity$12 = G__17882__12;
  G__17882.cljs$core$IFn$_invoke$arity$13 = G__17882__13;
  G__17882.cljs$core$IFn$_invoke$arity$14 = G__17882__14;
  G__17882.cljs$core$IFn$_invoke$arity$15 = G__17882__15;
  G__17882.cljs$core$IFn$_invoke$arity$16 = G__17882__16;
  G__17882.cljs$core$IFn$_invoke$arity$17 = G__17882__17;
  G__17882.cljs$core$IFn$_invoke$arity$18 = G__17882__18;
  G__17882.cljs$core$IFn$_invoke$arity$19 = G__17882__19;
  G__17882.cljs$core$IFn$_invoke$arity$20 = G__17882__20;
  G__17882.cljs$core$IFn$_invoke$arity$21 = G__17882__21;
  G__17882.cljs$core$IFn$_invoke$arity$22 = G__17882__22;
  return G__17882;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args17417) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17417)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__17650 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__17650) : self__.afn.call(null, G__17650);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__17651 = a;
  var G__17652 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__17651, G__17652) : self__.afn.call(null, G__17651, G__17652);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__17653 = a;
  var G__17654 = b;
  var G__17655 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__17653, G__17654, G__17655) : self__.afn.call(null, G__17653, G__17654, G__17655);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__17656 = a;
  var G__17657 = b;
  var G__17658 = c;
  var G__17659 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__17656, G__17657, G__17658, G__17659) : self__.afn.call(null, G__17656, G__17657, G__17658, G__17659);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__17660 = a;
  var G__17661 = b;
  var G__17662 = c;
  var G__17663 = d;
  var G__17664 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__17660, G__17661, G__17662, G__17663, G__17664) : self__.afn.call(null, G__17660, G__17661, G__17662, G__17663, G__17664);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__17665 = a;
  var G__17666 = b;
  var G__17667 = c;
  var G__17668 = d;
  var G__17669 = e;
  var G__17670 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__17665, G__17666, G__17667, G__17668, G__17669, G__17670) : self__.afn.call(null, G__17665, G__17666, G__17667, G__17668, G__17669, G__17670);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__17671 = a;
  var G__17672 = b;
  var G__17673 = c;
  var G__17674 = d;
  var G__17675 = e;
  var G__17676 = f;
  var G__17677 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__17671, G__17672, G__17673, G__17674, G__17675, G__17676, G__17677) : self__.afn.call(null, G__17671, G__17672, G__17673, G__17674, G__17675, G__17676, G__17677);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__17678 = a;
  var G__17679 = b;
  var G__17680 = c;
  var G__17681 = d;
  var G__17682 = e;
  var G__17683 = f;
  var G__17684 = g;
  var G__17685 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__17678, G__17679, G__17680, G__17681, G__17682, G__17683, G__17684, G__17685) : self__.afn.call(null, G__17678, G__17679, G__17680, G__17681, G__17682, G__17683, G__17684, G__17685);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__17686 = a;
  var G__17687 = b;
  var G__17688 = c;
  var G__17689 = d;
  var G__17690 = e;
  var G__17691 = f;
  var G__17692 = g;
  var G__17693 = h;
  var G__17694 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__17686, G__17687, G__17688, G__17689, G__17690, G__17691, G__17692, G__17693, G__17694) : self__.afn.call(null, G__17686, G__17687, G__17688, G__17689, G__17690, G__17691, G__17692, G__17693, G__17694);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__17695 = a;
  var G__17696 = b;
  var G__17697 = c;
  var G__17698 = d;
  var G__17699 = e;
  var G__17700 = f;
  var G__17701 = g;
  var G__17702 = h;
  var G__17703 = i;
  var G__17704 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__17695, G__17696, G__17697, G__17698, G__17699, G__17700, G__17701, G__17702, G__17703, G__17704) : self__.afn.call(null, G__17695, G__17696, G__17697, G__17698, G__17699, G__17700, G__17701, G__17702, G__17703, G__17704);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__17705 = a;
  var G__17706 = b;
  var G__17707 = c;
  var G__17708 = d;
  var G__17709 = e;
  var G__17710 = f;
  var G__17711 = g;
  var G__17712 = h;
  var G__17713 = i;
  var G__17714 = j;
  var G__17715 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__17705, G__17706, G__17707, G__17708, G__17709, G__17710, G__17711, G__17712, G__17713, G__17714, G__17715) : self__.afn.call(null, G__17705, G__17706, G__17707, G__17708, G__17709, G__17710, G__17711, G__17712, G__17713, G__17714, G__17715);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__17716 = a;
  var G__17717 = b;
  var G__17718 = c;
  var G__17719 = d;
  var G__17720 = e;
  var G__17721 = f;
  var G__17722 = g;
  var G__17723 = h;
  var G__17724 = i;
  var G__17725 = j;
  var G__17726 = k;
  var G__17727 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__17716, G__17717, G__17718, G__17719, G__17720, G__17721, G__17722, G__17723, G__17724, G__17725, G__17726, G__17727) : self__.afn.call(null, G__17716, G__17717, G__17718, G__17719, G__17720, G__17721, G__17722, G__17723, G__17724, G__17725, G__17726, G__17727);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__17728 = a;
  var G__17729 = b;
  var G__17730 = c;
  var G__17731 = d;
  var G__17732 = e;
  var G__17733 = f;
  var G__17734 = g;
  var G__17735 = h;
  var G__17736 = i;
  var G__17737 = j;
  var G__17738 = k;
  var G__17739 = l;
  var G__17740 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__17728, G__17729, G__17730, G__17731, G__17732, G__17733, G__17734, G__17735, G__17736, G__17737, G__17738, G__17739, G__17740) : self__.afn.call(null, G__17728, G__17729, G__17730, G__17731, G__17732, G__17733, G__17734, G__17735, G__17736, G__17737, G__17738, G__17739, G__17740);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__17741 = a;
  var G__17742 = b;
  var G__17743 = c;
  var G__17744 = d;
  var G__17745 = e;
  var G__17746 = f;
  var G__17747 = g;
  var G__17748 = h;
  var G__17749 = i;
  var G__17750 = j;
  var G__17751 = k;
  var G__17752 = l;
  var G__17753 = m;
  var G__17754 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__17741, G__17742, G__17743, G__17744, G__17745, G__17746, G__17747, G__17748, G__17749, G__17750, G__17751, G__17752, G__17753, G__17754) : self__.afn.call(null, G__17741, G__17742, G__17743, G__17744, G__17745, G__17746, G__17747, G__17748, G__17749, G__17750, G__17751, G__17752, G__17753, G__17754);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__17755 = a;
  var G__17756 = b;
  var G__17757 = c;
  var G__17758 = d;
  var G__17759 = e;
  var G__17760 = f;
  var G__17761 = g;
  var G__17762 = h;
  var G__17763 = i;
  var G__17764 = j;
  var G__17765 = k;
  var G__17766 = l;
  var G__17767 = m;
  var G__17768 = n;
  var G__17769 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__17755, G__17756, G__17757, G__17758, G__17759, G__17760, G__17761, G__17762, G__17763, G__17764, G__17765, G__17766, G__17767, G__17768, G__17769) : self__.afn.call(null, G__17755, G__17756, G__17757, G__17758, G__17759, G__17760, G__17761, G__17762, G__17763, G__17764, G__17765, G__17766, G__17767, G__17768, G__17769);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__17770 = a;
  var G__17771 = b;
  var G__17772 = c;
  var G__17773 = d;
  var G__17774 = e;
  var G__17775 = f;
  var G__17776 = g;
  var G__17777 = h;
  var G__17778 = i;
  var G__17779 = j;
  var G__17780 = k;
  var G__17781 = l;
  var G__17782 = m;
  var G__17783 = n;
  var G__17784 = o;
  var G__17785 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__17770, G__17771, G__17772, G__17773, G__17774, G__17775, G__17776, G__17777, G__17778, G__17779, G__17780, G__17781, G__17782, G__17783, G__17784, G__17785) : self__.afn.call(null, G__17770, G__17771, G__17772, G__17773, G__17774, G__17775, G__17776, G__17777, G__17778, G__17779, G__17780, G__17781, G__17782, G__17783, G__17784, G__17785);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__17786 = a;
  var G__17787 = b;
  var G__17788 = c;
  var G__17789 = d;
  var G__17790 = e;
  var G__17791 = f;
  var G__17792 = g;
  var G__17793 = h;
  var G__17794 = i;
  var G__17795 = j;
  var G__17796 = k;
  var G__17797 = l;
  var G__17798 = m;
  var G__17799 = n;
  var G__17800 = o;
  var G__17801 = p;
  var G__17802 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__17786, G__17787, G__17788, G__17789, G__17790, G__17791, G__17792, G__17793, G__17794, G__17795, G__17796, G__17797, G__17798, G__17799, G__17800, G__17801, G__17802) : self__.afn.call(null, G__17786, G__17787, G__17788, G__17789, G__17790, G__17791, G__17792, G__17793, G__17794, G__17795, G__17796, G__17797, G__17798, G__17799, G__17800, G__17801, G__17802);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__17803 = a;
  var G__17804 = b;
  var G__17805 = c;
  var G__17806 = d;
  var G__17807 = e;
  var G__17808 = f;
  var G__17809 = g;
  var G__17810 = h;
  var G__17811 = i;
  var G__17812 = j;
  var G__17813 = k;
  var G__17814 = l;
  var G__17815 = m;
  var G__17816 = n;
  var G__17817 = o;
  var G__17818 = p;
  var G__17819 = q;
  var G__17820 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__17803, G__17804, G__17805, G__17806, G__17807, G__17808, G__17809, G__17810, G__17811, G__17812, G__17813, G__17814, G__17815, G__17816, G__17817, G__17818, G__17819, G__17820) : self__.afn.call(null, G__17803, G__17804, G__17805, G__17806, G__17807, G__17808, G__17809, G__17810, G__17811, G__17812, G__17813, G__17814, G__17815, G__17816, G__17817, G__17818, G__17819, G__17820);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__17821 = a;
  var G__17822 = b;
  var G__17823 = c;
  var G__17824 = d;
  var G__17825 = e;
  var G__17826 = f;
  var G__17827 = g;
  var G__17828 = h;
  var G__17829 = i;
  var G__17830 = j;
  var G__17831 = k;
  var G__17832 = l;
  var G__17833 = m;
  var G__17834 = n;
  var G__17835 = o;
  var G__17836 = p;
  var G__17837 = q;
  var G__17838 = r;
  var G__17839 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__17821, G__17822, G__17823, G__17824, G__17825, G__17826, G__17827, G__17828, G__17829, G__17830, G__17831, G__17832, G__17833, G__17834, G__17835, G__17836, G__17837, G__17838, G__17839) : self__.afn.call(null, G__17821, G__17822, G__17823, G__17824, G__17825, G__17826, G__17827, G__17828, G__17829, G__17830, G__17831, G__17832, G__17833, G__17834, G__17835, G__17836, G__17837, G__17838, G__17839);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__17840 = a;
  var G__17841 = b;
  var G__17842 = c;
  var G__17843 = d;
  var G__17844 = e;
  var G__17845 = f;
  var G__17846 = g;
  var G__17847 = h;
  var G__17848 = i;
  var G__17849 = j;
  var G__17850 = k;
  var G__17851 = l;
  var G__17852 = m;
  var G__17853 = n;
  var G__17854 = o;
  var G__17855 = p;
  var G__17856 = q;
  var G__17857 = r;
  var G__17858 = s;
  var G__17859 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__17840, G__17841, G__17842, G__17843, G__17844, G__17845, G__17846, G__17847, G__17848, G__17849, G__17850, G__17851, G__17852, G__17853, G__17854, G__17855, G__17856, G__17857, G__17858, G__17859) : self__.afn.call(null, G__17840, G__17841, G__17842, G__17843, G__17844, G__17845, G__17846, G__17847, G__17848, G__17849, G__17850, G__17851, G__17852, G__17853, G__17854, G__17855, G__17856, G__17857, G__17858, 
  G__17859);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__17860 = self__.afn;
  var G__17861 = a;
  var G__17862 = b;
  var G__17863 = c;
  var G__17864 = d;
  var G__17865 = e;
  var G__17866 = f;
  var G__17867 = g;
  var G__17868 = h;
  var G__17869 = i;
  var G__17870 = j;
  var G__17871 = k;
  var G__17872 = l;
  var G__17873 = m;
  var G__17874 = n;
  var G__17875 = o;
  var G__17876 = p;
  var G__17877 = q;
  var G__17878 = r;
  var G__17879 = s;
  var G__17880 = t;
  var G__17881 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__17860, G__17861, G__17862, G__17863, G__17864, G__17865, G__17866, G__17867, G__17868, G__17869, G__17870, G__17871, G__17872, G__17873, G__17874, G__17875, G__17876, G__17877, G__17878, G__17879, G__17880, G__17881) : cljs.core.apply.call(null, G__17860, G__17861, G__17862, G__17863, G__17864, G__17865, G__17866, G__17867, G__17868, G__17869, G__17870, G__17871, G__17872, G__17873, G__17874, 
  G__17875, G__17876, G__17877, G__17878, G__17879, G__17880, G__17881);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__17886 = o;
    if (G__17886) {
      var bit__4662__auto__ = G__17886.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4662__auto__ || G__17886.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__17886.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__17886);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__17886);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3969__auto__ = !(o == null);
    if (and__3969__auto__) {
      var G__17890 = o;
      if (G__17890) {
        var bit__4662__auto__ = G__17890.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4662__auto__ || G__17890.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__17890.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17890);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17890);
      }
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var disj__3 = function() {
    var G__17893__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__17894 = ret;
            var G__17895 = cljs.core.first(ks);
            var G__17896 = cljs.core.next(ks);
            coll = G__17894;
            k = G__17895;
            ks = G__17896;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__17893 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__17897__i = 0, G__17897__a = new Array(arguments.length - 2);
        while (G__17897__i < G__17897__a.length) {
          G__17897__a[G__17897__i] = arguments[G__17897__i + 2];
          ++G__17897__i;
        }
        ks = new cljs.core.IndexedSeq(G__17897__a, 0);
      }
      return G__17893__delegate.call(this, coll, k, ks);
    };
    G__17893.cljs$lang$maxFixedArity = 2;
    G__17893.cljs$lang$applyTo = function(arglist__17898) {
      var coll = cljs.core.first(arglist__17898);
      arglist__17898 = cljs.core.next(arglist__17898);
      var k = cljs.core.first(arglist__17898);
      var ks = cljs.core.rest(arglist__17898);
      return G__17893__delegate(coll, k, ks);
    };
    G__17893.cljs$core$IFn$_invoke$arity$variadic = G__17893__delegate;
    return G__17893;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        var G__17899 = null;
        if (arguments.length > 2) {
          var G__17900__i = 0, G__17900__a = new Array(arguments.length - 2);
          while (G__17900__i < G__17900__a.length) {
            G__17900__a[G__17900__i] = arguments[G__17900__i + 2];
            ++G__17900__i;
          }
          G__17899 = new cljs.core.IndexedSeq(G__17900__a, 0);
        }
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__17899);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17902 = x;
    if (G__17902) {
      var bit__4662__auto__ = G__17902.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4662__auto__ || G__17902.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__17902.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__17902);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__17902);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17904 = x;
    if (G__17904) {
      var bit__4662__auto__ = G__17904.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4662__auto__ || G__17904.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__17904.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__17904);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__17904);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__17906 = x;
  if (G__17906) {
    var bit__4662__auto__ = G__17906.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4662__auto__ || G__17906.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__17906.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__17906);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__17906);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__17908 = x;
  if (G__17908) {
    var bit__4662__auto__ = G__17908.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4662__auto__ || G__17908.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__17908.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__17908);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__17908);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__17910 = x;
  if (G__17910) {
    var bit__4662__auto__ = G__17910.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4662__auto__ || G__17910.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__17910.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__17910);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__17910);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__17912 = x;
  if (G__17912) {
    var bit__4662__auto__ = G__17912.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4662__auto__ || G__17912.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__17912.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__17912);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__17912);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17914 = x;
    if (G__17914) {
      var bit__4662__auto__ = G__17914.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4662__auto__ || G__17914.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__17914.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__17914);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__17914);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__17916 = x;
  if (G__17916) {
    var bit__4662__auto__ = G__17916.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4662__auto__ || G__17916.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__17916.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__17916);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__17916);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__17918 = x;
  if (G__17918) {
    var bit__4655__auto__ = G__17918.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4655__auto__ || G__17918.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj17924 = {};
    return obj17924;
  };
  var js_obj__1 = function() {
    var G__17927__delegate = function(keyvals) {
      var G__17925 = goog.object.create;
      var G__17926 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__17925, G__17926) : cljs.core.apply.call(null, G__17925, G__17926);
    };
    var G__17927 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__17928__i = 0, G__17928__a = new Array(arguments.length - 0);
        while (G__17928__i < G__17928__a.length) {
          G__17928__a[G__17928__i] = arguments[G__17928__i + 0];
          ++G__17928__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__17928__a, 0);
      }
      return G__17927__delegate.call(this, keyvals);
    };
    G__17927.cljs$lang$maxFixedArity = 0;
    G__17927.cljs$lang$applyTo = function(arglist__17929) {
      var keyvals = cljs.core.seq(arglist__17929);
      return G__17927__delegate(keyvals);
    };
    G__17927.cljs$core$IFn$_invoke$arity$variadic = G__17927__delegate;
    return G__17927;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        var G__17930 = null;
        if (arguments.length > 0) {
          var G__17931__i = 0, G__17931__a = new Array(arguments.length - 0);
          while (G__17931__i < G__17931__a.length) {
            G__17931__a[G__17931__i] = arguments[G__17931__i + 0];
            ++G__17931__i;
          }
          G__17930 = new cljs.core.IndexedSeq(G__17931__a, 0);
        }
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__17930);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  var G__17934_17936 = obj;
  var G__17935_17937 = function(G__17934_17936, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__17934_17936, keys);
  goog.object.forEach(G__17934_17936, G__17935_17937);
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17938 = i__$1 + 1;
      var G__17939 = j__$1 + 1;
      var G__17940 = len__$1 - 1;
      i__$1 = G__17938;
      j__$1 = G__17939;
      len__$1 = G__17940;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17941 = i__$1 - 1;
      var G__17942 = j__$1 - 1;
      var G__17943 = len__$1 - 1;
      i__$1 = G__17941;
      j__$1 = G__17942;
      len__$1 = G__17943;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj17945 = {};
  return obj17945;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__17947 = s;
    if (G__17947) {
      var bit__4662__auto__ = G__17947.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4662__auto__ || G__17947.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__17947.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17947);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__17947);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__17949 = s;
  if (G__17949) {
    var bit__4662__auto__ = G__17949.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4662__auto__ || G__17949.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__17949.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__17949);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__17949);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3981__auto__ = cljs.core.fn_QMARK_(f);
  if (or__3981__auto__) {
    return or__3981__auto__;
  } else {
    var G__17953 = f;
    if (G__17953) {
      var bit__4662__auto__ = G__17953.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4662__auto__ || G__17953.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__17953.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__17953);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__17953);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__17966 = n;
    return isNaN(G__17966);
  }()) && !(n === Infinity) && function() {
    var G__17967 = n;
    return parseFloat(G__17967);
  }() === function() {
    var G__17968 = n;
    var G__17969 = 10;
    return parseInt(G__17968, G__17969);
  }();
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__17970__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__17971 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__17972 = etc;
              s = G__17971;
              xs = G__17972;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__17970 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__17973__i = 0, G__17973__a = new Array(arguments.length - 2);
        while (G__17973__i < G__17973__a.length) {
          G__17973__a[G__17973__i] = arguments[G__17973__i + 2];
          ++G__17973__i;
        }
        more = new cljs.core.IndexedSeq(G__17973__a, 0);
      }
      return G__17970__delegate.call(this, x, y, more);
    };
    G__17970.cljs$lang$maxFixedArity = 2;
    G__17970.cljs$lang$applyTo = function(arglist__17974) {
      var x = cljs.core.first(arglist__17974);
      arglist__17974 = cljs.core.next(arglist__17974);
      var y = cljs.core.first(arglist__17974);
      var more = cljs.core.rest(arglist__17974);
      return G__17970__delegate(x, y, more);
    };
    G__17970.cljs$core$IFn$_invoke$arity$variadic = G__17970__delegate;
    return G__17970;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        var G__17975 = null;
        if (arguments.length > 2) {
          var G__17976__i = 0, G__17976__a = new Array(arguments.length - 2);
          while (G__17976__i < G__17976__a.length) {
            G__17976__a[G__17976__i] = arguments[G__17976__i + 2];
            ++G__17976__i;
          }
          G__17975 = new cljs.core.IndexedSeq(G__17976__a, 0);
        }
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17975);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__17980 = x;
            if (G__17980) {
              var bit__4655__auto__ = G__17980.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4655__auto__ || G__17980.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__17981 = x;
            var G__17982 = y;
            return goog.array.defaultCompare(G__17981, G__17982);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__17987 = xs;
        var G__17988 = ys;
        var G__17989 = len;
        var G__17990 = n + 1;
        xs = G__17987;
        ys = G__17988;
        len = G__17989;
        n = G__17990;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__17995 = x;
        var G__17996 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17995, G__17996) : f.call(null, G__17995, G__17996);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__17997 = y;
            var G__17998 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17997, G__17998) : f.call(null, G__17997, G__17998);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__18004 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__18004) : cljs.core.to_array.call(null, G__18004);
      }();
      var G__18005_18007 = a;
      var G__18006_18008 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__18005_18007, G__18006_18008);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__18014 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__18014) : keyfn.call(null, G__18014);
      }(), function() {
        var G__18015 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__18015) : keyfn.call(null, G__18015);
      }());
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__18021 = f;
      var G__18022 = cljs.core.first(s);
      var G__18023 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__18021, G__18022, G__18023) : cljs.core.reduce.call(null, G__18021, G__18022, G__18023);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__18024 = val__$1;
          var G__18025 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18024, G__18025) : f.call(null, G__18024, G__18025);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__18026 = nval;
          var G__18027 = cljs.core.next(coll__$1);
          val__$1 = G__18026;
          coll__$1 = G__18027;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = function() {
    var G__18031 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__18031) : cljs.core.to_array.call(null, G__18031);
  }();
  var G__18032_18034 = a;
  goog.array.shuffle(G__18032_18034);
  var G__18033 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__18033) : cljs.core.vec.call(null, G__18033);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__18037 = coll;
      if (G__18037) {
        var bit__4655__auto__ = G__18037.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4655__auto__ || G__18037.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__18038 = coll;
      if (G__18038) {
        var bit__4655__auto__ = G__18038.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4655__auto__ || G__18038.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__18047 = null;
      var G__18047__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__18047__1 = function(x) {
        var G__18044 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__18044) : cf.call(null, G__18044);
      };
      var G__18047__2 = function(x, y) {
        var G__18045 = x;
        var G__18046 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18045, G__18046) : f.call(null, G__18045, G__18046);
      };
      G__18047 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__18047__0.call(this);
          case 1:
            return G__18047__1.call(this, x);
          case 2:
            return G__18047__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18047.cljs$core$IFn$_invoke$arity$0 = G__18047__0;
      G__18047.cljs$core$IFn$_invoke$arity$1 = G__18047__1;
      G__18047.cljs$core$IFn$_invoke$arity$2 = G__18047__2;
      return G__18047;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__18054 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__18054) : xform.call(null, G__18054);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__18055 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__18055) : f__$1.call(null, G__18055);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__18056__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_PLUS_, x + y, more);
    };
    var G__18056 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18057__i = 0, G__18057__a = new Array(arguments.length - 2);
        while (G__18057__i < G__18057__a.length) {
          G__18057__a[G__18057__i] = arguments[G__18057__i + 2];
          ++G__18057__i;
        }
        more = new cljs.core.IndexedSeq(G__18057__a, 0);
      }
      return G__18056__delegate.call(this, x, y, more);
    };
    G__18056.cljs$lang$maxFixedArity = 2;
    G__18056.cljs$lang$applyTo = function(arglist__18058) {
      var x = cljs.core.first(arglist__18058);
      arglist__18058 = cljs.core.next(arglist__18058);
      var y = cljs.core.first(arglist__18058);
      var more = cljs.core.rest(arglist__18058);
      return G__18056__delegate(x, y, more);
    };
    G__18056.cljs$core$IFn$_invoke$arity$variadic = G__18056__delegate;
    return G__18056;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        var G__18059 = null;
        if (arguments.length > 2) {
          var G__18060__i = 0, G__18060__a = new Array(arguments.length - 2);
          while (G__18060__i < G__18060__a.length) {
            G__18060__a[G__18060__i] = arguments[G__18060__i + 2];
            ++G__18060__i;
          }
          G__18059 = new cljs.core.IndexedSeq(G__18060__a, 0);
        }
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18059);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__18061__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_, x - y, more);
    };
    var G__18061 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18062__i = 0, G__18062__a = new Array(arguments.length - 2);
        while (G__18062__i < G__18062__a.length) {
          G__18062__a[G__18062__i] = arguments[G__18062__i + 2];
          ++G__18062__i;
        }
        more = new cljs.core.IndexedSeq(G__18062__a, 0);
      }
      return G__18061__delegate.call(this, x, y, more);
    };
    G__18061.cljs$lang$maxFixedArity = 2;
    G__18061.cljs$lang$applyTo = function(arglist__18063) {
      var x = cljs.core.first(arglist__18063);
      arglist__18063 = cljs.core.next(arglist__18063);
      var y = cljs.core.first(arglist__18063);
      var more = cljs.core.rest(arglist__18063);
      return G__18061__delegate(x, y, more);
    };
    G__18061.cljs$core$IFn$_invoke$arity$variadic = G__18061__delegate;
    return G__18061;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        var G__18064 = null;
        if (arguments.length > 2) {
          var G__18065__i = 0, G__18065__a = new Array(arguments.length - 2);
          while (G__18065__i < G__18065__a.length) {
            G__18065__a[G__18065__i] = arguments[G__18065__i + 2];
            ++G__18065__i;
          }
          G__18064 = new cljs.core.IndexedSeq(G__18065__a, 0);
        }
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18064);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__18066__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_STAR_, x * y, more);
    };
    var G__18066 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18067__i = 0, G__18067__a = new Array(arguments.length - 2);
        while (G__18067__i < G__18067__a.length) {
          G__18067__a[G__18067__i] = arguments[G__18067__i + 2];
          ++G__18067__i;
        }
        more = new cljs.core.IndexedSeq(G__18067__a, 0);
      }
      return G__18066__delegate.call(this, x, y, more);
    };
    G__18066.cljs$lang$maxFixedArity = 2;
    G__18066.cljs$lang$applyTo = function(arglist__18068) {
      var x = cljs.core.first(arglist__18068);
      arglist__18068 = cljs.core.next(arglist__18068);
      var y = cljs.core.first(arglist__18068);
      var more = cljs.core.rest(arglist__18068);
      return G__18066__delegate(x, y, more);
    };
    G__18066.cljs$core$IFn$_invoke$arity$variadic = G__18066__delegate;
    return G__18066;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        var G__18069 = null;
        if (arguments.length > 2) {
          var G__18070__i = 0, G__18070__a = new Array(arguments.length - 2);
          while (G__18070__i < G__18070__a.length) {
            G__18070__a[G__18070__i] = arguments[G__18070__i + 2];
            ++G__18070__i;
          }
          G__18069 = new cljs.core.IndexedSeq(G__18070__a, 0);
        }
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18069);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__18075__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_SLASH_, _SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__18075 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18076__i = 0, G__18076__a = new Array(arguments.length - 2);
        while (G__18076__i < G__18076__a.length) {
          G__18076__a[G__18076__i] = arguments[G__18076__i + 2];
          ++G__18076__i;
        }
        more = new cljs.core.IndexedSeq(G__18076__a, 0);
      }
      return G__18075__delegate.call(this, x, y, more);
    };
    G__18075.cljs$lang$maxFixedArity = 2;
    G__18075.cljs$lang$applyTo = function(arglist__18077) {
      var x = cljs.core.first(arglist__18077);
      arglist__18077 = cljs.core.next(arglist__18077);
      var y = cljs.core.first(arglist__18077);
      var more = cljs.core.rest(arglist__18077);
      return G__18075__delegate(x, y, more);
    };
    G__18075.cljs$core$IFn$_invoke$arity$variadic = G__18075__delegate;
    return G__18075;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        var G__18078 = null;
        if (arguments.length > 2) {
          var G__18079__i = 0, G__18079__a = new Array(arguments.length - 2);
          while (G__18079__i < G__18079__a.length) {
            G__18079__a[G__18079__i] = arguments[G__18079__i + 2];
            ++G__18079__i;
          }
          G__18078 = new cljs.core.IndexedSeq(G__18079__a, 0);
        }
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18078);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__18080__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__18081 = y;
            var G__18082 = cljs.core.first(more);
            var G__18083 = cljs.core.next(more);
            x = G__18081;
            y = G__18082;
            more = G__18083;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18080 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18084__i = 0, G__18084__a = new Array(arguments.length - 2);
        while (G__18084__i < G__18084__a.length) {
          G__18084__a[G__18084__i] = arguments[G__18084__i + 2];
          ++G__18084__i;
        }
        more = new cljs.core.IndexedSeq(G__18084__a, 0);
      }
      return G__18080__delegate.call(this, x, y, more);
    };
    G__18080.cljs$lang$maxFixedArity = 2;
    G__18080.cljs$lang$applyTo = function(arglist__18085) {
      var x = cljs.core.first(arglist__18085);
      arglist__18085 = cljs.core.next(arglist__18085);
      var y = cljs.core.first(arglist__18085);
      var more = cljs.core.rest(arglist__18085);
      return G__18080__delegate(x, y, more);
    };
    G__18080.cljs$core$IFn$_invoke$arity$variadic = G__18080__delegate;
    return G__18080;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        var G__18086 = null;
        if (arguments.length > 2) {
          var G__18087__i = 0, G__18087__a = new Array(arguments.length - 2);
          while (G__18087__i < G__18087__a.length) {
            G__18087__a[G__18087__i] = arguments[G__18087__i + 2];
            ++G__18087__i;
          }
          G__18086 = new cljs.core.IndexedSeq(G__18087__a, 0);
        }
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18086);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__18088__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__18089 = y;
            var G__18090 = cljs.core.first(more);
            var G__18091 = cljs.core.next(more);
            x = G__18089;
            y = G__18090;
            more = G__18091;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18088 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18092__i = 0, G__18092__a = new Array(arguments.length - 2);
        while (G__18092__i < G__18092__a.length) {
          G__18092__a[G__18092__i] = arguments[G__18092__i + 2];
          ++G__18092__i;
        }
        more = new cljs.core.IndexedSeq(G__18092__a, 0);
      }
      return G__18088__delegate.call(this, x, y, more);
    };
    G__18088.cljs$lang$maxFixedArity = 2;
    G__18088.cljs$lang$applyTo = function(arglist__18093) {
      var x = cljs.core.first(arglist__18093);
      arglist__18093 = cljs.core.next(arglist__18093);
      var y = cljs.core.first(arglist__18093);
      var more = cljs.core.rest(arglist__18093);
      return G__18088__delegate(x, y, more);
    };
    G__18088.cljs$core$IFn$_invoke$arity$variadic = G__18088__delegate;
    return G__18088;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        var G__18094 = null;
        if (arguments.length > 2) {
          var G__18095__i = 0, G__18095__a = new Array(arguments.length - 2);
          while (G__18095__i < G__18095__a.length) {
            G__18095__a[G__18095__i] = arguments[G__18095__i + 2];
            ++G__18095__i;
          }
          G__18094 = new cljs.core.IndexedSeq(G__18095__a, 0);
        }
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18094);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__18096__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__18097 = y;
            var G__18098 = cljs.core.first(more);
            var G__18099 = cljs.core.next(more);
            x = G__18097;
            y = G__18098;
            more = G__18099;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18096 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18100__i = 0, G__18100__a = new Array(arguments.length - 2);
        while (G__18100__i < G__18100__a.length) {
          G__18100__a[G__18100__i] = arguments[G__18100__i + 2];
          ++G__18100__i;
        }
        more = new cljs.core.IndexedSeq(G__18100__a, 0);
      }
      return G__18096__delegate.call(this, x, y, more);
    };
    G__18096.cljs$lang$maxFixedArity = 2;
    G__18096.cljs$lang$applyTo = function(arglist__18101) {
      var x = cljs.core.first(arglist__18101);
      arglist__18101 = cljs.core.next(arglist__18101);
      var y = cljs.core.first(arglist__18101);
      var more = cljs.core.rest(arglist__18101);
      return G__18096__delegate(x, y, more);
    };
    G__18096.cljs$core$IFn$_invoke$arity$variadic = G__18096__delegate;
    return G__18096;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        var G__18102 = null;
        if (arguments.length > 2) {
          var G__18103__i = 0, G__18103__a = new Array(arguments.length - 2);
          while (G__18103__i < G__18103__a.length) {
            G__18103__a[G__18103__i] = arguments[G__18103__i + 2];
            ++G__18103__i;
          }
          G__18102 = new cljs.core.IndexedSeq(G__18103__a, 0);
        }
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18102);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__18104__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__18105 = y;
            var G__18106 = cljs.core.first(more);
            var G__18107 = cljs.core.next(more);
            x = G__18105;
            y = G__18106;
            more = G__18107;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18104 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18108__i = 0, G__18108__a = new Array(arguments.length - 2);
        while (G__18108__i < G__18108__a.length) {
          G__18108__a[G__18108__i] = arguments[G__18108__i + 2];
          ++G__18108__i;
        }
        more = new cljs.core.IndexedSeq(G__18108__a, 0);
      }
      return G__18104__delegate.call(this, x, y, more);
    };
    G__18104.cljs$lang$maxFixedArity = 2;
    G__18104.cljs$lang$applyTo = function(arglist__18109) {
      var x = cljs.core.first(arglist__18109);
      arglist__18109 = cljs.core.next(arglist__18109);
      var y = cljs.core.first(arglist__18109);
      var more = cljs.core.rest(arglist__18109);
      return G__18104__delegate(x, y, more);
    };
    G__18104.cljs$core$IFn$_invoke$arity$variadic = G__18104__delegate;
    return G__18104;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        var G__18110 = null;
        if (arguments.length > 2) {
          var G__18111__i = 0, G__18111__a = new Array(arguments.length - 2);
          while (G__18111__i < G__18111__a.length) {
            G__18111__a[G__18111__i] = arguments[G__18111__i + 2];
            ++G__18111__i;
          }
          G__18110 = new cljs.core.IndexedSeq(G__18111__a, 0);
        }
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18110);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4298__auto__ = x;
    var y__4299__auto__ = y;
    return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
  };
  var max__3 = function() {
    var G__18112__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(max, function() {
        var x__4298__auto__ = x;
        var y__4299__auto__ = y;
        return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
      }(), more);
    };
    var G__18112 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18113__i = 0, G__18113__a = new Array(arguments.length - 2);
        while (G__18113__i < G__18113__a.length) {
          G__18113__a[G__18113__i] = arguments[G__18113__i + 2];
          ++G__18113__i;
        }
        more = new cljs.core.IndexedSeq(G__18113__a, 0);
      }
      return G__18112__delegate.call(this, x, y, more);
    };
    G__18112.cljs$lang$maxFixedArity = 2;
    G__18112.cljs$lang$applyTo = function(arglist__18114) {
      var x = cljs.core.first(arglist__18114);
      arglist__18114 = cljs.core.next(arglist__18114);
      var y = cljs.core.first(arglist__18114);
      var more = cljs.core.rest(arglist__18114);
      return G__18112__delegate(x, y, more);
    };
    G__18112.cljs$core$IFn$_invoke$arity$variadic = G__18112__delegate;
    return G__18112;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        var G__18115 = null;
        if (arguments.length > 2) {
          var G__18116__i = 0, G__18116__a = new Array(arguments.length - 2);
          while (G__18116__i < G__18116__a.length) {
            G__18116__a[G__18116__i] = arguments[G__18116__i + 2];
            ++G__18116__i;
          }
          G__18115 = new cljs.core.IndexedSeq(G__18116__a, 0);
        }
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18115);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4305__auto__ = x;
    var y__4306__auto__ = y;
    return x__4305__auto__ < y__4306__auto__ ? x__4305__auto__ : y__4306__auto__;
  };
  var min__3 = function() {
    var G__18117__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(min, function() {
        var x__4305__auto__ = x;
        var y__4306__auto__ = y;
        return x__4305__auto__ < y__4306__auto__ ? x__4305__auto__ : y__4306__auto__;
      }(), more);
    };
    var G__18117 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18118__i = 0, G__18118__a = new Array(arguments.length - 2);
        while (G__18118__i < G__18118__a.length) {
          G__18118__a[G__18118__i] = arguments[G__18118__i + 2];
          ++G__18118__i;
        }
        more = new cljs.core.IndexedSeq(G__18118__a, 0);
      }
      return G__18117__delegate.call(this, x, y, more);
    };
    G__18117.cljs$lang$maxFixedArity = 2;
    G__18117.cljs$lang$applyTo = function(arglist__18119) {
      var x = cljs.core.first(arglist__18119);
      arglist__18119 = cljs.core.next(arglist__18119);
      var y = cljs.core.first(arglist__18119);
      var more = cljs.core.rest(arglist__18119);
      return G__18117__delegate(x, y, more);
    };
    G__18117.cljs$core$IFn$_invoke$arity$variadic = G__18117__delegate;
    return G__18117;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        var G__18120 = null;
        if (arguments.length > 2) {
          var G__18121__i = 0, G__18121__a = new Array(arguments.length - 2);
          while (G__18121__i < G__18121__a.length) {
            G__18121__a[G__18121__i] = arguments[G__18121__i + 2];
            ++G__18121__i;
          }
          G__18120 = new cljs.core.IndexedSeq(G__18121__a, 0);
        }
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18120);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__18122__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add, x + y, more);
    };
    var G__18122 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18123__i = 0, G__18123__a = new Array(arguments.length - 2);
        while (G__18123__i < G__18123__a.length) {
          G__18123__a[G__18123__i] = arguments[G__18123__i + 2];
          ++G__18123__i;
        }
        more = new cljs.core.IndexedSeq(G__18123__a, 0);
      }
      return G__18122__delegate.call(this, x, y, more);
    };
    G__18122.cljs$lang$maxFixedArity = 2;
    G__18122.cljs$lang$applyTo = function(arglist__18124) {
      var x = cljs.core.first(arglist__18124);
      arglist__18124 = cljs.core.next(arglist__18124);
      var y = cljs.core.first(arglist__18124);
      var more = cljs.core.rest(arglist__18124);
      return G__18122__delegate(x, y, more);
    };
    G__18122.cljs$core$IFn$_invoke$arity$variadic = G__18122__delegate;
    return G__18122;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        var G__18125 = null;
        if (arguments.length > 2) {
          var G__18126__i = 0, G__18126__a = new Array(arguments.length - 2);
          while (G__18126__i < G__18126__a.length) {
            G__18126__a[G__18126__i] = arguments[G__18126__i + 2];
            ++G__18126__i;
          }
          G__18125 = new cljs.core.IndexedSeq(G__18126__a, 0);
        }
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18125);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__18127__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add_int, x + y, more);
    };
    var G__18127 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18128__i = 0, G__18128__a = new Array(arguments.length - 2);
        while (G__18128__i < G__18128__a.length) {
          G__18128__a[G__18128__i] = arguments[G__18128__i + 2];
          ++G__18128__i;
        }
        more = new cljs.core.IndexedSeq(G__18128__a, 0);
      }
      return G__18127__delegate.call(this, x, y, more);
    };
    G__18127.cljs$lang$maxFixedArity = 2;
    G__18127.cljs$lang$applyTo = function(arglist__18129) {
      var x = cljs.core.first(arglist__18129);
      arglist__18129 = cljs.core.next(arglist__18129);
      var y = cljs.core.first(arglist__18129);
      var more = cljs.core.rest(arglist__18129);
      return G__18127__delegate(x, y, more);
    };
    G__18127.cljs$core$IFn$_invoke$arity$variadic = G__18127__delegate;
    return G__18127;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        var G__18130 = null;
        if (arguments.length > 2) {
          var G__18131__i = 0, G__18131__a = new Array(arguments.length - 2);
          while (G__18131__i < G__18131__a.length) {
            G__18131__a[G__18131__i] = arguments[G__18131__i + 2];
            ++G__18131__i;
          }
          G__18130 = new cljs.core.IndexedSeq(G__18131__a, 0);
        }
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18130);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__18136__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_divide_int, unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__18136 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18137__i = 0, G__18137__a = new Array(arguments.length - 2);
        while (G__18137__i < G__18137__a.length) {
          G__18137__a[G__18137__i] = arguments[G__18137__i + 2];
          ++G__18137__i;
        }
        more = new cljs.core.IndexedSeq(G__18137__a, 0);
      }
      return G__18136__delegate.call(this, x, y, more);
    };
    G__18136.cljs$lang$maxFixedArity = 2;
    G__18136.cljs$lang$applyTo = function(arglist__18138) {
      var x = cljs.core.first(arglist__18138);
      arglist__18138 = cljs.core.next(arglist__18138);
      var y = cljs.core.first(arglist__18138);
      var more = cljs.core.rest(arglist__18138);
      return G__18136__delegate(x, y, more);
    };
    G__18136.cljs$core$IFn$_invoke$arity$variadic = G__18136__delegate;
    return G__18136;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        var G__18139 = null;
        if (arguments.length > 2) {
          var G__18140__i = 0, G__18140__a = new Array(arguments.length - 2);
          while (G__18140__i < G__18140__a.length) {
            G__18140__a[G__18140__i] = arguments[G__18140__i + 2];
            ++G__18140__i;
          }
          G__18139 = new cljs.core.IndexedSeq(G__18140__a, 0);
        }
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18139);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__18141__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply, x * y, more);
    };
    var G__18141 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18142__i = 0, G__18142__a = new Array(arguments.length - 2);
        while (G__18142__i < G__18142__a.length) {
          G__18142__a[G__18142__i] = arguments[G__18142__i + 2];
          ++G__18142__i;
        }
        more = new cljs.core.IndexedSeq(G__18142__a, 0);
      }
      return G__18141__delegate.call(this, x, y, more);
    };
    G__18141.cljs$lang$maxFixedArity = 2;
    G__18141.cljs$lang$applyTo = function(arglist__18143) {
      var x = cljs.core.first(arglist__18143);
      arglist__18143 = cljs.core.next(arglist__18143);
      var y = cljs.core.first(arglist__18143);
      var more = cljs.core.rest(arglist__18143);
      return G__18141__delegate(x, y, more);
    };
    G__18141.cljs$core$IFn$_invoke$arity$variadic = G__18141__delegate;
    return G__18141;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        var G__18144 = null;
        if (arguments.length > 2) {
          var G__18145__i = 0, G__18145__a = new Array(arguments.length - 2);
          while (G__18145__i < G__18145__a.length) {
            G__18145__a[G__18145__i] = arguments[G__18145__i + 2];
            ++G__18145__i;
          }
          G__18144 = new cljs.core.IndexedSeq(G__18145__a, 0);
        }
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18144);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__18146__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply_int, x * y, more);
    };
    var G__18146 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18147__i = 0, G__18147__a = new Array(arguments.length - 2);
        while (G__18147__i < G__18147__a.length) {
          G__18147__a[G__18147__i] = arguments[G__18147__i + 2];
          ++G__18147__i;
        }
        more = new cljs.core.IndexedSeq(G__18147__a, 0);
      }
      return G__18146__delegate.call(this, x, y, more);
    };
    G__18146.cljs$lang$maxFixedArity = 2;
    G__18146.cljs$lang$applyTo = function(arglist__18148) {
      var x = cljs.core.first(arglist__18148);
      arglist__18148 = cljs.core.next(arglist__18148);
      var y = cljs.core.first(arglist__18148);
      var more = cljs.core.rest(arglist__18148);
      return G__18146__delegate(x, y, more);
    };
    G__18146.cljs$core$IFn$_invoke$arity$variadic = G__18146__delegate;
    return G__18146;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__18149 = null;
        if (arguments.length > 2) {
          var G__18150__i = 0, G__18150__a = new Array(arguments.length - 2);
          while (G__18150__i < G__18150__a.length) {
            G__18150__a[G__18150__i] = arguments[G__18150__i + 2];
            ++G__18150__i;
          }
          G__18149 = new cljs.core.IndexedSeq(G__18150__a, 0);
        }
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18149);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  var G__18153 = x;
  var G__18154 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__18153, G__18154) : cljs.core.mod.call(null, G__18153, G__18154);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__18155__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract, x - y, more);
    };
    var G__18155 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18156__i = 0, G__18156__a = new Array(arguments.length - 2);
        while (G__18156__i < G__18156__a.length) {
          G__18156__a[G__18156__i] = arguments[G__18156__i + 2];
          ++G__18156__i;
        }
        more = new cljs.core.IndexedSeq(G__18156__a, 0);
      }
      return G__18155__delegate.call(this, x, y, more);
    };
    G__18155.cljs$lang$maxFixedArity = 2;
    G__18155.cljs$lang$applyTo = function(arglist__18157) {
      var x = cljs.core.first(arglist__18157);
      arglist__18157 = cljs.core.next(arglist__18157);
      var y = cljs.core.first(arglist__18157);
      var more = cljs.core.rest(arglist__18157);
      return G__18155__delegate(x, y, more);
    };
    G__18155.cljs$core$IFn$_invoke$arity$variadic = G__18155__delegate;
    return G__18155;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        var G__18158 = null;
        if (arguments.length > 2) {
          var G__18159__i = 0, G__18159__a = new Array(arguments.length - 2);
          while (G__18159__i < G__18159__a.length) {
            G__18159__a[G__18159__i] = arguments[G__18159__i + 2];
            ++G__18159__i;
          }
          G__18158 = new cljs.core.IndexedSeq(G__18159__a, 0);
        }
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18158);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__18160__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract_int, x - y, more);
    };
    var G__18160 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18161__i = 0, G__18161__a = new Array(arguments.length - 2);
        while (G__18161__i < G__18161__a.length) {
          G__18161__a[G__18161__i] = arguments[G__18161__i + 2];
          ++G__18161__i;
        }
        more = new cljs.core.IndexedSeq(G__18161__a, 0);
      }
      return G__18160__delegate.call(this, x, y, more);
    };
    G__18160.cljs$lang$maxFixedArity = 2;
    G__18160.cljs$lang$applyTo = function(arglist__18162) {
      var x = cljs.core.first(arglist__18162);
      arglist__18162 = cljs.core.next(arglist__18162);
      var y = cljs.core.first(arglist__18162);
      var more = cljs.core.rest(arglist__18162);
      return G__18160__delegate(x, y, more);
    };
    G__18160.cljs$core$IFn$_invoke$arity$variadic = G__18160__delegate;
    return G__18160;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__18163 = null;
        if (arguments.length > 2) {
          var G__18164__i = 0, G__18164__a = new Array(arguments.length - 2);
          while (G__18164__i < G__18164__a.length) {
            G__18164__a[G__18164__i] = arguments[G__18164__i + 2];
            ++G__18164__i;
          }
          G__18163 = new cljs.core.IndexedSeq(G__18164__a, 0);
        }
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18163);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    var G__18167 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__18167) : Math.floor.call(null, G__18167);
  } else {
    var G__18168 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__18168) : Math.ceil.call(null, G__18168);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var bit_xor = null;
  var bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var bit_xor__3 = function() {
    var G__18169__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_xor, x ^ y, more);
    };
    var G__18169 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18170__i = 0, G__18170__a = new Array(arguments.length - 2);
        while (G__18170__i < G__18170__a.length) {
          G__18170__a[G__18170__i] = arguments[G__18170__i + 2];
          ++G__18170__i;
        }
        more = new cljs.core.IndexedSeq(G__18170__a, 0);
      }
      return G__18169__delegate.call(this, x, y, more);
    };
    G__18169.cljs$lang$maxFixedArity = 2;
    G__18169.cljs$lang$applyTo = function(arglist__18171) {
      var x = cljs.core.first(arglist__18171);
      arglist__18171 = cljs.core.next(arglist__18171);
      var y = cljs.core.first(arglist__18171);
      var more = cljs.core.rest(arglist__18171);
      return G__18169__delegate(x, y, more);
    };
    G__18169.cljs$core$IFn$_invoke$arity$variadic = G__18169__delegate;
    return G__18169;
  }();
  bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_xor__2.call(this, x, y);
      default:
        var G__18172 = null;
        if (arguments.length > 2) {
          var G__18173__i = 0, G__18173__a = new Array(arguments.length - 2);
          while (G__18173__i < G__18173__a.length) {
            G__18173__a[G__18173__i] = arguments[G__18173__i + 2];
            ++G__18173__i;
          }
          G__18172 = new cljs.core.IndexedSeq(G__18173__a, 0);
        }
        return bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18172);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_xor.cljs$lang$maxFixedArity = 2;
  bit_xor.cljs$lang$applyTo = bit_xor__3.cljs$lang$applyTo;
  bit_xor.cljs$core$IFn$_invoke$arity$2 = bit_xor__2;
  bit_xor.cljs$core$IFn$_invoke$arity$variadic = bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_xor;
}();
cljs.core.bit_and = function() {
  var bit_and = null;
  var bit_and__2 = function(x, y) {
    return x & y;
  };
  var bit_and__3 = function() {
    var G__18174__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and, x & y, more);
    };
    var G__18174 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18175__i = 0, G__18175__a = new Array(arguments.length - 2);
        while (G__18175__i < G__18175__a.length) {
          G__18175__a[G__18175__i] = arguments[G__18175__i + 2];
          ++G__18175__i;
        }
        more = new cljs.core.IndexedSeq(G__18175__a, 0);
      }
      return G__18174__delegate.call(this, x, y, more);
    };
    G__18174.cljs$lang$maxFixedArity = 2;
    G__18174.cljs$lang$applyTo = function(arglist__18176) {
      var x = cljs.core.first(arglist__18176);
      arglist__18176 = cljs.core.next(arglist__18176);
      var y = cljs.core.first(arglist__18176);
      var more = cljs.core.rest(arglist__18176);
      return G__18174__delegate(x, y, more);
    };
    G__18174.cljs$core$IFn$_invoke$arity$variadic = G__18174__delegate;
    return G__18174;
  }();
  bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and__2.call(this, x, y);
      default:
        var G__18177 = null;
        if (arguments.length > 2) {
          var G__18178__i = 0, G__18178__a = new Array(arguments.length - 2);
          while (G__18178__i < G__18178__a.length) {
            G__18178__a[G__18178__i] = arguments[G__18178__i + 2];
            ++G__18178__i;
          }
          G__18177 = new cljs.core.IndexedSeq(G__18178__a, 0);
        }
        return bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18177);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and.cljs$lang$maxFixedArity = 2;
  bit_and.cljs$lang$applyTo = bit_and__3.cljs$lang$applyTo;
  bit_and.cljs$core$IFn$_invoke$arity$2 = bit_and__2;
  bit_and.cljs$core$IFn$_invoke$arity$variadic = bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and;
}();
cljs.core.bit_or = function() {
  var bit_or = null;
  var bit_or__2 = function(x, y) {
    return x | y;
  };
  var bit_or__3 = function() {
    var G__18179__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_or, x | y, more);
    };
    var G__18179 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18180__i = 0, G__18180__a = new Array(arguments.length - 2);
        while (G__18180__i < G__18180__a.length) {
          G__18180__a[G__18180__i] = arguments[G__18180__i + 2];
          ++G__18180__i;
        }
        more = new cljs.core.IndexedSeq(G__18180__a, 0);
      }
      return G__18179__delegate.call(this, x, y, more);
    };
    G__18179.cljs$lang$maxFixedArity = 2;
    G__18179.cljs$lang$applyTo = function(arglist__18181) {
      var x = cljs.core.first(arglist__18181);
      arglist__18181 = cljs.core.next(arglist__18181);
      var y = cljs.core.first(arglist__18181);
      var more = cljs.core.rest(arglist__18181);
      return G__18179__delegate(x, y, more);
    };
    G__18179.cljs$core$IFn$_invoke$arity$variadic = G__18179__delegate;
    return G__18179;
  }();
  bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_or__2.call(this, x, y);
      default:
        var G__18182 = null;
        if (arguments.length > 2) {
          var G__18183__i = 0, G__18183__a = new Array(arguments.length - 2);
          while (G__18183__i < G__18183__a.length) {
            G__18183__a[G__18183__i] = arguments[G__18183__i + 2];
            ++G__18183__i;
          }
          G__18182 = new cljs.core.IndexedSeq(G__18183__a, 0);
        }
        return bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18182);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_or.cljs$lang$maxFixedArity = 2;
  bit_or.cljs$lang$applyTo = bit_or__3.cljs$lang$applyTo;
  bit_or.cljs$core$IFn$_invoke$arity$2 = bit_or__2;
  bit_or.cljs$core$IFn$_invoke$arity$variadic = bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_or;
}();
cljs.core.bit_and_not = function() {
  var bit_and_not = null;
  var bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var bit_and_not__3 = function() {
    var G__18184__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and_not, x & ~y, more);
    };
    var G__18184 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18185__i = 0, G__18185__a = new Array(arguments.length - 2);
        while (G__18185__i < G__18185__a.length) {
          G__18185__a[G__18185__i] = arguments[G__18185__i + 2];
          ++G__18185__i;
        }
        more = new cljs.core.IndexedSeq(G__18185__a, 0);
      }
      return G__18184__delegate.call(this, x, y, more);
    };
    G__18184.cljs$lang$maxFixedArity = 2;
    G__18184.cljs$lang$applyTo = function(arglist__18186) {
      var x = cljs.core.first(arglist__18186);
      arglist__18186 = cljs.core.next(arglist__18186);
      var y = cljs.core.first(arglist__18186);
      var more = cljs.core.rest(arglist__18186);
      return G__18184__delegate(x, y, more);
    };
    G__18184.cljs$core$IFn$_invoke$arity$variadic = G__18184__delegate;
    return G__18184;
  }();
  bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and_not__2.call(this, x, y);
      default:
        var G__18187 = null;
        if (arguments.length > 2) {
          var G__18188__i = 0, G__18188__a = new Array(arguments.length - 2);
          while (G__18188__i < G__18188__a.length) {
            G__18188__a[G__18188__i] = arguments[G__18188__i + 2];
            ++G__18188__i;
          }
          G__18187 = new cljs.core.IndexedSeq(G__18188__a, 0);
        }
        return bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18187);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and_not.cljs$lang$maxFixedArity = 2;
  bit_and_not.cljs$lang$applyTo = bit_and_not__3.cljs$lang$applyTo;
  bit_and_not.cljs$core$IFn$_invoke$arity$2 = bit_and_not__2;
  bit_and_not.cljs$core$IFn$_invoke$arity$variadic = bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and_not;
}();
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__18193__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__18194 = y;
            var G__18195 = cljs.core.first(more);
            var G__18196 = cljs.core.next(more);
            x = G__18194;
            y = G__18195;
            more = G__18196;
            continue;
          } else {
            return _EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18193 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18197__i = 0, G__18197__a = new Array(arguments.length - 2);
        while (G__18197__i < G__18197__a.length) {
          G__18197__a[G__18197__i] = arguments[G__18197__i + 2];
          ++G__18197__i;
        }
        more = new cljs.core.IndexedSeq(G__18197__a, 0);
      }
      return G__18193__delegate.call(this, x, y, more);
    };
    G__18193.cljs$lang$maxFixedArity = 2;
    G__18193.cljs$lang$applyTo = function(arglist__18198) {
      var x = cljs.core.first(arglist__18198);
      arglist__18198 = cljs.core.next(arglist__18198);
      var y = cljs.core.first(arglist__18198);
      var more = cljs.core.rest(arglist__18198);
      return G__18193__delegate(x, y, more);
    };
    G__18193.cljs$core$IFn$_invoke$arity$variadic = G__18193__delegate;
    return G__18193;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        var G__18199 = null;
        if (arguments.length > 2) {
          var G__18200__i = 0, G__18200__a = new Array(arguments.length - 2);
          while (G__18200__i < G__18200__a.length) {
            G__18200__a[G__18200__i] = arguments[G__18200__i + 2];
            ++G__18200__i;
          }
          G__18199 = new cljs.core.IndexedSeq(G__18200__a, 0);
        }
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18199);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__18201 = n__$1 - 1;
      var G__18202 = cljs.core.next(xs);
      n__$1 = G__18201;
      xs = G__18202;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__18206 = x;
      return goog.string.buildString(G__18206);
    }
  };
  var str__2 = function() {
    var G__18207__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__18208 = sb.append(str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__18209 = cljs.core.next(more);
          sb = G__18208;
          more = G__18209;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__18207 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__18210__i = 0, G__18210__a = new Array(arguments.length - 1);
        while (G__18210__i < G__18210__a.length) {
          G__18210__a[G__18210__i] = arguments[G__18210__i + 1];
          ++G__18210__i;
        }
        ys = new cljs.core.IndexedSeq(G__18210__a, 0);
      }
      return G__18207__delegate.call(this, x, ys);
    };
    G__18207.cljs$lang$maxFixedArity = 1;
    G__18207.cljs$lang$applyTo = function(arglist__18211) {
      var x = cljs.core.first(arglist__18211);
      var ys = cljs.core.rest(arglist__18211);
      return G__18207__delegate(x, ys);
    };
    G__18207.cljs$core$IFn$_invoke$arity$variadic = G__18207__delegate;
    return G__18207;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        var G__18212 = null;
        if (arguments.length > 1) {
          var G__18213__i = 0, G__18213__a = new Array(arguments.length - 1);
          while (G__18213__i < G__18213__a.length) {
            G__18213__a[G__18213__i] = arguments[G__18213__i + 1];
            ++G__18213__i;
          }
          G__18212 = new cljs.core.IndexedSeq(G__18213__a, 0);
        }
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__18212);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__18214 = cljs.core.next(xs);
            var G__18215 = cljs.core.next(ys);
            xs = G__18214;
            ys = G__18215;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__18216 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__18217 = cljs.core.next(s);
        res = G__18216;
        s = G__18217;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__18222 = (h + (cljs.core.hash(function() {
        var G__18220 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18220) : cljs.core.key.call(null, G__18220);
      }()) ^ cljs.core.hash(function() {
        var G__18221 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18221) : cljs.core.val.call(null, G__18221);
      }()))) % 4503599627370496;
      var G__18223 = cljs.core.next(s);
      h = G__18222;
      s = G__18223;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__18224 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__18225 = cljs.core.next(s__$1);
      h = G__18224;
      s__$1 = G__18225;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__18236_18246 = cljs.core.seq(fn_map);
  var chunk__18237_18247 = null;
  var count__18238_18248 = 0;
  var i__18239_18249 = 0;
  while (true) {
    if (i__18239_18249 < count__18238_18248) {
      var vec__18240_18250 = chunk__18237_18247.cljs$core$IIndexed$_nth$arity$2(null, i__18239_18249);
      var key_name_18251 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18240_18250, 0, null);
      var f_18252 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18240_18250, 1, null);
      var str_name_18253 = function() {
        var G__18241 = key_name_18251;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__18241) : cljs.core.name.call(null, G__18241);
      }();
      obj[str_name_18253] = f_18252;
      var G__18254 = seq__18236_18246;
      var G__18255 = chunk__18237_18247;
      var G__18256 = count__18238_18248;
      var G__18257 = i__18239_18249 + 1;
      seq__18236_18246 = G__18254;
      chunk__18237_18247 = G__18255;
      count__18238_18248 = G__18256;
      i__18239_18249 = G__18257;
      continue;
    } else {
      var temp__4126__auto___18258 = cljs.core.seq(seq__18236_18246);
      if (temp__4126__auto___18258) {
        var seq__18236_18259__$1 = temp__4126__auto___18258;
        if (cljs.core.chunked_seq_QMARK_(seq__18236_18259__$1)) {
          var c__4768__auto___18260 = function() {
            var G__18242 = seq__18236_18259__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__18242) : cljs.core.chunk_first.call(null, G__18242);
          }();
          var G__18261 = function() {
            var G__18243 = seq__18236_18259__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__18243) : cljs.core.chunk_rest.call(null, G__18243);
          }();
          var G__18262 = c__4768__auto___18260;
          var G__18263 = cljs.core.count(c__4768__auto___18260);
          var G__18264 = 0;
          seq__18236_18246 = G__18261;
          chunk__18237_18247 = G__18262;
          count__18238_18248 = G__18263;
          i__18239_18249 = G__18264;
          continue;
        } else {
          var vec__18244_18265 = cljs.core.first(seq__18236_18259__$1);
          var key_name_18266 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18244_18265, 0, null);
          var f_18267 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18244_18265, 1, null);
          var str_name_18268 = function() {
            var G__18245 = key_name_18266;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__18245) : cljs.core.name.call(null, G__18245);
          }();
          obj[str_name_18268] = f_18267;
          var G__18269 = cljs.core.next(seq__18236_18259__$1);
          var G__18270 = null;
          var G__18271 = 0;
          var G__18272 = 0;
          seq__18236_18246 = G__18269;
          chunk__18237_18247 = G__18270;
          count__18238_18248 = G__18271;
          i__18239_18249 = G__18272;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__18274 = coll;
  if (G__18274) {
    var bit__4662__auto__ = G__18274.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4662__auto__ || G__18274.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__18274.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__18274);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__18274);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__18275 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__18275;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__18276 = i - 1;
        var G__18277 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__18276;
        r = G__18277;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__18278__i = 0, G__18278__a = new Array(arguments.length - 0);
      while (G__18278__i < G__18278__a.length) {
        G__18278__a[G__18278__i] = arguments[G__18278__i + 0];
        ++G__18278__i;
      }
      xs = new cljs.core.IndexedSeq(G__18278__a, 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__18279) {
    var xs = cljs.core.seq(arglist__18279);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3981__auto__ = coll == null;
    if (or__3981__auto__) {
      return or__3981__auto__;
    } else {
      var G__18283 = coll;
      if (G__18283) {
        var bit__4655__auto__ = G__18283.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__18283.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__18285 = x;
  if (G__18285) {
    var bit__4662__auto__ = G__18285.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4662__auto__ || G__18285.cljs$core$IList$) {
      return true;
    } else {
      if (!G__18285.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__18285);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__18285);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = cljs.core.not(a.ns);
      if (and__3969__auto__) {
        return b.ns;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__18292 = a.ns;
            var G__18293 = b.ns;
            return goog.array.defaultCompare(G__18292, G__18293);
          }();
          if (0 === nsc) {
            var G__18294 = a.name;
            var G__18295 = b.name;
            return goog.array.defaultCompare(G__18294, G__18295);
          } else {
            return nsc;
          }
        }
      } else {
        var G__18296 = a.name;
        var G__18297 = b.name;
        return goog.array.defaultCompare(G__18296, G__18297);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4402__auto__ = self__._hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__18299 = null;
  var G__18299__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__18299__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__18299 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18299__2.call(this, self__, coll);
      case 3:
        return G__18299__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18299.cljs$core$IFn$_invoke$arity$2 = G__18299__2;
  G__18299.cljs$core$IFn$_invoke$arity$3 = G__18299__3;
  return G__18299;
}();
cljs.core.Keyword.prototype.apply = function(self__, args18298) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18298)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__18301 = x;
    if (G__18301) {
      var bit__4655__auto__ = G__18301.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4655__auto__ || G__18301.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__18303 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__18303) : cljs.core.name.call(null, G__18303);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__18304 = ls.sval();
        ls = G__18304;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__18306 = s;
    if (G__18306) {
      var bit__4655__auto__ = G__18306.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4655__auto__ || G__18306.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__18307 = cljs.core.next(s__$1);
      s__$1 = G__18307;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_18308 = 0;
  var xs_18309 = cljs.core.seq(coll);
  while (true) {
    if (xs_18309) {
      ret[i_18308] = cljs.core.to_array(cljs.core.first(xs_18309));
      var G__18310 = i_18308 + 1;
      var G__18311 = cljs.core.next(xs_18309);
      i_18308 = G__18310;
      xs_18309 = G__18311;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__18314 = i + 1;
          var G__18315 = cljs.core.next(s__$1);
          i = G__18314;
          s__$1 = G__18315;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___18316 = size;
      var i_18317 = 0;
      while (true) {
        if (i_18317 < n__4868__auto___18316) {
          a[i_18317] = init_val_or_seq;
          var G__18318 = i_18317 + 1;
          i_18317 = G__18318;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__18321 = i + 1;
          var G__18322 = cljs.core.next(s__$1);
          i = G__18321;
          s__$1 = G__18322;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___18323 = size;
      var i_18324 = 0;
      while (true) {
        if (i_18324 < n__4868__auto___18323) {
          a[i_18324] = init_val_or_seq;
          var G__18325 = i_18324 + 1;
          i_18324 = G__18325;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__18328 = i + 1;
          var G__18329 = cljs.core.next(s__$1);
          i = G__18328;
          s__$1 = G__18329;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___18330 = size;
      var i_18331 = 0;
      while (true) {
        if (i_18331 < n__4868__auto___18330) {
          a[i_18331] = init_val_or_seq;
          var G__18332 = i_18331 + 1;
          i_18331 = G__18332;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__18335 = i + 1;
          var G__18336 = cljs.core.next(s__$1);
          i = G__18335;
          s__$1 = G__18336;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___18337 = size;
      var i_18338 = 0;
      while (true) {
        if (i_18338 < n__4868__auto___18337) {
          a[i_18338] = init_val_or_seq;
          var G__18339 = i_18338 + 1;
          i_18338 = G__18339;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__18340 = cljs.core.next(s__$1);
        var G__18341 = i - 1;
        var G__18342 = sum + 1;
        s__$1 = G__18340;
        i = G__18341;
        sum = G__18342;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__18362__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__18362 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__18363__i = 0, G__18363__a = new Array(arguments.length - 2);
        while (G__18363__i < G__18363__a.length) {
          G__18363__a[G__18363__i] = arguments[G__18363__i + 2];
          ++G__18363__i;
        }
        zs = new cljs.core.IndexedSeq(G__18363__a, 0);
      }
      return G__18362__delegate.call(this, x, y, zs);
    };
    G__18362.cljs$lang$maxFixedArity = 2;
    G__18362.cljs$lang$applyTo = function(arglist__18364) {
      var x = cljs.core.first(arglist__18364);
      arglist__18364 = cljs.core.next(arglist__18364);
      var y = cljs.core.first(arglist__18364);
      var zs = cljs.core.rest(arglist__18364);
      return G__18362__delegate(x, y, zs);
    };
    G__18362.cljs$core$IFn$_invoke$arity$variadic = G__18362__delegate;
    return G__18362;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        var G__18365 = null;
        if (arguments.length > 2) {
          var G__18366__i = 0, G__18366__a = new Array(arguments.length - 2);
          while (G__18366__i < G__18366__a.length) {
            G__18366__a[G__18366__i] = arguments[G__18366__i + 2];
            ++G__18366__i;
          }
          G__18365 = new cljs.core.IndexedSeq(G__18366__a, 0);
        }
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18365);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var list_STAR___5 = function() {
    var G__18367__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__18367 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__18368__i = 0, G__18368__a = new Array(arguments.length - 4);
        while (G__18368__i < G__18368__a.length) {
          G__18368__a[G__18368__i] = arguments[G__18368__i + 4];
          ++G__18368__i;
        }
        more = new cljs.core.IndexedSeq(G__18368__a, 0);
      }
      return G__18367__delegate.call(this, a, b, c, d, more);
    };
    G__18367.cljs$lang$maxFixedArity = 4;
    G__18367.cljs$lang$applyTo = function(arglist__18369) {
      var a = cljs.core.first(arglist__18369);
      arglist__18369 = cljs.core.next(arglist__18369);
      var b = cljs.core.first(arglist__18369);
      arglist__18369 = cljs.core.next(arglist__18369);
      var c = cljs.core.first(arglist__18369);
      arglist__18369 = cljs.core.next(arglist__18369);
      var d = cljs.core.first(arglist__18369);
      var more = cljs.core.rest(arglist__18369);
      return G__18367__delegate(a, b, c, d, more);
    };
    G__18367.cljs$core$IFn$_invoke$arity$variadic = G__18367__delegate;
    return G__18367;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        var G__18370 = null;
        if (arguments.length > 4) {
          var G__18371__i = 0, G__18371__a = new Array(arguments.length - 4);
          while (G__18371__i < G__18371__a.length) {
            G__18371__a[G__18371__i] = arguments[G__18371__i + 4];
            ++G__18371__i;
          }
          G__18370 = new cljs.core.IndexedSeq(G__18371__a, 0);
        }
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__18370);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__18372__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__18373 = ntcoll;
          var G__18374 = cljs.core.first(vals);
          var G__18375 = cljs.core.next(vals);
          tcoll = G__18373;
          val = G__18374;
          vals = G__18375;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18372 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__18376__i = 0, G__18376__a = new Array(arguments.length - 2);
        while (G__18376__i < G__18376__a.length) {
          G__18376__a[G__18376__i] = arguments[G__18376__i + 2];
          ++G__18376__i;
        }
        vals = new cljs.core.IndexedSeq(G__18376__a, 0);
      }
      return G__18372__delegate.call(this, tcoll, val, vals);
    };
    G__18372.cljs$lang$maxFixedArity = 2;
    G__18372.cljs$lang$applyTo = function(arglist__18377) {
      var tcoll = cljs.core.first(arglist__18377);
      arglist__18377 = cljs.core.next(arglist__18377);
      var val = cljs.core.first(arglist__18377);
      var vals = cljs.core.rest(arglist__18377);
      return G__18372__delegate(tcoll, val, vals);
    };
    G__18372.cljs$core$IFn$_invoke$arity$variadic = G__18372__delegate;
    return G__18372;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        var G__18378 = null;
        if (arguments.length > 2) {
          var G__18379__i = 0, G__18379__a = new Array(arguments.length - 2);
          while (G__18379__i < G__18379__a.length) {
            G__18379__a[G__18379__i] = arguments[G__18379__i + 2];
            ++G__18379__i;
          }
          G__18378 = new cljs.core.IndexedSeq(G__18379__a, 0);
        }
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__18378);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__18380__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__18381 = ntcoll;
          var G__18382 = cljs.core.first(kvs);
          var G__18383 = cljs.core.second(kvs);
          var G__18384 = cljs.core.nnext(kvs);
          tcoll = G__18381;
          key = G__18382;
          val = G__18383;
          kvs = G__18384;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18380 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__18385__i = 0, G__18385__a = new Array(arguments.length - 3);
        while (G__18385__i < G__18385__a.length) {
          G__18385__a[G__18385__i] = arguments[G__18385__i + 3];
          ++G__18385__i;
        }
        kvs = new cljs.core.IndexedSeq(G__18385__a, 0);
      }
      return G__18380__delegate.call(this, tcoll, key, val, kvs);
    };
    G__18380.cljs$lang$maxFixedArity = 3;
    G__18380.cljs$lang$applyTo = function(arglist__18386) {
      var tcoll = cljs.core.first(arglist__18386);
      arglist__18386 = cljs.core.next(arglist__18386);
      var key = cljs.core.first(arglist__18386);
      arglist__18386 = cljs.core.next(arglist__18386);
      var val = cljs.core.first(arglist__18386);
      var kvs = cljs.core.rest(arglist__18386);
      return G__18380__delegate(tcoll, key, val, kvs);
    };
    G__18380.cljs$core$IFn$_invoke$arity$variadic = G__18380__delegate;
    return G__18380;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__18387 = null;
        if (arguments.length > 3) {
          var G__18388__i = 0, G__18388__a = new Array(arguments.length - 3);
          while (G__18388__i < G__18388__a.length) {
            G__18388__a[G__18388__i] = arguments[G__18388__i + 3];
            ++G__18388__i;
          }
          G__18387 = new cljs.core.IndexedSeq(G__18388__a, 0);
        }
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__18387);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__18389__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__18390 = ntcoll;
          var G__18391 = cljs.core.first(ks);
          var G__18392 = cljs.core.next(ks);
          tcoll = G__18390;
          key = G__18391;
          ks = G__18392;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18389 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__18393__i = 0, G__18393__a = new Array(arguments.length - 2);
        while (G__18393__i < G__18393__a.length) {
          G__18393__a[G__18393__i] = arguments[G__18393__i + 2];
          ++G__18393__i;
        }
        ks = new cljs.core.IndexedSeq(G__18393__a, 0);
      }
      return G__18389__delegate.call(this, tcoll, key, ks);
    };
    G__18389.cljs$lang$maxFixedArity = 2;
    G__18389.cljs$lang$applyTo = function(arglist__18394) {
      var tcoll = cljs.core.first(arglist__18394);
      arglist__18394 = cljs.core.next(arglist__18394);
      var key = cljs.core.first(arglist__18394);
      var ks = cljs.core.rest(arglist__18394);
      return G__18389__delegate(tcoll, key, ks);
    };
    G__18389.cljs$core$IFn$_invoke$arity$variadic = G__18389__delegate;
    return G__18389;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__18395 = null;
        if (arguments.length > 2) {
          var G__18396__i = 0, G__18396__a = new Array(arguments.length - 2);
          while (G__18396__i < G__18396__a.length) {
            G__18396__a[G__18396__i] = arguments[G__18396__i + 2];
            ++G__18396__i;
          }
          G__18395 = new cljs.core.IndexedSeq(G__18396__a, 0);
        }
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__18395);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__18397__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__18398 = ntcoll;
          var G__18399 = cljs.core.first(vals);
          var G__18400 = cljs.core.next(vals);
          tcoll = G__18398;
          val = G__18399;
          vals = G__18400;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18397 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__18401__i = 0, G__18401__a = new Array(arguments.length - 2);
        while (G__18401__i < G__18401__a.length) {
          G__18401__a[G__18401__i] = arguments[G__18401__i + 2];
          ++G__18401__i;
        }
        vals = new cljs.core.IndexedSeq(G__18401__a, 0);
      }
      return G__18397__delegate.call(this, tcoll, val, vals);
    };
    G__18397.cljs$lang$maxFixedArity = 2;
    G__18397.cljs$lang$applyTo = function(arglist__18402) {
      var tcoll = cljs.core.first(arglist__18402);
      arglist__18402 = cljs.core.next(arglist__18402);
      var val = cljs.core.first(arglist__18402);
      var vals = cljs.core.rest(arglist__18402);
      return G__18397__delegate(tcoll, val, vals);
    };
    G__18397.cljs$core$IFn$_invoke$arity$variadic = G__18397__delegate;
    return G__18397;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        var G__18403 = null;
        if (arguments.length > 2) {
          var G__18404__i = 0, G__18404__a = new Array(arguments.length - 2);
          while (G__18404__i < G__18404__a.length) {
            G__18404__a[G__18404__i] = arguments[G__18404__i + 2];
            ++G__18404__i;
          }
          G__18403 = new cljs.core.IndexedSeq(G__18404__a, 0);
        }
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__18403);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a4912 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4912);
      } else {
        var G__18615 = a4912;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18615) : f.call(null, G__18615);
      }
    } else {
      var b4913 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4912, b4913);
        } else {
          var G__18616 = a4912;
          var G__18617 = b4913;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18616, G__18617) : f.call(null, G__18616, G__18617);
        }
      } else {
        var c4914 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4912, b4913, c4914);
          } else {
            var G__18618 = a4912;
            var G__18619 = b4913;
            var G__18620 = c4914;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18618, G__18619, G__18620) : f.call(null, G__18618, G__18619, G__18620);
          }
        } else {
          var d4915 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4912, b4913, c4914, d4915);
            } else {
              var G__18621 = a4912;
              var G__18622 = b4913;
              var G__18623 = c4914;
              var G__18624 = d4915;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18621, G__18622, G__18623, G__18624) : f.call(null, G__18621, G__18622, G__18623, G__18624);
            }
          } else {
            var e4916 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4912, b4913, c4914, d4915, e4916);
              } else {
                var G__18625 = a4912;
                var G__18626 = b4913;
                var G__18627 = c4914;
                var G__18628 = d4915;
                var G__18629 = e4916;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__18625, G__18626, G__18627, G__18628, G__18629) : f.call(null, G__18625, G__18626, G__18627, G__18628, G__18629);
              }
            } else {
              var f4917 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4912, b4913, c4914, d4915, e4916, f4917);
                } else {
                  var G__18630 = a4912;
                  var G__18631 = b4913;
                  var G__18632 = c4914;
                  var G__18633 = d4915;
                  var G__18634 = e4916;
                  var G__18635 = f4917;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__18630, G__18631, G__18632, G__18633, G__18634, G__18635) : f.call(null, G__18630, G__18631, G__18632, G__18633, G__18634, G__18635);
                }
              } else {
                var g4918 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4912, b4913, c4914, d4915, e4916, f4917, g4918);
                  } else {
                    var G__18636 = a4912;
                    var G__18637 = b4913;
                    var G__18638 = c4914;
                    var G__18639 = d4915;
                    var G__18640 = e4916;
                    var G__18641 = f4917;
                    var G__18642 = g4918;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__18636, G__18637, G__18638, G__18639, G__18640, G__18641, G__18642) : f.call(null, G__18636, G__18637, G__18638, G__18639, G__18640, G__18641, G__18642);
                  }
                } else {
                  var h4919 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919);
                    } else {
                      var G__18643 = a4912;
                      var G__18644 = b4913;
                      var G__18645 = c4914;
                      var G__18646 = d4915;
                      var G__18647 = e4916;
                      var G__18648 = f4917;
                      var G__18649 = g4918;
                      var G__18650 = h4919;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__18643, G__18644, G__18645, G__18646, G__18647, G__18648, G__18649, G__18650) : f.call(null, G__18643, G__18644, G__18645, G__18646, G__18647, G__18648, G__18649, G__18650);
                    }
                  } else {
                    var i4920 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920);
                      } else {
                        var G__18651 = a4912;
                        var G__18652 = b4913;
                        var G__18653 = c4914;
                        var G__18654 = d4915;
                        var G__18655 = e4916;
                        var G__18656 = f4917;
                        var G__18657 = g4918;
                        var G__18658 = h4919;
                        var G__18659 = i4920;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__18651, G__18652, G__18653, G__18654, G__18655, G__18656, G__18657, G__18658, G__18659) : f.call(null, G__18651, G__18652, G__18653, G__18654, G__18655, G__18656, G__18657, G__18658, G__18659);
                      }
                    } else {
                      var j4921 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921);
                        } else {
                          var G__18660 = a4912;
                          var G__18661 = b4913;
                          var G__18662 = c4914;
                          var G__18663 = d4915;
                          var G__18664 = e4916;
                          var G__18665 = f4917;
                          var G__18666 = g4918;
                          var G__18667 = h4919;
                          var G__18668 = i4920;
                          var G__18669 = j4921;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__18660, G__18661, G__18662, G__18663, G__18664, G__18665, G__18666, G__18667, G__18668, G__18669) : f.call(null, G__18660, G__18661, G__18662, G__18663, G__18664, G__18665, G__18666, G__18667, G__18668, G__18669);
                        }
                      } else {
                        var k4922 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922);
                          } else {
                            var G__18670 = a4912;
                            var G__18671 = b4913;
                            var G__18672 = c4914;
                            var G__18673 = d4915;
                            var G__18674 = e4916;
                            var G__18675 = f4917;
                            var G__18676 = g4918;
                            var G__18677 = h4919;
                            var G__18678 = i4920;
                            var G__18679 = j4921;
                            var G__18680 = k4922;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__18670, G__18671, G__18672, G__18673, G__18674, G__18675, G__18676, G__18677, G__18678, G__18679, G__18680) : f.call(null, G__18670, G__18671, G__18672, G__18673, G__18674, G__18675, G__18676, G__18677, G__18678, G__18679, G__18680);
                          }
                        } else {
                          var l4923 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923);
                            } else {
                              var G__18681 = a4912;
                              var G__18682 = b4913;
                              var G__18683 = c4914;
                              var G__18684 = d4915;
                              var G__18685 = e4916;
                              var G__18686 = f4917;
                              var G__18687 = g4918;
                              var G__18688 = h4919;
                              var G__18689 = i4920;
                              var G__18690 = j4921;
                              var G__18691 = k4922;
                              var G__18692 = l4923;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__18681, G__18682, G__18683, G__18684, G__18685, G__18686, G__18687, G__18688, G__18689, G__18690, G__18691, G__18692) : f.call(null, G__18681, G__18682, G__18683, G__18684, G__18685, G__18686, G__18687, G__18688, G__18689, G__18690, G__18691, G__18692);
                            }
                          } else {
                            var m4924 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924);
                              } else {
                                var G__18693 = a4912;
                                var G__18694 = b4913;
                                var G__18695 = c4914;
                                var G__18696 = d4915;
                                var G__18697 = e4916;
                                var G__18698 = f4917;
                                var G__18699 = g4918;
                                var G__18700 = h4919;
                                var G__18701 = i4920;
                                var G__18702 = j4921;
                                var G__18703 = k4922;
                                var G__18704 = l4923;
                                var G__18705 = m4924;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__18693, G__18694, G__18695, G__18696, G__18697, G__18698, G__18699, G__18700, G__18701, G__18702, G__18703, G__18704, G__18705) : f.call(null, G__18693, G__18694, G__18695, G__18696, G__18697, G__18698, G__18699, G__18700, G__18701, G__18702, G__18703, G__18704, G__18705);
                              }
                            } else {
                              var n4925 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925);
                                } else {
                                  var G__18706 = a4912;
                                  var G__18707 = b4913;
                                  var G__18708 = c4914;
                                  var G__18709 = d4915;
                                  var G__18710 = e4916;
                                  var G__18711 = f4917;
                                  var G__18712 = g4918;
                                  var G__18713 = h4919;
                                  var G__18714 = i4920;
                                  var G__18715 = j4921;
                                  var G__18716 = k4922;
                                  var G__18717 = l4923;
                                  var G__18718 = m4924;
                                  var G__18719 = n4925;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__18706, G__18707, G__18708, G__18709, G__18710, G__18711, G__18712, G__18713, G__18714, G__18715, G__18716, G__18717, G__18718, G__18719) : f.call(null, G__18706, G__18707, G__18708, G__18709, G__18710, G__18711, G__18712, G__18713, G__18714, G__18715, G__18716, G__18717, G__18718, G__18719);
                                }
                              } else {
                                var o4926 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926);
                                  } else {
                                    var G__18720 = a4912;
                                    var G__18721 = b4913;
                                    var G__18722 = c4914;
                                    var G__18723 = d4915;
                                    var G__18724 = e4916;
                                    var G__18725 = f4917;
                                    var G__18726 = g4918;
                                    var G__18727 = h4919;
                                    var G__18728 = i4920;
                                    var G__18729 = j4921;
                                    var G__18730 = k4922;
                                    var G__18731 = l4923;
                                    var G__18732 = m4924;
                                    var G__18733 = n4925;
                                    var G__18734 = o4926;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__18720, G__18721, G__18722, G__18723, G__18724, G__18725, G__18726, G__18727, G__18728, G__18729, G__18730, G__18731, G__18732, G__18733, G__18734) : f.call(null, G__18720, G__18721, G__18722, G__18723, G__18724, G__18725, G__18726, G__18727, G__18728, G__18729, G__18730, G__18731, G__18732, G__18733, G__18734);
                                  }
                                } else {
                                  var p4927 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927);
                                    } else {
                                      var G__18735 = a4912;
                                      var G__18736 = b4913;
                                      var G__18737 = c4914;
                                      var G__18738 = d4915;
                                      var G__18739 = e4916;
                                      var G__18740 = f4917;
                                      var G__18741 = g4918;
                                      var G__18742 = h4919;
                                      var G__18743 = i4920;
                                      var G__18744 = j4921;
                                      var G__18745 = k4922;
                                      var G__18746 = l4923;
                                      var G__18747 = m4924;
                                      var G__18748 = n4925;
                                      var G__18749 = o4926;
                                      var G__18750 = p4927;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__18735, G__18736, G__18737, G__18738, G__18739, G__18740, G__18741, G__18742, G__18743, G__18744, G__18745, G__18746, G__18747, G__18748, G__18749, G__18750) : f.call(null, G__18735, G__18736, G__18737, G__18738, G__18739, G__18740, G__18741, G__18742, G__18743, G__18744, G__18745, G__18746, G__18747, G__18748, G__18749, G__18750);
                                    }
                                  } else {
                                    var q4928 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928);
                                      } else {
                                        var G__18751 = a4912;
                                        var G__18752 = b4913;
                                        var G__18753 = c4914;
                                        var G__18754 = d4915;
                                        var G__18755 = e4916;
                                        var G__18756 = f4917;
                                        var G__18757 = g4918;
                                        var G__18758 = h4919;
                                        var G__18759 = i4920;
                                        var G__18760 = j4921;
                                        var G__18761 = k4922;
                                        var G__18762 = l4923;
                                        var G__18763 = m4924;
                                        var G__18764 = n4925;
                                        var G__18765 = o4926;
                                        var G__18766 = p4927;
                                        var G__18767 = q4928;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__18751, G__18752, G__18753, G__18754, G__18755, G__18756, G__18757, G__18758, G__18759, G__18760, G__18761, G__18762, G__18763, G__18764, G__18765, G__18766, G__18767) : f.call(null, G__18751, G__18752, G__18753, G__18754, G__18755, G__18756, G__18757, G__18758, G__18759, G__18760, G__18761, G__18762, G__18763, G__18764, G__18765, G__18766, G__18767);
                                      }
                                    } else {
                                      var r4929 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929);
                                        } else {
                                          var G__18768 = a4912;
                                          var G__18769 = b4913;
                                          var G__18770 = c4914;
                                          var G__18771 = d4915;
                                          var G__18772 = e4916;
                                          var G__18773 = f4917;
                                          var G__18774 = g4918;
                                          var G__18775 = h4919;
                                          var G__18776 = i4920;
                                          var G__18777 = j4921;
                                          var G__18778 = k4922;
                                          var G__18779 = l4923;
                                          var G__18780 = m4924;
                                          var G__18781 = n4925;
                                          var G__18782 = o4926;
                                          var G__18783 = p4927;
                                          var G__18784 = q4928;
                                          var G__18785 = r4929;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__18768, G__18769, G__18770, G__18771, G__18772, G__18773, G__18774, G__18775, G__18776, G__18777, G__18778, G__18779, G__18780, G__18781, G__18782, G__18783, G__18784, G__18785) : f.call(null, G__18768, G__18769, G__18770, G__18771, G__18772, G__18773, G__18774, G__18775, G__18776, G__18777, G__18778, G__18779, G__18780, G__18781, G__18782, G__18783, G__18784, G__18785);
                                        }
                                      } else {
                                        var s4930 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929, s4930);
                                          } else {
                                            var G__18786 = a4912;
                                            var G__18787 = b4913;
                                            var G__18788 = c4914;
                                            var G__18789 = d4915;
                                            var G__18790 = e4916;
                                            var G__18791 = f4917;
                                            var G__18792 = g4918;
                                            var G__18793 = h4919;
                                            var G__18794 = i4920;
                                            var G__18795 = j4921;
                                            var G__18796 = k4922;
                                            var G__18797 = l4923;
                                            var G__18798 = m4924;
                                            var G__18799 = n4925;
                                            var G__18800 = o4926;
                                            var G__18801 = p4927;
                                            var G__18802 = q4928;
                                            var G__18803 = r4929;
                                            var G__18804 = s4930;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__18786, G__18787, G__18788, G__18789, G__18790, G__18791, G__18792, G__18793, G__18794, G__18795, G__18796, G__18797, G__18798, G__18799, G__18800, G__18801, G__18802, G__18803, G__18804) : f.call(null, G__18786, G__18787, G__18788, G__18789, G__18790, G__18791, G__18792, G__18793, G__18794, G__18795, G__18796, G__18797, G__18798, G__18799, G__18800, G__18801, G__18802, G__18803, 
                                            G__18804);
                                          }
                                        } else {
                                          var t4931 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929, s4930, t4931);
                                            } else {
                                              var G__18805 = a4912;
                                              var G__18806 = b4913;
                                              var G__18807 = c4914;
                                              var G__18808 = d4915;
                                              var G__18809 = e4916;
                                              var G__18810 = f4917;
                                              var G__18811 = g4918;
                                              var G__18812 = h4919;
                                              var G__18813 = i4920;
                                              var G__18814 = j4921;
                                              var G__18815 = k4922;
                                              var G__18816 = l4923;
                                              var G__18817 = m4924;
                                              var G__18818 = n4925;
                                              var G__18819 = o4926;
                                              var G__18820 = p4927;
                                              var G__18821 = q4928;
                                              var G__18822 = r4929;
                                              var G__18823 = s4930;
                                              var G__18824 = t4931;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__18805, G__18806, G__18807, G__18808, G__18809, G__18810, G__18811, G__18812, G__18813, G__18814, G__18815, G__18816, G__18817, G__18818, G__18819, G__18820, G__18821, G__18822, G__18823, G__18824) : f.call(null, G__18805, G__18806, G__18807, G__18808, G__18809, G__18810, G__18811, G__18812, G__18813, G__18814, G__18815, G__18816, G__18817, G__18818, G__18819, G__18820, G__18821, 
                                              G__18822, G__18823, G__18824);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__6 = function() {
    var G__18825__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__18825 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__18826__i = 0, G__18826__a = new Array(arguments.length - 5);
        while (G__18826__i < G__18826__a.length) {
          G__18826__a[G__18826__i] = arguments[G__18826__i + 5];
          ++G__18826__i;
        }
        args = new cljs.core.IndexedSeq(G__18826__a, 0);
      }
      return G__18825__delegate.call(this, f, a, b, c, d, args);
    };
    G__18825.cljs$lang$maxFixedArity = 5;
    G__18825.cljs$lang$applyTo = function(arglist__18827) {
      var f = cljs.core.first(arglist__18827);
      arglist__18827 = cljs.core.next(arglist__18827);
      var a = cljs.core.first(arglist__18827);
      arglist__18827 = cljs.core.next(arglist__18827);
      var b = cljs.core.first(arglist__18827);
      arglist__18827 = cljs.core.next(arglist__18827);
      var c = cljs.core.first(arglist__18827);
      arglist__18827 = cljs.core.next(arglist__18827);
      var d = cljs.core.first(arglist__18827);
      var args = cljs.core.rest(arglist__18827);
      return G__18825__delegate(f, a, b, c, d, args);
    };
    G__18825.cljs$core$IFn$_invoke$arity$variadic = G__18825__delegate;
    return G__18825;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        var G__18828 = null;
        if (arguments.length > 5) {
          var G__18829__i = 0, G__18829__a = new Array(arguments.length - 5);
          while (G__18829__i < G__18829__a.length) {
            G__18829__a[G__18829__i] = arguments[G__18829__i + 5];
            ++G__18829__i;
          }
          G__18828 = new cljs.core.IndexedSeq(G__18829__a, 0);
        }
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__18828);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__18845 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18845) : f.call(null, G__18845);
    }());
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__18846 = cljs.core.meta(obj);
      var G__18847 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18846, G__18847) : f.call(null, G__18846, G__18847);
    }());
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__18848 = cljs.core.meta(obj);
      var G__18849 = a;
      var G__18850 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18848, G__18849, G__18850) : f.call(null, G__18848, G__18849, G__18850);
    }());
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__18851 = cljs.core.meta(obj);
      var G__18852 = a;
      var G__18853 = b;
      var G__18854 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18851, G__18852, G__18853, G__18854) : f.call(null, G__18851, G__18852, G__18853, G__18854);
    }());
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__18855 = cljs.core.meta(obj);
      var G__18856 = a;
      var G__18857 = b;
      var G__18858 = c;
      var G__18859 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__18855, G__18856, G__18857, G__18858, G__18859) : f.call(null, G__18855, G__18856, G__18857, G__18858, G__18859);
    }());
  };
  var vary_meta__7 = function() {
    var G__18860__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__18860 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__18861__i = 0, G__18861__a = new Array(arguments.length - 6);
        while (G__18861__i < G__18861__a.length) {
          G__18861__a[G__18861__i] = arguments[G__18861__i + 6];
          ++G__18861__i;
        }
        args = new cljs.core.IndexedSeq(G__18861__a, 0);
      }
      return G__18860__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__18860.cljs$lang$maxFixedArity = 6;
    G__18860.cljs$lang$applyTo = function(arglist__18862) {
      var obj = cljs.core.first(arglist__18862);
      arglist__18862 = cljs.core.next(arglist__18862);
      var f = cljs.core.first(arglist__18862);
      arglist__18862 = cljs.core.next(arglist__18862);
      var a = cljs.core.first(arglist__18862);
      arglist__18862 = cljs.core.next(arglist__18862);
      var b = cljs.core.first(arglist__18862);
      arglist__18862 = cljs.core.next(arglist__18862);
      var c = cljs.core.first(arglist__18862);
      arglist__18862 = cljs.core.next(arglist__18862);
      var d = cljs.core.first(arglist__18862);
      var args = cljs.core.rest(arglist__18862);
      return G__18860__delegate(obj, f, a, b, c, d, args);
    };
    G__18860.cljs$core$IFn$_invoke$arity$variadic = G__18860__delegate;
    return G__18860;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__18863 = null;
        if (arguments.length > 6) {
          var G__18864__i = 0, G__18864__a = new Array(arguments.length - 6);
          while (G__18864__i < G__18864__a.length) {
            G__18864__a[G__18864__i] = arguments[G__18864__i + 6];
            ++G__18864__i;
          }
          G__18863 = new cljs.core.IndexedSeq(G__18864__a, 0);
        }
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__18863);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var not_EQ___3 = function() {
    var G__18865__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__18865 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__18866__i = 0, G__18866__a = new Array(arguments.length - 2);
        while (G__18866__i < G__18866__a.length) {
          G__18866__a[G__18866__i] = arguments[G__18866__i + 2];
          ++G__18866__i;
        }
        more = new cljs.core.IndexedSeq(G__18866__a, 0);
      }
      return G__18865__delegate.call(this, x, y, more);
    };
    G__18865.cljs$lang$maxFixedArity = 2;
    G__18865.cljs$lang$applyTo = function(arglist__18867) {
      var x = cljs.core.first(arglist__18867);
      arglist__18867 = cljs.core.next(arglist__18867);
      var y = cljs.core.first(arglist__18867);
      var more = cljs.core.rest(arglist__18867);
      return G__18865__delegate(x, y, more);
    };
    G__18865.cljs$core$IFn$_invoke$arity$variadic = G__18865__delegate;
    return G__18865;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        var G__18868 = null;
        if (arguments.length > 2) {
          var G__18869__i = 0, G__18869__a = new Array(arguments.length - 2);
          while (G__18869__i < G__18869__a.length) {
            G__18869__a[G__18869__i] = arguments[G__18869__i + 2];
            ++G__18869__i;
          }
          G__18868 = new cljs.core.IndexedSeq(G__18869__a, 0);
        }
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18868);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t18873 !== "undefined") {
  } else {
    cljs.core.t18873 = function(nil_iter, meta18874) {
      this.nil_iter = nil_iter;
      this.meta18874 = meta18874;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t18873.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t18873.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t18873.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t18873.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18875) {
      var self__ = this;
      var _18875__$1 = this;
      return self__.meta18874;
    };
    cljs.core.t18873.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18875, meta18874__$1) {
      var self__ = this;
      var _18875__$1 = this;
      return new cljs.core.t18873(self__.nil_iter, meta18874__$1);
    };
    cljs.core.t18873.cljs$lang$type = true;
    cljs.core.t18873.cljs$lang$ctorStr = "cljs.core/t18873";
    cljs.core.t18873.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write(writer__4569__auto__, "cljs.core/t18873");
    };
    cljs.core.__GT_t18873 = function __GT_t18873(nil_iter__$1, meta18874) {
      return new cljs.core.t18873(nil_iter__$1, meta18874);
    };
  }
  return new cljs.core.t18873(nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = !(lt.stepper == null);
      if (and__3969__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__18876 = lt;
        var G__18877 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__18876, G__18877) : self__.xform.call(null, G__18876, G__18877);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__18878 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__18878) : self__.xform.call(null, G__18878);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__18880 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__18880) : xform.call(null, G__18880);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__18882 = cljs.core.next(iters__$1);
        iters__$1 = G__18882;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4868__auto___18883 = self__.iters.length;
  var i_18884 = 0;
  while (true) {
    if (i_18884 < n__4868__auto___18883) {
      self__.nexts[i_18884] = self__.iters[i_18884].next();
      var G__18885 = i_18884 + 1;
      i_18884 = G__18885;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = !(lt.stepper == null);
      if (and__3969__auto__) {
        return this$.hasNext();
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__18881 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__18881) : self__.xform.call(null, G__18881);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__18890 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__18890) : xform.call(null, G__18890);
    }(), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__18891_18895 = cljs.core.seq(colls);
  var chunk__18892_18896 = null;
  var count__18893_18897 = 0;
  var i__18894_18898 = 0;
  while (true) {
    if (i__18894_18898 < count__18893_18897) {
      var coll_18899 = chunk__18892_18896.cljs$core$IIndexed$_nth$arity$2(null, i__18894_18898);
      iters.push(cljs.core.iter(coll_18899));
      var G__18900 = seq__18891_18895;
      var G__18901 = chunk__18892_18896;
      var G__18902 = count__18893_18897;
      var G__18903 = i__18894_18898 + 1;
      seq__18891_18895 = G__18900;
      chunk__18892_18896 = G__18901;
      count__18893_18897 = G__18902;
      i__18894_18898 = G__18903;
      continue;
    } else {
      var temp__4126__auto___18904 = cljs.core.seq(seq__18891_18895);
      if (temp__4126__auto___18904) {
        var seq__18891_18905__$1 = temp__4126__auto___18904;
        if (cljs.core.chunked_seq_QMARK_(seq__18891_18905__$1)) {
          var c__4768__auto___18906 = cljs.core.chunk_first(seq__18891_18905__$1);
          var G__18907 = cljs.core.chunk_rest(seq__18891_18905__$1);
          var G__18908 = c__4768__auto___18906;
          var G__18909 = cljs.core.count(c__4768__auto___18906);
          var G__18910 = 0;
          seq__18891_18895 = G__18907;
          chunk__18892_18896 = G__18908;
          count__18893_18897 = G__18909;
          i__18894_18898 = G__18910;
          continue;
        } else {
          var coll_18911 = cljs.core.first(seq__18891_18905__$1);
          iters.push(cljs.core.iter(coll_18911));
          var G__18912 = cljs.core.next(seq__18891_18905__$1);
          var G__18913 = null;
          var G__18914 = 0;
          var G__18915 = 0;
          seq__18891_18895 = G__18912;
          chunk__18892_18896 = G__18913;
          count__18893_18897 = G__18914;
          i__18894_18898 = G__18915;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__3981__auto__ = cljs.core.seq(coll);
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__18916__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__18916 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__18917__i = 0, G__18917__a = new Array(arguments.length - 2);
        while (G__18917__i < G__18917__a.length) {
          G__18917__a[G__18917__i] = arguments[G__18917__i + 2];
          ++G__18917__i;
        }
        colls = new cljs.core.IndexedSeq(G__18917__a, 0);
      }
      return G__18916__delegate.call(this, xform, coll, colls);
    };
    G__18916.cljs$lang$maxFixedArity = 2;
    G__18916.cljs$lang$applyTo = function(arglist__18918) {
      var xform = cljs.core.first(arglist__18918);
      arglist__18918 = cljs.core.next(arglist__18918);
      var coll = cljs.core.first(arglist__18918);
      var colls = cljs.core.rest(arglist__18918);
      return G__18916__delegate(xform, coll, colls);
    };
    G__18916.cljs$core$IFn$_invoke$arity$variadic = G__18916__delegate;
    return G__18916;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        var G__18919 = null;
        if (arguments.length > 2) {
          var G__18920__i = 0, G__18920__a = new Array(arguments.length - 2);
          while (G__18920__i < G__18920__a.length) {
            G__18920__a[G__18920__i] = arguments[G__18920__i + 2];
            ++G__18920__i;
          }
          G__18919 = new cljs.core.IndexedSeq(G__18920__a, 0);
        }
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__18919);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__18922 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18922) : pred.call(null, G__18922);
      }())) {
        var G__18923 = pred;
        var G__18924 = cljs.core.next(coll);
        pred = G__18923;
        coll = G__18924;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__3981__auto__ = function() {
        var G__18928 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18928) : pred.call(null, G__18928);
      }();
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        var G__18929 = pred;
        var G__18930 = cljs.core.next(coll);
        pred = G__18929;
        coll = G__18930;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__18937 = null;
    var G__18937__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__18937__1 = function(x) {
      return cljs.core.not(function() {
        var G__18934 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18934) : f.call(null, G__18934);
      }());
    };
    var G__18937__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__18935 = x;
        var G__18936 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18935, G__18936) : f.call(null, G__18935, G__18936);
      }());
    };
    var G__18937__3 = function() {
      var G__18938__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__18938 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__18939__i = 0, G__18939__a = new Array(arguments.length - 2);
          while (G__18939__i < G__18939__a.length) {
            G__18939__a[G__18939__i] = arguments[G__18939__i + 2];
            ++G__18939__i;
          }
          zs = new cljs.core.IndexedSeq(G__18939__a, 0);
        }
        return G__18938__delegate.call(this, x, y, zs);
      };
      G__18938.cljs$lang$maxFixedArity = 2;
      G__18938.cljs$lang$applyTo = function(arglist__18940) {
        var x = cljs.core.first(arglist__18940);
        arglist__18940 = cljs.core.next(arglist__18940);
        var y = cljs.core.first(arglist__18940);
        var zs = cljs.core.rest(arglist__18940);
        return G__18938__delegate(x, y, zs);
      };
      G__18938.cljs$core$IFn$_invoke$arity$variadic = G__18938__delegate;
      return G__18938;
    }();
    G__18937 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__18937__0.call(this);
        case 1:
          return G__18937__1.call(this, x);
        case 2:
          return G__18937__2.call(this, x, y);
        default:
          var G__18941 = null;
          if (arguments.length > 2) {
            var G__18942__i = 0, G__18942__a = new Array(arguments.length - 2);
            while (G__18942__i < G__18942__a.length) {
              G__18942__a[G__18942__i] = arguments[G__18942__i + 2];
              ++G__18942__i;
            }
            G__18941 = new cljs.core.IndexedSeq(G__18942__a, 0);
          }
          return G__18937__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__18941);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18937.cljs$lang$maxFixedArity = 2;
    G__18937.cljs$lang$applyTo = G__18937__3.cljs$lang$applyTo;
    G__18937.cljs$core$IFn$_invoke$arity$0 = G__18937__0;
    G__18937.cljs$core$IFn$_invoke$arity$1 = G__18937__1;
    G__18937.cljs$core$IFn$_invoke$arity$2 = G__18937__2;
    G__18937.cljs$core$IFn$_invoke$arity$variadic = G__18937__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__18937;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__18943__delegate = function(args) {
      return x;
    };
    var G__18943 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__18944__i = 0, G__18944__a = new Array(arguments.length - 0);
        while (G__18944__i < G__18944__a.length) {
          G__18944__a[G__18944__i] = arguments[G__18944__i + 0];
          ++G__18944__i;
        }
        args = new cljs.core.IndexedSeq(G__18944__a, 0);
      }
      return G__18943__delegate.call(this, args);
    };
    G__18943.cljs$lang$maxFixedArity = 0;
    G__18943.cljs$lang$applyTo = function(arglist__18945) {
      var args = cljs.core.seq(arglist__18945);
      return G__18943__delegate(args);
    };
    G__18943.cljs$core$IFn$_invoke$arity$variadic = G__18943__delegate;
    return G__18943;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__19000 = null;
      var G__19000__0 = function() {
        var G__18973 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18973) : f.call(null, G__18973);
      };
      var G__19000__1 = function(x) {
        var G__18974 = function() {
          var G__18975 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18975) : g.call(null, G__18975);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18974) : f.call(null, G__18974);
      };
      var G__19000__2 = function(x, y) {
        var G__18976 = function() {
          var G__18977 = x;
          var G__18978 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__18977, G__18978) : g.call(null, G__18977, G__18978);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18976) : f.call(null, G__18976);
      };
      var G__19000__3 = function(x, y, z) {
        var G__18979 = function() {
          var G__18980 = x;
          var G__18981 = y;
          var G__18982 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__18980, G__18981, G__18982) : g.call(null, G__18980, G__18981, G__18982);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18979) : f.call(null, G__18979);
      };
      var G__19000__4 = function() {
        var G__19001__delegate = function(x, y, z, args) {
          var G__18983 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18983) : f.call(null, G__18983);
        };
        var G__19001 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19002__i = 0, G__19002__a = new Array(arguments.length - 3);
            while (G__19002__i < G__19002__a.length) {
              G__19002__a[G__19002__i] = arguments[G__19002__i + 3];
              ++G__19002__i;
            }
            args = new cljs.core.IndexedSeq(G__19002__a, 0);
          }
          return G__19001__delegate.call(this, x, y, z, args);
        };
        G__19001.cljs$lang$maxFixedArity = 3;
        G__19001.cljs$lang$applyTo = function(arglist__19003) {
          var x = cljs.core.first(arglist__19003);
          arglist__19003 = cljs.core.next(arglist__19003);
          var y = cljs.core.first(arglist__19003);
          arglist__19003 = cljs.core.next(arglist__19003);
          var z = cljs.core.first(arglist__19003);
          var args = cljs.core.rest(arglist__19003);
          return G__19001__delegate(x, y, z, args);
        };
        G__19001.cljs$core$IFn$_invoke$arity$variadic = G__19001__delegate;
        return G__19001;
      }();
      G__19000 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19000__0.call(this);
          case 1:
            return G__19000__1.call(this, x);
          case 2:
            return G__19000__2.call(this, x, y);
          case 3:
            return G__19000__3.call(this, x, y, z);
          default:
            var G__19004 = null;
            if (arguments.length > 3) {
              var G__19005__i = 0, G__19005__a = new Array(arguments.length - 3);
              while (G__19005__i < G__19005__a.length) {
                G__19005__a[G__19005__i] = arguments[G__19005__i + 3];
                ++G__19005__i;
              }
              G__19004 = new cljs.core.IndexedSeq(G__19005__a, 0);
            }
            return G__19000__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19004);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19000.cljs$lang$maxFixedArity = 3;
      G__19000.cljs$lang$applyTo = G__19000__4.cljs$lang$applyTo;
      G__19000.cljs$core$IFn$_invoke$arity$0 = G__19000__0;
      G__19000.cljs$core$IFn$_invoke$arity$1 = G__19000__1;
      G__19000.cljs$core$IFn$_invoke$arity$2 = G__19000__2;
      G__19000.cljs$core$IFn$_invoke$arity$3 = G__19000__3;
      G__19000.cljs$core$IFn$_invoke$arity$variadic = G__19000__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19000;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__19006 = null;
      var G__19006__0 = function() {
        var G__18984 = function() {
          var G__18985 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18985) : g.call(null, G__18985);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18984) : f.call(null, G__18984);
      };
      var G__19006__1 = function(x) {
        var G__18986 = function() {
          var G__18987 = function() {
            var G__18988 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__18988) : h.call(null, G__18988);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18987) : g.call(null, G__18987);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18986) : f.call(null, G__18986);
      };
      var G__19006__2 = function(x, y) {
        var G__18989 = function() {
          var G__18990 = function() {
            var G__18991 = x;
            var G__18992 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__18991, G__18992) : h.call(null, G__18991, G__18992);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18990) : g.call(null, G__18990);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18989) : f.call(null, G__18989);
      };
      var G__19006__3 = function(x, y, z) {
        var G__18993 = function() {
          var G__18994 = function() {
            var G__18995 = x;
            var G__18996 = y;
            var G__18997 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__18995, G__18996, G__18997) : h.call(null, G__18995, G__18996, G__18997);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18994) : g.call(null, G__18994);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18993) : f.call(null, G__18993);
      };
      var G__19006__4 = function() {
        var G__19007__delegate = function(x, y, z, args) {
          var G__18998 = function() {
            var G__18999 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__18999) : g.call(null, G__18999);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18998) : f.call(null, G__18998);
        };
        var G__19007 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19008__i = 0, G__19008__a = new Array(arguments.length - 3);
            while (G__19008__i < G__19008__a.length) {
              G__19008__a[G__19008__i] = arguments[G__19008__i + 3];
              ++G__19008__i;
            }
            args = new cljs.core.IndexedSeq(G__19008__a, 0);
          }
          return G__19007__delegate.call(this, x, y, z, args);
        };
        G__19007.cljs$lang$maxFixedArity = 3;
        G__19007.cljs$lang$applyTo = function(arglist__19009) {
          var x = cljs.core.first(arglist__19009);
          arglist__19009 = cljs.core.next(arglist__19009);
          var y = cljs.core.first(arglist__19009);
          arglist__19009 = cljs.core.next(arglist__19009);
          var z = cljs.core.first(arglist__19009);
          var args = cljs.core.rest(arglist__19009);
          return G__19007__delegate(x, y, z, args);
        };
        G__19007.cljs$core$IFn$_invoke$arity$variadic = G__19007__delegate;
        return G__19007;
      }();
      G__19006 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19006__0.call(this);
          case 1:
            return G__19006__1.call(this, x);
          case 2:
            return G__19006__2.call(this, x, y);
          case 3:
            return G__19006__3.call(this, x, y, z);
          default:
            var G__19010 = null;
            if (arguments.length > 3) {
              var G__19011__i = 0, G__19011__a = new Array(arguments.length - 3);
              while (G__19011__i < G__19011__a.length) {
                G__19011__a[G__19011__i] = arguments[G__19011__i + 3];
                ++G__19011__i;
              }
              G__19010 = new cljs.core.IndexedSeq(G__19011__a, 0);
            }
            return G__19006__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19010);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19006.cljs$lang$maxFixedArity = 3;
      G__19006.cljs$lang$applyTo = G__19006__4.cljs$lang$applyTo;
      G__19006.cljs$core$IFn$_invoke$arity$0 = G__19006__0;
      G__19006.cljs$core$IFn$_invoke$arity$1 = G__19006__1;
      G__19006.cljs$core$IFn$_invoke$arity$2 = G__19006__2;
      G__19006.cljs$core$IFn$_invoke$arity$3 = G__19006__3;
      G__19006.cljs$core$IFn$_invoke$arity$variadic = G__19006__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19006;
    }();
  };
  var comp__4 = function() {
    var G__19012__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__19013__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__19014 = cljs.core.first(fs__$2).call(null, ret);
                var G__19015 = cljs.core.next(fs__$2);
                ret = G__19014;
                fs__$2 = G__19015;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__19013 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__19016__i = 0, G__19016__a = new Array(arguments.length - 0);
              while (G__19016__i < G__19016__a.length) {
                G__19016__a[G__19016__i] = arguments[G__19016__i + 0];
                ++G__19016__i;
              }
              args = new cljs.core.IndexedSeq(G__19016__a, 0);
            }
            return G__19013__delegate.call(this, args);
          };
          G__19013.cljs$lang$maxFixedArity = 0;
          G__19013.cljs$lang$applyTo = function(arglist__19017) {
            var args = cljs.core.seq(arglist__19017);
            return G__19013__delegate(args);
          };
          G__19013.cljs$core$IFn$_invoke$arity$variadic = G__19013__delegate;
          return G__19013;
        }();
      }(fs__$1);
    };
    var G__19012 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__19018__i = 0, G__19018__a = new Array(arguments.length - 3);
        while (G__19018__i < G__19018__a.length) {
          G__19018__a[G__19018__i] = arguments[G__19018__i + 3];
          ++G__19018__i;
        }
        fs = new cljs.core.IndexedSeq(G__19018__a, 0);
      }
      return G__19012__delegate.call(this, f1, f2, f3, fs);
    };
    G__19012.cljs$lang$maxFixedArity = 3;
    G__19012.cljs$lang$applyTo = function(arglist__19019) {
      var f1 = cljs.core.first(arglist__19019);
      arglist__19019 = cljs.core.next(arglist__19019);
      var f2 = cljs.core.first(arglist__19019);
      arglist__19019 = cljs.core.next(arglist__19019);
      var f3 = cljs.core.first(arglist__19019);
      var fs = cljs.core.rest(arglist__19019);
      return G__19012__delegate(f1, f2, f3, fs);
    };
    G__19012.cljs$core$IFn$_invoke$arity$variadic = G__19012__delegate;
    return G__19012;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        var G__19020 = null;
        if (arguments.length > 3) {
          var G__19021__i = 0, G__19021__a = new Array(arguments.length - 3);
          while (G__19021__i < G__19021__a.length) {
            G__19021__a[G__19021__i] = arguments[G__19021__i + 3];
            ++G__19021__i;
          }
          G__19020 = new cljs.core.IndexedSeq(G__19021__a, 0);
        }
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__19020);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__19106 = null;
      var G__19106__0 = function() {
        var G__19064 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19064) : f.call(null, G__19064);
      };
      var G__19106__1 = function(x) {
        var G__19065 = arg1;
        var G__19066 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19065, G__19066) : f.call(null, G__19065, G__19066);
      };
      var G__19106__2 = function(x, y) {
        var G__19067 = arg1;
        var G__19068 = x;
        var G__19069 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19067, G__19068, G__19069) : f.call(null, G__19067, G__19068, G__19069);
      };
      var G__19106__3 = function(x, y, z) {
        var G__19070 = arg1;
        var G__19071 = x;
        var G__19072 = y;
        var G__19073 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19070, G__19071, G__19072, G__19073) : f.call(null, G__19070, G__19071, G__19072, G__19073);
      };
      var G__19106__4 = function() {
        var G__19107__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__19107 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19108__i = 0, G__19108__a = new Array(arguments.length - 3);
            while (G__19108__i < G__19108__a.length) {
              G__19108__a[G__19108__i] = arguments[G__19108__i + 3];
              ++G__19108__i;
            }
            args = new cljs.core.IndexedSeq(G__19108__a, 0);
          }
          return G__19107__delegate.call(this, x, y, z, args);
        };
        G__19107.cljs$lang$maxFixedArity = 3;
        G__19107.cljs$lang$applyTo = function(arglist__19109) {
          var x = cljs.core.first(arglist__19109);
          arglist__19109 = cljs.core.next(arglist__19109);
          var y = cljs.core.first(arglist__19109);
          arglist__19109 = cljs.core.next(arglist__19109);
          var z = cljs.core.first(arglist__19109);
          var args = cljs.core.rest(arglist__19109);
          return G__19107__delegate(x, y, z, args);
        };
        G__19107.cljs$core$IFn$_invoke$arity$variadic = G__19107__delegate;
        return G__19107;
      }();
      G__19106 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19106__0.call(this);
          case 1:
            return G__19106__1.call(this, x);
          case 2:
            return G__19106__2.call(this, x, y);
          case 3:
            return G__19106__3.call(this, x, y, z);
          default:
            var G__19110 = null;
            if (arguments.length > 3) {
              var G__19111__i = 0, G__19111__a = new Array(arguments.length - 3);
              while (G__19111__i < G__19111__a.length) {
                G__19111__a[G__19111__i] = arguments[G__19111__i + 3];
                ++G__19111__i;
              }
              G__19110 = new cljs.core.IndexedSeq(G__19111__a, 0);
            }
            return G__19106__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19110);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19106.cljs$lang$maxFixedArity = 3;
      G__19106.cljs$lang$applyTo = G__19106__4.cljs$lang$applyTo;
      G__19106.cljs$core$IFn$_invoke$arity$0 = G__19106__0;
      G__19106.cljs$core$IFn$_invoke$arity$1 = G__19106__1;
      G__19106.cljs$core$IFn$_invoke$arity$2 = G__19106__2;
      G__19106.cljs$core$IFn$_invoke$arity$3 = G__19106__3;
      G__19106.cljs$core$IFn$_invoke$arity$variadic = G__19106__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19106;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__19112 = null;
      var G__19112__0 = function() {
        var G__19074 = arg1;
        var G__19075 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19074, G__19075) : f.call(null, G__19074, G__19075);
      };
      var G__19112__1 = function(x) {
        var G__19076 = arg1;
        var G__19077 = arg2;
        var G__19078 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19076, G__19077, G__19078) : f.call(null, G__19076, G__19077, G__19078);
      };
      var G__19112__2 = function(x, y) {
        var G__19079 = arg1;
        var G__19080 = arg2;
        var G__19081 = x;
        var G__19082 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19079, G__19080, G__19081, G__19082) : f.call(null, G__19079, G__19080, G__19081, G__19082);
      };
      var G__19112__3 = function(x, y, z) {
        var G__19083 = arg1;
        var G__19084 = arg2;
        var G__19085 = x;
        var G__19086 = y;
        var G__19087 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__19083, G__19084, G__19085, G__19086, G__19087) : f.call(null, G__19083, G__19084, G__19085, G__19086, G__19087);
      };
      var G__19112__4 = function() {
        var G__19113__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__19113 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19114__i = 0, G__19114__a = new Array(arguments.length - 3);
            while (G__19114__i < G__19114__a.length) {
              G__19114__a[G__19114__i] = arguments[G__19114__i + 3];
              ++G__19114__i;
            }
            args = new cljs.core.IndexedSeq(G__19114__a, 0);
          }
          return G__19113__delegate.call(this, x, y, z, args);
        };
        G__19113.cljs$lang$maxFixedArity = 3;
        G__19113.cljs$lang$applyTo = function(arglist__19115) {
          var x = cljs.core.first(arglist__19115);
          arglist__19115 = cljs.core.next(arglist__19115);
          var y = cljs.core.first(arglist__19115);
          arglist__19115 = cljs.core.next(arglist__19115);
          var z = cljs.core.first(arglist__19115);
          var args = cljs.core.rest(arglist__19115);
          return G__19113__delegate(x, y, z, args);
        };
        G__19113.cljs$core$IFn$_invoke$arity$variadic = G__19113__delegate;
        return G__19113;
      }();
      G__19112 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19112__0.call(this);
          case 1:
            return G__19112__1.call(this, x);
          case 2:
            return G__19112__2.call(this, x, y);
          case 3:
            return G__19112__3.call(this, x, y, z);
          default:
            var G__19116 = null;
            if (arguments.length > 3) {
              var G__19117__i = 0, G__19117__a = new Array(arguments.length - 3);
              while (G__19117__i < G__19117__a.length) {
                G__19117__a[G__19117__i] = arguments[G__19117__i + 3];
                ++G__19117__i;
              }
              G__19116 = new cljs.core.IndexedSeq(G__19117__a, 0);
            }
            return G__19112__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19116);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19112.cljs$lang$maxFixedArity = 3;
      G__19112.cljs$lang$applyTo = G__19112__4.cljs$lang$applyTo;
      G__19112.cljs$core$IFn$_invoke$arity$0 = G__19112__0;
      G__19112.cljs$core$IFn$_invoke$arity$1 = G__19112__1;
      G__19112.cljs$core$IFn$_invoke$arity$2 = G__19112__2;
      G__19112.cljs$core$IFn$_invoke$arity$3 = G__19112__3;
      G__19112.cljs$core$IFn$_invoke$arity$variadic = G__19112__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19112;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__19118 = null;
      var G__19118__0 = function() {
        var G__19088 = arg1;
        var G__19089 = arg2;
        var G__19090 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19088, G__19089, G__19090) : f.call(null, G__19088, G__19089, G__19090);
      };
      var G__19118__1 = function(x) {
        var G__19091 = arg1;
        var G__19092 = arg2;
        var G__19093 = arg3;
        var G__19094 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19091, G__19092, G__19093, G__19094) : f.call(null, G__19091, G__19092, G__19093, G__19094);
      };
      var G__19118__2 = function(x, y) {
        var G__19095 = arg1;
        var G__19096 = arg2;
        var G__19097 = arg3;
        var G__19098 = x;
        var G__19099 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__19095, G__19096, G__19097, G__19098, G__19099) : f.call(null, G__19095, G__19096, G__19097, G__19098, G__19099);
      };
      var G__19118__3 = function(x, y, z) {
        var G__19100 = arg1;
        var G__19101 = arg2;
        var G__19102 = arg3;
        var G__19103 = x;
        var G__19104 = y;
        var G__19105 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__19100, G__19101, G__19102, G__19103, G__19104, G__19105) : f.call(null, G__19100, G__19101, G__19102, G__19103, G__19104, G__19105);
      };
      var G__19118__4 = function() {
        var G__19119__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__19119 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19120__i = 0, G__19120__a = new Array(arguments.length - 3);
            while (G__19120__i < G__19120__a.length) {
              G__19120__a[G__19120__i] = arguments[G__19120__i + 3];
              ++G__19120__i;
            }
            args = new cljs.core.IndexedSeq(G__19120__a, 0);
          }
          return G__19119__delegate.call(this, x, y, z, args);
        };
        G__19119.cljs$lang$maxFixedArity = 3;
        G__19119.cljs$lang$applyTo = function(arglist__19121) {
          var x = cljs.core.first(arglist__19121);
          arglist__19121 = cljs.core.next(arglist__19121);
          var y = cljs.core.first(arglist__19121);
          arglist__19121 = cljs.core.next(arglist__19121);
          var z = cljs.core.first(arglist__19121);
          var args = cljs.core.rest(arglist__19121);
          return G__19119__delegate(x, y, z, args);
        };
        G__19119.cljs$core$IFn$_invoke$arity$variadic = G__19119__delegate;
        return G__19119;
      }();
      G__19118 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19118__0.call(this);
          case 1:
            return G__19118__1.call(this, x);
          case 2:
            return G__19118__2.call(this, x, y);
          case 3:
            return G__19118__3.call(this, x, y, z);
          default:
            var G__19122 = null;
            if (arguments.length > 3) {
              var G__19123__i = 0, G__19123__a = new Array(arguments.length - 3);
              while (G__19123__i < G__19123__a.length) {
                G__19123__a[G__19123__i] = arguments[G__19123__i + 3];
                ++G__19123__i;
              }
              G__19122 = new cljs.core.IndexedSeq(G__19123__a, 0);
            }
            return G__19118__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19122);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19118.cljs$lang$maxFixedArity = 3;
      G__19118.cljs$lang$applyTo = G__19118__4.cljs$lang$applyTo;
      G__19118.cljs$core$IFn$_invoke$arity$0 = G__19118__0;
      G__19118.cljs$core$IFn$_invoke$arity$1 = G__19118__1;
      G__19118.cljs$core$IFn$_invoke$arity$2 = G__19118__2;
      G__19118.cljs$core$IFn$_invoke$arity$3 = G__19118__3;
      G__19118.cljs$core$IFn$_invoke$arity$variadic = G__19118__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19118;
    }();
  };
  var partial__5 = function() {
    var G__19124__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__19125__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__19125 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__19126__i = 0, G__19126__a = new Array(arguments.length - 0);
            while (G__19126__i < G__19126__a.length) {
              G__19126__a[G__19126__i] = arguments[G__19126__i + 0];
              ++G__19126__i;
            }
            args = new cljs.core.IndexedSeq(G__19126__a, 0);
          }
          return G__19125__delegate.call(this, args);
        };
        G__19125.cljs$lang$maxFixedArity = 0;
        G__19125.cljs$lang$applyTo = function(arglist__19127) {
          var args = cljs.core.seq(arglist__19127);
          return G__19125__delegate(args);
        };
        G__19125.cljs$core$IFn$_invoke$arity$variadic = G__19125__delegate;
        return G__19125;
      }();
    };
    var G__19124 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__19128__i = 0, G__19128__a = new Array(arguments.length - 4);
        while (G__19128__i < G__19128__a.length) {
          G__19128__a[G__19128__i] = arguments[G__19128__i + 4];
          ++G__19128__i;
        }
        more = new cljs.core.IndexedSeq(G__19128__a, 0);
      }
      return G__19124__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__19124.cljs$lang$maxFixedArity = 4;
    G__19124.cljs$lang$applyTo = function(arglist__19129) {
      var f = cljs.core.first(arglist__19129);
      arglist__19129 = cljs.core.next(arglist__19129);
      var arg1 = cljs.core.first(arglist__19129);
      arglist__19129 = cljs.core.next(arglist__19129);
      var arg2 = cljs.core.first(arglist__19129);
      arglist__19129 = cljs.core.next(arglist__19129);
      var arg3 = cljs.core.first(arglist__19129);
      var more = cljs.core.rest(arglist__19129);
      return G__19124__delegate(f, arg1, arg2, arg3, more);
    };
    G__19124.cljs$core$IFn$_invoke$arity$variadic = G__19124__delegate;
    return G__19124;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__19130 = null;
        if (arguments.length > 4) {
          var G__19131__i = 0, G__19131__a = new Array(arguments.length - 4);
          while (G__19131__i < G__19131__a.length) {
            G__19131__a[G__19131__i] = arguments[G__19131__i + 4];
            ++G__19131__i;
          }
          G__19130 = new cljs.core.IndexedSeq(G__19131__a, 0);
        }
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__19130);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__19164 = null;
      var G__19164__1 = function(a) {
        var G__19148 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19148) : f.call(null, G__19148);
      };
      var G__19164__2 = function(a, b) {
        var G__19149 = a == null ? x : a;
        var G__19150 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19149, G__19150) : f.call(null, G__19149, G__19150);
      };
      var G__19164__3 = function(a, b, c) {
        var G__19151 = a == null ? x : a;
        var G__19152 = b;
        var G__19153 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19151, G__19152, G__19153) : f.call(null, G__19151, G__19152, G__19153);
      };
      var G__19164__4 = function() {
        var G__19165__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__19165 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__19166__i = 0, G__19166__a = new Array(arguments.length - 3);
            while (G__19166__i < G__19166__a.length) {
              G__19166__a[G__19166__i] = arguments[G__19166__i + 3];
              ++G__19166__i;
            }
            ds = new cljs.core.IndexedSeq(G__19166__a, 0);
          }
          return G__19165__delegate.call(this, a, b, c, ds);
        };
        G__19165.cljs$lang$maxFixedArity = 3;
        G__19165.cljs$lang$applyTo = function(arglist__19167) {
          var a = cljs.core.first(arglist__19167);
          arglist__19167 = cljs.core.next(arglist__19167);
          var b = cljs.core.first(arglist__19167);
          arglist__19167 = cljs.core.next(arglist__19167);
          var c = cljs.core.first(arglist__19167);
          var ds = cljs.core.rest(arglist__19167);
          return G__19165__delegate(a, b, c, ds);
        };
        G__19165.cljs$core$IFn$_invoke$arity$variadic = G__19165__delegate;
        return G__19165;
      }();
      G__19164 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__19164__1.call(this, a);
          case 2:
            return G__19164__2.call(this, a, b);
          case 3:
            return G__19164__3.call(this, a, b, c);
          default:
            var G__19168 = null;
            if (arguments.length > 3) {
              var G__19169__i = 0, G__19169__a = new Array(arguments.length - 3);
              while (G__19169__i < G__19169__a.length) {
                G__19169__a[G__19169__i] = arguments[G__19169__i + 3];
                ++G__19169__i;
              }
              G__19168 = new cljs.core.IndexedSeq(G__19169__a, 0);
            }
            return G__19164__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__19168);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19164.cljs$lang$maxFixedArity = 3;
      G__19164.cljs$lang$applyTo = G__19164__4.cljs$lang$applyTo;
      G__19164.cljs$core$IFn$_invoke$arity$1 = G__19164__1;
      G__19164.cljs$core$IFn$_invoke$arity$2 = G__19164__2;
      G__19164.cljs$core$IFn$_invoke$arity$3 = G__19164__3;
      G__19164.cljs$core$IFn$_invoke$arity$variadic = G__19164__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19164;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__19170 = null;
      var G__19170__2 = function(a, b) {
        var G__19154 = a == null ? x : a;
        var G__19155 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19154, G__19155) : f.call(null, G__19154, G__19155);
      };
      var G__19170__3 = function(a, b, c) {
        var G__19156 = a == null ? x : a;
        var G__19157 = b == null ? y : b;
        var G__19158 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19156, G__19157, G__19158) : f.call(null, G__19156, G__19157, G__19158);
      };
      var G__19170__4 = function() {
        var G__19171__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__19171 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__19172__i = 0, G__19172__a = new Array(arguments.length - 3);
            while (G__19172__i < G__19172__a.length) {
              G__19172__a[G__19172__i] = arguments[G__19172__i + 3];
              ++G__19172__i;
            }
            ds = new cljs.core.IndexedSeq(G__19172__a, 0);
          }
          return G__19171__delegate.call(this, a, b, c, ds);
        };
        G__19171.cljs$lang$maxFixedArity = 3;
        G__19171.cljs$lang$applyTo = function(arglist__19173) {
          var a = cljs.core.first(arglist__19173);
          arglist__19173 = cljs.core.next(arglist__19173);
          var b = cljs.core.first(arglist__19173);
          arglist__19173 = cljs.core.next(arglist__19173);
          var c = cljs.core.first(arglist__19173);
          var ds = cljs.core.rest(arglist__19173);
          return G__19171__delegate(a, b, c, ds);
        };
        G__19171.cljs$core$IFn$_invoke$arity$variadic = G__19171__delegate;
        return G__19171;
      }();
      G__19170 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__19170__2.call(this, a, b);
          case 3:
            return G__19170__3.call(this, a, b, c);
          default:
            var G__19174 = null;
            if (arguments.length > 3) {
              var G__19175__i = 0, G__19175__a = new Array(arguments.length - 3);
              while (G__19175__i < G__19175__a.length) {
                G__19175__a[G__19175__i] = arguments[G__19175__i + 3];
                ++G__19175__i;
              }
              G__19174 = new cljs.core.IndexedSeq(G__19175__a, 0);
            }
            return G__19170__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__19174);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19170.cljs$lang$maxFixedArity = 3;
      G__19170.cljs$lang$applyTo = G__19170__4.cljs$lang$applyTo;
      G__19170.cljs$core$IFn$_invoke$arity$2 = G__19170__2;
      G__19170.cljs$core$IFn$_invoke$arity$3 = G__19170__3;
      G__19170.cljs$core$IFn$_invoke$arity$variadic = G__19170__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19170;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__19176 = null;
      var G__19176__2 = function(a, b) {
        var G__19159 = a == null ? x : a;
        var G__19160 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19159, G__19160) : f.call(null, G__19159, G__19160);
      };
      var G__19176__3 = function(a, b, c) {
        var G__19161 = a == null ? x : a;
        var G__19162 = b == null ? y : b;
        var G__19163 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19161, G__19162, G__19163) : f.call(null, G__19161, G__19162, G__19163);
      };
      var G__19176__4 = function() {
        var G__19177__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__19177 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__19178__i = 0, G__19178__a = new Array(arguments.length - 3);
            while (G__19178__i < G__19178__a.length) {
              G__19178__a[G__19178__i] = arguments[G__19178__i + 3];
              ++G__19178__i;
            }
            ds = new cljs.core.IndexedSeq(G__19178__a, 0);
          }
          return G__19177__delegate.call(this, a, b, c, ds);
        };
        G__19177.cljs$lang$maxFixedArity = 3;
        G__19177.cljs$lang$applyTo = function(arglist__19179) {
          var a = cljs.core.first(arglist__19179);
          arglist__19179 = cljs.core.next(arglist__19179);
          var b = cljs.core.first(arglist__19179);
          arglist__19179 = cljs.core.next(arglist__19179);
          var c = cljs.core.first(arglist__19179);
          var ds = cljs.core.rest(arglist__19179);
          return G__19177__delegate(a, b, c, ds);
        };
        G__19177.cljs$core$IFn$_invoke$arity$variadic = G__19177__delegate;
        return G__19177;
      }();
      G__19176 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__19176__2.call(this, a, b);
          case 3:
            return G__19176__3.call(this, a, b, c);
          default:
            var G__19180 = null;
            if (arguments.length > 3) {
              var G__19181__i = 0, G__19181__a = new Array(arguments.length - 3);
              while (G__19181__i < G__19181__a.length) {
                G__19181__a[G__19181__i] = arguments[G__19181__i + 3];
                ++G__19181__i;
              }
              G__19180 = new cljs.core.IndexedSeq(G__19181__a, 0);
            }
            return G__19176__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__19180);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19176.cljs$lang$maxFixedArity = 3;
      G__19176.cljs$lang$applyTo = G__19176__4.cljs$lang$applyTo;
      G__19176.cljs$core$IFn$_invoke$arity$2 = G__19176__2;
      G__19176.cljs$core$IFn$_invoke$arity$3 = G__19176__3;
      G__19176.cljs$core$IFn$_invoke$arity$variadic = G__19176__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19176;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function() {
  var map_indexed = null;
  var map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__19212 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__19212) : cljs.core.volatile_BANG_.call(null, G__19212);
      }();
      return function(i) {
        return function() {
          var G__19242 = null;
          var G__19242__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19242__1 = function(result) {
            var G__19213 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19213) : rf.call(null, G__19213);
          };
          var G__19242__2 = function(result, input) {
            var G__19214 = result;
            var G__19215 = function() {
              var G__19216 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__19217 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19216, G__19217) : f.call(null, G__19216, G__19217);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19214, G__19215) : rf.call(null, G__19214, G__19215);
          };
          G__19242 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19242__0.call(this);
              case 1:
                return G__19242__1.call(this, result);
              case 2:
                return G__19242__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19242.cljs$core$IFn$_invoke$arity$0 = G__19242__0;
          G__19242.cljs$core$IFn$_invoke$arity$1 = G__19242__1;
          G__19242.cljs$core$IFn$_invoke$arity$2 = G__19242__2;
          return G__19242;
        }();
      }(i);
    };
  };
  var map_indexed__2 = function(f, coll) {
    var mapi = function mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4868__auto___19243 = size;
            var i_19244 = 0;
            while (true) {
              if (i_19244 < n__4868__auto___19243) {
                cljs.core.chunk_append(b, function() {
                  var G__19238 = idx + i_19244;
                  var G__19239 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19244);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19238, G__19239) : f.call(null, G__19238, G__19239);
                }());
                var G__19245 = i_19244 + 1;
                i_19244 = G__19245;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__19240 = idx;
              var G__19241 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19240, G__19241) : f.call(null, G__19240, G__19241);
            }(), mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return map_indexed__1.call(this, f);
      case 2:
        return map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map_indexed.cljs$core$IFn$_invoke$arity$1 = map_indexed__1;
  map_indexed.cljs$core$IFn$_invoke$arity$2 = map_indexed__2;
  return map_indexed;
}();
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__19264 = null;
        var G__19264__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19264__1 = function(result) {
          var G__19258 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19258) : rf.call(null, G__19258);
        };
        var G__19264__2 = function(result, input) {
          var v = function() {
            var G__19259 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19259) : f.call(null, G__19259);
          }();
          if (v == null) {
            return result;
          } else {
            var G__19260 = result;
            var G__19261 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19260, G__19261) : rf.call(null, G__19260, G__19261);
          }
        };
        G__19264 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19264__0.call(this);
            case 1:
              return G__19264__1.call(this, result);
            case 2:
              return G__19264__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19264.cljs$core$IFn$_invoke$arity$0 = G__19264__0;
        G__19264.cljs$core$IFn$_invoke$arity$1 = G__19264__1;
        G__19264.cljs$core$IFn$_invoke$arity$2 = G__19264__2;
        return G__19264;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___19265 = size;
          var i_19266 = 0;
          while (true) {
            if (i_19266 < n__4868__auto___19265) {
              var x_19267 = function() {
                var G__19262 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19266);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19262) : f.call(null, G__19262);
              }();
              if (x_19267 == null) {
              } else {
                cljs.core.chunk_append(b, x_19267);
              }
              var G__19268 = i_19266 + 1;
              i_19266 = G__19268;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__19263 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19263) : f.call(null, G__19263);
          }();
          if (x == null) {
            return keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__19269 = this$__$1;
  return goog.getUid(G__19269);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__19270 = cljs.core.seq(self__.watches);
  var chunk__19271 = null;
  var count__19272 = 0;
  var i__19273 = 0;
  while (true) {
    if (i__19273 < count__19272) {
      var vec__19274 = chunk__19271.cljs$core$IIndexed$_nth$arity$2(null, i__19273);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19274, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19274, 1, null);
      var G__19275_19284 = key;
      var G__19276_19285 = this$__$1;
      var G__19277_19286 = oldval;
      var G__19278_19287 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19275_19284, G__19276_19285, G__19277_19286, G__19278_19287) : f.call(null, G__19275_19284, G__19276_19285, G__19277_19286, G__19278_19287);
      var G__19288 = seq__19270;
      var G__19289 = chunk__19271;
      var G__19290 = count__19272;
      var G__19291 = i__19273 + 1;
      seq__19270 = G__19288;
      chunk__19271 = G__19289;
      count__19272 = G__19290;
      i__19273 = G__19291;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19270);
      if (temp__4126__auto__) {
        var seq__19270__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19270__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__19270__$1);
          var G__19292 = cljs.core.chunk_rest(seq__19270__$1);
          var G__19293 = c__4768__auto__;
          var G__19294 = cljs.core.count(c__4768__auto__);
          var G__19295 = 0;
          seq__19270 = G__19292;
          chunk__19271 = G__19293;
          count__19272 = G__19294;
          i__19273 = G__19295;
          continue;
        } else {
          var vec__19279 = cljs.core.first(seq__19270__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19279, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19279, 1, null);
          var G__19280_19296 = key;
          var G__19281_19297 = this$__$1;
          var G__19282_19298 = oldval;
          var G__19283_19299 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19280_19296, G__19281_19297, G__19282_19298, G__19283_19299) : f.call(null, G__19280_19296, G__19281_19297, G__19282_19298, G__19283_19299);
          var G__19300 = cljs.core.next(seq__19270__$1);
          var G__19301 = null;
          var G__19302 = 0;
          var G__19303 = 0;
          seq__19270 = G__19300;
          chunk__19271 = G__19301;
          count__19272 = G__19302;
          i__19273 = G__19303;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__19307__delegate = function(x, p__19304) {
      var map__19306 = p__19304;
      var map__19306__$1 = cljs.core.seq_QMARK_(map__19306) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__19306) : map__19306;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19306__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19306__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__19307 = function(x, var_args) {
      var p__19304 = null;
      if (arguments.length > 1) {
        var G__19308__i = 0, G__19308__a = new Array(arguments.length - 1);
        while (G__19308__i < G__19308__a.length) {
          G__19308__a[G__19308__i] = arguments[G__19308__i + 1];
          ++G__19308__i;
        }
        p__19304 = new cljs.core.IndexedSeq(G__19308__a, 0);
      }
      return G__19307__delegate.call(this, x, p__19304);
    };
    G__19307.cljs$lang$maxFixedArity = 1;
    G__19307.cljs$lang$applyTo = function(arglist__19309) {
      var x = cljs.core.first(arglist__19309);
      var p__19304 = cljs.core.rest(arglist__19309);
      return G__19307__delegate(x, p__19304);
    };
    G__19307.cljs$core$IFn$_invoke$arity$variadic = G__19307__delegate;
    return G__19307;
  }();
  atom = function(x, var_args) {
    var p__19304 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__19310 = null;
        if (arguments.length > 1) {
          var G__19311__i = 0, G__19311__a = new Array(arguments.length - 1);
          while (G__19311__i < G__19311__a.length) {
            G__19311__a[G__19311__i] = arguments[G__19311__i + 1];
            ++G__19311__i;
          }
          G__19310 = new cljs.core.IndexedSeq(G__19311__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__19310);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__19314 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__19314) : validate.call(null, G__19314);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__19315 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__19315) : cljs.core.pr_str.call(null, G__19315);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__19322 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19322) : f.call(null, G__19322);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__19323 = a.state;
        var G__19324 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19323, G__19324) : f.call(null, G__19323, G__19324);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__19325 = a.state;
        var G__19326 = x;
        var G__19327 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19325, G__19326, G__19327) : f.call(null, G__19325, G__19326, G__19327);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__19328__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__19328 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__19329__i = 0, G__19329__a = new Array(arguments.length - 4);
        while (G__19329__i < G__19329__a.length) {
          G__19329__a[G__19329__i] = arguments[G__19329__i + 4];
          ++G__19329__i;
        }
        more = new cljs.core.IndexedSeq(G__19329__a, 0);
      }
      return G__19328__delegate.call(this, a, f, x, y, more);
    };
    G__19328.cljs$lang$maxFixedArity = 4;
    G__19328.cljs$lang$applyTo = function(arglist__19330) {
      var a = cljs.core.first(arglist__19330);
      arglist__19330 = cljs.core.next(arglist__19330);
      var f = cljs.core.first(arglist__19330);
      arglist__19330 = cljs.core.next(arglist__19330);
      var x = cljs.core.first(arglist__19330);
      arglist__19330 = cljs.core.next(arglist__19330);
      var y = cljs.core.first(arglist__19330);
      var more = cljs.core.rest(arglist__19330);
      return G__19328__delegate(a, f, x, y, more);
    };
    G__19328.cljs$core$IFn$_invoke$arity$variadic = G__19328__delegate;
    return G__19328;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__19331 = null;
        if (arguments.length > 4) {
          var G__19332__i = 0, G__19332__a = new Array(arguments.length - 4);
          while (G__19332__i < G__19332__a.length) {
            G__19332__a[G__19332__i] = arguments[G__19332__i + 4];
            ++G__19332__i;
          }
          G__19331 = new cljs.core.IndexedSeq(G__19332__a, 0);
        }
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__19331);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function __GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__19399 = null;
          var G__19399__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19399__1 = function(result) {
            var G__19366 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19366) : rf.call(null, G__19366);
          };
          var G__19399__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__19367 = i;
              var G__19368 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19367, G__19368) : f.call(null, G__19367, G__19368);
            }();
            if (v == null) {
              return result;
            } else {
              var G__19369 = result;
              var G__19370 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19369, G__19370) : rf.call(null, G__19369, G__19370);
            }
          };
          G__19399 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19399__0.call(this);
              case 1:
                return G__19399__1.call(this, result);
              case 2:
                return G__19399__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19399.cljs$core$IFn$_invoke$arity$0 = G__19399__0;
          G__19399.cljs$core$IFn$_invoke$arity$1 = G__19399__1;
          G__19399.cljs$core$IFn$_invoke$arity$2 = G__19399__2;
          return G__19399;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4868__auto___19400 = size;
            var i_19401 = 0;
            while (true) {
              if (i_19401 < n__4868__auto___19400) {
                var x_19402 = function() {
                  var G__19395 = idx + i_19401;
                  var G__19396 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19401);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19395, G__19396) : f.call(null, G__19395, G__19396);
                }();
                if (x_19402 == null) {
                } else {
                  cljs.core.chunk_append(b, x_19402);
                }
                var G__19403 = i_19401 + 1;
                i_19401 = G__19403;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__19397 = idx;
              var G__19398 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19397, G__19398) : f.call(null, G__19397, G__19398);
            }();
            if (x == null) {
              return keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__19617 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19617) : p.call(null, G__19617);
        }());
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19619 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19619) : p.call(null, G__19619);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var G__19620 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19620) : p.call(null, G__19620);
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19622 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19622) : p.call(null, G__19622);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__19624 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19624) : p.call(null, G__19624);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var G__19625 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__19625) : p.call(null, G__19625);
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__19794__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__19794 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19795__i = 0, G__19795__a = new Array(arguments.length - 3);
            while (G__19795__i < G__19795__a.length) {
              G__19795__a[G__19795__i] = arguments[G__19795__i + 3];
              ++G__19795__i;
            }
            args = new cljs.core.IndexedSeq(G__19795__a, 0);
          }
          return G__19794__delegate.call(this, x, y, z, args);
        };
        G__19794.cljs$lang$maxFixedArity = 3;
        G__19794.cljs$lang$applyTo = function(arglist__19796) {
          var x = cljs.core.first(arglist__19796);
          arglist__19796 = cljs.core.next(arglist__19796);
          var y = cljs.core.first(arglist__19796);
          arglist__19796 = cljs.core.next(arglist__19796);
          var z = cljs.core.first(arglist__19796);
          var args = cljs.core.rest(arglist__19796);
          return G__19794__delegate(x, y, z, args);
        };
        G__19794.cljs$core$IFn$_invoke$arity$variadic = G__19794__delegate;
        return G__19794;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            var G__19797 = null;
            if (arguments.length > 3) {
              var G__19798__i = 0, G__19798__a = new Array(arguments.length - 3);
              while (G__19798__i < G__19798__a.length) {
                G__19798__a[G__19798__i] = arguments[G__19798__i + 3];
                ++G__19798__i;
              }
              G__19797 = new cljs.core.IndexedSeq(G__19798__a, 0);
            }
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19797);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19657 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19657) : p1.call(null, G__19657);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var G__19658 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19658) : p2.call(null, G__19658);
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19660 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19660) : p1.call(null, G__19660);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__19662 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19662) : p1.call(null, G__19662);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__19664 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19664) : p2.call(null, G__19664);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var G__19665 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19665) : p2.call(null, G__19665);
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19667 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19667) : p1.call(null, G__19667);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__19669 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19669) : p1.call(null, G__19669);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__19671 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19671) : p1.call(null, G__19671);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__19673 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19673) : p2.call(null, G__19673);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__19675 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19675) : p2.call(null, G__19675);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var G__19676 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19676) : p2.call(null, G__19676);
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__19799__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__19404_SHARP_) {
            var and__3969__auto__ = function() {
              var G__19681 = p1__19404_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19681) : p1.call(null, G__19681);
            }();
            if (cljs.core.truth_(and__3969__auto__)) {
              var G__19682 = p1__19404_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19682) : p2.call(null, G__19682);
            } else {
              return and__3969__auto__;
            }
          }, args));
        };
        var G__19799 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19800__i = 0, G__19800__a = new Array(arguments.length - 3);
            while (G__19800__i < G__19800__a.length) {
              G__19800__a[G__19800__i] = arguments[G__19800__i + 3];
              ++G__19800__i;
            }
            args = new cljs.core.IndexedSeq(G__19800__a, 0);
          }
          return G__19799__delegate.call(this, x, y, z, args);
        };
        G__19799.cljs$lang$maxFixedArity = 3;
        G__19799.cljs$lang$applyTo = function(arglist__19801) {
          var x = cljs.core.first(arglist__19801);
          arglist__19801 = cljs.core.next(arglist__19801);
          var y = cljs.core.first(arglist__19801);
          arglist__19801 = cljs.core.next(arglist__19801);
          var z = cljs.core.first(arglist__19801);
          var args = cljs.core.rest(arglist__19801);
          return G__19799__delegate(x, y, z, args);
        };
        G__19799.cljs$core$IFn$_invoke$arity$variadic = G__19799__delegate;
        return G__19799;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            var G__19802 = null;
            if (arguments.length > 3) {
              var G__19803__i = 0, G__19803__a = new Array(arguments.length - 3);
              while (G__19803__i < G__19803__a.length) {
                G__19803__a[G__19803__i] = arguments[G__19803__i + 3];
                ++G__19803__i;
              }
              G__19802 = new cljs.core.IndexedSeq(G__19803__a, 0);
            }
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19802);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19728 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19728) : p1.call(null, G__19728);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__19730 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19730) : p2.call(null, G__19730);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var G__19731 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19731) : p3.call(null, G__19731);
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19733 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19733) : p1.call(null, G__19733);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__19735 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19735) : p2.call(null, G__19735);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__19737 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19737) : p3.call(null, G__19737);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__19739 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19739) : p1.call(null, G__19739);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__19741 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19741) : p2.call(null, G__19741);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var G__19742 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19742) : p3.call(null, G__19742);
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__19744 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19744) : p1.call(null, G__19744);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__19746 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19746) : p2.call(null, G__19746);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__19748 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19748) : p3.call(null, G__19748);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__19750 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19750) : p1.call(null, G__19750);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__19752 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19752) : p2.call(null, G__19752);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var and__3969__auto____$5 = function() {
                      var G__19754 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19754) : p3.call(null, G__19754);
                    }();
                    if (cljs.core.truth_(and__3969__auto____$5)) {
                      var and__3969__auto____$6 = function() {
                        var G__19756 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19756) : p1.call(null, G__19756);
                      }();
                      if (cljs.core.truth_(and__3969__auto____$6)) {
                        var and__3969__auto____$7 = function() {
                          var G__19758 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19758) : p2.call(null, G__19758);
                        }();
                        if (cljs.core.truth_(and__3969__auto____$7)) {
                          var G__19759 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19759) : p3.call(null, G__19759);
                        } else {
                          return and__3969__auto____$7;
                        }
                      } else {
                        return and__3969__auto____$6;
                      }
                    } else {
                      return and__3969__auto____$5;
                    }
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__19804__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__19405_SHARP_) {
            var and__3969__auto__ = function() {
              var G__19766 = p1__19405_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__19766) : p1.call(null, G__19766);
            }();
            if (cljs.core.truth_(and__3969__auto__)) {
              var and__3969__auto____$1 = function() {
                var G__19768 = p1__19405_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__19768) : p2.call(null, G__19768);
              }();
              if (cljs.core.truth_(and__3969__auto____$1)) {
                var G__19769 = p1__19405_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__19769) : p3.call(null, G__19769);
              } else {
                return and__3969__auto____$1;
              }
            } else {
              return and__3969__auto__;
            }
          }, args));
        };
        var G__19804 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19805__i = 0, G__19805__a = new Array(arguments.length - 3);
            while (G__19805__i < G__19805__a.length) {
              G__19805__a[G__19805__i] = arguments[G__19805__i + 3];
              ++G__19805__i;
            }
            args = new cljs.core.IndexedSeq(G__19805__a, 0);
          }
          return G__19804__delegate.call(this, x, y, z, args);
        };
        G__19804.cljs$lang$maxFixedArity = 3;
        G__19804.cljs$lang$applyTo = function(arglist__19806) {
          var x = cljs.core.first(arglist__19806);
          arglist__19806 = cljs.core.next(arglist__19806);
          var y = cljs.core.first(arglist__19806);
          arglist__19806 = cljs.core.next(arglist__19806);
          var z = cljs.core.first(arglist__19806);
          var args = cljs.core.rest(arglist__19806);
          return G__19804__delegate(x, y, z, args);
        };
        G__19804.cljs$core$IFn$_invoke$arity$variadic = G__19804__delegate;
        return G__19804;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            var G__19807 = null;
            if (arguments.length > 3) {
              var G__19808__i = 0, G__19808__a = new Array(arguments.length - 3);
              while (G__19808__i < G__19808__a.length) {
                G__19808__a[G__19808__i] = arguments[G__19808__i + 3];
                ++G__19808__i;
              }
              G__19807 = new cljs.core.IndexedSeq(G__19808__a, 0);
            }
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19807);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__19809__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__19406_SHARP_) {
                var G__19785 = x;
                return p1__19406_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19406_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19785) : p1__19406_SHARP_.call(null, G__19785);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__19407_SHARP_) {
                var and__3969__auto__ = function() {
                  var G__19787 = x;
                  return p1__19407_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19407_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19787) : p1__19407_SHARP_.call(null, G__19787);
                }();
                if (cljs.core.truth_(and__3969__auto__)) {
                  var G__19788 = y;
                  return p1__19407_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19407_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19788) : p1__19407_SHARP_.call(null, G__19788);
                } else {
                  return and__3969__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__19408_SHARP_) {
                var and__3969__auto__ = function() {
                  var G__19790 = x;
                  return p1__19408_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19408_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19790) : p1__19408_SHARP_.call(null, G__19790);
                }();
                if (cljs.core.truth_(and__3969__auto__)) {
                  var and__3969__auto____$1 = function() {
                    var G__19792 = y;
                    return p1__19408_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19408_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19792) : p1__19408_SHARP_.call(null, G__19792);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$1)) {
                    var G__19793 = z;
                    return p1__19408_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19408_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19793) : p1__19408_SHARP_.call(null, G__19793);
                  } else {
                    return and__3969__auto____$1;
                  }
                } else {
                  return and__3969__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__19810__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__19409_SHARP_) {
                  return cljs.core.every_QMARK_(p1__19409_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__19810 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__19811__i = 0, G__19811__a = new Array(arguments.length - 3);
                while (G__19811__i < G__19811__a.length) {
                  G__19811__a[G__19811__i] = arguments[G__19811__i + 3];
                  ++G__19811__i;
                }
                args = new cljs.core.IndexedSeq(G__19811__a, 0);
              }
              return G__19810__delegate.call(this, x, y, z, args);
            };
            G__19810.cljs$lang$maxFixedArity = 3;
            G__19810.cljs$lang$applyTo = function(arglist__19812) {
              var x = cljs.core.first(arglist__19812);
              arglist__19812 = cljs.core.next(arglist__19812);
              var y = cljs.core.first(arglist__19812);
              arglist__19812 = cljs.core.next(arglist__19812);
              var z = cljs.core.first(arglist__19812);
              var args = cljs.core.rest(arglist__19812);
              return G__19810__delegate(x, y, z, args);
            };
            G__19810.cljs$core$IFn$_invoke$arity$variadic = G__19810__delegate;
            return G__19810;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                var G__19813 = null;
                if (arguments.length > 3) {
                  var G__19814__i = 0, G__19814__a = new Array(arguments.length - 3);
                  while (G__19814__i < G__19814__a.length) {
                    G__19814__a[G__19814__i] = arguments[G__19814__i + 3];
                    ++G__19814__i;
                  }
                  G__19813 = new cljs.core.IndexedSeq(G__19814__a, 0);
                }
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19813);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__19809 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__19815__i = 0, G__19815__a = new Array(arguments.length - 3);
        while (G__19815__i < G__19815__a.length) {
          G__19815__a[G__19815__i] = arguments[G__19815__i + 3];
          ++G__19815__i;
        }
        ps = new cljs.core.IndexedSeq(G__19815__a, 0);
      }
      return G__19809__delegate.call(this, p1, p2, p3, ps);
    };
    G__19809.cljs$lang$maxFixedArity = 3;
    G__19809.cljs$lang$applyTo = function(arglist__19816) {
      var p1 = cljs.core.first(arglist__19816);
      arglist__19816 = cljs.core.next(arglist__19816);
      var p2 = cljs.core.first(arglist__19816);
      arglist__19816 = cljs.core.next(arglist__19816);
      var p3 = cljs.core.first(arglist__19816);
      var ps = cljs.core.rest(arglist__19816);
      return G__19809__delegate(p1, p2, p3, ps);
    };
    G__19809.cljs$core$IFn$_invoke$arity$variadic = G__19809__delegate;
    return G__19809;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        var G__19817 = null;
        if (arguments.length > 3) {
          var G__19818__i = 0, G__19818__a = new Array(arguments.length - 3);
          while (G__19818__i < G__19818__a.length) {
            G__19818__a[G__19818__i] = arguments[G__19818__i + 3];
            ++G__19818__i;
          }
          G__19817 = new cljs.core.IndexedSeq(G__19818__a, 0);
        }
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__19817);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        var G__20024 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20024) : p.call(null, G__20024);
      };
      var sp1__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__20026 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20026) : p.call(null, G__20026);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var G__20027 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20027) : p.call(null, G__20027);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__20029 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20029) : p.call(null, G__20029);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__20031 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20031) : p.call(null, G__20031);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var G__20032 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__20032) : p.call(null, G__20032);
          }
        }
      };
      var sp1__4 = function() {
        var G__20193__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__20193 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20194__i = 0, G__20194__a = new Array(arguments.length - 3);
            while (G__20194__i < G__20194__a.length) {
              G__20194__a[G__20194__i] = arguments[G__20194__i + 3];
              ++G__20194__i;
            }
            args = new cljs.core.IndexedSeq(G__20194__a, 0);
          }
          return G__20193__delegate.call(this, x, y, z, args);
        };
        G__20193.cljs$lang$maxFixedArity = 3;
        G__20193.cljs$lang$applyTo = function(arglist__20195) {
          var x = cljs.core.first(arglist__20195);
          arglist__20195 = cljs.core.next(arglist__20195);
          var y = cljs.core.first(arglist__20195);
          arglist__20195 = cljs.core.next(arglist__20195);
          var z = cljs.core.first(arglist__20195);
          var args = cljs.core.rest(arglist__20195);
          return G__20193__delegate(x, y, z, args);
        };
        G__20193.cljs$core$IFn$_invoke$arity$variadic = G__20193__delegate;
        return G__20193;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            var G__20196 = null;
            if (arguments.length > 3) {
              var G__20197__i = 0, G__20197__a = new Array(arguments.length - 3);
              while (G__20197__i < G__20197__a.length) {
                G__20197__a[G__20197__i] = arguments[G__20197__i + 3];
                ++G__20197__i;
              }
              G__20196 = new cljs.core.IndexedSeq(G__20197__a, 0);
            }
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20196);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3981__auto__ = function() {
          var G__20064 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20064) : p1.call(null, G__20064);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var G__20065 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20065) : p2.call(null, G__20065);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__20067 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20067) : p1.call(null, G__20067);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__20069 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20069) : p1.call(null, G__20069);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__20071 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20071) : p2.call(null, G__20071);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var G__20072 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20072) : p2.call(null, G__20072);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__20074 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20074) : p1.call(null, G__20074);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__20076 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20076) : p1.call(null, G__20076);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__20078 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20078) : p1.call(null, G__20078);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__20080 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20080) : p2.call(null, G__20080);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__20082 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20082) : p2.call(null, G__20082);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var G__20083 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20083) : p2.call(null, G__20083);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__20198__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(function(or__3981__auto__) {
              return function(p1__19819_SHARP_) {
                var or__3981__auto____$1 = function() {
                  var G__20085 = p1__19819_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20085) : p1.call(null, G__20085);
                }();
                if (cljs.core.truth_(or__3981__auto____$1)) {
                  return or__3981__auto____$1;
                } else {
                  var G__20086 = p1__19819_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20086) : p2.call(null, G__20086);
                }
              };
            }(or__3981__auto__), args);
          }
        };
        var G__20198 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20199__i = 0, G__20199__a = new Array(arguments.length - 3);
            while (G__20199__i < G__20199__a.length) {
              G__20199__a[G__20199__i] = arguments[G__20199__i + 3];
              ++G__20199__i;
            }
            args = new cljs.core.IndexedSeq(G__20199__a, 0);
          }
          return G__20198__delegate.call(this, x, y, z, args);
        };
        G__20198.cljs$lang$maxFixedArity = 3;
        G__20198.cljs$lang$applyTo = function(arglist__20200) {
          var x = cljs.core.first(arglist__20200);
          arglist__20200 = cljs.core.next(arglist__20200);
          var y = cljs.core.first(arglist__20200);
          arglist__20200 = cljs.core.next(arglist__20200);
          var z = cljs.core.first(arglist__20200);
          var args = cljs.core.rest(arglist__20200);
          return G__20198__delegate(x, y, z, args);
        };
        G__20198.cljs$core$IFn$_invoke$arity$variadic = G__20198__delegate;
        return G__20198;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            var G__20201 = null;
            if (arguments.length > 3) {
              var G__20202__i = 0, G__20202__a = new Array(arguments.length - 3);
              while (G__20202__i < G__20202__a.length) {
                G__20202__a[G__20202__i] = arguments[G__20202__i + 3];
                ++G__20202__i;
              }
              G__20201 = new cljs.core.IndexedSeq(G__20202__a, 0);
            }
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20201);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3981__auto__ = function() {
          var G__20132 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20132) : p1.call(null, G__20132);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__20134 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20134) : p2.call(null, G__20134);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var G__20135 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20135) : p3.call(null, G__20135);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__20137 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20137) : p1.call(null, G__20137);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__20139 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20139) : p2.call(null, G__20139);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__20141 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20141) : p3.call(null, G__20141);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__20143 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20143) : p1.call(null, G__20143);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__20145 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20145) : p2.call(null, G__20145);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var G__20146 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20146) : p3.call(null, G__20146);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__20148 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20148) : p1.call(null, G__20148);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__20150 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20150) : p2.call(null, G__20150);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__20152 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20152) : p3.call(null, G__20152);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__20154 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20154) : p1.call(null, G__20154);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__20156 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20156) : p2.call(null, G__20156);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var or__3981__auto____$5 = function() {
                    var G__20158 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20158) : p3.call(null, G__20158);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$5)) {
                    return or__3981__auto____$5;
                  } else {
                    var or__3981__auto____$6 = function() {
                      var G__20160 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20160) : p1.call(null, G__20160);
                    }();
                    if (cljs.core.truth_(or__3981__auto____$6)) {
                      return or__3981__auto____$6;
                    } else {
                      var or__3981__auto____$7 = function() {
                        var G__20162 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20162) : p2.call(null, G__20162);
                      }();
                      if (cljs.core.truth_(or__3981__auto____$7)) {
                        return or__3981__auto____$7;
                      } else {
                        var G__20163 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20163) : p3.call(null, G__20163);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__20203__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(function(or__3981__auto__) {
              return function(p1__19820_SHARP_) {
                var or__3981__auto____$1 = function() {
                  var G__20165 = p1__19820_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__20165) : p1.call(null, G__20165);
                }();
                if (cljs.core.truth_(or__3981__auto____$1)) {
                  return or__3981__auto____$1;
                } else {
                  var or__3981__auto____$2 = function() {
                    var G__20167 = p1__19820_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__20167) : p2.call(null, G__20167);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$2)) {
                    return or__3981__auto____$2;
                  } else {
                    var G__20168 = p1__19820_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__20168) : p3.call(null, G__20168);
                  }
                }
              };
            }(or__3981__auto__), args);
          }
        };
        var G__20203 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20204__i = 0, G__20204__a = new Array(arguments.length - 3);
            while (G__20204__i < G__20204__a.length) {
              G__20204__a[G__20204__i] = arguments[G__20204__i + 3];
              ++G__20204__i;
            }
            args = new cljs.core.IndexedSeq(G__20204__a, 0);
          }
          return G__20203__delegate.call(this, x, y, z, args);
        };
        G__20203.cljs$lang$maxFixedArity = 3;
        G__20203.cljs$lang$applyTo = function(arglist__20205) {
          var x = cljs.core.first(arglist__20205);
          arglist__20205 = cljs.core.next(arglist__20205);
          var y = cljs.core.first(arglist__20205);
          arglist__20205 = cljs.core.next(arglist__20205);
          var z = cljs.core.first(arglist__20205);
          var args = cljs.core.rest(arglist__20205);
          return G__20203__delegate(x, y, z, args);
        };
        G__20203.cljs$core$IFn$_invoke$arity$variadic = G__20203__delegate;
        return G__20203;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            var G__20206 = null;
            if (arguments.length > 3) {
              var G__20207__i = 0, G__20207__a = new Array(arguments.length - 3);
              while (G__20207__i < G__20207__a.length) {
                G__20207__a[G__20207__i] = arguments[G__20207__i + 3];
                ++G__20207__i;
              }
              G__20206 = new cljs.core.IndexedSeq(G__20207__a, 0);
            }
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20206);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__20208__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__19821_SHARP_) {
                var G__20184 = x;
                return p1__19821_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19821_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20184) : p1__19821_SHARP_.call(null, G__20184);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__19822_SHARP_) {
                var or__3981__auto__ = function() {
                  var G__20186 = x;
                  return p1__19822_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19822_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20186) : p1__19822_SHARP_.call(null, G__20186);
                }();
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  var G__20187 = y;
                  return p1__19822_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19822_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20187) : p1__19822_SHARP_.call(null, G__20187);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__19823_SHARP_) {
                var or__3981__auto__ = function() {
                  var G__20189 = x;
                  return p1__19823_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19823_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20189) : p1__19823_SHARP_.call(null, G__20189);
                }();
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  var or__3981__auto____$1 = function() {
                    var G__20191 = y;
                    return p1__19823_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19823_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20191) : p1__19823_SHARP_.call(null, G__20191);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$1)) {
                    return or__3981__auto____$1;
                  } else {
                    var G__20192 = z;
                    return p1__19823_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__19823_SHARP_.cljs$core$IFn$_invoke$arity$1(G__20192) : p1__19823_SHARP_.call(null, G__20192);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__20209__delegate = function(x, y, z, args) {
              var or__3981__auto__ = spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__3981__auto__)) {
                return or__3981__auto__;
              } else {
                return cljs.core.some(function(or__3981__auto__, ps__$1) {
                  return function(p1__19824_SHARP_) {
                    return cljs.core.some(p1__19824_SHARP_, args);
                  };
                }(or__3981__auto__, ps__$1), ps__$1);
              }
            };
            var G__20209 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__20210__i = 0, G__20210__a = new Array(arguments.length - 3);
                while (G__20210__i < G__20210__a.length) {
                  G__20210__a[G__20210__i] = arguments[G__20210__i + 3];
                  ++G__20210__i;
                }
                args = new cljs.core.IndexedSeq(G__20210__a, 0);
              }
              return G__20209__delegate.call(this, x, y, z, args);
            };
            G__20209.cljs$lang$maxFixedArity = 3;
            G__20209.cljs$lang$applyTo = function(arglist__20211) {
              var x = cljs.core.first(arglist__20211);
              arglist__20211 = cljs.core.next(arglist__20211);
              var y = cljs.core.first(arglist__20211);
              arglist__20211 = cljs.core.next(arglist__20211);
              var z = cljs.core.first(arglist__20211);
              var args = cljs.core.rest(arglist__20211);
              return G__20209__delegate(x, y, z, args);
            };
            G__20209.cljs$core$IFn$_invoke$arity$variadic = G__20209__delegate;
            return G__20209;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                var G__20212 = null;
                if (arguments.length > 3) {
                  var G__20213__i = 0, G__20213__a = new Array(arguments.length - 3);
                  while (G__20213__i < G__20213__a.length) {
                    G__20213__a[G__20213__i] = arguments[G__20213__i + 3];
                    ++G__20213__i;
                  }
                  G__20212 = new cljs.core.IndexedSeq(G__20213__a, 0);
                }
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20212);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__20208 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__20214__i = 0, G__20214__a = new Array(arguments.length - 3);
        while (G__20214__i < G__20214__a.length) {
          G__20214__a[G__20214__i] = arguments[G__20214__i + 3];
          ++G__20214__i;
        }
        ps = new cljs.core.IndexedSeq(G__20214__a, 0);
      }
      return G__20208__delegate.call(this, p1, p2, p3, ps);
    };
    G__20208.cljs$lang$maxFixedArity = 3;
    G__20208.cljs$lang$applyTo = function(arglist__20215) {
      var p1 = cljs.core.first(arglist__20215);
      arglist__20215 = cljs.core.next(arglist__20215);
      var p2 = cljs.core.first(arglist__20215);
      arglist__20215 = cljs.core.next(arglist__20215);
      var p3 = cljs.core.first(arglist__20215);
      var ps = cljs.core.rest(arglist__20215);
      return G__20208__delegate(p1, p2, p3, ps);
    };
    G__20208.cljs$core$IFn$_invoke$arity$variadic = G__20208__delegate;
    return G__20208;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        var G__20216 = null;
        if (arguments.length > 3) {
          var G__20217__i = 0, G__20217__a = new Array(arguments.length - 3);
          while (G__20217__i < G__20217__a.length) {
            G__20217__a[G__20217__i] = arguments[G__20217__i + 3];
            ++G__20217__i;
          }
          G__20216 = new cljs.core.IndexedSeq(G__20217__a, 0);
        }
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__20216);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__20272 = null;
        var G__20272__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20272__1 = function(result) {
          var G__20258 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20258) : rf.call(null, G__20258);
        };
        var G__20272__2 = function(result, input) {
          var G__20259 = result;
          var G__20260 = function() {
            var G__20261 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20261) : f.call(null, G__20261);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20259, G__20260) : rf.call(null, G__20259, G__20260);
        };
        var G__20272__3 = function() {
          var G__20273__delegate = function(result, input, inputs) {
            var G__20262 = result;
            var G__20263 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20262, G__20263) : rf.call(null, G__20262, G__20263);
          };
          var G__20273 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__20274__i = 0, G__20274__a = new Array(arguments.length - 2);
              while (G__20274__i < G__20274__a.length) {
                G__20274__a[G__20274__i] = arguments[G__20274__i + 2];
                ++G__20274__i;
              }
              inputs = new cljs.core.IndexedSeq(G__20274__a, 0);
            }
            return G__20273__delegate.call(this, result, input, inputs);
          };
          G__20273.cljs$lang$maxFixedArity = 2;
          G__20273.cljs$lang$applyTo = function(arglist__20275) {
            var result = cljs.core.first(arglist__20275);
            arglist__20275 = cljs.core.next(arglist__20275);
            var input = cljs.core.first(arglist__20275);
            var inputs = cljs.core.rest(arglist__20275);
            return G__20273__delegate(result, input, inputs);
          };
          G__20273.cljs$core$IFn$_invoke$arity$variadic = G__20273__delegate;
          return G__20273;
        }();
        G__20272 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__20272__0.call(this);
            case 1:
              return G__20272__1.call(this, result);
            case 2:
              return G__20272__2.call(this, result, input);
            default:
              var G__20276 = null;
              if (arguments.length > 2) {
                var G__20277__i = 0, G__20277__a = new Array(arguments.length - 2);
                while (G__20277__i < G__20277__a.length) {
                  G__20277__a[G__20277__i] = arguments[G__20277__i + 2];
                  ++G__20277__i;
                }
                G__20276 = new cljs.core.IndexedSeq(G__20277__a, 0);
              }
              return G__20272__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__20276);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20272.cljs$lang$maxFixedArity = 2;
        G__20272.cljs$lang$applyTo = G__20272__3.cljs$lang$applyTo;
        G__20272.cljs$core$IFn$_invoke$arity$0 = G__20272__0;
        G__20272.cljs$core$IFn$_invoke$arity$1 = G__20272__1;
        G__20272.cljs$core$IFn$_invoke$arity$2 = G__20272__2;
        G__20272.cljs$core$IFn$_invoke$arity$variadic = G__20272__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__20272;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___20278 = size;
          var i_20279 = 0;
          while (true) {
            if (i_20279 < n__4868__auto___20278) {
              cljs.core.chunk_append(b, function() {
                var G__20264 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20279);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20264) : f.call(null, G__20264);
              }());
              var G__20280 = i_20279 + 1;
              i_20279 = G__20280;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__20265 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20265) : f.call(null, G__20265);
          }(), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__20266 = cljs.core.first(s1);
          var G__20267 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20266, G__20267) : f.call(null, G__20266, G__20267);
        }(), map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__20268 = cljs.core.first(s1);
          var G__20269 = cljs.core.first(s2);
          var G__20270 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20268, G__20269, G__20270) : f.call(null, G__20268, G__20269, G__20270);
        }(), map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__20281__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), step(map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__20218_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__20218_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__20281 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__20282__i = 0, G__20282__a = new Array(arguments.length - 4);
        while (G__20282__i < G__20282__a.length) {
          G__20282__a[G__20282__i] = arguments[G__20282__i + 4];
          ++G__20282__i;
        }
        colls = new cljs.core.IndexedSeq(G__20282__a, 0);
      }
      return G__20281__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__20281.cljs$lang$maxFixedArity = 4;
    G__20281.cljs$lang$applyTo = function(arglist__20283) {
      var f = cljs.core.first(arglist__20283);
      arglist__20283 = cljs.core.next(arglist__20283);
      var c1 = cljs.core.first(arglist__20283);
      arglist__20283 = cljs.core.next(arglist__20283);
      var c2 = cljs.core.first(arglist__20283);
      arglist__20283 = cljs.core.next(arglist__20283);
      var c3 = cljs.core.first(arglist__20283);
      var colls = cljs.core.rest(arglist__20283);
      return G__20281__delegate(f, c1, c2, c3, colls);
    };
    G__20281.cljs$core$IFn$_invoke$arity$variadic = G__20281__delegate;
    return G__20281;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        var G__20284 = null;
        if (arguments.length > 4) {
          var G__20285__i = 0, G__20285__a = new Array(arguments.length - 4);
          while (G__20285__i < G__20285__a.length) {
            G__20285__a[G__20285__i] = arguments[G__20285__i + 4];
            ++G__20285__i;
          }
          G__20284 = new cljs.core.IndexedSeq(G__20285__a, 0);
        }
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__20284);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__20294 = null;
          var G__20294__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20294__1 = function(result) {
            var G__20291 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20291) : rf.call(null, G__20291);
          };
          var G__20294__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__20292 = result;
              var G__20293 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20292, G__20293) : rf.call(null, G__20292, G__20293);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__20294 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20294__0.call(this);
              case 1:
                return G__20294__1.call(this, result);
              case 2:
                return G__20294__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20294.cljs$core$IFn$_invoke$arity$0 = G__20294__0;
          G__20294.cljs$core$IFn$_invoke$arity$1 = G__20294__1;
          G__20294.cljs$core$IFn$_invoke$arity$2 = G__20294__2;
          return G__20294;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__20301 = null;
          var G__20301__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20301__1 = function(result) {
            var G__20298 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20298) : rf.call(null, G__20298);
          };
          var G__20301__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__20299 = result;
              var G__20300 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20299, G__20300) : rf.call(null, G__20299, G__20300);
            }
          };
          G__20301 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20301__0.call(this);
              case 1:
                return G__20301__1.call(this, result);
              case 2:
                return G__20301__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20301.cljs$core$IFn$_invoke$arity$0 = G__20301__0;
          G__20301.cljs$core$IFn$_invoke$arity$1 = G__20301__1;
          G__20301.cljs$core$IFn$_invoke$arity$2 = G__20301__2;
          return G__20301;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__20302 = n__$1 - 1;
          var G__20303 = cljs.core.rest(s);
          n__$1 = G__20302;
          coll__$1 = G__20303;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__20306 = cljs.core.next(s);
      var G__20307 = cljs.core.next(lead);
      s = G__20306;
      lead = G__20307;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__20320 = null;
          var G__20320__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20320__1 = function(result) {
            var G__20314 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20314) : rf.call(null, G__20314);
          };
          var G__20320__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__3969__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3969__auto__)) {
                var G__20315 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20315) : pred.call(null, G__20315);
              } else {
                return and__3969__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__20316 = result;
              var G__20317 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20316, G__20317) : rf.call(null, G__20316, G__20317);
            }
          };
          G__20320 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20320__0.call(this);
              case 1:
                return G__20320__1.call(this, result);
              case 2:
                return G__20320__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20320.cljs$core$IFn$_invoke$arity$0 = G__20320__0;
          G__20320.cljs$core$IFn$_invoke$arity$1 = G__20320__1;
          G__20320.cljs$core$IFn$_invoke$arity$2 = G__20320__2;
          return G__20320;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__3969__auto__ = s;
          if (and__3969__auto__) {
            var G__20319 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__20319) : pred__$1.call(null, G__20319);
          } else {
            return and__3969__auto__;
          }
        }())) {
          var G__20321 = pred__$1;
          var G__20322 = cljs.core.rest(s);
          pred__$1 = G__20321;
          coll__$1 = G__20322;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return iterate(f, function() {
      var G__20331 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20331) : f.call(null, G__20331);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__20334__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__20334 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__20335__i = 0, G__20335__a = new Array(arguments.length - 2);
        while (G__20335__i < G__20335__a.length) {
          G__20335__a[G__20335__i] = arguments[G__20335__i + 2];
          ++G__20335__i;
        }
        colls = new cljs.core.IndexedSeq(G__20335__a, 0);
      }
      return G__20334__delegate.call(this, c1, c2, colls);
    };
    G__20334.cljs$lang$maxFixedArity = 2;
    G__20334.cljs$lang$applyTo = function(arglist__20336) {
      var c1 = cljs.core.first(arglist__20336);
      arglist__20336 = cljs.core.next(arglist__20336);
      var c2 = cljs.core.first(arglist__20336);
      var colls = cljs.core.rest(arglist__20336);
      return G__20334__delegate(c1, c2, colls);
    };
    G__20334.cljs$core$IFn$_invoke$arity$variadic = G__20334__delegate;
    return G__20334;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        var G__20337 = null;
        if (arguments.length > 2) {
          var G__20338__i = 0, G__20338__a = new Array(arguments.length - 2);
          while (G__20338__i < G__20338__a.length) {
            G__20338__a[G__20338__i] = arguments[G__20338__i + 2];
            ++G__20338__i;
          }
          G__20337 = new cljs.core.IndexedSeq(G__20338__a, 0);
        }
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__20337);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function() {
  var interpose = null;
  var interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__20353 = null;
          var G__20353__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__20353__1 = function(result) {
            var G__20346 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20346) : rf.call(null, G__20346);
          };
          var G__20353__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__20347 = result;
                var G__20348 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20347, G__20348) : rf.call(null, G__20347, G__20348);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__20349 = sepr;
                var G__20350 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20349, G__20350) : rf.call(null, G__20349, G__20350);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__20351 = result;
              var G__20352 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20351, G__20352) : rf.call(null, G__20351, G__20352);
            }
          };
          G__20353 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__20353__0.call(this);
              case 1:
                return G__20353__1.call(this, result);
              case 2:
                return G__20353__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20353.cljs$core$IFn$_invoke$arity$0 = G__20353__0;
          G__20353.cljs$core$IFn$_invoke$arity$1 = G__20353__1;
          G__20353.cljs$core$IFn$_invoke$arity$2 = G__20353__2;
          return G__20353;
        }();
      }(started);
    };
  };
  var interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return interpose__1.call(this, sep);
      case 2:
        return interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interpose.cljs$core$IFn$_invoke$arity$1 = interpose__1;
  interpose.cljs$core$IFn$_invoke$arity$2 = interpose__2;
  return interpose;
}();
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__20362__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__20362 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__20363__i = 0, G__20363__a = new Array(arguments.length - 1);
        while (G__20363__i < G__20363__a.length) {
          G__20363__a[G__20363__i] = arguments[G__20363__i + 1];
          ++G__20363__i;
        }
        colls = new cljs.core.IndexedSeq(G__20363__a, 0);
      }
      return G__20362__delegate.call(this, f, colls);
    };
    G__20362.cljs$lang$maxFixedArity = 1;
    G__20362.cljs$lang$applyTo = function(arglist__20364) {
      var f = cljs.core.first(arglist__20364);
      var colls = cljs.core.rest(arglist__20364);
      return G__20362__delegate(f, colls);
    };
    G__20362.cljs$core$IFn$_invoke$arity$variadic = G__20362__delegate;
    return G__20362;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        var G__20365 = null;
        if (arguments.length > 1) {
          var G__20366__i = 0, G__20366__a = new Array(arguments.length - 1);
          while (G__20366__i < G__20366__a.length) {
            G__20366__a[G__20366__i] = arguments[G__20366__i + 1];
            ++G__20366__i;
          }
          G__20365 = new cljs.core.IndexedSeq(G__20366__a, 0);
        }
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__20365);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__20385 = null;
        var G__20385__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20385__1 = function(result) {
          var G__20379 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__20379) : rf.call(null, G__20379);
        };
        var G__20385__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__20380 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20380) : pred.call(null, G__20380);
          }())) {
            var G__20381 = result;
            var G__20382 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20381, G__20382) : rf.call(null, G__20381, G__20382);
          } else {
            return result;
          }
        };
        G__20385 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20385__0.call(this);
            case 1:
              return G__20385__1.call(this, result);
            case 2:
              return G__20385__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20385.cljs$core$IFn$_invoke$arity$0 = G__20385__0;
        G__20385.cljs$core$IFn$_invoke$arity$1 = G__20385__1;
        G__20385.cljs$core$IFn$_invoke$arity$2 = G__20385__2;
        return G__20385;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___20386 = size;
          var i_20387 = 0;
          while (true) {
            if (i_20387 < n__4868__auto___20386) {
              if (cljs.core.truth_(function() {
                var G__20383 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20387);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20383) : pred.call(null, G__20383);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20387));
              } else {
              }
              var G__20388 = i_20387 + 1;
              i_20387 = G__20388;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__20384 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20384) : pred.call(null, G__20384);
          }())) {
            return cljs.core.cons(f, filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__20395 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__20395) : branch_QMARK_.call(null, G__20395);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(walk, cljs.core.array_seq([function() {
        var G__20396 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__20396) : children.call(null, G__20396);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__20397_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__20397_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__20400 = to;
        if (G__20400) {
          var bit__4655__auto__ = G__20400.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4655__auto__ || G__20400.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__20401 = to;
      if (G__20401) {
        var bit__4655__auto__ = G__20401.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4655__auto__ || G__20401.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__20403 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20403) : f.call(null, G__20403);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__20404__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__20404 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__20405__i = 0, G__20405__a = new Array(arguments.length - 4);
        while (G__20405__i < G__20405__a.length) {
          G__20405__a[G__20405__i] = arguments[G__20405__i + 4];
          ++G__20405__i;
        }
        colls = new cljs.core.IndexedSeq(G__20405__a, 0);
      }
      return G__20404__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__20404.cljs$lang$maxFixedArity = 4;
    G__20404.cljs$lang$applyTo = function(arglist__20406) {
      var f = cljs.core.first(arglist__20406);
      arglist__20406 = cljs.core.next(arglist__20406);
      var c1 = cljs.core.first(arglist__20406);
      arglist__20406 = cljs.core.next(arglist__20406);
      var c2 = cljs.core.first(arglist__20406);
      arglist__20406 = cljs.core.next(arglist__20406);
      var c3 = cljs.core.first(arglist__20406);
      var colls = cljs.core.rest(arglist__20406);
      return G__20404__delegate(f, c1, c2, c3, colls);
    };
    G__20404.cljs$core$IFn$_invoke$arity$variadic = G__20404__delegate;
    return G__20404;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__20407 = null;
        if (arguments.length > 4) {
          var G__20408__i = 0, G__20408__a = new Array(arguments.length - 4);
          while (G__20408__i < G__20408__a.length) {
            G__20408__a[G__20408__i] = arguments[G__20408__i + 4];
            ++G__20408__i;
          }
          G__20407 = new cljs.core.IndexedSeq(G__20408__a, 0);
        }
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__20407);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__20410 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20410) : pred.call(null, G__20410);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__20425 = m__$1;
          if (G__20425) {
            var bit__4662__auto__ = G__20425.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4662__auto__ || G__20425.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__20425.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__20425);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__20425);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__20426 = sentinel;
            var G__20427 = m__$2;
            var G__20428 = cljs.core.next(ks__$1);
            sentinel = G__20426;
            m__$1 = G__20427;
            ks__$1 = G__20428;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__20429, v) {
  var vec__20434 = p__20429;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20434, 0, null);
  var ks = cljs.core.nthnext(vec__20434, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__20435, f) {
    var vec__20473 = p__20435;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20473, 0, null);
    var ks = cljs.core.nthnext(vec__20473, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__20474 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20474) : f.call(null, G__20474);
      }());
    }
  };
  var update_in__4 = function(m, p__20436, f, a) {
    var vec__20475 = p__20436;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20475, 0, null);
    var ks = cljs.core.nthnext(vec__20475, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__20476 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__20477 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20476, G__20477) : f.call(null, G__20476, G__20477);
      }());
    }
  };
  var update_in__5 = function(m, p__20437, f, a, b) {
    var vec__20478 = p__20437;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20478, 0, null);
    var ks = cljs.core.nthnext(vec__20478, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__20479 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__20480 = a;
        var G__20481 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20479, G__20480, G__20481) : f.call(null, G__20479, G__20480, G__20481);
      }());
    }
  };
  var update_in__6 = function(m, p__20438, f, a, b, c) {
    var vec__20482 = p__20438;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20482, 0, null);
    var ks = cljs.core.nthnext(vec__20482, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__20483 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__20484 = a;
        var G__20485 = b;
        var G__20486 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20483, G__20484, G__20485, G__20486) : f.call(null, G__20483, G__20484, G__20485, G__20486);
      }());
    }
  };
  var update_in__7 = function() {
    var G__20488__delegate = function(m, p__20439, f, a, b, c, args) {
      var vec__20487 = p__20439;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20487, 0, null);
      var ks = cljs.core.nthnext(vec__20487, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__20488 = function(m, p__20439, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__20489__i = 0, G__20489__a = new Array(arguments.length - 6);
        while (G__20489__i < G__20489__a.length) {
          G__20489__a[G__20489__i] = arguments[G__20489__i + 6];
          ++G__20489__i;
        }
        args = new cljs.core.IndexedSeq(G__20489__a, 0);
      }
      return G__20488__delegate.call(this, m, p__20439, f, a, b, c, args);
    };
    G__20488.cljs$lang$maxFixedArity = 6;
    G__20488.cljs$lang$applyTo = function(arglist__20490) {
      var m = cljs.core.first(arglist__20490);
      arglist__20490 = cljs.core.next(arglist__20490);
      var p__20439 = cljs.core.first(arglist__20490);
      arglist__20490 = cljs.core.next(arglist__20490);
      var f = cljs.core.first(arglist__20490);
      arglist__20490 = cljs.core.next(arglist__20490);
      var a = cljs.core.first(arglist__20490);
      arglist__20490 = cljs.core.next(arglist__20490);
      var b = cljs.core.first(arglist__20490);
      arglist__20490 = cljs.core.next(arglist__20490);
      var c = cljs.core.first(arglist__20490);
      var args = cljs.core.rest(arglist__20490);
      return G__20488__delegate(m, p__20439, f, a, b, c, args);
    };
    G__20488.cljs$core$IFn$_invoke$arity$variadic = G__20488__delegate;
    return G__20488;
  }();
  update_in = function(m, p__20439, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__20439, f);
      case 4:
        return update_in__4.call(this, m, p__20439, f, a);
      case 5:
        return update_in__5.call(this, m, p__20439, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__20439, f, a, b, c);
      default:
        var G__20491 = null;
        if (arguments.length > 6) {
          var G__20492__i = 0, G__20492__a = new Array(arguments.length - 6);
          while (G__20492__i < G__20492__a.length) {
            G__20492__a[G__20492__i] = arguments[G__20492__i + 6];
            ++G__20492__i;
          }
          G__20491 = new cljs.core.IndexedSeq(G__20492__a, 0);
        }
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__20439, f, a, b, c, G__20491);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20503 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20503) : f.call(null, G__20503);
    }());
  };
  var update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20504 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__20505 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20504, G__20505) : f.call(null, G__20504, G__20505);
    }());
  };
  var update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20506 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__20507 = x;
      var G__20508 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20506, G__20507, G__20508) : f.call(null, G__20506, G__20507, G__20508);
    }());
  };
  var update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20509 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__20510 = x;
      var G__20511 = y;
      var G__20512 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20509, G__20510, G__20511, G__20512) : f.call(null, G__20509, G__20510, G__20511, G__20512);
    }());
  };
  var update__7 = function() {
    var G__20513__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__20513 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__20514__i = 0, G__20514__a = new Array(arguments.length - 6);
        while (G__20514__i < G__20514__a.length) {
          G__20514__a[G__20514__i] = arguments[G__20514__i + 6];
          ++G__20514__i;
        }
        more = new cljs.core.IndexedSeq(G__20514__a, 0);
      }
      return G__20513__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__20513.cljs$lang$maxFixedArity = 6;
    G__20513.cljs$lang$applyTo = function(arglist__20515) {
      var m = cljs.core.first(arglist__20515);
      arglist__20515 = cljs.core.next(arglist__20515);
      var k = cljs.core.first(arglist__20515);
      arglist__20515 = cljs.core.next(arglist__20515);
      var f = cljs.core.first(arglist__20515);
      arglist__20515 = cljs.core.next(arglist__20515);
      var x = cljs.core.first(arglist__20515);
      arglist__20515 = cljs.core.next(arglist__20515);
      var y = cljs.core.first(arglist__20515);
      arglist__20515 = cljs.core.next(arglist__20515);
      var z = cljs.core.first(arglist__20515);
      var more = cljs.core.rest(arglist__20515);
      return G__20513__delegate(m, k, f, x, y, z, more);
    };
    G__20513.cljs$core$IFn$_invoke$arity$variadic = G__20513__delegate;
    return G__20513;
  }();
  update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x);
      case 5:
        return update__5.call(this, m, k, f, x, y);
      case 6:
        return update__6.call(this, m, k, f, x, y, z);
      default:
        var G__20516 = null;
        if (arguments.length > 6) {
          var G__20517__i = 0, G__20517__a = new Array(arguments.length - 6);
          while (G__20517__i < G__20517__a.length) {
            G__20517__a[G__20517__i] = arguments[G__20517__i + 6];
            ++G__20517__i;
          }
          G__20516 = new cljs.core.IndexedSeq(G__20517__a, 0);
        }
        return update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__20516);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 6;
  update.cljs$lang$applyTo = update__7.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$6 = update__6;
  update.cljs$core$IFn$_invoke$arity$variadic = update__7.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__20518 = ll - 5;
      var G__20519 = r;
      ll = G__20518;
      ret = G__20519;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__20524 = cljs.core.pv_aget(node, 0);
      var G__20525 = level - 5;
      node = G__20524;
      level = G__20525;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__20526 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__20527 = level - 5;
        node = G__20526;
        level = G__20527;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__20537 = init__$2;
              var G__20538 = j + i;
              var G__20539 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20537, G__20538, G__20539) : f.call(null, G__20537, G__20538, G__20539);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__20550 = j + 1;
              var G__20551 = init__$3;
              j = G__20550;
              init__$2 = G__20551;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__20540 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20540) : cljs.core.deref.call(null, G__20540);
      } else {
        var G__20552 = i + len;
        var G__20553 = init__$2;
        i = G__20552;
        init__$1 = G__20553;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__20541 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__20541) : cljs.core.tv_editable_root.call(null, G__20541);
  }(), function() {
    var G__20542 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__20542) : cljs.core.tv_editable_tail.call(null, G__20542);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__20543 = init__$2;
              var G__20544 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20543, G__20544) : f.call(null, G__20543, G__20544);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__20554 = j + 1;
              var G__20555 = init__$3;
              j = G__20554;
              init__$2 = G__20555;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__20545 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20545) : cljs.core.deref.call(null, G__20545);
      } else {
        var G__20556 = i + len;
        var G__20557 = init__$2;
        i = G__20556;
        init__$1 = G__20557;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__20546 = coll__$1;
      var G__20547 = cljs.core.first_array_for_longvec(coll__$1);
      var G__20548 = 0;
      var G__20549 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20546, G__20547, G__20548, G__20549) : cljs.core.chunked_seq.call(null, G__20546, G__20547, G__20548, G__20549);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4868__auto___20558 = len;
    var i_20559 = 0;
    while (true) {
      if (i_20559 < n__4868__auto___20558) {
        new_tail[i_20559] = self__.tail[i_20559];
        var G__20560 = i_20559 + 1;
        i_20559 = G__20560;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__20561 = null;
  var G__20561__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__20561__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__20561 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20561__2.call(this, self__, k);
      case 3:
        return G__20561__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20561.cljs$core$IFn$_invoke$arity$2 = G__20561__2;
  G__20561.cljs$core$IFn$_invoke$arity$3 = G__20561__3;
  return G__20561;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args20536) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20536)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__20562 = i + 1;
        var G__20563 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__20562;
        out = G__20563;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.vec = function vec(coll) {
  if (coll instanceof Array) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__20564__i = 0, G__20564__a = new Array(arguments.length - 0);
      while (G__20564__i < G__20564__a.length) {
        G__20564__a[G__20564__i] = arguments[G__20564__i + 0];
        ++G__20564__i;
      }
      args = new cljs.core.IndexedSeq(G__20564__a, 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__20565) {
    var args = cljs.core.seq(arglist__20565);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__20566 = self__.vec;
      var G__20567 = self__.node;
      var G__20568 = self__.i;
      var G__20569 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20566, G__20567, G__20568, G__20569) : cljs.core.chunked_seq.call(null, G__20566, G__20567, G__20568, G__20569);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20570 = self__.vec;
    var G__20571 = self__.i + self__.off;
    var G__20572 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__20570, G__20571, G__20572) : cljs.core.subvec.call(null, G__20570, G__20571, G__20572);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__20573 = self__.vec;
    var G__20574 = self__.i + self__.off;
    var G__20575 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__20573, G__20574, G__20575) : cljs.core.subvec.call(null, G__20573, G__20574, G__20575);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__20576 = self__.vec;
      var G__20577 = self__.node;
      var G__20578 = self__.i;
      var G__20579 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20576, G__20577, G__20578, G__20579) : cljs.core.chunked_seq.call(null, G__20576, G__20577, G__20578, G__20579);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__20580 = self__.vec;
    var G__20581 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__20582 = end;
    var G__20583 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20580, G__20581, G__20582, G__20583) : cljs.core.chunked_seq.call(null, G__20580, G__20581, G__20582, G__20583);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__20584 = self__.vec;
  var G__20585 = self__.node;
  var G__20586 = self__.i;
  var G__20587 = self__.off;
  var G__20588 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__20584, G__20585, G__20586, G__20587, G__20588) : cljs.core.chunked_seq.call(null, G__20584, G__20585, G__20586, G__20587, G__20588);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__20589 = self__.vec;
    var G__20590 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__20591 = end;
    var G__20592 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20589, G__20590, G__20591, G__20592) : cljs.core.chunked_seq.call(null, G__20589, G__20590, G__20591, G__20592);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__20594 = self__.meta;
  var G__20595 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__20596 = self__.start;
  var G__20597 = function() {
    var x__4298__auto__ = self__.end;
    var y__4299__auto__ = v_pos + 1;
    return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
  }();
  var G__20598 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__20594, G__20595, G__20596, G__20597, G__20598) : cljs.core.build_subvec.call(null, G__20594, G__20595, G__20596, G__20597, G__20598);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__20599 = self__.meta;
    var G__20600 = self__.v;
    var G__20601 = self__.start;
    var G__20602 = self__.end - 1;
    var G__20603 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__20599, G__20600, G__20601, G__20602, G__20603) : cljs.core.build_subvec.call(null, G__20599, G__20600, G__20601, G__20602, G__20603);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__20605 = meta__$1;
  var G__20606 = self__.v;
  var G__20607 = self__.start;
  var G__20608 = self__.end;
  var G__20609 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__20605, G__20606, G__20607, G__20608, G__20609) : cljs.core.build_subvec.call(null, G__20605, G__20606, G__20607, G__20608, G__20609);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__20610 = self__.meta;
  var G__20611 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__20612 = self__.start;
  var G__20613 = self__.end + 1;
  var G__20614 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__20610, G__20611, G__20612, G__20613, G__20614) : cljs.core.build_subvec.call(null, G__20610, G__20611, G__20612, G__20613, G__20614);
};
cljs.core.Subvec.prototype.call = function() {
  var G__20615 = null;
  var G__20615__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__20615__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__20615 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20615__2.call(this, self__, k);
      case 3:
        return G__20615__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20615.cljs$core$IFn$_invoke$arity$2 = G__20615__2;
  G__20615.cljs$core$IFn$_invoke$arity$3 = G__20615__3;
  return G__20615;
}();
cljs.core.Subvec.prototype.apply = function(self__, args20593) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20593)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__20616 = meta;
      var G__20617 = v.v;
      var G__20618 = v.start + start;
      var G__20619 = v.start + end;
      var G__20620 = __hash;
      meta = G__20616;
      v = G__20617;
      start = G__20618;
      end = G__20619;
      __hash = G__20620;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj20627 = {};
    return obj20627;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__20635 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__20636 = level - 5;
        node = G__20635;
        level = G__20636;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__20640 = null;
  var G__20640__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20640__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20640 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20640__2.call(this, self__, k);
      case 3:
        return G__20640__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20640.cljs$core$IFn$_invoke$arity$2 = G__20640__2;
  G__20640.cljs$core$IFn$_invoke$arity$3 = G__20640__3;
  return G__20640;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args20637) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20637)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__3981__auto__ = self__.front;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__3981__auto__ = self__.rear;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__20641 = i + incr;
        i = G__20641;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__20642 = i + 1;
      var G__20643 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__20642;
      out = G__20643;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj20647 = {};
    return obj20647;
  }();
  var l = ks.length;
  var i_20648 = 0;
  while (true) {
    if (i_20648 < l) {
      var k_20649 = ks[i_20648];
      new_obj[k_20649] = obj[k_20649];
      var G__20650 = i_20648 + 1;
      i_20648 = G__20650;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__20654 = k;
      return goog.isString(G__20654);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__20655 = init__$1;
        var G__20656 = k;
        var G__20657 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20655, G__20656, G__20657) : f.call(null, G__20655, G__20656, G__20657);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__20658 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20658) : cljs.core.deref.call(null, G__20658);
      } else {
        var G__20664 = cljs.core.rest(keys__$1);
        var G__20665 = init__$2;
        keys__$1 = G__20664;
        init__$1 = G__20665;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__20660 = k;
      return goog.isString(G__20660);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__20661 = k;
    return goog.isString(G__20661);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__20663 = k;
      return goog.isString(G__20663);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__20651_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__20651_SHARP_, self__.strobj[p1__20651_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__20666 = null;
  var G__20666__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20666__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20666 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20666__2.call(this, self__, k);
      case 3:
        return G__20666__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20666.cljs$core$IFn$_invoke$arity$2 = G__20666__2;
  G__20666.cljs$core$IFn$_invoke$arity$3 = G__20666__3;
  return G__20666;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args20652) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20652)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj20668 = {};
  return obj20668;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__20669 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20669, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20669, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__20670 = i + 2;
        i = G__20670;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__20671 = i + 2;
        i = G__20671;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__20672 = i + 2;
        i = G__20672;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__20673 = i + 2;
        i = G__20673;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__20674 = i + 2;
        i = G__20674;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = function() {
        var G__20678 = k;
        return goog.isString(G__20678);
      }();
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_20679 = 0;
  while (true) {
    if (i_20679 < l) {
      narr[i_20679] = arr[i_20679];
      var G__20680 = i_20679 + 1;
      i_20679 = G__20680;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20682 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__20682) : cljs.core.keys.call(null, G__20682);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20683 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__20683) : cljs.core.vals.call(null, G__20683);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20684 = cljs.core.seq(coll);
  var chunk__20685 = null;
  var count__20686 = 0;
  var i__20687 = 0;
  while (true) {
    if (i__20687 < count__20686) {
      var vec__20688 = chunk__20685.cljs$core$IIndexed$_nth$arity$2(null, i__20687);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20688, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20688, 1, null);
      var G__20689_20702 = v;
      var G__20690_20703 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20689_20702, G__20690_20703) : f.call(null, G__20689_20702, G__20690_20703);
      var G__20704 = seq__20684;
      var G__20705 = chunk__20685;
      var G__20706 = count__20686;
      var G__20707 = i__20687 + 1;
      seq__20684 = G__20704;
      chunk__20685 = G__20705;
      count__20686 = G__20706;
      i__20687 = G__20707;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20684);
      if (temp__4126__auto__) {
        var seq__20684__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20684__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__20684__$1);
          var G__20708 = cljs.core.chunk_rest(seq__20684__$1);
          var G__20709 = c__4768__auto__;
          var G__20710 = cljs.core.count(c__4768__auto__);
          var G__20711 = 0;
          seq__20684 = G__20708;
          chunk__20685 = G__20709;
          count__20686 = G__20710;
          i__20687 = G__20711;
          continue;
        } else {
          var vec__20691 = cljs.core.first(seq__20684__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20691, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20691, 1, null);
          var G__20692_20712 = v;
          var G__20693_20713 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20692_20712, G__20693_20713) : f.call(null, G__20692_20712, G__20693_20713);
          var G__20714 = cljs.core.next(seq__20684__$1);
          var G__20715 = null;
          var G__20716 = 0;
          var G__20717 = 0;
          seq__20684 = G__20714;
          chunk__20685 = G__20715;
          count__20686 = G__20716;
          i__20687 = G__20717;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__20694 = init__$1;
        var G__20695 = self__.arr[i];
        var G__20696 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20694, G__20695, G__20696) : f.call(null, G__20694, G__20695, G__20696);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__20697 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20697) : cljs.core.deref.call(null, G__20697);
      } else {
        var G__20718 = i + 2;
        var G__20719 = init__$2;
        i = G__20718;
        init__$1 = G__20719;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__20698 = other;
    if (G__20698) {
      var bit__4655__auto__ = G__20698.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4655__auto__ || G__20698.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__20720 = i + 2;
              i = G__20720;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj20700 = {};
    return obj20700;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__20721 = s + 2;
            var G__20722 = d;
            s = G__20721;
            d = G__20722;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__20723 = s + 2;
            var G__20724 = d + 2;
            s = G__20723;
            d = G__20724;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__20701 = cljs.core.aclone(self__.arr);
        G__20701[idx + 1] = v;
        return G__20701;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20725 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20726 = cljs.core.next(es);
          ret = G__20725;
          es = G__20726;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__20727 = null;
  var G__20727__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20727__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20727 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20727__2.call(this, self__, k);
      case 3:
        return G__20727__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20727.cljs$core$IFn$_invoke$arity$2 = G__20727__2;
  G__20727.cljs$core$IFn$_invoke$arity$3 = G__20727__3;
  return G__20727;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args20681) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20681)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__20728 = i + 2;
        var G__20729 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__20728;
        ret = G__20729;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__20730_20738 = self__.arr;
      G__20730_20738.pop();
      G__20730_20738.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__20731 = self__.len;
          var G__20732 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__20731, G__20732) : cljs.core.array__GT_transient_hash_map.call(null, G__20731, G__20732);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__20733 = o;
      if (G__20733) {
        var bit__4662__auto__ = G__20733.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4662__auto__ || G__20733.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__20733.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__20733);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__20733);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__20734 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20734) : cljs.core.key.call(null, G__20734);
      }(), function() {
        var G__20735 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__20735) : cljs.core.val.call(null, G__20735);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__20739 = cljs.core.next(es);
          var G__20740 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__20736 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20736) : cljs.core.key.call(null, G__20736);
          }(), function() {
            var G__20737 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__20737) : cljs.core.val.call(null, G__20737);
          }());
          es = G__20739;
          tcoll__$2 = G__20740;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__20741 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__20742 = i + 2;
      out = G__20741;
      i = G__20742;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__20745 = cljs.core.aclone(arr);
    G__20745[i] = a;
    return G__20745;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__20746 = cljs.core.aclone(arr);
    G__20746[i] = a;
    G__20746[j] = b;
    return G__20746;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__20751 = init__$1;
          var G__20752 = k;
          var G__20753 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20751, G__20752, G__20753) : f.call(null, G__20751, G__20752, G__20753);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__20754 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20754) : cljs.core.deref.call(null, G__20754);
      } else {
        var G__20755 = i + 2;
        var G__20756 = init__$2;
        i = G__20755;
        init__$1 = G__20756;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__20757 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__20757) : cljs.core.create_inode_seq.call(null, G__20757);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_20771 = 0;
        var j_20772 = 0;
        while (true) {
          if (i_20771 < 32) {
            if ((self__.bitmap >>> i_20771 & 1) === 0) {
              var G__20773 = i_20771 + 1;
              var G__20774 = j_20772;
              i_20771 = G__20773;
              j_20772 = G__20774;
              continue;
            } else {
              nodes[i_20771] = !(self__.arr[j_20772] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_20772]), self__.arr[j_20772], self__.arr[j_20772 + 1], added_leaf_QMARK_) : self__.arr[j_20772 + 1];
              var G__20775 = i_20771 + 1;
              var G__20776 = j_20772 + 2;
              i_20771 = G__20775;
              j_20772 = G__20776;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__20758 = edit__$1;
          var G__20759 = shift + 5;
          var G__20760 = key_or_nil;
          var G__20761 = val_or_node;
          var G__20762 = hash;
          var G__20763 = key;
          var G__20764 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__20758, G__20759, G__20760, G__20761, G__20762, G__20763, G__20764) : cljs.core.create_node.call(null, G__20758, G__20759, G__20760, G__20761, G__20762, G__20763, G__20764);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_20777 = 0;
      var j_20778 = 0;
      while (true) {
        if (i_20777 < 32) {
          if ((self__.bitmap >>> i_20777 & 1) === 0) {
            var G__20779 = i_20777 + 1;
            var G__20780 = j_20778;
            i_20777 = G__20779;
            j_20778 = G__20780;
            continue;
          } else {
            nodes[i_20777] = !(self__.arr[j_20778] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_20778]), self__.arr[j_20778], self__.arr[j_20778 + 1], added_leaf_QMARK_) : self__.arr[j_20778 + 1];
            var G__20781 = i_20777 + 1;
            var G__20782 = j_20778 + 2;
            i_20777 = G__20781;
            j_20778 = G__20782;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__20765 = shift + 5;
          var G__20766 = key_or_nil;
          var G__20767 = val_or_node;
          var G__20768 = hash;
          var G__20769 = key;
          var G__20770 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__20765, G__20766, G__20767, G__20768, G__20769, G__20770) : cljs.core.create_node.call(null, G__20765, G__20766, G__20767, G__20768, G__20769, G__20770);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__20783 = i + 1;
        var G__20784 = j + 2;
        var G__20785 = bitmap | 1 << i;
        i = G__20783;
        j = G__20784;
        bitmap = G__20785;
        continue;
      } else {
        var G__20786 = i + 1;
        var G__20787 = j;
        var G__20788 = bitmap;
        i = G__20786;
        j = G__20787;
        bitmap = G__20788;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__20789 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__20789) : cljs.core.create_array_node_seq.call(null, G__20789);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__20790 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20790) : cljs.core.deref.call(null, G__20790);
        } else {
          var G__20791 = i + 1;
          var G__20792 = init__$2;
          i = G__20791;
          init__$1 = G__20792;
          continue;
        }
      } else {
        var G__20793 = i + 1;
        var G__20794 = init__$1;
        i = G__20793;
        init__$1 = G__20794;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__20795 = i + 2;
        i = G__20795;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__20796 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__20796) : cljs.core.create_inode_seq.call(null, G__20796);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__20797 = self__.nodes;
    var G__20798 = self__.i + 2;
    var G__20799 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__20797, G__20798, G__20799) : cljs.core.create_inode_seq.call(null, G__20797, G__20798, G__20799);
  } else {
    var G__20800 = self__.nodes;
    var G__20801 = self__.i;
    var G__20802 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__20800, G__20801, G__20802) : cljs.core.create_inode_seq.call(null, G__20800, G__20801, G__20802);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__20806 = j + 2;
                j = G__20806;
                continue;
              }
            } else {
              var G__20807 = j + 2;
              j = G__20807;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__20808 = null;
  var G__20809 = self__.nodes;
  var G__20810 = self__.i;
  var G__20811 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__20808, G__20809, G__20810, G__20811) : cljs.core.create_array_node_seq.call(null, G__20808, G__20809, G__20810, G__20811);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__20816 = j + 1;
              j = G__20816;
              continue;
            }
          } else {
            var G__20817 = j + 1;
            j = G__20817;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20819 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__20819) : cljs.core.keys.call(null, G__20819);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20820 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__20820) : cljs.core.vals.call(null, G__20820);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20821 = cljs.core.seq(coll);
  var chunk__20822 = null;
  var count__20823 = 0;
  var i__20824 = 0;
  while (true) {
    if (i__20824 < count__20823) {
      var vec__20825 = chunk__20822.cljs$core$IIndexed$_nth$arity$2(null, i__20824);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20825, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20825, 1, null);
      var G__20826_20837 = v;
      var G__20827_20838 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20826_20837, G__20827_20838) : f.call(null, G__20826_20837, G__20827_20838);
      var G__20839 = seq__20821;
      var G__20840 = chunk__20822;
      var G__20841 = count__20823;
      var G__20842 = i__20824 + 1;
      seq__20821 = G__20839;
      chunk__20822 = G__20840;
      count__20823 = G__20841;
      i__20824 = G__20842;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20821);
      if (temp__4126__auto__) {
        var seq__20821__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20821__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__20821__$1);
          var G__20843 = cljs.core.chunk_rest(seq__20821__$1);
          var G__20844 = c__4768__auto__;
          var G__20845 = cljs.core.count(c__4768__auto__);
          var G__20846 = 0;
          seq__20821 = G__20843;
          chunk__20822 = G__20844;
          count__20823 = G__20845;
          i__20824 = G__20846;
          continue;
        } else {
          var vec__20828 = cljs.core.first(seq__20821__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20828, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20828, 1, null);
          var G__20829_20847 = v;
          var G__20830_20848 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20829_20847, G__20830_20848) : f.call(null, G__20829_20847, G__20830_20848);
          var G__20849 = cljs.core.next(seq__20821__$1);
          var G__20850 = null;
          var G__20851 = 0;
          var G__20852 = 0;
          seq__20821 = G__20849;
          chunk__20822 = G__20850;
          count__20823 = G__20851;
          i__20824 = G__20852;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__20831 = init;
    var G__20832 = null;
    var G__20833 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20831, G__20832, G__20833) : f.call(null, G__20831, G__20832, G__20833);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__20834 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20834) : cljs.core.deref.call(null, G__20834);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj20836 = {};
    return obj20836;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20853 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20854 = cljs.core.next(es);
          ret = G__20853;
          es = G__20854;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__20855 = null;
  var G__20855__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20855__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20855 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20855__2.call(this, self__, k);
      case 3:
        return G__20855__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20855.cljs$core$IFn$_invoke$arity$2 = G__20855__2;
  G__20855.cljs$core$IFn$_invoke$arity$3 = G__20855__3;
  return G__20855;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args20818) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20818)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__20856 = i + 2;
      var G__20857 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__20856;
      ret = G__20857;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__20858 = i + 1;
      var G__20859 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__20858;
      out = G__20859;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__20860 = o;
      if (G__20860) {
        var bit__4662__auto__ = G__20860.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4662__auto__ || G__20860.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__20860.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__20860);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__20860);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__20861 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20861) : cljs.core.key.call(null, G__20861);
      }(), function() {
        var G__20862 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__20862) : cljs.core.val.call(null, G__20862);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__20865 = cljs.core.next(es);
          var G__20866 = tcoll__$1.assoc_BANG_(function() {
            var G__20863 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20863) : cljs.core.key.call(null, G__20863);
          }(), function() {
            var G__20864 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__20864) : cljs.core.val.call(null, G__20864);
          }());
          es = G__20865;
          tcoll__$1 = G__20866;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__20867 = ascending_QMARK_ ? t.left : t.right;
      var G__20868 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__20867;
      stack__$1 = G__20868;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__20881 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20881) : cljs.core.deref.call(null, G__20881);
  } else {
    var init__$2 = function() {
      var G__20882 = init__$1;
      var G__20883 = node.key;
      var G__20884 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20882, G__20883, G__20884) : f.call(null, G__20882, G__20883, G__20884);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__20885 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20885) : cljs.core.deref.call(null, G__20885);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__20886 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20886) : cljs.core.deref.call(null, G__20886);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__20888 = null;
  var G__20888__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20888__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20888 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20888__2.call(this, self__, k);
      case 3:
        return G__20888__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20888.cljs$core$IFn$_invoke$arity$2 = G__20888__2;
  G__20888.cljs$core$IFn$_invoke$arity$3 = G__20888__3;
  return G__20888;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args20887) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20887)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__20890 = null;
  var G__20890__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20890__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20890 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20890__2.call(this, self__, k);
      case 3:
        return G__20890__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20890.cljs$core$IFn$_invoke$arity$2 = G__20890__2;
  G__20890.cljs$core$IFn$_invoke$arity$3 = G__20890__3;
  return G__20890;
}();
cljs.core.RedNode.prototype.apply = function(self__, args20889) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20889)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__20903 = k;
      var G__20904 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20903, G__20904) : comp.call(null, G__20903, G__20904);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app__$1 = tree_map_append(left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.RedNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.RedNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app__$1, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append(left, right.left), right.right, null);
        } else {
          var app__$1 = tree_map_append(left.right, right.left);
          if (app__$1 instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app__$1.key, app__$1.val, new cljs.core.BlackNode(left.key, left.val, left.left, app__$1.left, null), new cljs.core.BlackNode(right.key, right.val, app__$1.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app__$1, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__20923 = k;
      var G__20924 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20923, G__20924) : comp.call(null, G__20923, G__20924);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__20935 = k;
    var G__20936 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20935, G__20936) : comp.call(null, G__20935, G__20936);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20938 = cljs.core.seq(coll);
  var chunk__20939 = null;
  var count__20940 = 0;
  var i__20941 = 0;
  while (true) {
    if (i__20941 < count__20940) {
      var vec__20942 = chunk__20939.cljs$core$IIndexed$_nth$arity$2(null, i__20941);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20942, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20942, 1, null);
      var G__20943_20955 = v;
      var G__20944_20956 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20943_20955, G__20944_20956) : f.call(null, G__20943_20955, G__20944_20956);
      var G__20957 = seq__20938;
      var G__20958 = chunk__20939;
      var G__20959 = count__20940;
      var G__20960 = i__20941 + 1;
      seq__20938 = G__20957;
      chunk__20939 = G__20958;
      count__20940 = G__20959;
      i__20941 = G__20960;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__20938);
      if (temp__4126__auto__) {
        var seq__20938__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20938__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__20938__$1);
          var G__20961 = cljs.core.chunk_rest(seq__20938__$1);
          var G__20962 = c__4768__auto__;
          var G__20963 = cljs.core.count(c__4768__auto__);
          var G__20964 = 0;
          seq__20938 = G__20961;
          chunk__20939 = G__20962;
          count__20940 = G__20963;
          i__20941 = G__20964;
          continue;
        } else {
          var vec__20945 = cljs.core.first(seq__20938__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20945, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20945, 1, null);
          var G__20946_20965 = v;
          var G__20947_20966 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20946_20965, G__20947_20966) : f.call(null, G__20946_20965, G__20947_20966);
          var G__20967 = cljs.core.next(seq__20938__$1);
          var G__20968 = null;
          var G__20969 = 0;
          var G__20970 = 0;
          seq__20938 = G__20967;
          chunk__20939 = G__20968;
          count__20940 = G__20969;
          i__20941 = G__20970;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20948 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__20948) : cljs.core.keys.call(null, G__20948);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__20949 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__20949) : cljs.core.vals.call(null, G__20949);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__20950 = k;
        var G__20951 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__20950, G__20951) : self__.comp.call(null, G__20950, G__20951);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__20971 = t.left;
          t = G__20971;
          continue;
        } else {
          var G__20972 = t.right;
          t = G__20972;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20973 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20974 = cljs.core.next(es);
          ret = G__20973;
          es = G__20974;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__20975 = null;
  var G__20975__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20975__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20975 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20975__2.call(this, self__, k);
      case 3:
        return G__20975__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20975.cljs$core$IFn$_invoke$arity$2 = G__20975__2;
  G__20975.cljs$core$IFn$_invoke$arity$3 = G__20975__3;
  return G__20975;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args20937) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20937)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__20952 = k;
          var G__20953 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__20952, G__20953) : self__.comp.call(null, G__20952, G__20953);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__20976 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__20977 = t.left;
              stack = G__20976;
              t = G__20977;
              continue;
            } else {
              var G__20978 = stack;
              var G__20979 = t.right;
              stack = G__20978;
              t = G__20979;
              continue;
            }
          } else {
            if (c > 0) {
              var G__20980 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__20981 = t.right;
              stack = G__20980;
              t = G__20981;
              continue;
            } else {
              var G__20982 = stack;
              var G__20983 = t.left;
              stack = G__20982;
              t = G__20983;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__20954 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__20954) : cljs.core.key.call(null, G__20954);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__20984 = cljs.core.nnext(in$);
        var G__20985 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__20984;
        out = G__20985;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20986__i = 0, G__20986__a = new Array(arguments.length - 0);
      while (G__20986__i < G__20986__a.length) {
        G__20986__a[G__20986__i] = arguments[G__20986__i + 0];
        ++G__20986__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20986__a, 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__20987) {
    var keyvals = cljs.core.seq(arglist__20987);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20988__i = 0, G__20988__a = new Array(arguments.length - 0);
      while (G__20988__i < G__20988__a.length) {
        G__20988__a[G__20988__i] = arguments[G__20988__i + 0];
        ++G__20988__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20988__a, 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__20989) {
    var keyvals = cljs.core.seq(arglist__20989);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj20993 = {};
      return obj20993;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__20994 = cljs.core.nnext(kvs);
        kvs = G__20994;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20995__i = 0, G__20995__a = new Array(arguments.length - 0);
      while (G__20995__i < G__20995__a.length) {
        G__20995__a[G__20995__i] = arguments[G__20995__i + 0];
        ++G__20995__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20995__a, 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__20996) {
    var keyvals = cljs.core.seq(arglist__20996);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__20997 = cljs.core.nnext(in$);
        var G__20998 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__20997;
        out = G__20998;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__20999__i = 0, G__20999__a = new Array(arguments.length - 0);
      while (G__20999__i < G__20999__a.length) {
        G__20999__a[G__20999__i] = arguments[G__20999__i + 0];
        ++G__20999__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__20999__a, 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__21000) {
    var keyvals = cljs.core.seq(arglist__21000);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__21001 = cljs.core.nnext(in$);
        var G__21002 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__21001;
        out = G__21002;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__21003__i = 0, G__21003__a = new Array(arguments.length - 1);
      while (G__21003__i < G__21003__a.length) {
        G__21003__a[G__21003__i] = arguments[G__21003__i + 1];
        ++G__21003__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__21003__a, 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__21004) {
    var comparator = cljs.core.first(arglist__21004);
    var keyvals = cljs.core.rest(arglist__21004);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21005 = self__.mseq;
    if (G__21005) {
      var bit__4662__auto__ = G__21005.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__21005.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21005.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21005);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21005);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21006 = self__.mseq;
    if (G__21006) {
      var bit__4662__auto__ = G__21006.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__21006.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21006.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21006);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21006);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21007 = self__.mseq;
    if (G__21007) {
      var bit__4662__auto__ = G__21007.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__21007.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21007.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21007);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21007);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__21008 = self__.mseq;
    if (G__21008) {
      var bit__4662__auto__ = G__21008.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__21008.cljs$core$INext$) {
        return true;
      } else {
        if (!G__21008.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21008);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__21008);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__21009_SHARP_, p2__21010_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__3981__auto__ = p1__21009_SHARP_;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__21010_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__21011__i = 0, G__21011__a = new Array(arguments.length - 0);
      while (G__21011__i < G__21011__a.length) {
        G__21011__a[G__21011__i] = arguments[G__21011__i + 0];
        ++G__21011__i;
      }
      maps = new cljs.core.IndexedSeq(G__21011__a, 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__21012) {
    var maps = cljs.core.seq(arglist__21012);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__21015 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__21016 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21015, G__21016) : f.call(null, G__21015, G__21016);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__3981__auto__ = m1;
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__21017__i = 0, G__21017__a = new Array(arguments.length - 1);
      while (G__21017__i < G__21017__a.length) {
        G__21017__a[G__21017__i] = arguments[G__21017__i + 1];
        ++G__21017__i;
      }
      maps = new cljs.core.IndexedSeq(G__21017__a, 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__21018) {
    var f = cljs.core.first(arglist__21018);
    var maps = cljs.core.rest(arglist__21018);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__21019 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__21020 = cljs.core.next(keys);
      ret = G__21019;
      keys = G__21020;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__21023 = cljs.core.seq(coll);
  var chunk__21024 = null;
  var count__21025 = 0;
  var i__21026 = 0;
  while (true) {
    if (i__21026 < count__21025) {
      var vec__21027 = chunk__21024.cljs$core$IIndexed$_nth$arity$2(null, i__21026);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21027, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21027, 1, null);
      var G__21028_21033 = v;
      var G__21029_21034 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21028_21033, G__21029_21034) : f.call(null, G__21028_21033, G__21029_21034);
      var G__21035 = seq__21023;
      var G__21036 = chunk__21024;
      var G__21037 = count__21025;
      var G__21038 = i__21026 + 1;
      seq__21023 = G__21035;
      chunk__21024 = G__21036;
      count__21025 = G__21037;
      i__21026 = G__21038;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__21023);
      if (temp__4126__auto__) {
        var seq__21023__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21023__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__21023__$1);
          var G__21039 = cljs.core.chunk_rest(seq__21023__$1);
          var G__21040 = c__4768__auto__;
          var G__21041 = cljs.core.count(c__4768__auto__);
          var G__21042 = 0;
          seq__21023 = G__21039;
          chunk__21024 = G__21040;
          count__21025 = G__21041;
          i__21026 = G__21042;
          continue;
        } else {
          var vec__21030 = cljs.core.first(seq__21023__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21030, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21030, 1, null);
          var G__21031_21043 = v;
          var G__21032_21044 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21031_21043, G__21032_21044) : f.call(null, G__21031_21043, G__21032_21044);
          var G__21045 = cljs.core.next(seq__21023__$1);
          var G__21046 = null;
          var G__21047 = 0;
          var G__21048 = 0;
          seq__21023 = G__21045;
          chunk__21024 = G__21046;
          count__21025 = G__21047;
          i__21026 = G__21048;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__21021_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__21021_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__21049 = null;
  var G__21049__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21049__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21049 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21049__2.call(this, self__, k);
      case 3:
        return G__21049__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21049.cljs$core$IFn$_invoke$arity$2 = G__21049__2;
  G__21049.cljs$core$IFn$_invoke$arity$3 = G__21049__3;
  return G__21049;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args21022) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21022)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__21050 = i + 1;
        var G__21051 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__21050;
        out = G__21051;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__21052 = i + 1;
        var G__21053 = cljs.core._conj_BANG_(out, items[i]);
        i = G__21052;
        out = G__21053;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__21055 = null;
  var G__21055__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__21055__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__21055 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21055__2.call(this, self__, k);
      case 3:
        return G__21055__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21055.cljs$core$IFn$_invoke$arity$2 = G__21055__2;
  G__21055.cljs$core$IFn$_invoke$arity$3 = G__21055__3;
  return G__21055;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args21054) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21054)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__21058 = cljs.core.seq(coll);
  var chunk__21059 = null;
  var count__21060 = 0;
  var i__21061 = 0;
  while (true) {
    if (i__21061 < count__21060) {
      var vec__21062 = chunk__21059.cljs$core$IIndexed$_nth$arity$2(null, i__21061);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21062, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21062, 1, null);
      var G__21063_21068 = v;
      var G__21064_21069 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21063_21068, G__21064_21069) : f.call(null, G__21063_21068, G__21064_21069);
      var G__21070 = seq__21058;
      var G__21071 = chunk__21059;
      var G__21072 = count__21060;
      var G__21073 = i__21061 + 1;
      seq__21058 = G__21070;
      chunk__21059 = G__21071;
      count__21060 = G__21072;
      i__21061 = G__21073;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__21058);
      if (temp__4126__auto__) {
        var seq__21058__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21058__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__21058__$1);
          var G__21074 = cljs.core.chunk_rest(seq__21058__$1);
          var G__21075 = c__4768__auto__;
          var G__21076 = cljs.core.count(c__4768__auto__);
          var G__21077 = 0;
          seq__21058 = G__21074;
          chunk__21059 = G__21075;
          count__21060 = G__21076;
          i__21061 = G__21077;
          continue;
        } else {
          var vec__21065 = cljs.core.first(seq__21058__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21065, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21065, 1, null);
          var G__21066_21078 = v;
          var G__21067_21079 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21066_21078, G__21067_21079) : f.call(null, G__21066_21078, G__21067_21079);
          var G__21080 = cljs.core.next(seq__21058__$1);
          var G__21081 = null;
          var G__21082 = 0;
          var G__21083 = 0;
          seq__21058 = G__21080;
          chunk__21059 = G__21081;
          count__21060 = G__21082;
          i__21061 = G__21083;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__21056_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__21056_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__21084 = null;
  var G__21084__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__21084__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__21084 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__21084__2.call(this, self__, k);
      case 3:
        return G__21084__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21084.cljs$core$IFn$_invoke$arity$2 = G__21084__2;
  G__21084.cljs$core$IFn$_invoke$arity$3 = G__21084__3;
  return G__21084;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args21057) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21057)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4862__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4862__auto__.length) {
        var G__21085 = i + 1;
        var G__21086 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__21085;
        res = G__21086;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__21087 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__21088 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__21087;
          out = G__21088;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__21089__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__21089 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__21090__i = 0, G__21090__a = new Array(arguments.length - 0);
        while (G__21090__i < G__21090__a.length) {
          G__21090__a[G__21090__i] = arguments[G__21090__i + 0];
          ++G__21090__i;
        }
        keys = new cljs.core.IndexedSeq(G__21090__a, 0);
      }
      return G__21089__delegate.call(this, keys);
    };
    G__21089.cljs$lang$maxFixedArity = 0;
    G__21089.cljs$lang$applyTo = function(arglist__21091) {
      var keys = cljs.core.seq(arglist__21091);
      return G__21089__delegate(keys);
    };
    G__21089.cljs$core$IFn$_invoke$arity$variadic = G__21089__delegate;
    return G__21089;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        var G__21092 = null;
        if (arguments.length > 0) {
          var G__21093__i = 0, G__21093__a = new Array(arguments.length - 0);
          while (G__21093__i < G__21093__a.length) {
            G__21093__a[G__21093__i] = arguments[G__21093__i + 0];
            ++G__21093__i;
          }
          G__21092 = new cljs.core.IndexedSeq(G__21093__a, 0);
        }
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__21092);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__21094__i = 0, G__21094__a = new Array(arguments.length - 0);
      while (G__21094__i < G__21094__a.length) {
        G__21094__a[G__21094__i] = arguments[G__21094__i + 0];
        ++G__21094__i;
      }
      keys = new cljs.core.IndexedSeq(G__21094__a, 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__21095) {
    var keys = cljs.core.seq(arglist__21095);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__21096__i = 0, G__21096__a = new Array(arguments.length - 1);
      while (G__21096__i < G__21096__a.length) {
        G__21096__a[G__21096__i] = arguments[G__21096__i + 1];
        ++G__21096__i;
      }
      keys = new cljs.core.IndexedSeq(G__21096__a, 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__21097) {
    var comparator = cljs.core.first(arglist__21097);
    var keys = cljs.core.rest(arglist__21097);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__21098_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__21098_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__21098_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__21099_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__21099_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__21099_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function() {
  var distinct = null;
  var distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__21120 = null;
          var G__21120__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__21120__1 = function(result) {
            var G__21110 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21110) : rf.call(null, G__21110);
          };
          var G__21120__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__21111 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21111) : cljs.core.deref.call(null, G__21111);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__21112 = result;
              var G__21113 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21112, G__21113) : rf.call(null, G__21112, G__21113);
            }
          };
          G__21120 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__21120__0.call(this);
              case 1:
                return G__21120__1.call(this, result);
              case 2:
                return G__21120__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21120.cljs$core$IFn$_invoke$arity$0 = G__21120__0;
          G__21120.cljs$core$IFn$_invoke$arity$1 = G__21120__1;
          G__21120.cljs$core$IFn$_invoke$arity$2 = G__21120__2;
          return G__21120;
        }();
      }(seen);
    };
  };
  var distinct__1 = function(coll) {
    var step = function step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__21118, seen__$1) {
          while (true) {
            var vec__21119 = p__21118;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21119, 0, null);
            var xs__$1 = vec__21119;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__21121 = cljs.core.rest(s);
                var G__21122 = seen__$1;
                p__21118 = G__21121;
                seen__$1 = G__21122;
                continue;
              } else {
                return cljs.core.cons(f, step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return distinct__0.call(this);
      case 1:
        return distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct.cljs$core$IFn$_invoke$arity$0 = distinct__0;
  distinct.cljs$core$IFn$_invoke$arity$1 = distinct__1;
  return distinct;
}();
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__21123 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__21124 = cljs.core.next(s__$1);
      ret = G__21123;
      s__$1 = G__21124;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__21126 = x;
    if (G__21126) {
      var bit__4655__auto__ = G__21126.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4655__auto__ || G__21126.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__21127 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__21128 = cljs.core.next(ks);
      var G__21129 = cljs.core.next(vs);
      map = G__21127;
      ks = G__21128;
      vs = G__21129;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (function() {
      var G__21140 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21140) : k.call(null, G__21140);
    }() > function() {
      var G__21141 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21141) : k.call(null, G__21141);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__21142__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__21130_SHARP_, p2__21131_SHARP_) {
        return max_key.cljs$core$IFn$_invoke$arity$3(k, p1__21130_SHARP_, p2__21131_SHARP_);
      }, max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__21142 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__21143__i = 0, G__21143__a = new Array(arguments.length - 3);
        while (G__21143__i < G__21143__a.length) {
          G__21143__a[G__21143__i] = arguments[G__21143__i + 3];
          ++G__21143__i;
        }
        more = new cljs.core.IndexedSeq(G__21143__a, 0);
      }
      return G__21142__delegate.call(this, k, x, y, more);
    };
    G__21142.cljs$lang$maxFixedArity = 3;
    G__21142.cljs$lang$applyTo = function(arglist__21144) {
      var k = cljs.core.first(arglist__21144);
      arglist__21144 = cljs.core.next(arglist__21144);
      var x = cljs.core.first(arglist__21144);
      arglist__21144 = cljs.core.next(arglist__21144);
      var y = cljs.core.first(arglist__21144);
      var more = cljs.core.rest(arglist__21144);
      return G__21142__delegate(k, x, y, more);
    };
    G__21142.cljs$core$IFn$_invoke$arity$variadic = G__21142__delegate;
    return G__21142;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        var G__21145 = null;
        if (arguments.length > 3) {
          var G__21146__i = 0, G__21146__a = new Array(arguments.length - 3);
          while (G__21146__i < G__21146__a.length) {
            G__21146__a[G__21146__i] = arguments[G__21146__i + 3];
            ++G__21146__i;
          }
          G__21145 = new cljs.core.IndexedSeq(G__21146__a, 0);
        }
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__21145);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (function() {
      var G__21157 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21157) : k.call(null, G__21157);
    }() < function() {
      var G__21158 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__21158) : k.call(null, G__21158);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__21159__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__21147_SHARP_, p2__21148_SHARP_) {
        return min_key.cljs$core$IFn$_invoke$arity$3(k, p1__21147_SHARP_, p2__21148_SHARP_);
      }, min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__21159 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__21160__i = 0, G__21160__a = new Array(arguments.length - 3);
        while (G__21160__i < G__21160__a.length) {
          G__21160__a[G__21160__i] = arguments[G__21160__i + 3];
          ++G__21160__i;
        }
        more = new cljs.core.IndexedSeq(G__21160__a, 0);
      }
      return G__21159__delegate.call(this, k, x, y, more);
    };
    G__21159.cljs$lang$maxFixedArity = 3;
    G__21159.cljs$lang$applyTo = function(arglist__21161) {
      var k = cljs.core.first(arglist__21161);
      arglist__21161 = cljs.core.next(arglist__21161);
      var x = cljs.core.first(arglist__21161);
      arglist__21161 = cljs.core.next(arglist__21161);
      var y = cljs.core.first(arglist__21161);
      var more = cljs.core.rest(arglist__21161);
      return G__21159__delegate(k, x, y, more);
    };
    G__21159.cljs$core$IFn$_invoke$arity$variadic = G__21159__delegate;
    return G__21159;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        var G__21162 = null;
        if (arguments.length > 3) {
          var G__21163__i = 0, G__21163__a = new Array(arguments.length - 3);
          while (G__21163__i < G__21163__a.length) {
            G__21163__a[G__21163__i] = arguments[G__21163__i + 3];
            ++G__21163__i;
          }
          G__21162 = new cljs.core.IndexedSeq(G__21163__a, 0);
        }
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__21162);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__21180 = null;
          var G__21180__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__21180__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__21175 = result;
                var G__21176 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21175, G__21176) : rf.call(null, G__21175, G__21176);
              }());
            }();
            var G__21177 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21177) : rf.call(null, G__21177);
          };
          var G__21180__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__21178 = result;
              var G__21179 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21178, G__21179) : rf.call(null, G__21178, G__21179);
            } else {
              return result;
            }
          };
          G__21180 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__21180__0.call(this);
              case 1:
                return G__21180__1.call(this, result);
              case 2:
                return G__21180__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21180.cljs$core$IFn$_invoke$arity$0 = G__21180__0;
          G__21180.cljs$core$IFn$_invoke$arity$1 = G__21180__1;
          G__21180.cljs$core$IFn$_invoke$arity$2 = G__21180__2;
          return G__21180;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__21193 = null;
        var G__21193__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21193__1 = function(result) {
          var G__21188 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21188) : rf.call(null, G__21188);
        };
        var G__21193__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__21189 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21189) : pred.call(null, G__21189);
          }())) {
            var G__21190 = result;
            var G__21191 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21190, G__21191) : rf.call(null, G__21190, G__21191);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__21193 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21193__0.call(this);
            case 1:
              return G__21193__1.call(this, result);
            case 2:
              return G__21193__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21193.cljs$core$IFn$_invoke$arity$0 = G__21193__0;
        G__21193.cljs$core$IFn$_invoke$arity$1 = G__21193__1;
        G__21193.cljs$core$IFn$_invoke$arity$2 = G__21193__2;
        return G__21193;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__21192 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21192) : pred.call(null, G__21192);
        }())) {
          return cljs.core.cons(cljs.core.first(s), take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__21198 = function() {
      var G__21200 = cljs.core._entry_key(sc, e);
      var G__21201 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__21200, G__21201) : comp.call(null, G__21200, G__21201);
    }();
    var G__21199 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__21198, G__21199) : test.call(null, G__21198, G__21199);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__21205 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21205, 0, null);
        var s = vec__21205;
        if (cljs.core.truth_(function() {
          var G__21206 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__21206) : include.call(null, G__21206);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__21207 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21207, 0, null);
      var s = vec__21207;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__21211 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21211, 0, null);
        var s = vec__21211;
        if (cljs.core.truth_(function() {
          var G__21212 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__21212) : include.call(null, G__21212);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__21213 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21213, 0, null);
      var s = vec__21213;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__21214 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__21214) : Math.ceil.call(null, G__21214);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__21215 = ret;
        var G__21216 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21215, G__21216) : f.call(null, G__21215, G__21216);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__21217 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21217) : cljs.core.deref.call(null, G__21217);
      } else {
        var G__21218 = i + self__.step;
        var G__21219 = ret__$1;
        i = G__21218;
        ret = G__21219;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__21237 = null;
          var G__21237__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__21237__1 = function(result) {
            var G__21234 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21234) : rf.call(null, G__21234);
          };
          var G__21237__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__21235 = result;
              var G__21236 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21235, G__21236) : rf.call(null, G__21235, G__21236);
            } else {
              return result;
            }
          };
          G__21237 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__21237__0.call(this);
              case 1:
                return G__21237__1.call(this, result);
              case 2:
                return G__21237__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21237.cljs$core$IFn$_invoke$arity$0 = G__21237__0;
          G__21237.cljs$core$IFn$_invoke$arity$1 = G__21237__1;
          G__21237.cljs$core$IFn$_invoke$arity$2 = G__21237__2;
          return G__21237;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__21259 = null;
          var G__21259__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__21259__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__21250 = result;
                var G__21251 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21250, G__21251) : rf.call(null, G__21250, G__21251);
              }());
            }();
            var G__21252 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21252) : rf.call(null, G__21252);
          };
          var G__21259__2 = function(result, input) {
            var pval = function() {
              var G__21253 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21253) : cljs.core.deref.call(null, G__21253);
            }();
            var val = function() {
              var G__21254 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21254) : f.call(null, G__21254);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__21255 = result;
                var G__21256 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21255, G__21256) : rf.call(null, G__21255, G__21256);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__21259 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__21259__0.call(this);
              case 1:
                return G__21259__1.call(this, result);
              case 2:
                return G__21259__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21259.cljs$core$IFn$_invoke$arity$0 = G__21259__0;
          G__21259.cljs$core$IFn$_invoke$arity$1 = G__21259__1;
          G__21259.cljs$core$IFn$_invoke$arity$2 = G__21259__2;
          return G__21259;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__21257 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21257) : f.call(null, G__21257);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__21238_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__21258 = p1__21238_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21258) : f.call(null, G__21258);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__21268 = init;
          var G__21269 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21268, G__21269) : f.call(null, G__21268, G__21269);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__21364 = null;
      var G__21364__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__21364__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21322 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21322) : f.call(null, G__21322);
        }()], null);
      };
      var G__21364__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21323 = x;
          var G__21324 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21323, G__21324) : f.call(null, G__21323, G__21324);
        }()], null);
      };
      var G__21364__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21325 = x;
          var G__21326 = y;
          var G__21327 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21325, G__21326, G__21327) : f.call(null, G__21325, G__21326, G__21327);
        }()], null);
      };
      var G__21364__4 = function() {
        var G__21365__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__21365 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21366__i = 0, G__21366__a = new Array(arguments.length - 3);
            while (G__21366__i < G__21366__a.length) {
              G__21366__a[G__21366__i] = arguments[G__21366__i + 3];
              ++G__21366__i;
            }
            args = new cljs.core.IndexedSeq(G__21366__a, 0);
          }
          return G__21365__delegate.call(this, x, y, z, args);
        };
        G__21365.cljs$lang$maxFixedArity = 3;
        G__21365.cljs$lang$applyTo = function(arglist__21367) {
          var x = cljs.core.first(arglist__21367);
          arglist__21367 = cljs.core.next(arglist__21367);
          var y = cljs.core.first(arglist__21367);
          arglist__21367 = cljs.core.next(arglist__21367);
          var z = cljs.core.first(arglist__21367);
          var args = cljs.core.rest(arglist__21367);
          return G__21365__delegate(x, y, z, args);
        };
        G__21365.cljs$core$IFn$_invoke$arity$variadic = G__21365__delegate;
        return G__21365;
      }();
      G__21364 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21364__0.call(this);
          case 1:
            return G__21364__1.call(this, x);
          case 2:
            return G__21364__2.call(this, x, y);
          case 3:
            return G__21364__3.call(this, x, y, z);
          default:
            var G__21368 = null;
            if (arguments.length > 3) {
              var G__21369__i = 0, G__21369__a = new Array(arguments.length - 3);
              while (G__21369__i < G__21369__a.length) {
                G__21369__a[G__21369__i] = arguments[G__21369__i + 3];
                ++G__21369__i;
              }
              G__21368 = new cljs.core.IndexedSeq(G__21369__a, 0);
            }
            return G__21364__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21368);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21364.cljs$lang$maxFixedArity = 3;
      G__21364.cljs$lang$applyTo = G__21364__4.cljs$lang$applyTo;
      G__21364.cljs$core$IFn$_invoke$arity$0 = G__21364__0;
      G__21364.cljs$core$IFn$_invoke$arity$1 = G__21364__1;
      G__21364.cljs$core$IFn$_invoke$arity$2 = G__21364__2;
      G__21364.cljs$core$IFn$_invoke$arity$3 = G__21364__3;
      G__21364.cljs$core$IFn$_invoke$arity$variadic = G__21364__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21364;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__21370 = null;
      var G__21370__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__21370__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21328 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21328) : f.call(null, G__21328);
        }(), function() {
          var G__21329 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21329) : g.call(null, G__21329);
        }()], null);
      };
      var G__21370__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21330 = x;
          var G__21331 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21330, G__21331) : f.call(null, G__21330, G__21331);
        }(), function() {
          var G__21332 = x;
          var G__21333 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__21332, G__21333) : g.call(null, G__21332, G__21333);
        }()], null);
      };
      var G__21370__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21334 = x;
          var G__21335 = y;
          var G__21336 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21334, G__21335, G__21336) : f.call(null, G__21334, G__21335, G__21336);
        }(), function() {
          var G__21337 = x;
          var G__21338 = y;
          var G__21339 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__21337, G__21338, G__21339) : g.call(null, G__21337, G__21338, G__21339);
        }()], null);
      };
      var G__21370__4 = function() {
        var G__21371__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__21371 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21372__i = 0, G__21372__a = new Array(arguments.length - 3);
            while (G__21372__i < G__21372__a.length) {
              G__21372__a[G__21372__i] = arguments[G__21372__i + 3];
              ++G__21372__i;
            }
            args = new cljs.core.IndexedSeq(G__21372__a, 0);
          }
          return G__21371__delegate.call(this, x, y, z, args);
        };
        G__21371.cljs$lang$maxFixedArity = 3;
        G__21371.cljs$lang$applyTo = function(arglist__21373) {
          var x = cljs.core.first(arglist__21373);
          arglist__21373 = cljs.core.next(arglist__21373);
          var y = cljs.core.first(arglist__21373);
          arglist__21373 = cljs.core.next(arglist__21373);
          var z = cljs.core.first(arglist__21373);
          var args = cljs.core.rest(arglist__21373);
          return G__21371__delegate(x, y, z, args);
        };
        G__21371.cljs$core$IFn$_invoke$arity$variadic = G__21371__delegate;
        return G__21371;
      }();
      G__21370 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21370__0.call(this);
          case 1:
            return G__21370__1.call(this, x);
          case 2:
            return G__21370__2.call(this, x, y);
          case 3:
            return G__21370__3.call(this, x, y, z);
          default:
            var G__21374 = null;
            if (arguments.length > 3) {
              var G__21375__i = 0, G__21375__a = new Array(arguments.length - 3);
              while (G__21375__i < G__21375__a.length) {
                G__21375__a[G__21375__i] = arguments[G__21375__i + 3];
                ++G__21375__i;
              }
              G__21374 = new cljs.core.IndexedSeq(G__21375__a, 0);
            }
            return G__21370__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21374);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21370.cljs$lang$maxFixedArity = 3;
      G__21370.cljs$lang$applyTo = G__21370__4.cljs$lang$applyTo;
      G__21370.cljs$core$IFn$_invoke$arity$0 = G__21370__0;
      G__21370.cljs$core$IFn$_invoke$arity$1 = G__21370__1;
      G__21370.cljs$core$IFn$_invoke$arity$2 = G__21370__2;
      G__21370.cljs$core$IFn$_invoke$arity$3 = G__21370__3;
      G__21370.cljs$core$IFn$_invoke$arity$variadic = G__21370__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21370;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__21376 = null;
      var G__21376__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__21376__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21340 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21340) : f.call(null, G__21340);
        }(), function() {
          var G__21341 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__21341) : g.call(null, G__21341);
        }(), function() {
          var G__21342 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__21342) : h.call(null, G__21342);
        }()], null);
      };
      var G__21376__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21343 = x;
          var G__21344 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21343, G__21344) : f.call(null, G__21343, G__21344);
        }(), function() {
          var G__21345 = x;
          var G__21346 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__21345, G__21346) : g.call(null, G__21345, G__21346);
        }(), function() {
          var G__21347 = x;
          var G__21348 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__21347, G__21348) : h.call(null, G__21347, G__21348);
        }()], null);
      };
      var G__21376__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__21349 = x;
          var G__21350 = y;
          var G__21351 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__21349, G__21350, G__21351) : f.call(null, G__21349, G__21350, G__21351);
        }(), function() {
          var G__21352 = x;
          var G__21353 = y;
          var G__21354 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__21352, G__21353, G__21354) : g.call(null, G__21352, G__21353, G__21354);
        }(), function() {
          var G__21355 = x;
          var G__21356 = y;
          var G__21357 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__21355, G__21356, G__21357) : h.call(null, G__21355, G__21356, G__21357);
        }()], null);
      };
      var G__21376__4 = function() {
        var G__21377__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__21377 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21378__i = 0, G__21378__a = new Array(arguments.length - 3);
            while (G__21378__i < G__21378__a.length) {
              G__21378__a[G__21378__i] = arguments[G__21378__i + 3];
              ++G__21378__i;
            }
            args = new cljs.core.IndexedSeq(G__21378__a, 0);
          }
          return G__21377__delegate.call(this, x, y, z, args);
        };
        G__21377.cljs$lang$maxFixedArity = 3;
        G__21377.cljs$lang$applyTo = function(arglist__21379) {
          var x = cljs.core.first(arglist__21379);
          arglist__21379 = cljs.core.next(arglist__21379);
          var y = cljs.core.first(arglist__21379);
          arglist__21379 = cljs.core.next(arglist__21379);
          var z = cljs.core.first(arglist__21379);
          var args = cljs.core.rest(arglist__21379);
          return G__21377__delegate(x, y, z, args);
        };
        G__21377.cljs$core$IFn$_invoke$arity$variadic = G__21377__delegate;
        return G__21377;
      }();
      G__21376 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21376__0.call(this);
          case 1:
            return G__21376__1.call(this, x);
          case 2:
            return G__21376__2.call(this, x, y);
          case 3:
            return G__21376__3.call(this, x, y, z);
          default:
            var G__21380 = null;
            if (arguments.length > 3) {
              var G__21381__i = 0, G__21381__a = new Array(arguments.length - 3);
              while (G__21381__i < G__21381__a.length) {
                G__21381__a[G__21381__i] = arguments[G__21381__i + 3];
                ++G__21381__i;
              }
              G__21380 = new cljs.core.IndexedSeq(G__21381__a, 0);
            }
            return G__21376__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21380);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21376.cljs$lang$maxFixedArity = 3;
      G__21376.cljs$lang$applyTo = G__21376__4.cljs$lang$applyTo;
      G__21376.cljs$core$IFn$_invoke$arity$0 = G__21376__0;
      G__21376.cljs$core$IFn$_invoke$arity$1 = G__21376__1;
      G__21376.cljs$core$IFn$_invoke$arity$2 = G__21376__2;
      G__21376.cljs$core$IFn$_invoke$arity$3 = G__21376__3;
      G__21376.cljs$core$IFn$_invoke$arity$variadic = G__21376__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21376;
    }();
  };
  var juxt__4 = function() {
    var G__21382__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__21383 = null;
          var G__21383__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__21270_SHARP_, p2__21271_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21270_SHARP_, function() {
                  return p2__21271_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__21271_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__21271_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__21383__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__21272_SHARP_, p2__21273_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21272_SHARP_, function() {
                  var G__21358 = x;
                  return p2__21273_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__21273_SHARP_.cljs$core$IFn$_invoke$arity$1(G__21358) : p2__21273_SHARP_.call(null, G__21358);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__21383__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__21274_SHARP_, p2__21275_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21274_SHARP_, function() {
                  var G__21359 = x;
                  var G__21360 = y;
                  return p2__21275_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__21275_SHARP_.cljs$core$IFn$_invoke$arity$2(G__21359, G__21360) : p2__21275_SHARP_.call(null, G__21359, G__21360);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__21383__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__21276_SHARP_, p2__21277_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21276_SHARP_, function() {
                  var G__21361 = x;
                  var G__21362 = y;
                  var G__21363 = z;
                  return p2__21277_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__21277_SHARP_.cljs$core$IFn$_invoke$arity$3(G__21361, G__21362, G__21363) : p2__21277_SHARP_.call(null, G__21361, G__21362, G__21363);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__21383__4 = function() {
            var G__21384__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__21278_SHARP_, p2__21279_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21278_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__21279_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__21384 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__21385__i = 0, G__21385__a = new Array(arguments.length - 3);
                while (G__21385__i < G__21385__a.length) {
                  G__21385__a[G__21385__i] = arguments[G__21385__i + 3];
                  ++G__21385__i;
                }
                args = new cljs.core.IndexedSeq(G__21385__a, 0);
              }
              return G__21384__delegate.call(this, x, y, z, args);
            };
            G__21384.cljs$lang$maxFixedArity = 3;
            G__21384.cljs$lang$applyTo = function(arglist__21386) {
              var x = cljs.core.first(arglist__21386);
              arglist__21386 = cljs.core.next(arglist__21386);
              var y = cljs.core.first(arglist__21386);
              arglist__21386 = cljs.core.next(arglist__21386);
              var z = cljs.core.first(arglist__21386);
              var args = cljs.core.rest(arglist__21386);
              return G__21384__delegate(x, y, z, args);
            };
            G__21384.cljs$core$IFn$_invoke$arity$variadic = G__21384__delegate;
            return G__21384;
          }();
          G__21383 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__21383__0.call(this);
              case 1:
                return G__21383__1.call(this, x);
              case 2:
                return G__21383__2.call(this, x, y);
              case 3:
                return G__21383__3.call(this, x, y, z);
              default:
                var G__21387 = null;
                if (arguments.length > 3) {
                  var G__21388__i = 0, G__21388__a = new Array(arguments.length - 3);
                  while (G__21388__i < G__21388__a.length) {
                    G__21388__a[G__21388__i] = arguments[G__21388__i + 3];
                    ++G__21388__i;
                  }
                  G__21387 = new cljs.core.IndexedSeq(G__21388__a, 0);
                }
                return G__21383__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21387);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21383.cljs$lang$maxFixedArity = 3;
          G__21383.cljs$lang$applyTo = G__21383__4.cljs$lang$applyTo;
          G__21383.cljs$core$IFn$_invoke$arity$0 = G__21383__0;
          G__21383.cljs$core$IFn$_invoke$arity$1 = G__21383__1;
          G__21383.cljs$core$IFn$_invoke$arity$2 = G__21383__2;
          G__21383.cljs$core$IFn$_invoke$arity$3 = G__21383__3;
          G__21383.cljs$core$IFn$_invoke$arity$variadic = G__21383__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__21383;
        }();
      }(fs__$1);
    };
    var G__21382 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__21389__i = 0, G__21389__a = new Array(arguments.length - 3);
        while (G__21389__i < G__21389__a.length) {
          G__21389__a[G__21389__i] = arguments[G__21389__i + 3];
          ++G__21389__i;
        }
        fs = new cljs.core.IndexedSeq(G__21389__a, 0);
      }
      return G__21382__delegate.call(this, f, g, h, fs);
    };
    G__21382.cljs$lang$maxFixedArity = 3;
    G__21382.cljs$lang$applyTo = function(arglist__21390) {
      var f = cljs.core.first(arglist__21390);
      arglist__21390 = cljs.core.next(arglist__21390);
      var g = cljs.core.first(arglist__21390);
      arglist__21390 = cljs.core.next(arglist__21390);
      var h = cljs.core.first(arglist__21390);
      var fs = cljs.core.rest(arglist__21390);
      return G__21382__delegate(f, g, h, fs);
    };
    G__21382.cljs$core$IFn$_invoke$arity$variadic = G__21382__delegate;
    return G__21382;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        var G__21391 = null;
        if (arguments.length > 3) {
          var G__21392__i = 0, G__21392__a = new Array(arguments.length - 3);
          while (G__21392__i < G__21392__a.length) {
            G__21392__a[G__21392__i] = arguments[G__21392__i + 3];
            ++G__21392__i;
          }
          G__21391 = new cljs.core.IndexedSeq(G__21392__a, 0);
        }
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__21391);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__21393 = cljs.core.next(coll);
        coll = G__21393;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__21394 = n - 1;
        var G__21395 = cljs.core.next(coll);
        n = G__21394;
        coll = G__21395;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__21399 = cljs.core.re_find(/^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21399, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21399, 1, null);
    var pattern = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21399, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_21407 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__3981__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__21408_21414 = cljs.core.first(coll);
          var G__21409_21415 = writer;
          var G__21410_21416 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21408_21414, G__21409_21415, G__21410_21416) : print_one.call(null, G__21408_21414, G__21409_21415, G__21410_21416);
        } else {
        }
        var coll_21417__$1 = cljs.core.next(coll);
        var n_21418 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_21417__$1 && (n_21418 == null || !(n_21418 === 0))) {
            cljs.core._write(writer, sep);
            var G__21411_21419 = cljs.core.first(coll_21417__$1);
            var G__21412_21420 = writer;
            var G__21413_21421 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21411_21419, G__21412_21420, G__21413_21421) : print_one.call(null, G__21411_21419, G__21412_21420, G__21413_21421);
            var G__21422 = cljs.core.next(coll_21417__$1);
            var G__21423 = n_21418 - 1;
            coll_21417__$1 = G__21422;
            n_21418 = G__21423;
            continue;
          } else {
            if (cljs.core.seq(coll_21417__$1) && n_21418 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__3981__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_21407;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__21428 = cljs.core.seq(ss);
    var chunk__21429 = null;
    var count__21430 = 0;
    var i__21431 = 0;
    while (true) {
      if (i__21431 < count__21430) {
        var s = chunk__21429.cljs$core$IIndexed$_nth$arity$2(null, i__21431);
        cljs.core._write(writer, s);
        var G__21432 = seq__21428;
        var G__21433 = chunk__21429;
        var G__21434 = count__21430;
        var G__21435 = i__21431 + 1;
        seq__21428 = G__21432;
        chunk__21429 = G__21433;
        count__21430 = G__21434;
        i__21431 = G__21435;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__21428);
        if (temp__4126__auto__) {
          var seq__21428__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__21428__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first(seq__21428__$1);
            var G__21436 = cljs.core.chunk_rest(seq__21428__$1);
            var G__21437 = c__4768__auto__;
            var G__21438 = cljs.core.count(c__4768__auto__);
            var G__21439 = 0;
            seq__21428 = G__21436;
            chunk__21429 = G__21437;
            count__21430 = G__21438;
            i__21431 = G__21439;
            continue;
          } else {
            var s = cljs.core.first(seq__21428__$1);
            cljs.core._write(writer, s);
            var G__21440 = cljs.core.next(seq__21428__$1);
            var G__21441 = null;
            var G__21442 = 0;
            var G__21443 = 0;
            seq__21428 = G__21440;
            chunk__21429 = G__21441;
            count__21430 = G__21442;
            i__21431 = G__21443;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__21444__i = 0, G__21444__a = new Array(arguments.length - 1);
      while (G__21444__i < G__21444__a.length) {
        G__21444__a[G__21444__i] = arguments[G__21444__i + 1];
        ++G__21444__i;
      }
      ss = new cljs.core.IndexedSeq(G__21444__a, 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__21445) {
    var writer = cljs.core.first(arglist__21445);
    var ss = cljs.core.rest(arglist__21445);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj21447 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj21447;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__21450 = '[\\\\"\b\f\n\r\t]';
    var G__21451 = "g";
    return RegExp(G__21450, G__21451);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3969__auto__)) {
          var and__3969__auto____$1 = function() {
            var G__21465 = obj;
            if (G__21465) {
              var bit__4662__auto__ = G__21465.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4662__auto__ || G__21465.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__21465.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__21465);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__21465);
            }
          }();
          if (and__3969__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__3969__auto____$1;
          }
        } else {
          return and__3969__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__21466_21476 = cljs.core.meta(obj);
        var G__21467_21477 = writer;
        var G__21468_21478 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__21466_21476, G__21467_21477, G__21468_21478) : cljs.core.pr_writer.call(null, G__21466_21476, G__21467_21477, G__21468_21478);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__21469 = obj;
            if (G__21469) {
              var bit__4655__auto__ = G__21469.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4655__auto__ || G__21469.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__21470 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__21471 = cljs.core.pr_writer;
                var G__21472 = writer;
                var G__21473 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__21470, G__21471, G__21472, G__21473) : cljs.core.print_map.call(null, G__21470, G__21471, G__21472, G__21473);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__21474 = obj;
                    return goog.isString(G__21474);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__21479 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__21479;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__21475 = obj;
                            if (G__21475) {
                              var bit__4662__auto__ = G__21475.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4662__auto__ || G__21475.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__21475.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__21475);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__21475);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__21483 = obj;
    var G__21484 = writer;
    var G__21485 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__21483, G__21484, G__21485) : alt_impl.call(null, G__21483, G__21484, G__21485);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__21490 = cljs.core.seq(cljs.core.next(objs));
  var chunk__21491 = null;
  var count__21492 = 0;
  var i__21493 = 0;
  while (true) {
    if (i__21493 < count__21492) {
      var obj = chunk__21491.cljs$core$IIndexed$_nth$arity$2(null, i__21493);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__21494 = seq__21490;
      var G__21495 = chunk__21491;
      var G__21496 = count__21492;
      var G__21497 = i__21493 + 1;
      seq__21490 = G__21494;
      chunk__21491 = G__21495;
      count__21492 = G__21496;
      i__21493 = G__21497;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__21490);
      if (temp__4126__auto__) {
        var seq__21490__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21490__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__21490__$1);
          var G__21498 = cljs.core.chunk_rest(seq__21490__$1);
          var G__21499 = c__4768__auto__;
          var G__21500 = cljs.core.count(c__4768__auto__);
          var G__21501 = 0;
          seq__21490 = G__21498;
          chunk__21491 = G__21499;
          count__21492 = G__21500;
          i__21493 = G__21501;
          continue;
        } else {
          var obj = cljs.core.first(seq__21490__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__21502 = cljs.core.next(seq__21490__$1);
          var G__21503 = null;
          var G__21504 = 0;
          var G__21505 = 0;
          seq__21490 = G__21502;
          chunk__21491 = G__21503;
          count__21492 = G__21504;
          i__21493 = G__21505;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21506__i = 0, G__21506__a = new Array(arguments.length - 0);
      while (G__21506__i < G__21506__a.length) {
        G__21506__a[G__21506__i] = arguments[G__21506__i + 0];
        ++G__21506__i;
      }
      objs = new cljs.core.IndexedSeq(G__21506__a, 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__21507) {
    var objs = cljs.core.seq(arglist__21507);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21508__i = 0, G__21508__a = new Array(arguments.length - 0);
      while (G__21508__i < G__21508__a.length) {
        G__21508__a[G__21508__i] = arguments[G__21508__i + 0];
        ++G__21508__i;
      }
      objs = new cljs.core.IndexedSeq(G__21508__a, 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__21509) {
    var objs = cljs.core.seq(arglist__21509);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21510__i = 0, G__21510__a = new Array(arguments.length - 0);
      while (G__21510__i < G__21510__a.length) {
        G__21510__a[G__21510__i] = arguments[G__21510__i + 0];
        ++G__21510__i;
      }
      objs = new cljs.core.IndexedSeq(G__21510__a, 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__21511) {
    var objs = cljs.core.seq(arglist__21511);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21512__i = 0, G__21512__a = new Array(arguments.length - 0);
      while (G__21512__i < G__21512__a.length) {
        G__21512__a[G__21512__i] = arguments[G__21512__i + 0];
        ++G__21512__i;
      }
      objs = new cljs.core.IndexedSeq(G__21512__a, 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__21513) {
    var objs = cljs.core.seq(arglist__21513);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21514__i = 0, G__21514__a = new Array(arguments.length - 0);
      while (G__21514__i < G__21514__a.length) {
        G__21514__a[G__21514__i] = arguments[G__21514__i + 0];
        ++G__21514__i;
      }
      objs = new cljs.core.IndexedSeq(G__21514__a, 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__21515) {
    var objs = cljs.core.seq(arglist__21515);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21516__i = 0, G__21516__a = new Array(arguments.length - 0);
      while (G__21516__i < G__21516__a.length) {
        G__21516__a[G__21516__i] = arguments[G__21516__i + 0];
        ++G__21516__i;
      }
      objs = new cljs.core.IndexedSeq(G__21516__a, 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__21517) {
    var objs = cljs.core.seq(arglist__21517);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21518__i = 0, G__21518__a = new Array(arguments.length - 0);
      while (G__21518__i < G__21518__a.length) {
        G__21518__a[G__21518__i] = arguments[G__21518__i + 0];
        ++G__21518__i;
      }
      objs = new cljs.core.IndexedSeq(G__21518__a, 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__21519) {
    var objs = cljs.core.seq(arglist__21519);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21520__i = 0, G__21520__a = new Array(arguments.length - 0);
      while (G__21520__i < G__21520__a.length) {
        G__21520__a[G__21520__i] = arguments[G__21520__i + 0];
        ++G__21520__i;
      }
      objs = new cljs.core.IndexedSeq(G__21520__a, 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__21521) {
    var objs = cljs.core.seq(arglist__21521);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__21528_21534 = cljs.core.key(e);
    var G__21529_21535 = w;
    var G__21530_21536 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21528_21534, G__21529_21535, G__21530_21536) : print_one.call(null, G__21528_21534, G__21529_21535, G__21530_21536);
    cljs.core._write(w, " ");
    var G__21531 = cljs.core.val(e);
    var G__21532 = w;
    var G__21533 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21531, G__21532, G__21533) : print_one.call(null, G__21531, G__21532, G__21533);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__21537__i = 0, G__21537__a = new Array(arguments.length - 2);
      while (G__21537__i < G__21537__a.length) {
        G__21537__a[G__21537__i] = arguments[G__21537__i + 2];
        ++G__21537__i;
      }
      args = new cljs.core.IndexedSeq(G__21537__a, 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__21538) {
    var iref = cljs.core.first(arglist__21538);
    arglist__21538 = cljs.core.next(arglist__21538);
    var f = cljs.core.first(arglist__21538);
    var args = cljs.core.rest(arglist__21538);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__21541 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__21541) : cljs.core.atom.call(null, G__21541);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__21543 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21543) : cljs.core.deref.call(null, G__21543);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__21544_SHARP_, p2__21545_SHARP_) {
    var ret = function() {
      var G__21548 = p1__21544_SHARP_;
      var G__21549 = p2__21545_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21548, G__21549) : rf.call(null, G__21548, G__21549);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__21552 = null;
      var G__21552__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__21552__1 = function(result) {
        var G__21551 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21551) : rf.call(null, G__21551);
      };
      var G__21552__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__21552 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__21552__0.call(this);
          case 1:
            return G__21552__1.call(this, result);
          case 2:
            return G__21552__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21552.cljs$core$IFn$_invoke$arity$0 = G__21552__0;
      G__21552.cljs$core$IFn$_invoke$arity$1 = G__21552__1;
      G__21552.cljs$core$IFn$_invoke$arity$2 = G__21552__2;
      return G__21552;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__21561 = null;
          var G__21561__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__21561__1 = function(result) {
            var G__21557 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__21557) : rf.call(null, G__21557);
          };
          var G__21561__2 = function(result, input) {
            var prior = function() {
              var G__21558 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21558) : cljs.core.deref.call(null, G__21558);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__21559 = result;
              var G__21560 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__21559, G__21560) : rf.call(null, G__21559, G__21560);
            }
          };
          G__21561 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__21561__0.call(this);
              case 1:
                return G__21561__1.call(this, result);
              case 2:
                return G__21561__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21561.cljs$core$IFn$_invoke$arity$0 = G__21561__0;
          G__21561.cljs$core$IFn$_invoke$arity$1 = G__21561__1;
          G__21561.cljs$core$IFn$_invoke$arity$2 = G__21561__2;
          return G__21561;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__21563_SHARP_, p2__21562_SHARP_) {
    var G__21565 = p2__21562_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__21565) : proc.call(null, G__21565);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj21567 = {};
  return obj21567;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._clj__GT_js[function() {
        var G__21571 = x__4625__auto__;
        return goog.typeOf(G__21571);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._key__GT_js[function() {
        var G__21575 = x__4625__auto__;
        return goog.typeOf(G__21575);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__21578 = k;
    if (G__21578) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__21578.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__21578.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__21578);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__21578);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__21579 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__21579) : cljs.core.clj__GT_js.call(null, G__21579);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__21595 = x;
      if (G__21595) {
        var bit__4662__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3981__auto__ = bit__4662__auto__;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return G__21595.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__21595.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__21595);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__21595);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj21597 = {};
              return obj21597;
            }();
            var seq__21598_21608 = cljs.core.seq(x);
            var chunk__21599_21609 = null;
            var count__21600_21610 = 0;
            var i__21601_21611 = 0;
            while (true) {
              if (i__21601_21611 < count__21600_21610) {
                var vec__21602_21612 = chunk__21599_21609.cljs$core$IIndexed$_nth$arity$2(null, i__21601_21611);
                var k_21613 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21602_21612, 0, null);
                var v_21614 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21602_21612, 1, null);
                m[cljs.core.key__GT_js(k_21613)] = clj__GT_js(v_21614);
                var G__21615 = seq__21598_21608;
                var G__21616 = chunk__21599_21609;
                var G__21617 = count__21600_21610;
                var G__21618 = i__21601_21611 + 1;
                seq__21598_21608 = G__21615;
                chunk__21599_21609 = G__21616;
                count__21600_21610 = G__21617;
                i__21601_21611 = G__21618;
                continue;
              } else {
                var temp__4126__auto___21619 = cljs.core.seq(seq__21598_21608);
                if (temp__4126__auto___21619) {
                  var seq__21598_21620__$1 = temp__4126__auto___21619;
                  if (cljs.core.chunked_seq_QMARK_(seq__21598_21620__$1)) {
                    var c__4768__auto___21621 = cljs.core.chunk_first(seq__21598_21620__$1);
                    var G__21622 = cljs.core.chunk_rest(seq__21598_21620__$1);
                    var G__21623 = c__4768__auto___21621;
                    var G__21624 = cljs.core.count(c__4768__auto___21621);
                    var G__21625 = 0;
                    seq__21598_21608 = G__21622;
                    chunk__21599_21609 = G__21623;
                    count__21600_21610 = G__21624;
                    i__21601_21611 = G__21625;
                    continue;
                  } else {
                    var vec__21603_21626 = cljs.core.first(seq__21598_21620__$1);
                    var k_21627 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21603_21626, 0, null);
                    var v_21628 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21603_21626, 1, null);
                    m[cljs.core.key__GT_js(k_21627)] = clj__GT_js(v_21628);
                    var G__21629 = cljs.core.next(seq__21598_21620__$1);
                    var G__21630 = null;
                    var G__21631 = 0;
                    var G__21632 = 0;
                    seq__21598_21608 = G__21629;
                    chunk__21599_21609 = G__21630;
                    count__21600_21610 = G__21631;
                    i__21601_21611 = G__21632;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__21604_21633 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clj__GT_js, x));
              var chunk__21605_21634 = null;
              var count__21606_21635 = 0;
              var i__21607_21636 = 0;
              while (true) {
                if (i__21607_21636 < count__21606_21635) {
                  var x_21637__$1 = chunk__21605_21634.cljs$core$IIndexed$_nth$arity$2(null, i__21607_21636);
                  arr.push(x_21637__$1);
                  var G__21638 = seq__21604_21633;
                  var G__21639 = chunk__21605_21634;
                  var G__21640 = count__21606_21635;
                  var G__21641 = i__21607_21636 + 1;
                  seq__21604_21633 = G__21638;
                  chunk__21605_21634 = G__21639;
                  count__21606_21635 = G__21640;
                  i__21607_21636 = G__21641;
                  continue;
                } else {
                  var temp__4126__auto___21642 = cljs.core.seq(seq__21604_21633);
                  if (temp__4126__auto___21642) {
                    var seq__21604_21643__$1 = temp__4126__auto___21642;
                    if (cljs.core.chunked_seq_QMARK_(seq__21604_21643__$1)) {
                      var c__4768__auto___21644 = cljs.core.chunk_first(seq__21604_21643__$1);
                      var G__21645 = cljs.core.chunk_rest(seq__21604_21643__$1);
                      var G__21646 = c__4768__auto___21644;
                      var G__21647 = cljs.core.count(c__4768__auto___21644);
                      var G__21648 = 0;
                      seq__21604_21633 = G__21645;
                      chunk__21605_21634 = G__21646;
                      count__21606_21635 = G__21647;
                      i__21607_21636 = G__21648;
                      continue;
                    } else {
                      var x_21649__$1 = cljs.core.first(seq__21604_21643__$1);
                      arr.push(x_21649__$1);
                      var G__21650 = cljs.core.next(seq__21604_21643__$1);
                      var G__21651 = null;
                      var G__21652 = 0;
                      var G__21653 = 0;
                      seq__21604_21633 = G__21650;
                      chunk__21605_21634 = G__21651;
                      count__21606_21635 = G__21652;
                      i__21607_21636 = G__21653;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj21655 = {};
  return obj21655;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._js__GT_clj[function() {
        var G__21659 = x__4625__auto__;
        return goog.typeOf(G__21659);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var js__GT_clj__2 = function() {
    var G__21716__delegate = function(x, opts) {
      var map__21689 = opts;
      var map__21689__$1 = cljs.core.seq_QMARK_(map__21689) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__21689) : map__21689;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21689__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__21689, map__21689__$1, keywordize_keys, keyfn) {
        return function thisfn(x__$1) {
          if (function() {
            var G__21705 = x__$1;
            if (G__21705) {
              var bit__4662__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__3981__auto__ = bit__4662__auto__;
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  return G__21705.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__21705.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__21705);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__21705);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
              } else {
                if (x__$1 instanceof Array) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4737__auto__ = function(map__21689, map__21689__$1, keywordize_keys, keyfn) {
                        return function iter__21706(s__21707) {
                          return new cljs.core.LazySeq(null, function(map__21689, map__21689__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__21707__$1 = s__21707;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__21707__$1);
                                if (temp__4126__auto__) {
                                  var s__21707__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__21707__$2)) {
                                    var c__4735__auto__ = cljs.core.chunk_first(s__21707__$2);
                                    var size__4736__auto__ = cljs.core.count(c__4735__auto__);
                                    var b__21709 = cljs.core.chunk_buffer(size__4736__auto__);
                                    if (function() {
                                      var i__21708 = 0;
                                      while (true) {
                                        if (i__21708 < size__4736__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4735__auto__, i__21708);
                                          cljs.core.chunk_append(b__21709, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__21714 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__21714) : keyfn.call(null, G__21714);
                                          }(), thisfn(x__$1[k])], null));
                                          var G__21717 = i__21708 + 1;
                                          i__21708 = G__21717;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__21709), iter__21706(cljs.core.chunk_rest(s__21707__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__21709), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__21707__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__21715 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__21715) : keyfn.call(null, G__21715);
                                    }(), thisfn(x__$1[k])], null), iter__21706(cljs.core.rest(s__21707__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__21689, map__21689__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__21689, map__21689__$1, keywordize_keys, keyfn);
                      return iter__4737__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__21689, map__21689__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__21716 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__21718__i = 0, G__21718__a = new Array(arguments.length - 1);
        while (G__21718__i < G__21718__a.length) {
          G__21718__a[G__21718__i] = arguments[G__21718__i + 1];
          ++G__21718__i;
        }
        opts = new cljs.core.IndexedSeq(G__21718__a, 0);
      }
      return G__21716__delegate.call(this, x, opts);
    };
    G__21716.cljs$lang$maxFixedArity = 1;
    G__21716.cljs$lang$applyTo = function(arglist__21719) {
      var x = cljs.core.first(arglist__21719);
      var opts = cljs.core.rest(arglist__21719);
      return G__21716__delegate(x, opts);
    };
    G__21716.cljs$core$IFn$_invoke$arity$variadic = G__21716__delegate;
    return G__21716;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        var G__21720 = null;
        if (arguments.length > 1) {
          var G__21721__i = 0, G__21721__a = new Array(arguments.length - 1);
          while (G__21721__i < G__21721__a.length) {
            G__21721__a[G__21721__i] = arguments[G__21721__i + 1];
            ++G__21721__i;
          }
          G__21720 = new cljs.core.IndexedSeq(G__21721__a, 0);
        }
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__21720);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = function() {
    var G__21724 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__21724) : cljs.core.atom.call(null, G__21724);
  }();
  return function(mem) {
    return function() {
      var G__21726__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__21725 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21725) : cljs.core.deref.call(null, G__21725);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__21726 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__21727__i = 0, G__21727__a = new Array(arguments.length - 0);
          while (G__21727__i < G__21727__a.length) {
            G__21727__a[G__21727__i] = arguments[G__21727__i + 0];
            ++G__21727__i;
          }
          args = new cljs.core.IndexedSeq(G__21727__a, 0);
        }
        return G__21726__delegate.call(this, args);
      };
      G__21726.cljs$lang$maxFixedArity = 0;
      G__21726.cljs$lang$applyTo = function(arglist__21728) {
        var args = cljs.core.seq(arglist__21728);
        return G__21726__delegate(args);
      };
      G__21726.cljs$core$IFn$_invoke$arity$variadic = G__21726__delegate;
      return G__21726;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__21730 = ret;
        f = G__21730;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__21731__delegate = function(f, args) {
      return trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__21731 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__21732__i = 0, G__21732__a = new Array(arguments.length - 1);
        while (G__21732__i < G__21732__a.length) {
          G__21732__a[G__21732__i] = arguments[G__21732__i + 1];
          ++G__21732__i;
        }
        args = new cljs.core.IndexedSeq(G__21732__a, 0);
      }
      return G__21731__delegate.call(this, f, args);
    };
    G__21731.cljs$lang$maxFixedArity = 1;
    G__21731.cljs$lang$applyTo = function(arglist__21733) {
      var f = cljs.core.first(arglist__21733);
      var args = cljs.core.rest(arglist__21733);
      return G__21731__delegate(f, args);
    };
    G__21731.cljs$core$IFn$_invoke$arity$variadic = G__21731__delegate;
    return G__21731;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        var G__21734 = null;
        if (arguments.length > 1) {
          var G__21735__i = 0, G__21735__a = new Array(arguments.length - 1);
          while (G__21735__i < G__21735__a.length) {
            G__21735__a[G__21735__i] = arguments[G__21735__i + 1];
            ++G__21735__i;
          }
          G__21734 = new cljs.core.IndexedSeq(G__21735__a, 0);
        }
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__21734);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  var G__21738 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__21738) : Math.floor.call(null, G__21738);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__21740 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__21740) : f.call(null, G__21740);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__21742 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__21742) : cljs.core.atom.call(null, G__21742);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__21743__i = 0, G__21743__a = new Array(arguments.length - 1);
      while (G__21743__i < G__21743__a.length) {
        G__21743__a[G__21743__i] = arguments[G__21743__i + 1];
        ++G__21743__i;
      }
      args = new cljs.core.IndexedSeq(G__21743__a, 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__21744) {
    var f = cljs.core.first(arglist__21744);
    var args = cljs.core.rest(arglist__21744);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__21809 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21809) : cljs.core.deref.call(null, G__21809);
    }(), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3981__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__3981__auto__) {
      return or__3981__auto__;
    } else {
      var or__3981__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3981__auto____$1) {
        return or__3981__auto____$1;
      } else {
        var and__3969__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__3969__auto__) {
          var and__3969__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__3969__auto____$1) {
            var and__3969__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__3969__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__21834 = isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__21832 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__21832) : child.call(null, G__21832);
                  }(), function() {
                    var G__21833 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__21833) : parent.call(null, G__21833);
                  }());
                  var G__21835 = i + 1;
                  ret = G__21834;
                  i = G__21835;
                  continue;
                }
                break;
              }
            } else {
              return and__3969__auto____$2;
            }
          } else {
            return and__3969__auto____$1;
          }
        } else {
          return and__3969__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21839 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21839) : cljs.core.deref.call(null, G__21839);
    }(), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21843 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21843) : cljs.core.deref.call(null, G__21843);
    }(), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21847 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21847) : cljs.core.deref.call(null, G__21847);
    }(), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__21856 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__21856) : targets.call(null, G__21856);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__21857 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__21857) : sources.call(null, G__21857);
        }()));
      };
    }(tp, td, ta);
    var or__3981__auto__ = cljs.core.contains_QMARK_(function() {
      var G__21861 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__21861) : tp.call(null, G__21861);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__21862 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__21862) : ta.call(null, G__21862);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__21863 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__21863) : ta.call(null, G__21863);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__21870 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__21870) : parentMap.call(null, G__21870);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21871 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__21871) : parentMap.call(null, G__21871);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__21864_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__21864_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__21864_SHARP_), cljs.core.second(p1__21864_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__21872 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__21872) : parentMap.call(null, G__21872);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__21865_SHARP_, p2__21866_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__21865_SHARP_, p2__21866_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__21875 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21875) : cljs.core.deref.call(null, G__21875);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__21876 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21876) : cljs.core.deref.call(null, G__21876);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__21892 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21892) : cljs.core.deref.call(null, G__21892);
  }().call(null, x);
  var or__3981__auto__ = cljs.core.truth_(function() {
    var and__3969__auto__ = xprefs;
    if (cljs.core.truth_(and__3969__auto__)) {
      var G__21894 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__21894) : xprefs.call(null, G__21894);
    } else {
      return and__3969__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var or__3981__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__21895 = cljs.core.rest(ps);
          ps = G__21895;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3981__auto____$1)) {
      return or__3981__auto____$1;
    } else {
      var or__3981__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__21896 = cljs.core.rest(ps);
            ps = G__21896;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3981__auto____$2)) {
        return or__3981__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3981__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__21910) {
    var vec__21911 = p__21910;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21911, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21911, 1, null);
    var e = vec__21911;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__21912 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21912) : cljs.core.deref.call(null, G__21912);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3981__auto__ = be == null;
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__21913 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21913) : cljs.core.deref.call(null, G__21913);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__21914 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21914) : cljs.core.deref.call(null, G__21914);
    }(), function() {
      var G__21915 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21915) : cljs.core.deref.call(null, G__21915);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj21917 = {};
  return obj21917;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._reset[function() {
        var G__21921 = x__4625__auto__;
        return goog.typeOf(G__21921);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._reset["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._add_method[function() {
        var G__21925 = x__4625__auto__;
        return goog.typeOf(G__21925);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._add_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._remove_method[function() {
        var G__21929 = x__4625__auto__;
        return goog.typeOf(G__21929);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._remove_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._prefer_method[function() {
        var G__21933 = x__4625__auto__;
        return goog.typeOf(G__21933);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._get_method[function() {
        var G__21937 = x__4625__auto__;
        return goog.typeOf(G__21937);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._get_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._methods[function() {
        var G__21941 = x__4625__auto__;
        return goog.typeOf(G__21941);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._methods["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._prefers[function() {
        var G__21945 = x__4625__auto__;
        return goog.typeOf(G__21945);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._prefers["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__21947 = this$__$1;
  return goog.getUid(G__21947);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__21948 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21948) : cljs.core.deref.call(null, G__21948);
  }(), function() {
    var G__21949 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21949) : cljs.core.deref.call(null, G__21949);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__21950 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21950) : cljs.core.deref.call(null, G__21950);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__21951 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21951) : cljs.core.deref.call(null, G__21951);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__21952 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21952) : cljs.core.deref.call(null, G__21952);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__21953 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21953) : cljs.core.deref.call(null, G__21953);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__22794 = null;
  var G__22794__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__22794__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21954 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__21954) : self__.dispatch_fn.call(null, G__21954);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21955 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__21955) : target_fn.call(null, G__21955);
  };
  var G__22794__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21956 = a;
      var G__21957 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__21956, G__21957) : self__.dispatch_fn.call(null, G__21956, G__21957);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21958 = a;
    var G__21959 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__21958, G__21959) : target_fn.call(null, G__21958, G__21959);
  };
  var G__22794__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21960 = a;
      var G__21961 = b;
      var G__21962 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__21960, G__21961, G__21962) : self__.dispatch_fn.call(null, G__21960, G__21961, G__21962);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21963 = a;
    var G__21964 = b;
    var G__21965 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__21963, G__21964, G__21965) : target_fn.call(null, G__21963, G__21964, G__21965);
  };
  var G__22794__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21966 = a;
      var G__21967 = b;
      var G__21968 = c;
      var G__21969 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__21966, G__21967, G__21968, G__21969) : self__.dispatch_fn.call(null, G__21966, G__21967, G__21968, G__21969);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21970 = a;
    var G__21971 = b;
    var G__21972 = c;
    var G__21973 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__21970, G__21971, G__21972, G__21973) : target_fn.call(null, G__21970, G__21971, G__21972, G__21973);
  };
  var G__22794__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21974 = a;
      var G__21975 = b;
      var G__21976 = c;
      var G__21977 = d;
      var G__21978 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__21974, G__21975, G__21976, G__21977, G__21978) : self__.dispatch_fn.call(null, G__21974, G__21975, G__21976, G__21977, G__21978);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21979 = a;
    var G__21980 = b;
    var G__21981 = c;
    var G__21982 = d;
    var G__21983 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__21979, G__21980, G__21981, G__21982, G__21983) : target_fn.call(null, G__21979, G__21980, G__21981, G__21982, G__21983);
  };
  var G__22794__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21984 = a;
      var G__21985 = b;
      var G__21986 = c;
      var G__21987 = d;
      var G__21988 = e;
      var G__21989 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__21984, G__21985, G__21986, G__21987, G__21988, G__21989) : self__.dispatch_fn.call(null, G__21984, G__21985, G__21986, G__21987, G__21988, G__21989);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__21990 = a;
    var G__21991 = b;
    var G__21992 = c;
    var G__21993 = d;
    var G__21994 = e;
    var G__21995 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__21990, G__21991, G__21992, G__21993, G__21994, G__21995) : target_fn.call(null, G__21990, G__21991, G__21992, G__21993, G__21994, G__21995);
  };
  var G__22794__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__21996 = a;
      var G__21997 = b;
      var G__21998 = c;
      var G__21999 = d;
      var G__22000 = e;
      var G__22001 = f;
      var G__22002 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__21996, G__21997, G__21998, G__21999, G__22000, G__22001, G__22002) : self__.dispatch_fn.call(null, G__21996, G__21997, G__21998, G__21999, G__22000, G__22001, G__22002);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22003 = a;
    var G__22004 = b;
    var G__22005 = c;
    var G__22006 = d;
    var G__22007 = e;
    var G__22008 = f;
    var G__22009 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__22003, G__22004, G__22005, G__22006, G__22007, G__22008, G__22009) : target_fn.call(null, G__22003, G__22004, G__22005, G__22006, G__22007, G__22008, G__22009);
  };
  var G__22794__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22010 = a;
      var G__22011 = b;
      var G__22012 = c;
      var G__22013 = d;
      var G__22014 = e;
      var G__22015 = f;
      var G__22016 = g;
      var G__22017 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__22010, G__22011, G__22012, G__22013, G__22014, G__22015, G__22016, G__22017) : self__.dispatch_fn.call(null, G__22010, G__22011, G__22012, G__22013, G__22014, G__22015, G__22016, G__22017);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22018 = a;
    var G__22019 = b;
    var G__22020 = c;
    var G__22021 = d;
    var G__22022 = e;
    var G__22023 = f;
    var G__22024 = g;
    var G__22025 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__22018, G__22019, G__22020, G__22021, G__22022, G__22023, G__22024, G__22025) : target_fn.call(null, G__22018, G__22019, G__22020, G__22021, G__22022, G__22023, G__22024, G__22025);
  };
  var G__22794__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22026 = a;
      var G__22027 = b;
      var G__22028 = c;
      var G__22029 = d;
      var G__22030 = e;
      var G__22031 = f;
      var G__22032 = g;
      var G__22033 = h;
      var G__22034 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__22026, G__22027, G__22028, G__22029, G__22030, G__22031, G__22032, G__22033, G__22034) : self__.dispatch_fn.call(null, G__22026, G__22027, G__22028, G__22029, G__22030, G__22031, G__22032, G__22033, G__22034);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22035 = a;
    var G__22036 = b;
    var G__22037 = c;
    var G__22038 = d;
    var G__22039 = e;
    var G__22040 = f;
    var G__22041 = g;
    var G__22042 = h;
    var G__22043 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__22035, G__22036, G__22037, G__22038, G__22039, G__22040, G__22041, G__22042, G__22043) : target_fn.call(null, G__22035, G__22036, G__22037, G__22038, G__22039, G__22040, G__22041, G__22042, G__22043);
  };
  var G__22794__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22044 = a;
      var G__22045 = b;
      var G__22046 = c;
      var G__22047 = d;
      var G__22048 = e;
      var G__22049 = f;
      var G__22050 = g;
      var G__22051 = h;
      var G__22052 = i;
      var G__22053 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__22044, G__22045, G__22046, G__22047, G__22048, G__22049, G__22050, G__22051, G__22052, G__22053) : self__.dispatch_fn.call(null, G__22044, G__22045, G__22046, G__22047, G__22048, G__22049, G__22050, G__22051, G__22052, G__22053);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22054 = a;
    var G__22055 = b;
    var G__22056 = c;
    var G__22057 = d;
    var G__22058 = e;
    var G__22059 = f;
    var G__22060 = g;
    var G__22061 = h;
    var G__22062 = i;
    var G__22063 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__22054, G__22055, G__22056, G__22057, G__22058, G__22059, G__22060, G__22061, G__22062, G__22063) : target_fn.call(null, G__22054, G__22055, G__22056, G__22057, G__22058, G__22059, G__22060, G__22061, G__22062, G__22063);
  };
  var G__22794__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22064 = a;
      var G__22065 = b;
      var G__22066 = c;
      var G__22067 = d;
      var G__22068 = e;
      var G__22069 = f;
      var G__22070 = g;
      var G__22071 = h;
      var G__22072 = i;
      var G__22073 = j;
      var G__22074 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__22064, G__22065, G__22066, G__22067, G__22068, G__22069, G__22070, G__22071, G__22072, G__22073, G__22074) : self__.dispatch_fn.call(null, G__22064, G__22065, G__22066, G__22067, G__22068, G__22069, G__22070, G__22071, G__22072, G__22073, G__22074);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22075 = a;
    var G__22076 = b;
    var G__22077 = c;
    var G__22078 = d;
    var G__22079 = e;
    var G__22080 = f;
    var G__22081 = g;
    var G__22082 = h;
    var G__22083 = i;
    var G__22084 = j;
    var G__22085 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__22075, G__22076, G__22077, G__22078, G__22079, G__22080, G__22081, G__22082, G__22083, G__22084, G__22085) : target_fn.call(null, G__22075, G__22076, G__22077, G__22078, G__22079, G__22080, G__22081, G__22082, G__22083, G__22084, G__22085);
  };
  var G__22794__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22086 = a;
      var G__22087 = b;
      var G__22088 = c;
      var G__22089 = d;
      var G__22090 = e;
      var G__22091 = f;
      var G__22092 = g;
      var G__22093 = h;
      var G__22094 = i;
      var G__22095 = j;
      var G__22096 = k;
      var G__22097 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__22086, G__22087, G__22088, G__22089, G__22090, G__22091, G__22092, G__22093, G__22094, G__22095, G__22096, G__22097) : self__.dispatch_fn.call(null, G__22086, G__22087, G__22088, G__22089, G__22090, G__22091, G__22092, G__22093, G__22094, G__22095, G__22096, G__22097);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22098 = a;
    var G__22099 = b;
    var G__22100 = c;
    var G__22101 = d;
    var G__22102 = e;
    var G__22103 = f;
    var G__22104 = g;
    var G__22105 = h;
    var G__22106 = i;
    var G__22107 = j;
    var G__22108 = k;
    var G__22109 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__22098, G__22099, G__22100, G__22101, G__22102, G__22103, G__22104, G__22105, G__22106, G__22107, G__22108, G__22109) : target_fn.call(null, G__22098, G__22099, G__22100, G__22101, G__22102, G__22103, G__22104, G__22105, G__22106, G__22107, G__22108, G__22109);
  };
  var G__22794__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22110 = a;
      var G__22111 = b;
      var G__22112 = c;
      var G__22113 = d;
      var G__22114 = e;
      var G__22115 = f;
      var G__22116 = g;
      var G__22117 = h;
      var G__22118 = i;
      var G__22119 = j;
      var G__22120 = k;
      var G__22121 = l;
      var G__22122 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__22110, G__22111, G__22112, G__22113, G__22114, G__22115, G__22116, G__22117, G__22118, G__22119, G__22120, G__22121, G__22122) : self__.dispatch_fn.call(null, G__22110, G__22111, G__22112, G__22113, G__22114, G__22115, G__22116, G__22117, G__22118, G__22119, G__22120, G__22121, G__22122);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22123 = a;
    var G__22124 = b;
    var G__22125 = c;
    var G__22126 = d;
    var G__22127 = e;
    var G__22128 = f;
    var G__22129 = g;
    var G__22130 = h;
    var G__22131 = i;
    var G__22132 = j;
    var G__22133 = k;
    var G__22134 = l;
    var G__22135 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__22123, G__22124, G__22125, G__22126, G__22127, G__22128, G__22129, G__22130, G__22131, G__22132, G__22133, G__22134, G__22135) : target_fn.call(null, G__22123, G__22124, G__22125, G__22126, G__22127, G__22128, G__22129, G__22130, G__22131, G__22132, G__22133, G__22134, G__22135);
  };
  var G__22794__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22136 = a;
      var G__22137 = b;
      var G__22138 = c;
      var G__22139 = d;
      var G__22140 = e;
      var G__22141 = f;
      var G__22142 = g;
      var G__22143 = h;
      var G__22144 = i;
      var G__22145 = j;
      var G__22146 = k;
      var G__22147 = l;
      var G__22148 = m;
      var G__22149 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__22136, G__22137, G__22138, G__22139, G__22140, G__22141, G__22142, G__22143, G__22144, G__22145, G__22146, G__22147, G__22148, G__22149) : self__.dispatch_fn.call(null, G__22136, G__22137, G__22138, G__22139, G__22140, G__22141, G__22142, G__22143, G__22144, G__22145, G__22146, G__22147, G__22148, G__22149);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22150 = a;
    var G__22151 = b;
    var G__22152 = c;
    var G__22153 = d;
    var G__22154 = e;
    var G__22155 = f;
    var G__22156 = g;
    var G__22157 = h;
    var G__22158 = i;
    var G__22159 = j;
    var G__22160 = k;
    var G__22161 = l;
    var G__22162 = m;
    var G__22163 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__22150, G__22151, G__22152, G__22153, G__22154, G__22155, G__22156, G__22157, G__22158, G__22159, G__22160, G__22161, G__22162, G__22163) : target_fn.call(null, G__22150, G__22151, G__22152, G__22153, G__22154, G__22155, G__22156, G__22157, G__22158, G__22159, G__22160, G__22161, G__22162, G__22163);
  };
  var G__22794__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22164 = a;
      var G__22165 = b;
      var G__22166 = c;
      var G__22167 = d;
      var G__22168 = e;
      var G__22169 = f;
      var G__22170 = g;
      var G__22171 = h;
      var G__22172 = i;
      var G__22173 = j;
      var G__22174 = k;
      var G__22175 = l;
      var G__22176 = m;
      var G__22177 = n;
      var G__22178 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__22164, G__22165, G__22166, G__22167, G__22168, G__22169, G__22170, G__22171, G__22172, G__22173, G__22174, G__22175, G__22176, G__22177, G__22178) : self__.dispatch_fn.call(null, G__22164, G__22165, G__22166, G__22167, G__22168, G__22169, G__22170, G__22171, G__22172, G__22173, G__22174, G__22175, G__22176, G__22177, G__22178);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22179 = a;
    var G__22180 = b;
    var G__22181 = c;
    var G__22182 = d;
    var G__22183 = e;
    var G__22184 = f;
    var G__22185 = g;
    var G__22186 = h;
    var G__22187 = i;
    var G__22188 = j;
    var G__22189 = k;
    var G__22190 = l;
    var G__22191 = m;
    var G__22192 = n;
    var G__22193 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__22179, G__22180, G__22181, G__22182, G__22183, G__22184, G__22185, G__22186, G__22187, G__22188, G__22189, G__22190, G__22191, G__22192, G__22193) : target_fn.call(null, G__22179, G__22180, G__22181, G__22182, G__22183, G__22184, G__22185, G__22186, G__22187, G__22188, G__22189, G__22190, G__22191, G__22192, G__22193);
  };
  var G__22794__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22194 = a;
      var G__22195 = b;
      var G__22196 = c;
      var G__22197 = d;
      var G__22198 = e;
      var G__22199 = f;
      var G__22200 = g;
      var G__22201 = h;
      var G__22202 = i;
      var G__22203 = j;
      var G__22204 = k;
      var G__22205 = l;
      var G__22206 = m;
      var G__22207 = n;
      var G__22208 = o;
      var G__22209 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__22194, G__22195, G__22196, G__22197, G__22198, G__22199, G__22200, G__22201, G__22202, G__22203, G__22204, G__22205, G__22206, G__22207, G__22208, G__22209) : self__.dispatch_fn.call(null, G__22194, G__22195, G__22196, G__22197, G__22198, G__22199, G__22200, G__22201, G__22202, G__22203, G__22204, G__22205, G__22206, G__22207, G__22208, G__22209);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22210 = a;
    var G__22211 = b;
    var G__22212 = c;
    var G__22213 = d;
    var G__22214 = e;
    var G__22215 = f;
    var G__22216 = g;
    var G__22217 = h;
    var G__22218 = i;
    var G__22219 = j;
    var G__22220 = k;
    var G__22221 = l;
    var G__22222 = m;
    var G__22223 = n;
    var G__22224 = o;
    var G__22225 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__22210, G__22211, G__22212, G__22213, G__22214, G__22215, G__22216, G__22217, G__22218, G__22219, G__22220, G__22221, G__22222, G__22223, G__22224, G__22225) : target_fn.call(null, G__22210, G__22211, G__22212, G__22213, G__22214, G__22215, G__22216, G__22217, G__22218, G__22219, G__22220, G__22221, G__22222, G__22223, G__22224, G__22225);
  };
  var G__22794__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22226 = a;
      var G__22227 = b;
      var G__22228 = c;
      var G__22229 = d;
      var G__22230 = e;
      var G__22231 = f;
      var G__22232 = g;
      var G__22233 = h;
      var G__22234 = i;
      var G__22235 = j;
      var G__22236 = k;
      var G__22237 = l;
      var G__22238 = m;
      var G__22239 = n;
      var G__22240 = o;
      var G__22241 = p;
      var G__22242 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__22226, G__22227, G__22228, G__22229, G__22230, G__22231, G__22232, G__22233, G__22234, G__22235, G__22236, G__22237, G__22238, G__22239, G__22240, G__22241, G__22242) : self__.dispatch_fn.call(null, G__22226, G__22227, G__22228, G__22229, G__22230, G__22231, G__22232, G__22233, G__22234, G__22235, G__22236, G__22237, G__22238, G__22239, G__22240, G__22241, G__22242);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22243 = a;
    var G__22244 = b;
    var G__22245 = c;
    var G__22246 = d;
    var G__22247 = e;
    var G__22248 = f;
    var G__22249 = g;
    var G__22250 = h;
    var G__22251 = i;
    var G__22252 = j;
    var G__22253 = k;
    var G__22254 = l;
    var G__22255 = m;
    var G__22256 = n;
    var G__22257 = o;
    var G__22258 = p;
    var G__22259 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__22243, G__22244, G__22245, G__22246, G__22247, G__22248, G__22249, G__22250, G__22251, G__22252, G__22253, G__22254, G__22255, G__22256, G__22257, G__22258, G__22259) : target_fn.call(null, G__22243, G__22244, G__22245, G__22246, G__22247, G__22248, G__22249, G__22250, G__22251, G__22252, G__22253, G__22254, G__22255, G__22256, G__22257, G__22258, G__22259);
  };
  var G__22794__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22260 = a;
      var G__22261 = b;
      var G__22262 = c;
      var G__22263 = d;
      var G__22264 = e;
      var G__22265 = f;
      var G__22266 = g;
      var G__22267 = h;
      var G__22268 = i;
      var G__22269 = j;
      var G__22270 = k;
      var G__22271 = l;
      var G__22272 = m;
      var G__22273 = n;
      var G__22274 = o;
      var G__22275 = p;
      var G__22276 = q;
      var G__22277 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__22260, G__22261, G__22262, G__22263, G__22264, G__22265, G__22266, G__22267, G__22268, G__22269, G__22270, G__22271, G__22272, G__22273, G__22274, G__22275, G__22276, G__22277) : self__.dispatch_fn.call(null, G__22260, G__22261, G__22262, G__22263, G__22264, G__22265, G__22266, G__22267, G__22268, G__22269, G__22270, G__22271, G__22272, G__22273, G__22274, G__22275, G__22276, G__22277);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22278 = a;
    var G__22279 = b;
    var G__22280 = c;
    var G__22281 = d;
    var G__22282 = e;
    var G__22283 = f;
    var G__22284 = g;
    var G__22285 = h;
    var G__22286 = i;
    var G__22287 = j;
    var G__22288 = k;
    var G__22289 = l;
    var G__22290 = m;
    var G__22291 = n;
    var G__22292 = o;
    var G__22293 = p;
    var G__22294 = q;
    var G__22295 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__22278, G__22279, G__22280, G__22281, G__22282, G__22283, G__22284, G__22285, G__22286, G__22287, G__22288, G__22289, G__22290, G__22291, G__22292, G__22293, G__22294, G__22295) : target_fn.call(null, G__22278, G__22279, G__22280, G__22281, G__22282, G__22283, G__22284, G__22285, G__22286, G__22287, G__22288, G__22289, G__22290, G__22291, G__22292, G__22293, G__22294, G__22295);
  };
  var G__22794__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22296 = a;
      var G__22297 = b;
      var G__22298 = c;
      var G__22299 = d;
      var G__22300 = e;
      var G__22301 = f;
      var G__22302 = g;
      var G__22303 = h;
      var G__22304 = i;
      var G__22305 = j;
      var G__22306 = k;
      var G__22307 = l;
      var G__22308 = m;
      var G__22309 = n;
      var G__22310 = o;
      var G__22311 = p;
      var G__22312 = q;
      var G__22313 = r;
      var G__22314 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__22296, G__22297, G__22298, G__22299, G__22300, G__22301, G__22302, G__22303, G__22304, G__22305, G__22306, G__22307, G__22308, G__22309, G__22310, G__22311, G__22312, G__22313, G__22314) : self__.dispatch_fn.call(null, G__22296, G__22297, G__22298, G__22299, G__22300, G__22301, G__22302, G__22303, G__22304, G__22305, G__22306, G__22307, G__22308, G__22309, G__22310, G__22311, G__22312, 
      G__22313, G__22314);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22315 = a;
    var G__22316 = b;
    var G__22317 = c;
    var G__22318 = d;
    var G__22319 = e;
    var G__22320 = f;
    var G__22321 = g;
    var G__22322 = h;
    var G__22323 = i;
    var G__22324 = j;
    var G__22325 = k;
    var G__22326 = l;
    var G__22327 = m;
    var G__22328 = n;
    var G__22329 = o;
    var G__22330 = p;
    var G__22331 = q;
    var G__22332 = r;
    var G__22333 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__22315, G__22316, G__22317, G__22318, G__22319, G__22320, G__22321, G__22322, G__22323, G__22324, G__22325, G__22326, G__22327, G__22328, G__22329, G__22330, G__22331, G__22332, G__22333) : target_fn.call(null, G__22315, G__22316, G__22317, G__22318, G__22319, G__22320, G__22321, G__22322, G__22323, G__22324, G__22325, G__22326, G__22327, G__22328, G__22329, G__22330, G__22331, G__22332, G__22333);
  };
  var G__22794__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__22334 = a;
      var G__22335 = b;
      var G__22336 = c;
      var G__22337 = d;
      var G__22338 = e;
      var G__22339 = f;
      var G__22340 = g;
      var G__22341 = h;
      var G__22342 = i;
      var G__22343 = j;
      var G__22344 = k;
      var G__22345 = l;
      var G__22346 = m;
      var G__22347 = n;
      var G__22348 = o;
      var G__22349 = p;
      var G__22350 = q;
      var G__22351 = r;
      var G__22352 = s;
      var G__22353 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__22334, G__22335, G__22336, G__22337, G__22338, G__22339, G__22340, G__22341, G__22342, G__22343, G__22344, G__22345, G__22346, G__22347, G__22348, G__22349, G__22350, G__22351, G__22352, G__22353) : self__.dispatch_fn.call(null, G__22334, G__22335, G__22336, G__22337, G__22338, G__22339, G__22340, G__22341, G__22342, G__22343, G__22344, G__22345, G__22346, G__22347, G__22348, G__22349, 
      G__22350, G__22351, G__22352, G__22353);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__22354 = a;
    var G__22355 = b;
    var G__22356 = c;
    var G__22357 = d;
    var G__22358 = e;
    var G__22359 = f;
    var G__22360 = g;
    var G__22361 = h;
    var G__22362 = i;
    var G__22363 = j;
    var G__22364 = k;
    var G__22365 = l;
    var G__22366 = m;
    var G__22367 = n;
    var G__22368 = o;
    var G__22369 = p;
    var G__22370 = q;
    var G__22371 = r;
    var G__22372 = s;
    var G__22373 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__22354, G__22355, G__22356, G__22357, G__22358, G__22359, G__22360, G__22361, G__22362, G__22363, G__22364, G__22365, G__22366, G__22367, G__22368, G__22369, G__22370, G__22371, G__22372, G__22373) : target_fn.call(null, G__22354, G__22355, G__22356, G__22357, G__22358, G__22359, G__22360, G__22361, G__22362, G__22363, G__22364, G__22365, G__22366, G__22367, G__22368, G__22369, G__22370, G__22371, G__22372, 
    G__22373);
  };
  var G__22794__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__22794 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__22794__1.call(this, self__);
      case 2:
        return G__22794__2.call(this, self__, a);
      case 3:
        return G__22794__3.call(this, self__, a, b);
      case 4:
        return G__22794__4.call(this, self__, a, b, c);
      case 5:
        return G__22794__5.call(this, self__, a, b, c, d);
      case 6:
        return G__22794__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__22794__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__22794__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__22794__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__22794__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__22794__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__22794__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__22794__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__22794__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__22794__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__22794__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__22794__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__22794__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__22794__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__22794__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__22794__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__22794__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__22794.cljs$core$IFn$_invoke$arity$1 = G__22794__1;
  G__22794.cljs$core$IFn$_invoke$arity$2 = G__22794__2;
  G__22794.cljs$core$IFn$_invoke$arity$3 = G__22794__3;
  G__22794.cljs$core$IFn$_invoke$arity$4 = G__22794__4;
  G__22794.cljs$core$IFn$_invoke$arity$5 = G__22794__5;
  G__22794.cljs$core$IFn$_invoke$arity$6 = G__22794__6;
  G__22794.cljs$core$IFn$_invoke$arity$7 = G__22794__7;
  G__22794.cljs$core$IFn$_invoke$arity$8 = G__22794__8;
  G__22794.cljs$core$IFn$_invoke$arity$9 = G__22794__9;
  G__22794.cljs$core$IFn$_invoke$arity$10 = G__22794__10;
  G__22794.cljs$core$IFn$_invoke$arity$11 = G__22794__11;
  G__22794.cljs$core$IFn$_invoke$arity$12 = G__22794__12;
  G__22794.cljs$core$IFn$_invoke$arity$13 = G__22794__13;
  G__22794.cljs$core$IFn$_invoke$arity$14 = G__22794__14;
  G__22794.cljs$core$IFn$_invoke$arity$15 = G__22794__15;
  G__22794.cljs$core$IFn$_invoke$arity$16 = G__22794__16;
  G__22794.cljs$core$IFn$_invoke$arity$17 = G__22794__17;
  G__22794.cljs$core$IFn$_invoke$arity$18 = G__22794__18;
  G__22794.cljs$core$IFn$_invoke$arity$19 = G__22794__19;
  G__22794.cljs$core$IFn$_invoke$arity$20 = G__22794__20;
  G__22794.cljs$core$IFn$_invoke$arity$21 = G__22794__21;
  G__22794.cljs$core$IFn$_invoke$arity$22 = G__22794__22;
  return G__22794;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args21946) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21946)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22374 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__22374) : self__.dispatch_fn.call(null, G__22374);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22375 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__22375) : target_fn.call(null, G__22375);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22376 = a;
    var G__22377 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__22376, G__22377) : self__.dispatch_fn.call(null, G__22376, G__22377);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22378 = a;
  var G__22379 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__22378, G__22379) : target_fn.call(null, G__22378, G__22379);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22380 = a;
    var G__22381 = b;
    var G__22382 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__22380, G__22381, G__22382) : self__.dispatch_fn.call(null, G__22380, G__22381, G__22382);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22383 = a;
  var G__22384 = b;
  var G__22385 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__22383, G__22384, G__22385) : target_fn.call(null, G__22383, G__22384, G__22385);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22386 = a;
    var G__22387 = b;
    var G__22388 = c;
    var G__22389 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__22386, G__22387, G__22388, G__22389) : self__.dispatch_fn.call(null, G__22386, G__22387, G__22388, G__22389);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22390 = a;
  var G__22391 = b;
  var G__22392 = c;
  var G__22393 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__22390, G__22391, G__22392, G__22393) : target_fn.call(null, G__22390, G__22391, G__22392, G__22393);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22394 = a;
    var G__22395 = b;
    var G__22396 = c;
    var G__22397 = d;
    var G__22398 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__22394, G__22395, G__22396, G__22397, G__22398) : self__.dispatch_fn.call(null, G__22394, G__22395, G__22396, G__22397, G__22398);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22399 = a;
  var G__22400 = b;
  var G__22401 = c;
  var G__22402 = d;
  var G__22403 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__22399, G__22400, G__22401, G__22402, G__22403) : target_fn.call(null, G__22399, G__22400, G__22401, G__22402, G__22403);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22404 = a;
    var G__22405 = b;
    var G__22406 = c;
    var G__22407 = d;
    var G__22408 = e;
    var G__22409 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__22404, G__22405, G__22406, G__22407, G__22408, G__22409) : self__.dispatch_fn.call(null, G__22404, G__22405, G__22406, G__22407, G__22408, G__22409);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22410 = a;
  var G__22411 = b;
  var G__22412 = c;
  var G__22413 = d;
  var G__22414 = e;
  var G__22415 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__22410, G__22411, G__22412, G__22413, G__22414, G__22415) : target_fn.call(null, G__22410, G__22411, G__22412, G__22413, G__22414, G__22415);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22416 = a;
    var G__22417 = b;
    var G__22418 = c;
    var G__22419 = d;
    var G__22420 = e;
    var G__22421 = f;
    var G__22422 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__22416, G__22417, G__22418, G__22419, G__22420, G__22421, G__22422) : self__.dispatch_fn.call(null, G__22416, G__22417, G__22418, G__22419, G__22420, G__22421, G__22422);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22423 = a;
  var G__22424 = b;
  var G__22425 = c;
  var G__22426 = d;
  var G__22427 = e;
  var G__22428 = f;
  var G__22429 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__22423, G__22424, G__22425, G__22426, G__22427, G__22428, G__22429) : target_fn.call(null, G__22423, G__22424, G__22425, G__22426, G__22427, G__22428, G__22429);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22430 = a;
    var G__22431 = b;
    var G__22432 = c;
    var G__22433 = d;
    var G__22434 = e;
    var G__22435 = f;
    var G__22436 = g;
    var G__22437 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__22430, G__22431, G__22432, G__22433, G__22434, G__22435, G__22436, G__22437) : self__.dispatch_fn.call(null, G__22430, G__22431, G__22432, G__22433, G__22434, G__22435, G__22436, G__22437);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22438 = a;
  var G__22439 = b;
  var G__22440 = c;
  var G__22441 = d;
  var G__22442 = e;
  var G__22443 = f;
  var G__22444 = g;
  var G__22445 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__22438, G__22439, G__22440, G__22441, G__22442, G__22443, G__22444, G__22445) : target_fn.call(null, G__22438, G__22439, G__22440, G__22441, G__22442, G__22443, G__22444, G__22445);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22446 = a;
    var G__22447 = b;
    var G__22448 = c;
    var G__22449 = d;
    var G__22450 = e;
    var G__22451 = f;
    var G__22452 = g;
    var G__22453 = h;
    var G__22454 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__22446, G__22447, G__22448, G__22449, G__22450, G__22451, G__22452, G__22453, G__22454) : self__.dispatch_fn.call(null, G__22446, G__22447, G__22448, G__22449, G__22450, G__22451, G__22452, G__22453, G__22454);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22455 = a;
  var G__22456 = b;
  var G__22457 = c;
  var G__22458 = d;
  var G__22459 = e;
  var G__22460 = f;
  var G__22461 = g;
  var G__22462 = h;
  var G__22463 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__22455, G__22456, G__22457, G__22458, G__22459, G__22460, G__22461, G__22462, G__22463) : target_fn.call(null, G__22455, G__22456, G__22457, G__22458, G__22459, G__22460, G__22461, G__22462, G__22463);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22464 = a;
    var G__22465 = b;
    var G__22466 = c;
    var G__22467 = d;
    var G__22468 = e;
    var G__22469 = f;
    var G__22470 = g;
    var G__22471 = h;
    var G__22472 = i;
    var G__22473 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__22464, G__22465, G__22466, G__22467, G__22468, G__22469, G__22470, G__22471, G__22472, G__22473) : self__.dispatch_fn.call(null, G__22464, G__22465, G__22466, G__22467, G__22468, G__22469, G__22470, G__22471, G__22472, G__22473);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22474 = a;
  var G__22475 = b;
  var G__22476 = c;
  var G__22477 = d;
  var G__22478 = e;
  var G__22479 = f;
  var G__22480 = g;
  var G__22481 = h;
  var G__22482 = i;
  var G__22483 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__22474, G__22475, G__22476, G__22477, G__22478, G__22479, G__22480, G__22481, G__22482, G__22483) : target_fn.call(null, G__22474, G__22475, G__22476, G__22477, G__22478, G__22479, G__22480, G__22481, G__22482, G__22483);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22484 = a;
    var G__22485 = b;
    var G__22486 = c;
    var G__22487 = d;
    var G__22488 = e;
    var G__22489 = f;
    var G__22490 = g;
    var G__22491 = h;
    var G__22492 = i;
    var G__22493 = j;
    var G__22494 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__22484, G__22485, G__22486, G__22487, G__22488, G__22489, G__22490, G__22491, G__22492, G__22493, G__22494) : self__.dispatch_fn.call(null, G__22484, G__22485, G__22486, G__22487, G__22488, G__22489, G__22490, G__22491, G__22492, G__22493, G__22494);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22495 = a;
  var G__22496 = b;
  var G__22497 = c;
  var G__22498 = d;
  var G__22499 = e;
  var G__22500 = f;
  var G__22501 = g;
  var G__22502 = h;
  var G__22503 = i;
  var G__22504 = j;
  var G__22505 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__22495, G__22496, G__22497, G__22498, G__22499, G__22500, G__22501, G__22502, G__22503, G__22504, G__22505) : target_fn.call(null, G__22495, G__22496, G__22497, G__22498, G__22499, G__22500, G__22501, G__22502, G__22503, G__22504, G__22505);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22506 = a;
    var G__22507 = b;
    var G__22508 = c;
    var G__22509 = d;
    var G__22510 = e;
    var G__22511 = f;
    var G__22512 = g;
    var G__22513 = h;
    var G__22514 = i;
    var G__22515 = j;
    var G__22516 = k;
    var G__22517 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__22506, G__22507, G__22508, G__22509, G__22510, G__22511, G__22512, G__22513, G__22514, G__22515, G__22516, G__22517) : self__.dispatch_fn.call(null, G__22506, G__22507, G__22508, G__22509, G__22510, G__22511, G__22512, G__22513, G__22514, G__22515, G__22516, G__22517);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22518 = a;
  var G__22519 = b;
  var G__22520 = c;
  var G__22521 = d;
  var G__22522 = e;
  var G__22523 = f;
  var G__22524 = g;
  var G__22525 = h;
  var G__22526 = i;
  var G__22527 = j;
  var G__22528 = k;
  var G__22529 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__22518, G__22519, G__22520, G__22521, G__22522, G__22523, G__22524, G__22525, G__22526, G__22527, G__22528, G__22529) : target_fn.call(null, G__22518, G__22519, G__22520, G__22521, G__22522, G__22523, G__22524, G__22525, G__22526, G__22527, G__22528, G__22529);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22530 = a;
    var G__22531 = b;
    var G__22532 = c;
    var G__22533 = d;
    var G__22534 = e;
    var G__22535 = f;
    var G__22536 = g;
    var G__22537 = h;
    var G__22538 = i;
    var G__22539 = j;
    var G__22540 = k;
    var G__22541 = l;
    var G__22542 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__22530, G__22531, G__22532, G__22533, G__22534, G__22535, G__22536, G__22537, G__22538, G__22539, G__22540, G__22541, G__22542) : self__.dispatch_fn.call(null, G__22530, G__22531, G__22532, G__22533, G__22534, G__22535, G__22536, G__22537, G__22538, G__22539, G__22540, G__22541, G__22542);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22543 = a;
  var G__22544 = b;
  var G__22545 = c;
  var G__22546 = d;
  var G__22547 = e;
  var G__22548 = f;
  var G__22549 = g;
  var G__22550 = h;
  var G__22551 = i;
  var G__22552 = j;
  var G__22553 = k;
  var G__22554 = l;
  var G__22555 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__22543, G__22544, G__22545, G__22546, G__22547, G__22548, G__22549, G__22550, G__22551, G__22552, G__22553, G__22554, G__22555) : target_fn.call(null, G__22543, G__22544, G__22545, G__22546, G__22547, G__22548, G__22549, G__22550, G__22551, G__22552, G__22553, G__22554, G__22555);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22556 = a;
    var G__22557 = b;
    var G__22558 = c;
    var G__22559 = d;
    var G__22560 = e;
    var G__22561 = f;
    var G__22562 = g;
    var G__22563 = h;
    var G__22564 = i;
    var G__22565 = j;
    var G__22566 = k;
    var G__22567 = l;
    var G__22568 = m;
    var G__22569 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__22556, G__22557, G__22558, G__22559, G__22560, G__22561, G__22562, G__22563, G__22564, G__22565, G__22566, G__22567, G__22568, G__22569) : self__.dispatch_fn.call(null, G__22556, G__22557, G__22558, G__22559, G__22560, G__22561, G__22562, G__22563, G__22564, G__22565, G__22566, G__22567, G__22568, G__22569);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22570 = a;
  var G__22571 = b;
  var G__22572 = c;
  var G__22573 = d;
  var G__22574 = e;
  var G__22575 = f;
  var G__22576 = g;
  var G__22577 = h;
  var G__22578 = i;
  var G__22579 = j;
  var G__22580 = k;
  var G__22581 = l;
  var G__22582 = m;
  var G__22583 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__22570, G__22571, G__22572, G__22573, G__22574, G__22575, G__22576, G__22577, G__22578, G__22579, G__22580, G__22581, G__22582, G__22583) : target_fn.call(null, G__22570, G__22571, G__22572, G__22573, G__22574, G__22575, G__22576, G__22577, G__22578, G__22579, G__22580, G__22581, G__22582, G__22583);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22584 = a;
    var G__22585 = b;
    var G__22586 = c;
    var G__22587 = d;
    var G__22588 = e;
    var G__22589 = f;
    var G__22590 = g;
    var G__22591 = h;
    var G__22592 = i;
    var G__22593 = j;
    var G__22594 = k;
    var G__22595 = l;
    var G__22596 = m;
    var G__22597 = n;
    var G__22598 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__22584, G__22585, G__22586, G__22587, G__22588, G__22589, G__22590, G__22591, G__22592, G__22593, G__22594, G__22595, G__22596, G__22597, G__22598) : self__.dispatch_fn.call(null, G__22584, G__22585, G__22586, G__22587, G__22588, G__22589, G__22590, G__22591, G__22592, G__22593, G__22594, G__22595, G__22596, G__22597, G__22598);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22599 = a;
  var G__22600 = b;
  var G__22601 = c;
  var G__22602 = d;
  var G__22603 = e;
  var G__22604 = f;
  var G__22605 = g;
  var G__22606 = h;
  var G__22607 = i;
  var G__22608 = j;
  var G__22609 = k;
  var G__22610 = l;
  var G__22611 = m;
  var G__22612 = n;
  var G__22613 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__22599, G__22600, G__22601, G__22602, G__22603, G__22604, G__22605, G__22606, G__22607, G__22608, G__22609, G__22610, G__22611, G__22612, G__22613) : target_fn.call(null, G__22599, G__22600, G__22601, G__22602, G__22603, G__22604, G__22605, G__22606, G__22607, G__22608, G__22609, G__22610, G__22611, G__22612, G__22613);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22614 = a;
    var G__22615 = b;
    var G__22616 = c;
    var G__22617 = d;
    var G__22618 = e;
    var G__22619 = f;
    var G__22620 = g;
    var G__22621 = h;
    var G__22622 = i;
    var G__22623 = j;
    var G__22624 = k;
    var G__22625 = l;
    var G__22626 = m;
    var G__22627 = n;
    var G__22628 = o;
    var G__22629 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__22614, G__22615, G__22616, G__22617, G__22618, G__22619, G__22620, G__22621, G__22622, G__22623, G__22624, G__22625, G__22626, G__22627, G__22628, G__22629) : self__.dispatch_fn.call(null, G__22614, G__22615, G__22616, G__22617, G__22618, G__22619, G__22620, G__22621, G__22622, G__22623, G__22624, G__22625, G__22626, G__22627, G__22628, G__22629);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22630 = a;
  var G__22631 = b;
  var G__22632 = c;
  var G__22633 = d;
  var G__22634 = e;
  var G__22635 = f;
  var G__22636 = g;
  var G__22637 = h;
  var G__22638 = i;
  var G__22639 = j;
  var G__22640 = k;
  var G__22641 = l;
  var G__22642 = m;
  var G__22643 = n;
  var G__22644 = o;
  var G__22645 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__22630, G__22631, G__22632, G__22633, G__22634, G__22635, G__22636, G__22637, G__22638, G__22639, G__22640, G__22641, G__22642, G__22643, G__22644, G__22645) : target_fn.call(null, G__22630, G__22631, G__22632, G__22633, G__22634, G__22635, G__22636, G__22637, G__22638, G__22639, G__22640, G__22641, G__22642, G__22643, G__22644, G__22645);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22646 = a;
    var G__22647 = b;
    var G__22648 = c;
    var G__22649 = d;
    var G__22650 = e;
    var G__22651 = f;
    var G__22652 = g;
    var G__22653 = h;
    var G__22654 = i;
    var G__22655 = j;
    var G__22656 = k;
    var G__22657 = l;
    var G__22658 = m;
    var G__22659 = n;
    var G__22660 = o;
    var G__22661 = p;
    var G__22662 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__22646, G__22647, G__22648, G__22649, G__22650, G__22651, G__22652, G__22653, G__22654, G__22655, G__22656, G__22657, G__22658, G__22659, G__22660, G__22661, G__22662) : self__.dispatch_fn.call(null, G__22646, G__22647, G__22648, G__22649, G__22650, G__22651, G__22652, G__22653, G__22654, G__22655, G__22656, G__22657, G__22658, G__22659, G__22660, G__22661, G__22662);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22663 = a;
  var G__22664 = b;
  var G__22665 = c;
  var G__22666 = d;
  var G__22667 = e;
  var G__22668 = f;
  var G__22669 = g;
  var G__22670 = h;
  var G__22671 = i;
  var G__22672 = j;
  var G__22673 = k;
  var G__22674 = l;
  var G__22675 = m;
  var G__22676 = n;
  var G__22677 = o;
  var G__22678 = p;
  var G__22679 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__22663, G__22664, G__22665, G__22666, G__22667, G__22668, G__22669, G__22670, G__22671, G__22672, G__22673, G__22674, G__22675, G__22676, G__22677, G__22678, G__22679) : target_fn.call(null, G__22663, G__22664, G__22665, G__22666, G__22667, G__22668, G__22669, G__22670, G__22671, G__22672, G__22673, G__22674, G__22675, G__22676, G__22677, G__22678, G__22679);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22680 = a;
    var G__22681 = b;
    var G__22682 = c;
    var G__22683 = d;
    var G__22684 = e;
    var G__22685 = f;
    var G__22686 = g;
    var G__22687 = h;
    var G__22688 = i;
    var G__22689 = j;
    var G__22690 = k;
    var G__22691 = l;
    var G__22692 = m;
    var G__22693 = n;
    var G__22694 = o;
    var G__22695 = p;
    var G__22696 = q;
    var G__22697 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__22680, G__22681, G__22682, G__22683, G__22684, G__22685, G__22686, G__22687, G__22688, G__22689, G__22690, G__22691, G__22692, G__22693, G__22694, G__22695, G__22696, G__22697) : self__.dispatch_fn.call(null, G__22680, G__22681, G__22682, G__22683, G__22684, G__22685, G__22686, G__22687, G__22688, G__22689, G__22690, G__22691, G__22692, G__22693, G__22694, G__22695, G__22696, G__22697);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22698 = a;
  var G__22699 = b;
  var G__22700 = c;
  var G__22701 = d;
  var G__22702 = e;
  var G__22703 = f;
  var G__22704 = g;
  var G__22705 = h;
  var G__22706 = i;
  var G__22707 = j;
  var G__22708 = k;
  var G__22709 = l;
  var G__22710 = m;
  var G__22711 = n;
  var G__22712 = o;
  var G__22713 = p;
  var G__22714 = q;
  var G__22715 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__22698, G__22699, G__22700, G__22701, G__22702, G__22703, G__22704, G__22705, G__22706, G__22707, G__22708, G__22709, G__22710, G__22711, G__22712, G__22713, G__22714, G__22715) : target_fn.call(null, G__22698, G__22699, G__22700, G__22701, G__22702, G__22703, G__22704, G__22705, G__22706, G__22707, G__22708, G__22709, G__22710, G__22711, G__22712, G__22713, G__22714, G__22715);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22716 = a;
    var G__22717 = b;
    var G__22718 = c;
    var G__22719 = d;
    var G__22720 = e;
    var G__22721 = f;
    var G__22722 = g;
    var G__22723 = h;
    var G__22724 = i;
    var G__22725 = j;
    var G__22726 = k;
    var G__22727 = l;
    var G__22728 = m;
    var G__22729 = n;
    var G__22730 = o;
    var G__22731 = p;
    var G__22732 = q;
    var G__22733 = r;
    var G__22734 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__22716, G__22717, G__22718, G__22719, G__22720, G__22721, G__22722, G__22723, G__22724, G__22725, G__22726, G__22727, G__22728, G__22729, G__22730, G__22731, G__22732, G__22733, G__22734) : self__.dispatch_fn.call(null, G__22716, G__22717, G__22718, G__22719, G__22720, G__22721, G__22722, G__22723, G__22724, G__22725, G__22726, G__22727, G__22728, G__22729, G__22730, G__22731, G__22732, 
    G__22733, G__22734);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22735 = a;
  var G__22736 = b;
  var G__22737 = c;
  var G__22738 = d;
  var G__22739 = e;
  var G__22740 = f;
  var G__22741 = g;
  var G__22742 = h;
  var G__22743 = i;
  var G__22744 = j;
  var G__22745 = k;
  var G__22746 = l;
  var G__22747 = m;
  var G__22748 = n;
  var G__22749 = o;
  var G__22750 = p;
  var G__22751 = q;
  var G__22752 = r;
  var G__22753 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__22735, G__22736, G__22737, G__22738, G__22739, G__22740, G__22741, G__22742, G__22743, G__22744, G__22745, G__22746, G__22747, G__22748, G__22749, G__22750, G__22751, G__22752, G__22753) : target_fn.call(null, G__22735, G__22736, G__22737, G__22738, G__22739, G__22740, G__22741, G__22742, G__22743, G__22744, G__22745, G__22746, G__22747, G__22748, G__22749, G__22750, G__22751, G__22752, G__22753);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__22754 = a;
    var G__22755 = b;
    var G__22756 = c;
    var G__22757 = d;
    var G__22758 = e;
    var G__22759 = f;
    var G__22760 = g;
    var G__22761 = h;
    var G__22762 = i;
    var G__22763 = j;
    var G__22764 = k;
    var G__22765 = l;
    var G__22766 = m;
    var G__22767 = n;
    var G__22768 = o;
    var G__22769 = p;
    var G__22770 = q;
    var G__22771 = r;
    var G__22772 = s;
    var G__22773 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__22754, G__22755, G__22756, G__22757, G__22758, G__22759, G__22760, G__22761, G__22762, G__22763, G__22764, G__22765, G__22766, G__22767, G__22768, G__22769, G__22770, G__22771, G__22772, G__22773) : self__.dispatch_fn.call(null, G__22754, G__22755, G__22756, G__22757, G__22758, G__22759, G__22760, G__22761, G__22762, G__22763, G__22764, G__22765, G__22766, G__22767, G__22768, G__22769, 
    G__22770, G__22771, G__22772, G__22773);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__22774 = a;
  var G__22775 = b;
  var G__22776 = c;
  var G__22777 = d;
  var G__22778 = e;
  var G__22779 = f;
  var G__22780 = g;
  var G__22781 = h;
  var G__22782 = i;
  var G__22783 = j;
  var G__22784 = k;
  var G__22785 = l;
  var G__22786 = m;
  var G__22787 = n;
  var G__22788 = o;
  var G__22789 = p;
  var G__22790 = q;
  var G__22791 = r;
  var G__22792 = s;
  var G__22793 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__22774, G__22775, G__22776, G__22777, G__22778, G__22779, G__22780, G__22781, G__22782, G__22783, G__22784, G__22785, G__22786, G__22787, G__22788, G__22789, G__22790, G__22791, G__22792, G__22793) : target_fn.call(null, G__22774, G__22775, G__22776, G__22777, G__22778, G__22779, G__22780, G__22781, G__22782, G__22783, G__22784, G__22785, G__22786, G__22787, G__22788, G__22789, G__22790, G__22791, G__22792, 
  G__22793);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__22795 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__22795);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.pr_writer_ex_info = function pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, data) {
    return ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var ex_info__3 = function(msg, data, cause) {
    cljs.core.ExceptionInfo.prototype = function() {
      var G__22800 = msg;
      return Error(G__22800);
    }();
    cljs.core.ExceptionInfo.prototype.name = "ExceptionInfo";
    cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
    cljs.core.ExceptionInfo.prototype.toString = cljs.core.pr_str_STAR_;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
      var obj__$1 = this;
      return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
    };
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, data);
      case 3:
        return ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__22805 = x;
      var G__22806 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__22805, G__22806) : pred.call(null, G__22805, G__22806);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__22807 = y;
        var G__22808 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__22807, G__22808) : pred.call(null, G__22807, G__22808);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj24790 = {};
  return obj24790;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3969__auto__ = port;
    if (and__3969__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4625__auto__ = port == null ? null : port;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj24792 = {};
  return obj24792;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3969__auto__ = port;
    if (and__3969__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4625__auto__ = port == null ? null : port;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj24794 = {};
  return obj24794;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3969__auto__ = chan;
    if (and__3969__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4625__auto__ = chan == null ? null : chan;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj24796 = {};
  return obj24796;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3969__auto__ = h;
    if (and__3969__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4625__auto__ = h == null ? null : h;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3969__auto__ = h;
    if (and__3969__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4625__auto__ = h == null ? null : h;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj24798 = {};
  return obj24798;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3969__auto__ = b;
    if (and__3969__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4625__auto__ = b == null ? null : b;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3969__auto__ = b;
    if (and__3969__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4625__auto__ = b == null ? null : b;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3969__auto__ = b;
    if (and__3969__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4625__auto__ = b == null ? null : b;
    return function() {
      var or__3981__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__24801 = cnt + 1;
      cnt = G__24801;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4868__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4868__auto__) {
      var v_24802 = this$.pop();
      if (keep_QMARK_.call(null, v_24802)) {
        this$.unshift(v_24802);
      } else {
      }
      var G__24803 = x + 1;
      x = G__24803;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_24806 = 0;
  while (true) {
    var m_24807 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_24807 == null) {
    } else {
      m_24807.call(null);
      if (count_24806 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__24808 = count_24806 + 1;
        count_24806 = G__24808;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3969__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3969__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t24814 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t24814 = function(val, box, meta24815) {
      this.val = val;
      this.box = box;
      this.meta24815 = meta24815;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t24814.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t24814.prototype.cljs$core$IMeta$_meta$arity$1 = function(_24816) {
      var self__ = this;
      var _24816__$1 = this;
      return self__.meta24815;
    };
    cljs.core.async.impl.channels.t24814.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_24816, meta24815__$1) {
      var self__ = this;
      var _24816__$1 = this;
      return new cljs.core.async.impl.channels.t24814(self__.val, self__.box, meta24815__$1);
    };
    cljs.core.async.impl.channels.t24814.cljs$lang$type = true;
    cljs.core.async.impl.channels.t24814.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t24814";
    cljs.core.async.impl.channels.t24814.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.channels/t24814");
    };
    cljs.core.async.impl.channels.__GT_t24814 = function __GT_t24814(val__$1, box__$1, meta24815) {
      return new cljs.core.async.impl.channels.t24814(val__$1, box__$1, meta24815);
    };
  }
  return new cljs.core.async.impl.channels.t24814(val, box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_24817 = self__.takes.pop();
      if (taker_24817 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_24817)) {
          var take_cb_24818 = cljs.core.async.impl.protocols.commit.call(null, taker_24817);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_24818, taker_24817, this$__$1) {
            return function() {
              return take_cb_24818.call(null, null);
            };
          }(take_cb_24818, taker_24817, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t24756 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t24756 = function(f, fn_handler, meta24757) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta24757 = meta24757;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t24756.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t24756.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t24756.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t24756.prototype.cljs$core$IMeta$_meta$arity$1 = function(_24758) {
      var self__ = this;
      var _24758__$1 = this;
      return self__.meta24757;
    };
    cljs.core.async.impl.ioc_helpers.t24756.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_24758, meta24757__$1) {
      var self__ = this;
      var _24758__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t24756(self__.f, self__.fn_handler, meta24757__$1);
    };
    cljs.core.async.impl.ioc_helpers.t24756.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t24756.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t24756";
    cljs.core.async.impl.ioc_helpers.t24756.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.ioc-helpers/t24756");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t24756 = function __GT_t24756(f__$1, fn_handler__$1, meta24757) {
      return new cljs.core.async.impl.ioc_helpers.t24756(f__$1, fn_handler__$1, meta24757);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t24756(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e24760) {
    if (e24760 instanceof Object) {
      var ex = e24760;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e24760;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_24763_24765 = state;
    statearr_24763_24765[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_24763_24765[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_24764_24766 = state;
    statearr_24764_24766[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_24764_24766[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_24769_24771 = state;
    statearr_24769_24771[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_24769_24771[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_24770_24772 = state;
    statearr_24770_24772[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_24770_24772[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__24773) {
    var map__24778 = p__24773;
    var map__24778__$1 = cljs.core.seq_QMARK_.call(null, map__24778) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24778) : map__24778;
    var opts = map__24778__$1;
    var statearr_24779_24782 = state;
    statearr_24779_24782[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__24778, map__24778__$1, opts) {
      return function(val) {
        var statearr_24780_24783 = state;
        statearr_24780_24783[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__24778, map__24778__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_24781_24784 = state;
      statearr_24781_24784[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__24773 = null;
    if (arguments.length > 3) {
      var G__24785__i = 0, G__24785__a = new Array(arguments.length - 3);
      while (G__24785__i < G__24785__a.length) {
        G__24785__a[G__24785__i] = arguments[G__24785__i + 3];
        ++G__24785__i;
      }
      p__24773 = new cljs.core.IndexedSeq(G__24785__a, 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__24773);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__24786) {
    var state = cljs.core.first(arglist__24786);
    arglist__24786 = cljs.core.next(arglist__24786);
    var cont_block = cljs.core.first(arglist__24786);
    arglist__24786 = cljs.core.next(arglist__24786);
    var ports = cljs.core.first(arglist__24786);
    var p__24773 = cljs.core.rest(arglist__24786);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__24773);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__24727 = level + 1;
        level = G__24727;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_24728 = 0;
    while (true) {
      if (i_24728 < arr.length) {
        arr[i_24728] = null;
        var G__24729 = i_24728 + 1;
        i_24728 = G__24729;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__24730 = x_SINGLEQUOTE_;
                x__$1 = G__24730;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__24731 = x__$1;
        var G__24732 = k;
        var G__24733 = level - 1;
        var G__24734 = update;
        x = G__24731;
        k = G__24732;
        level = G__24733;
        update = G__24734;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_24735 = self__.level + 1;
      while (true) {
        if (i_24735 <= new_level + 1) {
          update[i_24735] = self__.header;
          var G__24736 = i_24735 + 1;
          i_24735 = G__24736;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_24737 = 0;
    while (true) {
      if (i_24737 <= self__.level) {
        var links_24738 = update[i_24737].forward;
        if (links_24738[i_24737] === x__$1) {
          links_24738[i_24737] = x__$1.forward[i_24737];
          var G__24739 = i_24737 + 1;
          i_24737 = G__24739;
          continue;
        } else {
          var G__24740 = i_24737 + 1;
          i_24737 = G__24740;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__24741 = x_SINGLEQUOTE_;
              x__$1 = G__24741;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__24742 = nx;
        var G__24743 = level__$1 - 1;
        x = G__24742;
        level__$1 = G__24743;
        continue;
      } else {
        var G__24744 = x;
        var G__24745 = level__$1 - 1;
        x = G__24744;
        level__$1 = G__24745;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__24746 = x_SINGLEQUOTE_;
              x__$1 = G__24746;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__24747 = nx;
        var G__24748 = level__$1 - 1;
        x = G__24747;
        level__$1 = G__24748;
        continue;
      } else {
        var G__24749 = x;
        var G__24750 = level__$1 - 1;
        x = G__24749;
        level__$1 = G__24750;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3981__auto__ = cljs.core.truth_(function() {
    var and__3969__auto__ = me;
    if (cljs.core.truth_(and__3969__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3969__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3981__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3981__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t22814 !== "undefined") {
  } else {
    cljs.core.async.t22814 = function(f, fn_handler, meta22815) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta22815 = meta22815;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22814.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t22814.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t22814.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t22814.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22816) {
      var self__ = this;
      var _22816__$1 = this;
      return self__.meta22815;
    };
    cljs.core.async.t22814.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22816, meta22815__$1) {
      var self__ = this;
      var _22816__$1 = this;
      return new cljs.core.async.t22814(self__.f, self__.fn_handler, meta22815__$1);
    };
    cljs.core.async.t22814.cljs$lang$type = true;
    cljs.core.async.t22814.cljs$lang$ctorStr = "cljs.core.async/t22814";
    cljs.core.async.t22814.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t22814");
    };
    cljs.core.async.__GT_t22814 = function __GT_t22814(f__$1, fn_handler__$1, meta22815) {
      return new cljs.core.async.t22814(f__$1, fn_handler__$1, meta22815);
    };
  }
  return new cljs.core.async.t22814(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_22817 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_22817);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_22817, ret) {
          return function() {
            return fn1.call(null, val_22817);
          };
        }(val_22817, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = ret;
      if (cljs.core.truth_(and__3969__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4868__auto___22818 = n;
  var x_22819 = 0;
  while (true) {
    if (x_22819 < n__4868__auto___22818) {
      a[x_22819] = 0;
      var G__22820 = x_22819 + 1;
      x_22819 = G__22820;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__22821 = i + 1;
      i = G__22821;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t22825 !== "undefined") {
  } else {
    cljs.core.async.t22825 = function(flag, alt_flag, meta22826) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta22826 = meta22826;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22825.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t22825.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t22825.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t22825.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_22827) {
        var self__ = this;
        var _22827__$1 = this;
        return self__.meta22826;
      };
    }(flag);
    cljs.core.async.t22825.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_22827, meta22826__$1) {
        var self__ = this;
        var _22827__$1 = this;
        return new cljs.core.async.t22825(self__.flag, self__.alt_flag, meta22826__$1);
      };
    }(flag);
    cljs.core.async.t22825.cljs$lang$type = true;
    cljs.core.async.t22825.cljs$lang$ctorStr = "cljs.core.async/t22825";
    cljs.core.async.t22825.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t22825");
      };
    }(flag);
    cljs.core.async.__GT_t22825 = function(flag) {
      return function __GT_t22825(flag__$1, alt_flag__$1, meta22826) {
        return new cljs.core.async.t22825(flag__$1, alt_flag__$1, meta22826);
      };
    }(flag);
  }
  return new cljs.core.async.t22825(flag, alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t22831 !== "undefined") {
  } else {
    cljs.core.async.t22831 = function(cb, flag, alt_handler, meta22832) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta22832 = meta22832;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22831.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t22831.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t22831.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t22831.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22833) {
      var self__ = this;
      var _22833__$1 = this;
      return self__.meta22832;
    };
    cljs.core.async.t22831.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22833, meta22832__$1) {
      var self__ = this;
      var _22833__$1 = this;
      return new cljs.core.async.t22831(self__.cb, self__.flag, self__.alt_handler, meta22832__$1);
    };
    cljs.core.async.t22831.cljs$lang$type = true;
    cljs.core.async.t22831.cljs$lang$ctorStr = "cljs.core.async/t22831";
    cljs.core.async.t22831.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t22831");
    };
    cljs.core.async.__GT_t22831 = function __GT_t22831(cb__$1, flag__$1, alt_handler__$1, meta22832) {
      return new cljs.core.async.t22831(cb__$1, flag__$1, alt_handler__$1, meta22832);
    };
  }
  return new cljs.core.async.t22831(cb, flag, alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__22834_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__22834_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3981__auto__ = wport;
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__22835 = i + 1;
          i = G__22835;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3981__auto__ = ret;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3969__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3969__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__22836) {
    var map__22838 = p__22836;
    var map__22838__$1 = cljs.core.seq_QMARK_.call(null, map__22838) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22838) : map__22838;
    var opts = map__22838__$1;
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__22836 = null;
    if (arguments.length > 1) {
      var G__22839__i = 0, G__22839__a = new Array(arguments.length - 1);
      while (G__22839__i < G__22839__a.length) {
        G__22839__a[G__22839__i] = arguments[G__22839__i + 1];
        ++G__22839__i;
      }
      p__22836 = new cljs.core.IndexedSeq(G__22839__a, 0);
    }
    return alts_BANG___delegate.call(this, ports, p__22836);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__22840) {
    var ports = cljs.core.first(arglist__22840);
    var p__22836 = cljs.core.rest(arglist__22840);
    return alts_BANG___delegate(ports, p__22836);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t22848 !== "undefined") {
  } else {
    cljs.core.async.t22848 = function(ch, f, map_LT_, meta22849) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta22849 = meta22849;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22848.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t22848.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t22848.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t22848.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t22851 !== "undefined") {
        } else {
          cljs.core.async.t22851 = function(fn1, _, meta22849, map_LT_, f, ch, meta22852) {
            this.fn1 = fn1;
            this._ = _;
            this.meta22849 = meta22849;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta22852 = meta22852;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t22851.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t22851.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t22851.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t22851.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__22841_SHARP_) {
                  return f1.call(null, p1__22841_SHARP_ == null ? null : self__.f.call(null, p1__22841_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t22851.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_22853) {
              var self__ = this;
              var _22853__$1 = this;
              return self__.meta22852;
            };
          }(___$1);
          cljs.core.async.t22851.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_22853, meta22852__$1) {
              var self__ = this;
              var _22853__$1 = this;
              return new cljs.core.async.t22851(self__.fn1, self__._, self__.meta22849, self__.map_LT_, self__.f, self__.ch, meta22852__$1);
            };
          }(___$1);
          cljs.core.async.t22851.cljs$lang$type = true;
          cljs.core.async.t22851.cljs$lang$ctorStr = "cljs.core.async/t22851";
          cljs.core.async.t22851.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
              return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t22851");
            };
          }(___$1);
          cljs.core.async.__GT_t22851 = function(___$1) {
            return function __GT_t22851(fn1__$1, ___$2, meta22849__$1, map_LT___$1, f__$1, ch__$1, meta22852) {
              return new cljs.core.async.t22851(fn1__$1, ___$2, meta22849__$1, map_LT___$1, f__$1, ch__$1, meta22852);
            };
          }(___$1);
        }
        return new cljs.core.async.t22851(fn1, ___$1, self__.meta22849, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = ret;
        if (cljs.core.truth_(and__3969__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3969__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t22848.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t22848.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t22848.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22850) {
      var self__ = this;
      var _22850__$1 = this;
      return self__.meta22849;
    };
    cljs.core.async.t22848.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22850, meta22849__$1) {
      var self__ = this;
      var _22850__$1 = this;
      return new cljs.core.async.t22848(self__.ch, self__.f, self__.map_LT_, meta22849__$1);
    };
    cljs.core.async.t22848.cljs$lang$type = true;
    cljs.core.async.t22848.cljs$lang$ctorStr = "cljs.core.async/t22848";
    cljs.core.async.t22848.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t22848");
    };
    cljs.core.async.__GT_t22848 = function __GT_t22848(ch__$1, f__$1, map_LT___$1, meta22849) {
      return new cljs.core.async.t22848(ch__$1, f__$1, map_LT___$1, meta22849);
    };
  }
  return new cljs.core.async.t22848(ch, f, map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t22857 !== "undefined") {
  } else {
    cljs.core.async.t22857 = function(ch, f, map_GT_, meta22858) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta22858 = meta22858;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22857.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t22857.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t22857.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t22857.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t22857.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t22857.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t22857.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22859) {
      var self__ = this;
      var _22859__$1 = this;
      return self__.meta22858;
    };
    cljs.core.async.t22857.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22859, meta22858__$1) {
      var self__ = this;
      var _22859__$1 = this;
      return new cljs.core.async.t22857(self__.ch, self__.f, self__.map_GT_, meta22858__$1);
    };
    cljs.core.async.t22857.cljs$lang$type = true;
    cljs.core.async.t22857.cljs$lang$ctorStr = "cljs.core.async/t22857";
    cljs.core.async.t22857.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t22857");
    };
    cljs.core.async.__GT_t22857 = function __GT_t22857(ch__$1, f__$1, map_GT___$1, meta22858) {
      return new cljs.core.async.t22857(ch__$1, f__$1, map_GT___$1, meta22858);
    };
  }
  return new cljs.core.async.t22857(ch, f, map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t22863 !== "undefined") {
  } else {
    cljs.core.async.t22863 = function(ch, p, filter_GT_, meta22864) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta22864 = meta22864;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22863.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t22863.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t22863.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t22863.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t22863.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t22863.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t22863.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22865) {
      var self__ = this;
      var _22865__$1 = this;
      return self__.meta22864;
    };
    cljs.core.async.t22863.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22865, meta22864__$1) {
      var self__ = this;
      var _22865__$1 = this;
      return new cljs.core.async.t22863(self__.ch, self__.p, self__.filter_GT_, meta22864__$1);
    };
    cljs.core.async.t22863.cljs$lang$type = true;
    cljs.core.async.t22863.cljs$lang$ctorStr = "cljs.core.async/t22863";
    cljs.core.async.t22863.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t22863");
    };
    cljs.core.async.__GT_t22863 = function __GT_t22863(ch__$1, p__$1, filter_GT___$1, meta22864) {
      return new cljs.core.async.t22863(ch__$1, p__$1, filter_GT___$1, meta22864);
    };
  }
  return new cljs.core.async.t22863(ch, p, filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6622__auto___22940 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___22940, out) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto___22940, out) {
            return function(state_22923) {
              var state_val_22924 = state_22923[1];
              if (state_val_22924 === 7) {
                var inst_22919 = state_22923[2];
                var state_22923__$1 = state_22923;
                var statearr_22925_22941 = state_22923__$1;
                statearr_22925_22941[2] = inst_22919;
                statearr_22925_22941[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22924 === 1) {
                  var state_22923__$1 = state_22923;
                  var statearr_22926_22942 = state_22923__$1;
                  statearr_22926_22942[2] = null;
                  statearr_22926_22942[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_22924 === 4) {
                    var inst_22905 = state_22923[5];
                    var inst_22905__$1 = state_22923[2];
                    var inst_22906 = inst_22905__$1 == null;
                    var state_22923__$1 = function() {
                      var statearr_22927 = state_22923;
                      statearr_22927[5] = inst_22905__$1;
                      return statearr_22927;
                    }();
                    if (cljs.core.truth_(inst_22906)) {
                      var statearr_22928_22943 = state_22923__$1;
                      statearr_22928_22943[1] = 5;
                    } else {
                      var statearr_22929_22944 = state_22923__$1;
                      statearr_22929_22944[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_22924 === 6) {
                      var inst_22905 = state_22923[5];
                      var inst_22910 = p.call(null, inst_22905);
                      var state_22923__$1 = state_22923;
                      if (cljs.core.truth_(inst_22910)) {
                        var statearr_22930_22945 = state_22923__$1;
                        statearr_22930_22945[1] = 8;
                      } else {
                        var statearr_22931_22946 = state_22923__$1;
                        statearr_22931_22946[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_22924 === 3) {
                        var inst_22921 = state_22923[2];
                        var state_22923__$1 = state_22923;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22923__$1, inst_22921);
                      } else {
                        if (state_val_22924 === 2) {
                          var state_22923__$1 = state_22923;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22923__$1, 4, ch);
                        } else {
                          if (state_val_22924 === 11) {
                            var inst_22913 = state_22923[2];
                            var state_22923__$1 = state_22923;
                            var statearr_22932_22947 = state_22923__$1;
                            statearr_22932_22947[2] = inst_22913;
                            statearr_22932_22947[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_22924 === 9) {
                              var state_22923__$1 = state_22923;
                              var statearr_22933_22948 = state_22923__$1;
                              statearr_22933_22948[2] = null;
                              statearr_22933_22948[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_22924 === 5) {
                                var inst_22908 = cljs.core.async.close_BANG_.call(null, out);
                                var state_22923__$1 = state_22923;
                                var statearr_22934_22949 = state_22923__$1;
                                statearr_22934_22949[2] = inst_22908;
                                statearr_22934_22949[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_22924 === 10) {
                                  var inst_22916 = state_22923[2];
                                  var state_22923__$1 = function() {
                                    var statearr_22935 = state_22923;
                                    statearr_22935[6] = inst_22916;
                                    return statearr_22935;
                                  }();
                                  var statearr_22936_22950 = state_22923__$1;
                                  statearr_22936_22950[2] = null;
                                  statearr_22936_22950[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_22924 === 8) {
                                    var inst_22905 = state_22923[5];
                                    var state_22923__$1 = state_22923;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22923__$1, 11, out, inst_22905);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6622__auto___22940, out);
          return function(switch__6578__auto__, c__6622__auto___22940, out) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_22938 = [null, null, null, null, null, null, null];
                statearr_22938[0] = state_machine__6579__auto__;
                statearr_22938[1] = 1;
                return statearr_22938;
              };
              var state_machine__6579__auto____1 = function(state_22923) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_22923);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_22923) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_22923);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto___22940, out);
        }();
        var state__6624__auto__ = function() {
          var statearr_22939 = f__6623__auto__.call(null);
          statearr_22939[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___22940;
          return statearr_22939;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto___22940, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__6622__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto__) {
    return function() {
      var f__6623__auto__ = function() {
        var switch__6578__auto__ = function(c__6622__auto__) {
          return function(state_23098) {
            var state_val_23099 = state_23098[1];
            if (state_val_23099 === 7) {
              var inst_23094 = state_23098[2];
              var state_23098__$1 = state_23098;
              var statearr_23100_23133 = state_23098__$1;
              statearr_23100_23133[2] = inst_23094;
              statearr_23100_23133[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_23099 === 20) {
                var inst_23069 = state_23098[5];
                var inst_23080 = state_23098[2];
                var inst_23081 = cljs.core.next.call(null, inst_23069);
                var inst_23055 = inst_23081;
                var inst_23056 = null;
                var inst_23057 = 0;
                var inst_23058 = 0;
                var state_23098__$1 = function() {
                  var statearr_23101 = state_23098;
                  statearr_23101[6] = inst_23057;
                  statearr_23101[7] = inst_23055;
                  statearr_23101[8] = inst_23056;
                  statearr_23101[9] = inst_23080;
                  statearr_23101[10] = inst_23058;
                  return statearr_23101;
                }();
                var statearr_23102_23134 = state_23098__$1;
                statearr_23102_23134[2] = null;
                statearr_23102_23134[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23099 === 1) {
                  var state_23098__$1 = state_23098;
                  var statearr_23103_23135 = state_23098__$1;
                  statearr_23103_23135[2] = null;
                  statearr_23103_23135[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23099 === 4) {
                    var inst_23044 = state_23098[11];
                    var inst_23044__$1 = state_23098[2];
                    var inst_23045 = inst_23044__$1 == null;
                    var state_23098__$1 = function() {
                      var statearr_23107 = state_23098;
                      statearr_23107[11] = inst_23044__$1;
                      return statearr_23107;
                    }();
                    if (cljs.core.truth_(inst_23045)) {
                      var statearr_23108_23136 = state_23098__$1;
                      statearr_23108_23136[1] = 5;
                    } else {
                      var statearr_23109_23137 = state_23098__$1;
                      statearr_23109_23137[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23099 === 15) {
                      var state_23098__$1 = state_23098;
                      var statearr_23110_23138 = state_23098__$1;
                      statearr_23110_23138[2] = null;
                      statearr_23110_23138[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23099 === 13) {
                        var inst_23057 = state_23098[6];
                        var inst_23055 = state_23098[7];
                        var inst_23056 = state_23098[8];
                        var inst_23058 = state_23098[10];
                        var inst_23065 = state_23098[2];
                        var inst_23066 = inst_23058 + 1;
                        var tmp23104 = inst_23057;
                        var tmp23105 = inst_23055;
                        var tmp23106 = inst_23056;
                        var inst_23055__$1 = tmp23105;
                        var inst_23056__$1 = tmp23106;
                        var inst_23057__$1 = tmp23104;
                        var inst_23058__$1 = inst_23066;
                        var state_23098__$1 = function() {
                          var statearr_23111 = state_23098;
                          statearr_23111[6] = inst_23057__$1;
                          statearr_23111[7] = inst_23055__$1;
                          statearr_23111[8] = inst_23056__$1;
                          statearr_23111[10] = inst_23058__$1;
                          statearr_23111[12] = inst_23065;
                          return statearr_23111;
                        }();
                        var statearr_23112_23139 = state_23098__$1;
                        statearr_23112_23139[2] = null;
                        statearr_23112_23139[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_23099 === 6) {
                          var inst_23044 = state_23098[11];
                          var inst_23049 = f.call(null, inst_23044);
                          var inst_23054 = cljs.core.seq.call(null, inst_23049);
                          var inst_23055 = inst_23054;
                          var inst_23056 = null;
                          var inst_23057 = 0;
                          var inst_23058 = 0;
                          var state_23098__$1 = function() {
                            var statearr_23113 = state_23098;
                            statearr_23113[6] = inst_23057;
                            statearr_23113[7] = inst_23055;
                            statearr_23113[8] = inst_23056;
                            statearr_23113[10] = inst_23058;
                            return statearr_23113;
                          }();
                          var statearr_23114_23140 = state_23098__$1;
                          statearr_23114_23140[2] = null;
                          statearr_23114_23140[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_23099 === 17) {
                            var inst_23069 = state_23098[5];
                            var inst_23073 = cljs.core.chunk_first.call(null, inst_23069);
                            var inst_23074 = cljs.core.chunk_rest.call(null, inst_23069);
                            var inst_23075 = cljs.core.count.call(null, inst_23073);
                            var inst_23055 = inst_23074;
                            var inst_23056 = inst_23073;
                            var inst_23057 = inst_23075;
                            var inst_23058 = 0;
                            var state_23098__$1 = function() {
                              var statearr_23115 = state_23098;
                              statearr_23115[6] = inst_23057;
                              statearr_23115[7] = inst_23055;
                              statearr_23115[8] = inst_23056;
                              statearr_23115[10] = inst_23058;
                              return statearr_23115;
                            }();
                            var statearr_23116_23141 = state_23098__$1;
                            statearr_23116_23141[2] = null;
                            statearr_23116_23141[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23099 === 3) {
                              var inst_23096 = state_23098[2];
                              var state_23098__$1 = state_23098;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23098__$1, inst_23096);
                            } else {
                              if (state_val_23099 === 12) {
                                var inst_23089 = state_23098[2];
                                var state_23098__$1 = state_23098;
                                var statearr_23117_23142 = state_23098__$1;
                                statearr_23117_23142[2] = inst_23089;
                                statearr_23117_23142[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23099 === 2) {
                                  var state_23098__$1 = state_23098;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23098__$1, 4, in$);
                                } else {
                                  if (state_val_23099 === 19) {
                                    var inst_23084 = state_23098[2];
                                    var state_23098__$1 = state_23098;
                                    var statearr_23118_23143 = state_23098__$1;
                                    statearr_23118_23143[2] = inst_23084;
                                    statearr_23118_23143[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_23099 === 11) {
                                      var inst_23069 = state_23098[5];
                                      var inst_23055 = state_23098[7];
                                      var inst_23069__$1 = cljs.core.seq.call(null, inst_23055);
                                      var state_23098__$1 = function() {
                                        var statearr_23119 = state_23098;
                                        statearr_23119[5] = inst_23069__$1;
                                        return statearr_23119;
                                      }();
                                      if (inst_23069__$1) {
                                        var statearr_23120_23144 = state_23098__$1;
                                        statearr_23120_23144[1] = 14;
                                      } else {
                                        var statearr_23121_23145 = state_23098__$1;
                                        statearr_23121_23145[1] = 15;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_23099 === 9) {
                                        var inst_23091 = state_23098[2];
                                        var state_23098__$1 = function() {
                                          var statearr_23122 = state_23098;
                                          statearr_23122[13] = inst_23091;
                                          return statearr_23122;
                                        }();
                                        var statearr_23123_23146 = state_23098__$1;
                                        statearr_23123_23146[2] = null;
                                        statearr_23123_23146[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_23099 === 5) {
                                          var inst_23047 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_23098__$1 = state_23098;
                                          var statearr_23124_23147 = state_23098__$1;
                                          statearr_23124_23147[2] = inst_23047;
                                          statearr_23124_23147[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_23099 === 14) {
                                            var inst_23069 = state_23098[5];
                                            var inst_23071 = cljs.core.chunked_seq_QMARK_.call(null, inst_23069);
                                            var state_23098__$1 = state_23098;
                                            if (inst_23071) {
                                              var statearr_23125_23148 = state_23098__$1;
                                              statearr_23125_23148[1] = 17;
                                            } else {
                                              var statearr_23126_23149 = state_23098__$1;
                                              statearr_23126_23149[1] = 18;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_23099 === 16) {
                                              var inst_23087 = state_23098[2];
                                              var state_23098__$1 = state_23098;
                                              var statearr_23127_23150 = state_23098__$1;
                                              statearr_23127_23150[2] = inst_23087;
                                              statearr_23127_23150[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_23099 === 10) {
                                                var inst_23056 = state_23098[8];
                                                var inst_23058 = state_23098[10];
                                                var inst_23063 = cljs.core._nth.call(null, inst_23056, inst_23058);
                                                var state_23098__$1 = state_23098;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23098__$1, 13, out, inst_23063);
                                              } else {
                                                if (state_val_23099 === 18) {
                                                  var inst_23069 = state_23098[5];
                                                  var inst_23078 = cljs.core.first.call(null, inst_23069);
                                                  var state_23098__$1 = state_23098;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23098__$1, 20, out, inst_23078);
                                                } else {
                                                  if (state_val_23099 === 8) {
                                                    var inst_23057 = state_23098[6];
                                                    var inst_23058 = state_23098[10];
                                                    var inst_23060 = inst_23058 < inst_23057;
                                                    var inst_23061 = inst_23060;
                                                    var state_23098__$1 = state_23098;
                                                    if (cljs.core.truth_(inst_23061)) {
                                                      var statearr_23128_23151 = state_23098__$1;
                                                      statearr_23128_23151[1] = 10;
                                                    } else {
                                                      var statearr_23129_23152 = state_23098__$1;
                                                      statearr_23129_23152[1] = 11;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6622__auto__);
        return function(switch__6578__auto__, c__6622__auto__) {
          return function() {
            var state_machine__6579__auto__ = null;
            var state_machine__6579__auto____0 = function() {
              var statearr_23131 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_23131[0] = state_machine__6579__auto__;
              statearr_23131[1] = 1;
              return statearr_23131;
            };
            var state_machine__6579__auto____1 = function(state_23098) {
              while (true) {
                var result__6580__auto__ = switch__6578__auto__.call(null, state_23098);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6580__auto__;
                }
                break;
              }
            };
            state_machine__6579__auto__ = function(state_23098) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6579__auto____0.call(this);
                case 1:
                  return state_machine__6579__auto____1.call(this, state_23098);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
            return state_machine__6579__auto__;
          }();
        }(switch__6578__auto__, c__6622__auto__);
      }();
      var state__6624__auto__ = function() {
        var statearr_23132 = f__6623__auto__.call(null);
        statearr_23132[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto__;
        return statearr_23132;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
    };
  }(c__6622__auto__));
  return c__6622__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__6622__auto___23225 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___23225) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto___23225) {
            return function(state_23208) {
              var state_val_23209 = state_23208[1];
              if (state_val_23209 === 7) {
                var inst_23204 = state_23208[2];
                var state_23208__$1 = state_23208;
                var statearr_23210_23226 = state_23208__$1;
                statearr_23210_23226[2] = inst_23204;
                statearr_23210_23226[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23209 === 1) {
                  var state_23208__$1 = state_23208;
                  var statearr_23211_23227 = state_23208__$1;
                  statearr_23211_23227[2] = null;
                  statearr_23211_23227[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23209 === 4) {
                    var inst_23191 = state_23208[5];
                    var inst_23191__$1 = state_23208[2];
                    var inst_23192 = inst_23191__$1 == null;
                    var state_23208__$1 = function() {
                      var statearr_23212 = state_23208;
                      statearr_23212[5] = inst_23191__$1;
                      return statearr_23212;
                    }();
                    if (cljs.core.truth_(inst_23192)) {
                      var statearr_23213_23228 = state_23208__$1;
                      statearr_23213_23228[1] = 5;
                    } else {
                      var statearr_23214_23229 = state_23208__$1;
                      statearr_23214_23229[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23209 === 6) {
                      var inst_23191 = state_23208[5];
                      var state_23208__$1 = state_23208;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23208__$1, 11, to, inst_23191);
                    } else {
                      if (state_val_23209 === 3) {
                        var inst_23206 = state_23208[2];
                        var state_23208__$1 = state_23208;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23208__$1, inst_23206);
                      } else {
                        if (state_val_23209 === 2) {
                          var state_23208__$1 = state_23208;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23208__$1, 4, from);
                        } else {
                          if (state_val_23209 === 11) {
                            var inst_23201 = state_23208[2];
                            var state_23208__$1 = function() {
                              var statearr_23215 = state_23208;
                              statearr_23215[6] = inst_23201;
                              return statearr_23215;
                            }();
                            var statearr_23216_23230 = state_23208__$1;
                            statearr_23216_23230[2] = null;
                            statearr_23216_23230[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23209 === 9) {
                              var state_23208__$1 = state_23208;
                              var statearr_23217_23231 = state_23208__$1;
                              statearr_23217_23231[2] = null;
                              statearr_23217_23231[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_23209 === 5) {
                                var state_23208__$1 = state_23208;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_23218_23232 = state_23208__$1;
                                  statearr_23218_23232[1] = 8;
                                } else {
                                  var statearr_23219_23233 = state_23208__$1;
                                  statearr_23219_23233[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23209 === 10) {
                                  var inst_23198 = state_23208[2];
                                  var state_23208__$1 = state_23208;
                                  var statearr_23220_23234 = state_23208__$1;
                                  statearr_23220_23234[2] = inst_23198;
                                  statearr_23220_23234[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_23209 === 8) {
                                    var inst_23195 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_23208__$1 = state_23208;
                                    var statearr_23221_23235 = state_23208__$1;
                                    statearr_23221_23235[2] = inst_23195;
                                    statearr_23221_23235[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6622__auto___23225);
          return function(switch__6578__auto__, c__6622__auto___23225) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_23223 = [null, null, null, null, null, null, null];
                statearr_23223[0] = state_machine__6579__auto__;
                statearr_23223[1] = 1;
                return statearr_23223;
              };
              var state_machine__6579__auto____1 = function(state_23208) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_23208);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_23208) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_23208);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto___23225);
        }();
        var state__6624__auto__ = function() {
          var statearr_23224 = f__6623__auto__.call(null);
          statearr_23224[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___23225;
          return statearr_23224;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto___23225));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6622__auto___23314 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___23314, tc, fc) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto___23314, tc, fc) {
            return function(state_23296) {
              var state_val_23297 = state_23296[1];
              if (state_val_23297 === 7) {
                var inst_23292 = state_23296[2];
                var state_23296__$1 = state_23296;
                var statearr_23298_23315 = state_23296__$1;
                statearr_23298_23315[2] = inst_23292;
                statearr_23298_23315[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23297 === 1) {
                  var state_23296__$1 = state_23296;
                  var statearr_23299_23316 = state_23296__$1;
                  statearr_23299_23316[2] = null;
                  statearr_23299_23316[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23297 === 4) {
                    var inst_23277 = state_23296[5];
                    var inst_23277__$1 = state_23296[2];
                    var inst_23278 = inst_23277__$1 == null;
                    var state_23296__$1 = function() {
                      var statearr_23300 = state_23296;
                      statearr_23300[5] = inst_23277__$1;
                      return statearr_23300;
                    }();
                    if (cljs.core.truth_(inst_23278)) {
                      var statearr_23301_23317 = state_23296__$1;
                      statearr_23301_23317[1] = 5;
                    } else {
                      var statearr_23302_23318 = state_23296__$1;
                      statearr_23302_23318[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23297 === 6) {
                      var inst_23277 = state_23296[5];
                      var inst_23283 = p.call(null, inst_23277);
                      var state_23296__$1 = state_23296;
                      if (cljs.core.truth_(inst_23283)) {
                        var statearr_23303_23319 = state_23296__$1;
                        statearr_23303_23319[1] = 9;
                      } else {
                        var statearr_23304_23320 = state_23296__$1;
                        statearr_23304_23320[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23297 === 3) {
                        var inst_23294 = state_23296[2];
                        var state_23296__$1 = state_23296;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23296__$1, inst_23294);
                      } else {
                        if (state_val_23297 === 2) {
                          var state_23296__$1 = state_23296;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23296__$1, 4, ch);
                        } else {
                          if (state_val_23297 === 11) {
                            var inst_23277 = state_23296[5];
                            var inst_23287 = state_23296[2];
                            var state_23296__$1 = state_23296;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23296__$1, 8, inst_23287, inst_23277);
                          } else {
                            if (state_val_23297 === 9) {
                              var state_23296__$1 = state_23296;
                              var statearr_23305_23321 = state_23296__$1;
                              statearr_23305_23321[2] = tc;
                              statearr_23305_23321[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_23297 === 5) {
                                var inst_23280 = cljs.core.async.close_BANG_.call(null, tc);
                                var inst_23281 = cljs.core.async.close_BANG_.call(null, fc);
                                var state_23296__$1 = function() {
                                  var statearr_23306 = state_23296;
                                  statearr_23306[6] = inst_23280;
                                  return statearr_23306;
                                }();
                                var statearr_23307_23322 = state_23296__$1;
                                statearr_23307_23322[2] = inst_23281;
                                statearr_23307_23322[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23297 === 10) {
                                  var state_23296__$1 = state_23296;
                                  var statearr_23308_23323 = state_23296__$1;
                                  statearr_23308_23323[2] = fc;
                                  statearr_23308_23323[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_23297 === 8) {
                                    var inst_23289 = state_23296[2];
                                    var state_23296__$1 = function() {
                                      var statearr_23309 = state_23296;
                                      statearr_23309[7] = inst_23289;
                                      return statearr_23309;
                                    }();
                                    var statearr_23310_23324 = state_23296__$1;
                                    statearr_23310_23324[2] = null;
                                    statearr_23310_23324[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6622__auto___23314, tc, fc);
          return function(switch__6578__auto__, c__6622__auto___23314, tc, fc) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_23312 = [null, null, null, null, null, null, null, null];
                statearr_23312[0] = state_machine__6579__auto__;
                statearr_23312[1] = 1;
                return statearr_23312;
              };
              var state_machine__6579__auto____1 = function(state_23296) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_23296);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_23296) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_23296);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto___23314, tc, fc);
        }();
        var state__6624__auto__ = function() {
          var statearr_23313 = f__6623__auto__.call(null);
          statearr_23313[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___23314;
          return statearr_23313;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto___23314, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__6622__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto__) {
    return function() {
      var f__6623__auto__ = function() {
        var switch__6578__auto__ = function(c__6622__auto__) {
          return function(state_23367) {
            var state_val_23368 = state_23367[1];
            if (state_val_23368 === 7) {
              var inst_23363 = state_23367[2];
              var state_23367__$1 = state_23367;
              var statearr_23369_23381 = state_23367__$1;
              statearr_23369_23381[2] = inst_23363;
              statearr_23369_23381[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_23368 === 6) {
                var inst_23353 = state_23367[5];
                var inst_23356 = state_23367[6];
                var inst_23360 = f.call(null, inst_23353, inst_23356);
                var inst_23353__$1 = inst_23360;
                var state_23367__$1 = function() {
                  var statearr_23370 = state_23367;
                  statearr_23370[5] = inst_23353__$1;
                  return statearr_23370;
                }();
                var statearr_23371_23382 = state_23367__$1;
                statearr_23371_23382[2] = null;
                statearr_23371_23382[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23368 === 5) {
                  var inst_23353 = state_23367[5];
                  var state_23367__$1 = state_23367;
                  var statearr_23372_23383 = state_23367__$1;
                  statearr_23372_23383[2] = inst_23353;
                  statearr_23372_23383[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23368 === 4) {
                    var inst_23356 = state_23367[6];
                    var inst_23356__$1 = state_23367[2];
                    var inst_23357 = inst_23356__$1 == null;
                    var state_23367__$1 = function() {
                      var statearr_23373 = state_23367;
                      statearr_23373[6] = inst_23356__$1;
                      return statearr_23373;
                    }();
                    if (cljs.core.truth_(inst_23357)) {
                      var statearr_23374_23384 = state_23367__$1;
                      statearr_23374_23384[1] = 5;
                    } else {
                      var statearr_23375_23385 = state_23367__$1;
                      statearr_23375_23385[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23368 === 3) {
                      var inst_23365 = state_23367[2];
                      var state_23367__$1 = state_23367;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23367__$1, inst_23365);
                    } else {
                      if (state_val_23368 === 2) {
                        var state_23367__$1 = state_23367;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23367__$1, 4, ch);
                      } else {
                        if (state_val_23368 === 1) {
                          var inst_23353 = init;
                          var state_23367__$1 = function() {
                            var statearr_23376 = state_23367;
                            statearr_23376[5] = inst_23353;
                            return statearr_23376;
                          }();
                          var statearr_23377_23386 = state_23367__$1;
                          statearr_23377_23386[2] = null;
                          statearr_23377_23386[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6622__auto__);
        return function(switch__6578__auto__, c__6622__auto__) {
          return function() {
            var state_machine__6579__auto__ = null;
            var state_machine__6579__auto____0 = function() {
              var statearr_23379 = [null, null, null, null, null, null, null];
              statearr_23379[0] = state_machine__6579__auto__;
              statearr_23379[1] = 1;
              return statearr_23379;
            };
            var state_machine__6579__auto____1 = function(state_23367) {
              while (true) {
                var result__6580__auto__ = switch__6578__auto__.call(null, state_23367);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6580__auto__;
                }
                break;
              }
            };
            state_machine__6579__auto__ = function(state_23367) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6579__auto____0.call(this);
                case 1:
                  return state_machine__6579__auto____1.call(this, state_23367);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
            return state_machine__6579__auto__;
          }();
        }(switch__6578__auto__, c__6622__auto__);
      }();
      var state__6624__auto__ = function() {
        var statearr_23380 = f__6623__auto__.call(null);
        statearr_23380[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto__;
        return statearr_23380;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
    };
  }(c__6622__auto__));
  return c__6622__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6622__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto__) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto__) {
            return function(state_23444) {
              var state_val_23445 = state_23444[1];
              if (state_val_23445 === 7) {
                var inst_23425 = state_23444[5];
                var inst_23430 = state_23444[2];
                var inst_23431 = cljs.core.next.call(null, inst_23425);
                var inst_23425__$1 = inst_23431;
                var state_23444__$1 = function() {
                  var statearr_23446 = state_23444;
                  statearr_23446[5] = inst_23425__$1;
                  statearr_23446[6] = inst_23430;
                  return statearr_23446;
                }();
                var statearr_23447_23461 = state_23444__$1;
                statearr_23447_23461[2] = null;
                statearr_23447_23461[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23445 === 1) {
                  var inst_23424 = cljs.core.seq.call(null, coll);
                  var inst_23425 = inst_23424;
                  var state_23444__$1 = function() {
                    var statearr_23448 = state_23444;
                    statearr_23448[5] = inst_23425;
                    return statearr_23448;
                  }();
                  var statearr_23449_23462 = state_23444__$1;
                  statearr_23449_23462[2] = null;
                  statearr_23449_23462[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23445 === 4) {
                    var inst_23425 = state_23444[5];
                    var inst_23428 = cljs.core.first.call(null, inst_23425);
                    var state_23444__$1 = state_23444;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23444__$1, 7, ch, inst_23428);
                  } else {
                    if (state_val_23445 === 6) {
                      var inst_23440 = state_23444[2];
                      var state_23444__$1 = state_23444;
                      var statearr_23450_23463 = state_23444__$1;
                      statearr_23450_23463[2] = inst_23440;
                      statearr_23450_23463[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23445 === 3) {
                        var inst_23442 = state_23444[2];
                        var state_23444__$1 = state_23444;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23444__$1, inst_23442);
                      } else {
                        if (state_val_23445 === 2) {
                          var inst_23425 = state_23444[5];
                          var state_23444__$1 = state_23444;
                          if (cljs.core.truth_(inst_23425)) {
                            var statearr_23451_23464 = state_23444__$1;
                            statearr_23451_23464[1] = 4;
                          } else {
                            var statearr_23452_23465 = state_23444__$1;
                            statearr_23452_23465[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_23445 === 9) {
                            var state_23444__$1 = state_23444;
                            var statearr_23453_23466 = state_23444__$1;
                            statearr_23453_23466[2] = null;
                            statearr_23453_23466[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23445 === 5) {
                              var state_23444__$1 = state_23444;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_23454_23467 = state_23444__$1;
                                statearr_23454_23467[1] = 8;
                              } else {
                                var statearr_23455_23468 = state_23444__$1;
                                statearr_23455_23468[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_23445 === 10) {
                                var inst_23438 = state_23444[2];
                                var state_23444__$1 = state_23444;
                                var statearr_23456_23469 = state_23444__$1;
                                statearr_23456_23469[2] = inst_23438;
                                statearr_23456_23469[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23445 === 8) {
                                  var inst_23435 = cljs.core.async.close_BANG_.call(null, ch);
                                  var state_23444__$1 = state_23444;
                                  var statearr_23457_23470 = state_23444__$1;
                                  statearr_23457_23470[2] = inst_23435;
                                  statearr_23457_23470[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6622__auto__);
          return function(switch__6578__auto__, c__6622__auto__) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_23459 = [null, null, null, null, null, null, null];
                statearr_23459[0] = state_machine__6579__auto__;
                statearr_23459[1] = 1;
                return statearr_23459;
              };
              var state_machine__6579__auto____1 = function(state_23444) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_23444);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_23444) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_23444);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto__);
        }();
        var state__6624__auto__ = function() {
          var statearr_23460 = f__6623__auto__.call(null);
          statearr_23460[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto__;
          return statearr_23460;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto__));
    return c__6622__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj23472 = {};
  return obj23472;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3969__auto__ = _;
    if (and__3969__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4625__auto__ = _ == null ? null : _;
    return function() {
      var or__3981__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj23474 = {};
  return obj23474;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t23687 !== "undefined") {
    } else {
      cljs.core.async.t23687 = function(cs, ch, mult, meta23688) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta23688 = meta23688;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t23687.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t23687.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t23687.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t23687.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t23687.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t23687.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t23687.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_23689) {
          var self__ = this;
          var _23689__$1 = this;
          return self__.meta23688;
        };
      }(cs);
      cljs.core.async.t23687.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_23689, meta23688__$1) {
          var self__ = this;
          var _23689__$1 = this;
          return new cljs.core.async.t23687(self__.cs, self__.ch, self__.mult, meta23688__$1);
        };
      }(cs);
      cljs.core.async.t23687.cljs$lang$type = true;
      cljs.core.async.t23687.cljs$lang$ctorStr = "cljs.core.async/t23687";
      cljs.core.async.t23687.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
          return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t23687");
        };
      }(cs);
      cljs.core.async.__GT_t23687 = function(cs) {
        return function __GT_t23687(cs__$1, ch__$1, mult__$1, meta23688) {
          return new cljs.core.async.t23687(cs__$1, ch__$1, mult__$1, meta23688);
        };
      }(cs);
    }
    return new cljs.core.async.t23687(cs, ch, mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6622__auto___23899 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___23899, cs, m, dchan, dctr, done) {
    return function() {
      var f__6623__auto__ = function() {
        var switch__6578__auto__ = function(c__6622__auto___23899, cs, m, dchan, dctr, done) {
          return function(state_23817) {
            var state_val_23818 = state_23817[1];
            if (state_val_23818 === 7) {
              var inst_23813 = state_23817[2];
              var state_23817__$1 = state_23817;
              var statearr_23819_23900 = state_23817__$1;
              statearr_23819_23900[2] = inst_23813;
              statearr_23819_23900[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_23818 === 20) {
                var inst_23721 = state_23817[5];
                var inst_23731 = cljs.core.first.call(null, inst_23721);
                var inst_23732 = cljs.core.nth.call(null, inst_23731, 0, null);
                var inst_23733 = cljs.core.nth.call(null, inst_23731, 1, null);
                var state_23817__$1 = function() {
                  var statearr_23820 = state_23817;
                  statearr_23820[6] = inst_23732;
                  return statearr_23820;
                }();
                if (cljs.core.truth_(inst_23733)) {
                  var statearr_23821_23901 = state_23817__$1;
                  statearr_23821_23901[1] = 22;
                } else {
                  var statearr_23822_23902 = state_23817__$1;
                  statearr_23822_23902[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23818 === 27) {
                  var inst_23761 = state_23817[7];
                  var inst_23763 = state_23817[8];
                  var inst_23768 = cljs.core._nth.call(null, inst_23761, inst_23763);
                  var state_23817__$1 = function() {
                    var statearr_23823 = state_23817;
                    statearr_23823[9] = inst_23768;
                    return statearr_23823;
                  }();
                  var statearr_23824_23903 = state_23817__$1;
                  statearr_23824_23903[2] = null;
                  statearr_23824_23903[1] = 32;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23818 === 1) {
                    var state_23817__$1 = state_23817;
                    var statearr_23825_23904 = state_23817__$1;
                    statearr_23825_23904[2] = null;
                    statearr_23825_23904[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23818 === 24) {
                      var inst_23721 = state_23817[5];
                      var inst_23738 = state_23817[2];
                      var inst_23739 = cljs.core.next.call(null, inst_23721);
                      var inst_23701 = inst_23739;
                      var inst_23702 = null;
                      var inst_23703 = 0;
                      var inst_23704 = 0;
                      var state_23817__$1 = function() {
                        var statearr_23826 = state_23817;
                        statearr_23826[10] = inst_23704;
                        statearr_23826[11] = inst_23738;
                        statearr_23826[12] = inst_23701;
                        statearr_23826[13] = inst_23702;
                        statearr_23826[14] = inst_23703;
                        return statearr_23826;
                      }();
                      var statearr_23827_23905 = state_23817__$1;
                      statearr_23827_23905[2] = null;
                      statearr_23827_23905[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23818 === 39) {
                        var inst_23780 = state_23817[15];
                        var inst_23797 = state_23817[2];
                        var inst_23798 = cljs.core.next.call(null, inst_23780);
                        var inst_23760 = inst_23798;
                        var inst_23761 = null;
                        var inst_23762 = 0;
                        var inst_23763 = 0;
                        var state_23817__$1 = function() {
                          var statearr_23831 = state_23817;
                          statearr_23831[7] = inst_23761;
                          statearr_23831[8] = inst_23763;
                          statearr_23831[16] = inst_23797;
                          statearr_23831[17] = inst_23762;
                          statearr_23831[18] = inst_23760;
                          return statearr_23831;
                        }();
                        var statearr_23832_23906 = state_23817__$1;
                        statearr_23832_23906[2] = null;
                        statearr_23832_23906[1] = 25;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_23818 === 4) {
                          var inst_23692 = state_23817[19];
                          var inst_23692__$1 = state_23817[2];
                          var inst_23693 = inst_23692__$1 == null;
                          var state_23817__$1 = function() {
                            var statearr_23833 = state_23817;
                            statearr_23833[19] = inst_23692__$1;
                            return statearr_23833;
                          }();
                          if (cljs.core.truth_(inst_23693)) {
                            var statearr_23834_23907 = state_23817__$1;
                            statearr_23834_23907[1] = 5;
                          } else {
                            var statearr_23835_23908 = state_23817__$1;
                            statearr_23835_23908[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_23818 === 15) {
                            var inst_23704 = state_23817[10];
                            var inst_23701 = state_23817[12];
                            var inst_23702 = state_23817[13];
                            var inst_23703 = state_23817[14];
                            var inst_23717 = state_23817[2];
                            var inst_23718 = inst_23704 + 1;
                            var tmp23828 = inst_23701;
                            var tmp23829 = inst_23702;
                            var tmp23830 = inst_23703;
                            var inst_23701__$1 = tmp23828;
                            var inst_23702__$1 = tmp23829;
                            var inst_23703__$1 = tmp23830;
                            var inst_23704__$1 = inst_23718;
                            var state_23817__$1 = function() {
                              var statearr_23836 = state_23817;
                              statearr_23836[10] = inst_23704__$1;
                              statearr_23836[20] = inst_23717;
                              statearr_23836[12] = inst_23701__$1;
                              statearr_23836[13] = inst_23702__$1;
                              statearr_23836[14] = inst_23703__$1;
                              return statearr_23836;
                            }();
                            var statearr_23837_23909 = state_23817__$1;
                            statearr_23837_23909[2] = null;
                            statearr_23837_23909[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23818 === 21) {
                              var inst_23742 = state_23817[2];
                              var state_23817__$1 = state_23817;
                              var statearr_23838_23910 = state_23817__$1;
                              statearr_23838_23910[2] = inst_23742;
                              statearr_23838_23910[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_23818 === 31) {
                                var inst_23768 = state_23817[9];
                                var inst_23769 = state_23817[2];
                                var inst_23770 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_23771 = cljs.core.async.untap_STAR_.call(null, m, inst_23768);
                                var state_23817__$1 = function() {
                                  var statearr_23839 = state_23817;
                                  statearr_23839[21] = inst_23769;
                                  statearr_23839[22] = inst_23770;
                                  return statearr_23839;
                                }();
                                var statearr_23840_23911 = state_23817__$1;
                                statearr_23840_23911[2] = inst_23771;
                                statearr_23840_23911[1] = 30;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23818 === 32) {
                                  try {
                                    var inst_23692 = state_23817[19];
                                    var inst_23768 = state_23817[9];
                                    var inst_23774 = cljs.core.async.put_BANG_.call(null, inst_23768, inst_23692, done);
                                    var state_23817__$1 = state_23817;
                                    var statearr_23843_23912 = state_23817__$1;
                                    statearr_23843_23912[2] = inst_23774;
                                    statearr_23843_23912[1] = 30;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e23841) {
                                    if (e23841 instanceof Object) {
                                      var ex__6572__auto__ = e23841;
                                      var statearr_23842_23913 = state_23817;
                                      statearr_23842_23913[1] = 31;
                                      statearr_23842_23913[2] = ex__6572__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e23841;
                                    }
                                  }
                                } else {
                                  if (state_val_23818 === 40) {
                                    var inst_23789 = state_23817[23];
                                    var inst_23790 = state_23817[2];
                                    var inst_23791 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_23792 = cljs.core.async.untap_STAR_.call(null, m, inst_23789);
                                    var state_23817__$1 = function() {
                                      var statearr_23844 = state_23817;
                                      statearr_23844[24] = inst_23791;
                                      statearr_23844[25] = inst_23790;
                                      return statearr_23844;
                                    }();
                                    var statearr_23845_23914 = state_23817__$1;
                                    statearr_23845_23914[2] = inst_23792;
                                    statearr_23845_23914[1] = 39;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_23818 === 33) {
                                      var inst_23780 = state_23817[15];
                                      var inst_23782 = cljs.core.chunked_seq_QMARK_.call(null, inst_23780);
                                      var state_23817__$1 = state_23817;
                                      if (inst_23782) {
                                        var statearr_23846_23915 = state_23817__$1;
                                        statearr_23846_23915[1] = 36;
                                      } else {
                                        var statearr_23847_23916 = state_23817__$1;
                                        statearr_23847_23916[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_23818 === 13) {
                                        var inst_23711 = state_23817[26];
                                        var inst_23714 = cljs.core.async.close_BANG_.call(null, inst_23711);
                                        var state_23817__$1 = state_23817;
                                        var statearr_23848_23917 = state_23817__$1;
                                        statearr_23848_23917[2] = inst_23714;
                                        statearr_23848_23917[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_23818 === 22) {
                                          var inst_23732 = state_23817[6];
                                          var inst_23735 = cljs.core.async.close_BANG_.call(null, inst_23732);
                                          var state_23817__$1 = state_23817;
                                          var statearr_23849_23918 = state_23817__$1;
                                          statearr_23849_23918[2] = inst_23735;
                                          statearr_23849_23918[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_23818 === 36) {
                                            var inst_23780 = state_23817[15];
                                            var inst_23784 = cljs.core.chunk_first.call(null, inst_23780);
                                            var inst_23785 = cljs.core.chunk_rest.call(null, inst_23780);
                                            var inst_23786 = cljs.core.count.call(null, inst_23784);
                                            var inst_23760 = inst_23785;
                                            var inst_23761 = inst_23784;
                                            var inst_23762 = inst_23786;
                                            var inst_23763 = 0;
                                            var state_23817__$1 = function() {
                                              var statearr_23850 = state_23817;
                                              statearr_23850[7] = inst_23761;
                                              statearr_23850[8] = inst_23763;
                                              statearr_23850[17] = inst_23762;
                                              statearr_23850[18] = inst_23760;
                                              return statearr_23850;
                                            }();
                                            var statearr_23851_23919 = state_23817__$1;
                                            statearr_23851_23919[2] = null;
                                            statearr_23851_23919[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_23818 === 41) {
                                              try {
                                                var inst_23789 = state_23817[23];
                                                var inst_23692 = state_23817[19];
                                                var inst_23795 = cljs.core.async.put_BANG_.call(null, inst_23789, inst_23692, done);
                                                var state_23817__$1 = state_23817;
                                                var statearr_23854_23920 = state_23817__$1;
                                                statearr_23854_23920[2] = inst_23795;
                                                statearr_23854_23920[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } catch (e23852) {
                                                if (e23852 instanceof Object) {
                                                  var ex__6572__auto__ = e23852;
                                                  var statearr_23853_23921 = state_23817;
                                                  statearr_23853_23921[1] = 40;
                                                  statearr_23853_23921[2] = ex__6572__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  throw e23852;
                                                }
                                              }
                                            } else {
                                              if (state_val_23818 === 29) {
                                                var inst_23806 = state_23817[2];
                                                var state_23817__$1 = state_23817;
                                                var statearr_23855_23922 = state_23817__$1;
                                                statearr_23855_23922[2] = inst_23806;
                                                statearr_23855_23922[1] = 26;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_23818 === 6) {
                                                  var inst_23751 = cljs.core.deref.call(null, cs);
                                                  var inst_23752 = cljs.core.keys.call(null, inst_23751);
                                                  var inst_23753 = cljs.core.count.call(null, inst_23752);
                                                  var inst_23754 = cljs.core.reset_BANG_.call(null, dctr, inst_23753);
                                                  var inst_23759 = cljs.core.seq.call(null, inst_23752);
                                                  var inst_23760 = inst_23759;
                                                  var inst_23761 = null;
                                                  var inst_23762 = 0;
                                                  var inst_23763 = 0;
                                                  var state_23817__$1 = function() {
                                                    var statearr_23856 = state_23817;
                                                    statearr_23856[7] = inst_23761;
                                                    statearr_23856[8] = inst_23763;
                                                    statearr_23856[27] = inst_23754;
                                                    statearr_23856[17] = inst_23762;
                                                    statearr_23856[18] = inst_23760;
                                                    return statearr_23856;
                                                  }();
                                                  var statearr_23857_23923 = state_23817__$1;
                                                  statearr_23857_23923[2] = null;
                                                  statearr_23857_23923[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_23818 === 28) {
                                                    var inst_23780 = state_23817[15];
                                                    var inst_23760 = state_23817[18];
                                                    var inst_23780__$1 = cljs.core.seq.call(null, inst_23760);
                                                    var state_23817__$1 = function() {
                                                      var statearr_23858 = state_23817;
                                                      statearr_23858[15] = inst_23780__$1;
                                                      return statearr_23858;
                                                    }();
                                                    if (inst_23780__$1) {
                                                      var statearr_23859_23924 = state_23817__$1;
                                                      statearr_23859_23924[1] = 33;
                                                    } else {
                                                      var statearr_23860_23925 = state_23817__$1;
                                                      statearr_23860_23925[1] = 34;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_23818 === 25) {
                                                      var inst_23763 = state_23817[8];
                                                      var inst_23762 = state_23817[17];
                                                      var inst_23765 = inst_23763 < inst_23762;
                                                      var inst_23766 = inst_23765;
                                                      var state_23817__$1 = state_23817;
                                                      if (cljs.core.truth_(inst_23766)) {
                                                        var statearr_23861_23926 = state_23817__$1;
                                                        statearr_23861_23926[1] = 27;
                                                      } else {
                                                        var statearr_23862_23927 = state_23817__$1;
                                                        statearr_23862_23927[1] = 28;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_23818 === 34) {
                                                        var state_23817__$1 = state_23817;
                                                        var statearr_23863_23928 = state_23817__$1;
                                                        statearr_23863_23928[2] = null;
                                                        statearr_23863_23928[1] = 35;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_23818 === 17) {
                                                          var state_23817__$1 = state_23817;
                                                          var statearr_23864_23929 = state_23817__$1;
                                                          statearr_23864_23929[2] = null;
                                                          statearr_23864_23929[1] = 18;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_23818 === 3) {
                                                            var inst_23815 = state_23817[2];
                                                            var state_23817__$1 = state_23817;
                                                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23817__$1, inst_23815);
                                                          } else {
                                                            if (state_val_23818 === 12) {
                                                              var inst_23747 = state_23817[2];
                                                              var state_23817__$1 = state_23817;
                                                              var statearr_23865_23930 = state_23817__$1;
                                                              statearr_23865_23930[2] = inst_23747;
                                                              statearr_23865_23930[1] = 9;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_23818 === 2) {
                                                                var state_23817__$1 = state_23817;
                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23817__$1, 4, ch);
                                                              } else {
                                                                if (state_val_23818 === 23) {
                                                                  var state_23817__$1 = state_23817;
                                                                  var statearr_23866_23931 = state_23817__$1;
                                                                  statearr_23866_23931[2] = null;
                                                                  statearr_23866_23931[1] = 24;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_23818 === 35) {
                                                                    var inst_23804 = state_23817[2];
                                                                    var state_23817__$1 = state_23817;
                                                                    var statearr_23867_23932 = state_23817__$1;
                                                                    statearr_23867_23932[2] = inst_23804;
                                                                    statearr_23867_23932[1] = 29;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_23818 === 19) {
                                                                      var inst_23721 = state_23817[5];
                                                                      var inst_23725 = cljs.core.chunk_first.call(null, inst_23721);
                                                                      var inst_23726 = cljs.core.chunk_rest.call(null, inst_23721);
                                                                      var inst_23727 = cljs.core.count.call(null, inst_23725);
                                                                      var inst_23701 = inst_23726;
                                                                      var inst_23702 = inst_23725;
                                                                      var inst_23703 = inst_23727;
                                                                      var inst_23704 = 0;
                                                                      var state_23817__$1 = function() {
                                                                        var statearr_23868 = state_23817;
                                                                        statearr_23868[10] = inst_23704;
                                                                        statearr_23868[12] = inst_23701;
                                                                        statearr_23868[13] = inst_23702;
                                                                        statearr_23868[14] = inst_23703;
                                                                        return statearr_23868;
                                                                      }();
                                                                      var statearr_23869_23933 = state_23817__$1;
                                                                      statearr_23869_23933[2] = null;
                                                                      statearr_23869_23933[1] = 8;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_23818 === 11) {
                                                                        var inst_23721 = state_23817[5];
                                                                        var inst_23701 = state_23817[12];
                                                                        var inst_23721__$1 = cljs.core.seq.call(null, inst_23701);
                                                                        var state_23817__$1 = function() {
                                                                          var statearr_23870 = state_23817;
                                                                          statearr_23870[5] = inst_23721__$1;
                                                                          return statearr_23870;
                                                                        }();
                                                                        if (inst_23721__$1) {
                                                                          var statearr_23871_23934 = state_23817__$1;
                                                                          statearr_23871_23934[1] = 16;
                                                                        } else {
                                                                          var statearr_23872_23935 = state_23817__$1;
                                                                          statearr_23872_23935[1] = 17;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_23818 === 9) {
                                                                          var inst_23749 = state_23817[2];
                                                                          var state_23817__$1 = state_23817;
                                                                          var statearr_23873_23936 = state_23817__$1;
                                                                          statearr_23873_23936[2] = inst_23749;
                                                                          statearr_23873_23936[1] = 7;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_23818 === 5) {
                                                                            var inst_23699 = cljs.core.deref.call(null, cs);
                                                                            var inst_23700 = cljs.core.seq.call(null, inst_23699);
                                                                            var inst_23701 = inst_23700;
                                                                            var inst_23702 = null;
                                                                            var inst_23703 = 0;
                                                                            var inst_23704 = 0;
                                                                            var state_23817__$1 = function() {
                                                                              var statearr_23874 = state_23817;
                                                                              statearr_23874[10] = inst_23704;
                                                                              statearr_23874[12] = inst_23701;
                                                                              statearr_23874[13] = inst_23702;
                                                                              statearr_23874[14] = inst_23703;
                                                                              return statearr_23874;
                                                                            }();
                                                                            var statearr_23875_23937 = state_23817__$1;
                                                                            statearr_23875_23937[2] = null;
                                                                            statearr_23875_23937[1] = 8;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_23818 === 14) {
                                                                              var state_23817__$1 = state_23817;
                                                                              var statearr_23876_23938 = state_23817__$1;
                                                                              statearr_23876_23938[2] = null;
                                                                              statearr_23876_23938[1] = 15;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_23818 === 26) {
                                                                                var inst_23808 = state_23817[2];
                                                                                var state_23817__$1 = function() {
                                                                                  var statearr_23877 = state_23817;
                                                                                  statearr_23877[28] = inst_23808;
                                                                                  return statearr_23877;
                                                                                }();
                                                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23817__$1, 42, dchan);
                                                                              } else {
                                                                                if (state_val_23818 === 16) {
                                                                                  var inst_23721 = state_23817[5];
                                                                                  var inst_23723 = cljs.core.chunked_seq_QMARK_.call(null, inst_23721);
                                                                                  var state_23817__$1 = state_23817;
                                                                                  if (inst_23723) {
                                                                                    var statearr_23881_23939 = state_23817__$1;
                                                                                    statearr_23881_23939[1] = 19;
                                                                                  } else {
                                                                                    var statearr_23882_23940 = state_23817__$1;
                                                                                    statearr_23882_23940[1] = 20;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_23818 === 38) {
                                                                                    var inst_23801 = state_23817[2];
                                                                                    var state_23817__$1 = state_23817;
                                                                                    var statearr_23883_23941 = state_23817__$1;
                                                                                    statearr_23883_23941[2] = inst_23801;
                                                                                    statearr_23883_23941[1] = 35;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_23818 === 30) {
                                                                                      var inst_23761 = state_23817[7];
                                                                                      var inst_23763 = state_23817[8];
                                                                                      var inst_23762 = state_23817[17];
                                                                                      var inst_23760 = state_23817[18];
                                                                                      var inst_23776 = state_23817[2];
                                                                                      var inst_23777 = inst_23763 + 1;
                                                                                      var tmp23878 = inst_23761;
                                                                                      var tmp23879 = inst_23762;
                                                                                      var tmp23880 = inst_23760;
                                                                                      var inst_23760__$1 = tmp23880;
                                                                                      var inst_23761__$1 = tmp23878;
                                                                                      var inst_23762__$1 = tmp23879;
                                                                                      var inst_23763__$1 = inst_23777;
                                                                                      var state_23817__$1 = function() {
                                                                                        var statearr_23884 = state_23817;
                                                                                        statearr_23884[7] = inst_23761__$1;
                                                                                        statearr_23884[8] = inst_23763__$1;
                                                                                        statearr_23884[17] = inst_23762__$1;
                                                                                        statearr_23884[29] = inst_23776;
                                                                                        statearr_23884[18] = inst_23760__$1;
                                                                                        return statearr_23884;
                                                                                      }();
                                                                                      var statearr_23885_23942 = state_23817__$1;
                                                                                      statearr_23885_23942[2] = null;
                                                                                      statearr_23885_23942[1] = 25;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_23818 === 10) {
                                                                                        var inst_23704 = state_23817[10];
                                                                                        var inst_23702 = state_23817[13];
                                                                                        var inst_23710 = cljs.core._nth.call(null, inst_23702, inst_23704);
                                                                                        var inst_23711 = cljs.core.nth.call(null, inst_23710, 0, null);
                                                                                        var inst_23712 = cljs.core.nth.call(null, inst_23710, 1, null);
                                                                                        var state_23817__$1 = function() {
                                                                                          var statearr_23886 = state_23817;
                                                                                          statearr_23886[26] = inst_23711;
                                                                                          return statearr_23886;
                                                                                        }();
                                                                                        if (cljs.core.truth_(inst_23712)) {
                                                                                          var statearr_23887_23943 = state_23817__$1;
                                                                                          statearr_23887_23943[1] = 13;
                                                                                        } else {
                                                                                          var statearr_23888_23944 = state_23817__$1;
                                                                                          statearr_23888_23944[1] = 14;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_23818 === 18) {
                                                                                          var inst_23745 = state_23817[2];
                                                                                          var state_23817__$1 = state_23817;
                                                                                          var statearr_23889_23945 = state_23817__$1;
                                                                                          statearr_23889_23945[2] = inst_23745;
                                                                                          statearr_23889_23945[1] = 12;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_23818 === 42) {
                                                                                            var inst_23810 = state_23817[2];
                                                                                            var state_23817__$1 = function() {
                                                                                              var statearr_23890 = state_23817;
                                                                                              statearr_23890[30] = inst_23810;
                                                                                              return statearr_23890;
                                                                                            }();
                                                                                            var statearr_23891_23946 = state_23817__$1;
                                                                                            statearr_23891_23946[2] = null;
                                                                                            statearr_23891_23946[1] = 2;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_23818 === 37) {
                                                                                              var inst_23780 = state_23817[15];
                                                                                              var inst_23789 = cljs.core.first.call(null, inst_23780);
                                                                                              var state_23817__$1 = function() {
                                                                                                var statearr_23892 = state_23817;
                                                                                                statearr_23892[23] = inst_23789;
                                                                                                return statearr_23892;
                                                                                              }();
                                                                                              var statearr_23893_23947 = state_23817__$1;
                                                                                              statearr_23893_23947[2] = null;
                                                                                              statearr_23893_23947[1] = 41;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_23818 === 8) {
                                                                                                var inst_23704 = state_23817[10];
                                                                                                var inst_23703 = state_23817[14];
                                                                                                var inst_23706 = inst_23704 < inst_23703;
                                                                                                var inst_23707 = inst_23706;
                                                                                                var state_23817__$1 = state_23817;
                                                                                                if (cljs.core.truth_(inst_23707)) {
                                                                                                  var statearr_23894_23948 = state_23817__$1;
                                                                                                  statearr_23894_23948[1] = 10;
                                                                                                } else {
                                                                                                  var statearr_23895_23949 = state_23817__$1;
                                                                                                  statearr_23895_23949[1] = 11;
                                                                                                }
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                return null;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6622__auto___23899, cs, m, dchan, dctr, done);
        return function(switch__6578__auto__, c__6622__auto___23899, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__6579__auto__ = null;
            var state_machine__6579__auto____0 = function() {
              var statearr_23897 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_23897[0] = state_machine__6579__auto__;
              statearr_23897[1] = 1;
              return statearr_23897;
            };
            var state_machine__6579__auto____1 = function(state_23817) {
              while (true) {
                var result__6580__auto__ = switch__6578__auto__.call(null, state_23817);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6580__auto__;
                }
                break;
              }
            };
            state_machine__6579__auto__ = function(state_23817) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6579__auto____0.call(this);
                case 1:
                  return state_machine__6579__auto____1.call(this, state_23817);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
            return state_machine__6579__auto__;
          }();
        }(switch__6578__auto__, c__6622__auto___23899, cs, m, dchan, dctr, done);
      }();
      var state__6624__auto__ = function() {
        var statearr_23898 = f__6623__auto__.call(null);
        statearr_23898[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___23899;
        return statearr_23898;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
    };
  }(c__6622__auto___23899, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj23951 = {};
  return obj23951;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3969__auto__ = m;
    if (and__3969__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4625__auto__ = m == null ? null : m;
    return function() {
      var or__3981__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t24057 !== "undefined") {
    } else {
      cljs.core.async.t24057 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta24058) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta24058 = meta24058;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t24057.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t24057.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t24057.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_24059) {
          var self__ = this;
          var _24059__$1 = this;
          return self__.meta24058;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_24059, meta24058__$1) {
          var self__ = this;
          var _24059__$1 = this;
          return new cljs.core.async.t24057(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta24058__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t24057.cljs$lang$type = true;
      cljs.core.async.t24057.cljs$lang$ctorStr = "cljs.core.async/t24057";
      cljs.core.async.t24057.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
          return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t24057");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t24057 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t24057(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta24058) {
          return new cljs.core.async.t24057(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta24058);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t24057(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__6622__auto___24162 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___24162, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6623__auto__ = function() {
        var switch__6578__auto__ = function(c__6622__auto___24162, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_24124) {
            var state_val_24125 = state_24124[1];
            if (state_val_24125 === 7) {
              var inst_24073 = state_24124[5];
              var inst_24078 = cljs.core.apply.call(null, cljs.core.hash_map, inst_24073);
              var state_24124__$1 = state_24124;
              var statearr_24126_24163 = state_24124__$1;
              statearr_24126_24163[2] = inst_24078;
              statearr_24126_24163[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_24125 === 20) {
                var inst_24088 = state_24124[6];
                var state_24124__$1 = state_24124;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24124__$1, 23, out, inst_24088);
              } else {
                if (state_val_24125 === 1) {
                  var inst_24063 = state_24124[7];
                  var inst_24063__$1 = calc_state.call(null);
                  var inst_24064 = cljs.core.seq_QMARK_.call(null, inst_24063__$1);
                  var state_24124__$1 = function() {
                    var statearr_24127 = state_24124;
                    statearr_24127[7] = inst_24063__$1;
                    return statearr_24127;
                  }();
                  if (inst_24064) {
                    var statearr_24128_24164 = state_24124__$1;
                    statearr_24128_24164[1] = 2;
                  } else {
                    var statearr_24129_24165 = state_24124__$1;
                    statearr_24129_24165[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_24125 === 4) {
                    var inst_24063 = state_24124[7];
                    var inst_24069 = state_24124[2];
                    var inst_24070 = cljs.core.get.call(null, inst_24069, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                    var inst_24071 = cljs.core.get.call(null, inst_24069, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                    var inst_24072 = cljs.core.get.call(null, inst_24069, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                    var inst_24073 = inst_24063;
                    var state_24124__$1 = function() {
                      var statearr_24130 = state_24124;
                      statearr_24130[8] = inst_24071;
                      statearr_24130[5] = inst_24073;
                      statearr_24130[9] = inst_24072;
                      statearr_24130[10] = inst_24070;
                      return statearr_24130;
                    }();
                    var statearr_24131_24166 = state_24124__$1;
                    statearr_24131_24166[2] = null;
                    statearr_24131_24166[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_24125 === 15) {
                      var state_24124__$1 = state_24124;
                      var statearr_24132_24167 = state_24124__$1;
                      statearr_24132_24167[2] = null;
                      statearr_24132_24167[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_24125 === 21) {
                        var state_24124__$1 = state_24124;
                        var statearr_24133_24168 = state_24124__$1;
                        statearr_24133_24168[2] = null;
                        statearr_24133_24168[1] = 22;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_24125 === 13) {
                          var inst_24120 = state_24124[2];
                          var state_24124__$1 = state_24124;
                          var statearr_24134_24169 = state_24124__$1;
                          statearr_24134_24169[2] = inst_24120;
                          statearr_24134_24169[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_24125 === 22) {
                            var inst_24081 = state_24124[11];
                            var inst_24117 = state_24124[2];
                            var inst_24073 = inst_24081;
                            var state_24124__$1 = function() {
                              var statearr_24135 = state_24124;
                              statearr_24135[5] = inst_24073;
                              statearr_24135[12] = inst_24117;
                              return statearr_24135;
                            }();
                            var statearr_24136_24170 = state_24124__$1;
                            statearr_24136_24170[2] = null;
                            statearr_24136_24170[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_24125 === 6) {
                              var inst_24122 = state_24124[2];
                              var state_24124__$1 = state_24124;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24124__$1, inst_24122);
                            } else {
                              if (state_val_24125 === 17) {
                                var inst_24103 = state_24124[13];
                                var state_24124__$1 = state_24124;
                                var statearr_24137_24171 = state_24124__$1;
                                statearr_24137_24171[2] = inst_24103;
                                statearr_24137_24171[1] = 19;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_24125 === 3) {
                                  var inst_24063 = state_24124[7];
                                  var state_24124__$1 = state_24124;
                                  var statearr_24138_24172 = state_24124__$1;
                                  statearr_24138_24172[2] = inst_24063;
                                  statearr_24138_24172[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_24125 === 12) {
                                    var inst_24084 = state_24124[14];
                                    var inst_24089 = state_24124[15];
                                    var inst_24103 = state_24124[13];
                                    var inst_24103__$1 = inst_24084.call(null, inst_24089);
                                    var state_24124__$1 = function() {
                                      var statearr_24139 = state_24124;
                                      statearr_24139[13] = inst_24103__$1;
                                      return statearr_24139;
                                    }();
                                    if (cljs.core.truth_(inst_24103__$1)) {
                                      var statearr_24140_24173 = state_24124__$1;
                                      statearr_24140_24173[1] = 17;
                                    } else {
                                      var statearr_24141_24174 = state_24124__$1;
                                      statearr_24141_24174[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_24125 === 2) {
                                      var inst_24063 = state_24124[7];
                                      var inst_24066 = cljs.core.apply.call(null, cljs.core.hash_map, inst_24063);
                                      var state_24124__$1 = state_24124;
                                      var statearr_24142_24175 = state_24124__$1;
                                      statearr_24142_24175[2] = inst_24066;
                                      statearr_24142_24175[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_24125 === 23) {
                                        var inst_24114 = state_24124[2];
                                        var state_24124__$1 = state_24124;
                                        var statearr_24143_24176 = state_24124__$1;
                                        statearr_24143_24176[2] = inst_24114;
                                        statearr_24143_24176[1] = 22;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_24125 === 19) {
                                          var inst_24111 = state_24124[2];
                                          var state_24124__$1 = state_24124;
                                          if (cljs.core.truth_(inst_24111)) {
                                            var statearr_24144_24177 = state_24124__$1;
                                            statearr_24144_24177[1] = 20;
                                          } else {
                                            var statearr_24145_24178 = state_24124__$1;
                                            statearr_24145_24178[1] = 21;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_24125 === 11) {
                                            var inst_24088 = state_24124[6];
                                            var inst_24094 = inst_24088 == null;
                                            var state_24124__$1 = state_24124;
                                            if (cljs.core.truth_(inst_24094)) {
                                              var statearr_24146_24179 = state_24124__$1;
                                              statearr_24146_24179[1] = 14;
                                            } else {
                                              var statearr_24147_24180 = state_24124__$1;
                                              statearr_24147_24180[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_24125 === 9) {
                                              var inst_24081 = state_24124[11];
                                              var inst_24081__$1 = state_24124[2];
                                              var inst_24082 = cljs.core.get.call(null, inst_24081__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                              var inst_24083 = cljs.core.get.call(null, inst_24081__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                              var inst_24084 = cljs.core.get.call(null, inst_24081__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                              var state_24124__$1 = function() {
                                                var statearr_24148 = state_24124;
                                                statearr_24148[16] = inst_24083;
                                                statearr_24148[14] = inst_24084;
                                                statearr_24148[11] = inst_24081__$1;
                                                return statearr_24148;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_24124__$1, 10, inst_24082);
                                            } else {
                                              if (state_val_24125 === 5) {
                                                var inst_24073 = state_24124[5];
                                                var inst_24076 = cljs.core.seq_QMARK_.call(null, inst_24073);
                                                var state_24124__$1 = state_24124;
                                                if (inst_24076) {
                                                  var statearr_24149_24181 = state_24124__$1;
                                                  statearr_24149_24181[1] = 7;
                                                } else {
                                                  var statearr_24150_24182 = state_24124__$1;
                                                  statearr_24150_24182[1] = 8;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_24125 === 14) {
                                                  var inst_24089 = state_24124[15];
                                                  var inst_24096 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_24089);
                                                  var state_24124__$1 = state_24124;
                                                  var statearr_24151_24183 = state_24124__$1;
                                                  statearr_24151_24183[2] = inst_24096;
                                                  statearr_24151_24183[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_24125 === 16) {
                                                    var inst_24099 = state_24124[2];
                                                    var inst_24100 = calc_state.call(null);
                                                    var inst_24073 = inst_24100;
                                                    var state_24124__$1 = function() {
                                                      var statearr_24152 = state_24124;
                                                      statearr_24152[5] = inst_24073;
                                                      statearr_24152[17] = inst_24099;
                                                      return statearr_24152;
                                                    }();
                                                    var statearr_24153_24184 = state_24124__$1;
                                                    statearr_24153_24184[2] = null;
                                                    statearr_24153_24184[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_24125 === 10) {
                                                      var inst_24089 = state_24124[15];
                                                      var inst_24088 = state_24124[6];
                                                      var inst_24087 = state_24124[2];
                                                      var inst_24088__$1 = cljs.core.nth.call(null, inst_24087, 0, null);
                                                      var inst_24089__$1 = cljs.core.nth.call(null, inst_24087, 1, null);
                                                      var inst_24090 = inst_24088__$1 == null;
                                                      var inst_24091 = cljs.core._EQ_.call(null, inst_24089__$1, change);
                                                      var inst_24092 = inst_24090 || inst_24091;
                                                      var state_24124__$1 = function() {
                                                        var statearr_24154 = state_24124;
                                                        statearr_24154[15] = inst_24089__$1;
                                                        statearr_24154[6] = inst_24088__$1;
                                                        return statearr_24154;
                                                      }();
                                                      if (cljs.core.truth_(inst_24092)) {
                                                        var statearr_24155_24185 = state_24124__$1;
                                                        statearr_24155_24185[1] = 11;
                                                      } else {
                                                        var statearr_24156_24186 = state_24124__$1;
                                                        statearr_24156_24186[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_24125 === 18) {
                                                        var inst_24083 = state_24124[16];
                                                        var inst_24084 = state_24124[14];
                                                        var inst_24089 = state_24124[15];
                                                        var inst_24106 = cljs.core.empty_QMARK_.call(null, inst_24084);
                                                        var inst_24107 = inst_24083.call(null, inst_24089);
                                                        var inst_24108 = cljs.core.not.call(null, inst_24107);
                                                        var inst_24109 = inst_24106 && inst_24108;
                                                        var state_24124__$1 = state_24124;
                                                        var statearr_24157_24187 = state_24124__$1;
                                                        statearr_24157_24187[2] = inst_24109;
                                                        statearr_24157_24187[1] = 19;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_24125 === 8) {
                                                          var inst_24073 = state_24124[5];
                                                          var state_24124__$1 = state_24124;
                                                          var statearr_24158_24188 = state_24124__$1;
                                                          statearr_24158_24188[2] = inst_24073;
                                                          statearr_24158_24188[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6622__auto___24162, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6578__auto__, c__6622__auto___24162, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__6579__auto__ = null;
            var state_machine__6579__auto____0 = function() {
              var statearr_24160 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_24160[0] = state_machine__6579__auto__;
              statearr_24160[1] = 1;
              return statearr_24160;
            };
            var state_machine__6579__auto____1 = function(state_24124) {
              while (true) {
                var result__6580__auto__ = switch__6578__auto__.call(null, state_24124);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6580__auto__;
                }
                break;
              }
            };
            state_machine__6579__auto__ = function(state_24124) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6579__auto____0.call(this);
                case 1:
                  return state_machine__6579__auto____1.call(this, state_24124);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
            return state_machine__6579__auto__;
          }();
        }(switch__6578__auto__, c__6622__auto___24162, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6624__auto__ = function() {
        var statearr_24161 = f__6623__auto__.call(null);
        statearr_24161[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___24162;
        return statearr_24161;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
    };
  }(c__6622__auto___24162, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj24190 = {};
  return obj24190;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3969__auto__ = p;
    if (and__3969__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4625__auto__ = p == null ? null : p;
    return function() {
      var or__3981__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3969__auto__ = p;
    if (and__3969__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4625__auto__ = p == null ? null : p;
    return function() {
      var or__3981__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3969__auto__ = p;
      if (and__3969__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4625__auto__ = p == null ? null : p;
      return function() {
        var or__3981__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3969__auto__ = p;
      if (and__3969__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4625__auto__ = p == null ? null : p;
      return function() {
        var or__3981__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3981__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3981__auto__, mults) {
            return function(p1__24191_SHARP_) {
              if (cljs.core.truth_(p1__24191_SHARP_.call(null, topic))) {
                return p1__24191_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__24191_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3981__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t24315 !== "undefined") {
      } else {
        cljs.core.async.t24315 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta24316) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta24316 = meta24316;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t24315.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t24315.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t24315.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t24315.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t24315.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t24315.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t24315.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t24315.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_24317) {
            var self__ = this;
            var _24317__$1 = this;
            return self__.meta24316;
          };
        }(mults, ensure_mult);
        cljs.core.async.t24315.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_24317, meta24316__$1) {
            var self__ = this;
            var _24317__$1 = this;
            return new cljs.core.async.t24315(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta24316__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t24315.cljs$lang$type = true;
        cljs.core.async.t24315.cljs$lang$ctorStr = "cljs.core.async/t24315";
        cljs.core.async.t24315.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
            return cljs.core._write.call(null, writer__4569__auto__, "cljs.core.async/t24315");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t24315 = function(mults, ensure_mult) {
          return function __GT_t24315(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta24316) {
            return new cljs.core.async.t24315(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta24316);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t24315(ensure_mult, mults, buf_fn, topic_fn, ch, pub, cljs.core.PersistentArrayMap.EMPTY);
    }();
    var c__6622__auto___24438 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___24438, mults, ensure_mult, p) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto___24438, mults, ensure_mult, p) {
            return function(state_24390) {
              var state_val_24391 = state_24390[1];
              if (state_val_24391 === 7) {
                var inst_24386 = state_24390[2];
                var state_24390__$1 = state_24390;
                var statearr_24392_24439 = state_24390__$1;
                statearr_24392_24439[2] = inst_24386;
                statearr_24392_24439[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_24391 === 20) {
                  var state_24390__$1 = state_24390;
                  var statearr_24393_24440 = state_24390__$1;
                  statearr_24393_24440[2] = null;
                  statearr_24393_24440[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_24391 === 1) {
                    var state_24390__$1 = state_24390;
                    var statearr_24394_24441 = state_24390__$1;
                    statearr_24394_24441[2] = null;
                    statearr_24394_24441[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_24391 === 24) {
                      try {
                        var inst_24320 = state_24390[5];
                        var inst_24370 = state_24390[6];
                        var inst_24376 = cljs.core.async.muxch_STAR_.call(null, inst_24370);
                        var state_24390__$1 = state_24390;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24390__$1, 25, inst_24376, inst_24320);
                      } catch (e24395) {
                        if (e24395 instanceof Object) {
                          var ex__6572__auto__ = e24395;
                          var statearr_24396_24442 = state_24390;
                          statearr_24396_24442[1] = 23;
                          statearr_24396_24442[2] = ex__6572__auto__;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e24395;
                        }
                      }
                    } else {
                      if (state_val_24391 === 4) {
                        var inst_24320 = state_24390[5];
                        var inst_24320__$1 = state_24390[2];
                        var inst_24321 = inst_24320__$1 == null;
                        var state_24390__$1 = function() {
                          var statearr_24397 = state_24390;
                          statearr_24397[5] = inst_24320__$1;
                          return statearr_24397;
                        }();
                        if (cljs.core.truth_(inst_24321)) {
                          var statearr_24398_24443 = state_24390__$1;
                          statearr_24398_24443[1] = 5;
                        } else {
                          var statearr_24399_24444 = state_24390__$1;
                          statearr_24399_24444[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_24391 === 15) {
                          var inst_24362 = state_24390[2];
                          var state_24390__$1 = state_24390;
                          var statearr_24400_24445 = state_24390__$1;
                          statearr_24400_24445[2] = inst_24362;
                          statearr_24400_24445[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_24391 === 21) {
                            var inst_24383 = state_24390[2];
                            var state_24390__$1 = function() {
                              var statearr_24401 = state_24390;
                              statearr_24401[7] = inst_24383;
                              return statearr_24401;
                            }();
                            var statearr_24402_24446 = state_24390__$1;
                            statearr_24402_24446[2] = null;
                            statearr_24402_24446[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_24391 === 13) {
                              var inst_24344 = state_24390[8];
                              var inst_24346 = cljs.core.chunked_seq_QMARK_.call(null, inst_24344);
                              var state_24390__$1 = state_24390;
                              if (inst_24346) {
                                var statearr_24403_24447 = state_24390__$1;
                                statearr_24403_24447[1] = 16;
                              } else {
                                var statearr_24404_24448 = state_24390__$1;
                                statearr_24404_24448[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_24391 === 22) {
                                var inst_24380 = state_24390[2];
                                var state_24390__$1 = state_24390;
                                var statearr_24405_24449 = state_24390__$1;
                                statearr_24405_24449[2] = inst_24380;
                                statearr_24405_24449[1] = 21;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_24391 === 6) {
                                  var inst_24320 = state_24390[5];
                                  var inst_24370 = state_24390[6];
                                  var inst_24368 = state_24390[9];
                                  var inst_24368__$1 = topic_fn.call(null, inst_24320);
                                  var inst_24369 = cljs.core.deref.call(null, mults);
                                  var inst_24370__$1 = cljs.core.get.call(null, inst_24369, inst_24368__$1);
                                  var state_24390__$1 = function() {
                                    var statearr_24406 = state_24390;
                                    statearr_24406[6] = inst_24370__$1;
                                    statearr_24406[9] = inst_24368__$1;
                                    return statearr_24406;
                                  }();
                                  if (cljs.core.truth_(inst_24370__$1)) {
                                    var statearr_24407_24450 = state_24390__$1;
                                    statearr_24407_24450[1] = 19;
                                  } else {
                                    var statearr_24408_24451 = state_24390__$1;
                                    statearr_24408_24451[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_24391 === 25) {
                                    try {
                                      var inst_24378 = state_24390[2];
                                      var state_24390__$1 = state_24390;
                                      var statearr_24411_24452 = state_24390__$1;
                                      statearr_24411_24452[2] = inst_24378;
                                      statearr_24411_24452[1] = 22;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } catch (e24409) {
                                      if (e24409 instanceof Object) {
                                        var ex__6572__auto__ = e24409;
                                        var statearr_24410_24453 = state_24390;
                                        statearr_24410_24453[1] = 23;
                                        statearr_24410_24453[2] = ex__6572__auto__;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        throw e24409;
                                      }
                                    }
                                  } else {
                                    if (state_val_24391 === 17) {
                                      var inst_24344 = state_24390[8];
                                      var inst_24353 = cljs.core.first.call(null, inst_24344);
                                      var inst_24354 = cljs.core.async.muxch_STAR_.call(null, inst_24353);
                                      var inst_24355 = cljs.core.async.close_BANG_.call(null, inst_24354);
                                      var inst_24356 = cljs.core.next.call(null, inst_24344);
                                      var inst_24330 = inst_24356;
                                      var inst_24331 = null;
                                      var inst_24332 = 0;
                                      var inst_24333 = 0;
                                      var state_24390__$1 = function() {
                                        var statearr_24412 = state_24390;
                                        statearr_24412[10] = inst_24331;
                                        statearr_24412[11] = inst_24355;
                                        statearr_24412[12] = inst_24332;
                                        statearr_24412[13] = inst_24330;
                                        statearr_24412[14] = inst_24333;
                                        return statearr_24412;
                                      }();
                                      var statearr_24413_24454 = state_24390__$1;
                                      statearr_24413_24454[2] = null;
                                      statearr_24413_24454[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_24391 === 3) {
                                        var inst_24388 = state_24390[2];
                                        var state_24390__$1 = state_24390;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24390__$1, inst_24388);
                                      } else {
                                        if (state_val_24391 === 12) {
                                          var inst_24364 = state_24390[2];
                                          var state_24390__$1 = state_24390;
                                          var statearr_24414_24455 = state_24390__$1;
                                          statearr_24414_24455[2] = inst_24364;
                                          statearr_24414_24455[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_24391 === 2) {
                                            var state_24390__$1 = state_24390;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24390__$1, 4, ch);
                                          } else {
                                            if (state_val_24391 === 23) {
                                              var inst_24368 = state_24390[9];
                                              var inst_24372 = state_24390[2];
                                              var inst_24373 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_24368);
                                              var state_24390__$1 = function() {
                                                var statearr_24415 = state_24390;
                                                statearr_24415[15] = inst_24372;
                                                return statearr_24415;
                                              }();
                                              var statearr_24416_24456 = state_24390__$1;
                                              statearr_24416_24456[2] = inst_24373;
                                              statearr_24416_24456[1] = 22;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_24391 === 19) {
                                                var state_24390__$1 = state_24390;
                                                var statearr_24417_24457 = state_24390__$1;
                                                statearr_24417_24457[2] = null;
                                                statearr_24417_24457[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_24391 === 11) {
                                                  var inst_24344 = state_24390[8];
                                                  var inst_24330 = state_24390[13];
                                                  var inst_24344__$1 = cljs.core.seq.call(null, inst_24330);
                                                  var state_24390__$1 = function() {
                                                    var statearr_24418 = state_24390;
                                                    statearr_24418[8] = inst_24344__$1;
                                                    return statearr_24418;
                                                  }();
                                                  if (inst_24344__$1) {
                                                    var statearr_24419_24458 = state_24390__$1;
                                                    statearr_24419_24458[1] = 13;
                                                  } else {
                                                    var statearr_24420_24459 = state_24390__$1;
                                                    statearr_24420_24459[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_24391 === 9) {
                                                    var inst_24366 = state_24390[2];
                                                    var state_24390__$1 = state_24390;
                                                    var statearr_24421_24460 = state_24390__$1;
                                                    statearr_24421_24460[2] = inst_24366;
                                                    statearr_24421_24460[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_24391 === 5) {
                                                      var inst_24327 = cljs.core.deref.call(null, mults);
                                                      var inst_24328 = cljs.core.vals.call(null, inst_24327);
                                                      var inst_24329 = cljs.core.seq.call(null, inst_24328);
                                                      var inst_24330 = inst_24329;
                                                      var inst_24331 = null;
                                                      var inst_24332 = 0;
                                                      var inst_24333 = 0;
                                                      var state_24390__$1 = function() {
                                                        var statearr_24422 = state_24390;
                                                        statearr_24422[10] = inst_24331;
                                                        statearr_24422[12] = inst_24332;
                                                        statearr_24422[13] = inst_24330;
                                                        statearr_24422[14] = inst_24333;
                                                        return statearr_24422;
                                                      }();
                                                      var statearr_24423_24461 = state_24390__$1;
                                                      statearr_24423_24461[2] = null;
                                                      statearr_24423_24461[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_24391 === 14) {
                                                        var state_24390__$1 = state_24390;
                                                        var statearr_24427_24462 = state_24390__$1;
                                                        statearr_24427_24462[2] = null;
                                                        statearr_24427_24462[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_24391 === 16) {
                                                          var inst_24344 = state_24390[8];
                                                          var inst_24348 = cljs.core.chunk_first.call(null, inst_24344);
                                                          var inst_24349 = cljs.core.chunk_rest.call(null, inst_24344);
                                                          var inst_24350 = cljs.core.count.call(null, inst_24348);
                                                          var inst_24330 = inst_24349;
                                                          var inst_24331 = inst_24348;
                                                          var inst_24332 = inst_24350;
                                                          var inst_24333 = 0;
                                                          var state_24390__$1 = function() {
                                                            var statearr_24428 = state_24390;
                                                            statearr_24428[10] = inst_24331;
                                                            statearr_24428[12] = inst_24332;
                                                            statearr_24428[13] = inst_24330;
                                                            statearr_24428[14] = inst_24333;
                                                            return statearr_24428;
                                                          }();
                                                          var statearr_24429_24463 = state_24390__$1;
                                                          statearr_24429_24463[2] = null;
                                                          statearr_24429_24463[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_24391 === 10) {
                                                            var inst_24331 = state_24390[10];
                                                            var inst_24332 = state_24390[12];
                                                            var inst_24330 = state_24390[13];
                                                            var inst_24333 = state_24390[14];
                                                            var inst_24338 = cljs.core._nth.call(null, inst_24331, inst_24333);
                                                            var inst_24339 = cljs.core.async.muxch_STAR_.call(null, inst_24338);
                                                            var inst_24340 = cljs.core.async.close_BANG_.call(null, inst_24339);
                                                            var inst_24341 = inst_24333 + 1;
                                                            var tmp24424 = inst_24331;
                                                            var tmp24425 = inst_24332;
                                                            var tmp24426 = inst_24330;
                                                            var inst_24330__$1 = tmp24426;
                                                            var inst_24331__$1 = tmp24424;
                                                            var inst_24332__$1 = tmp24425;
                                                            var inst_24333__$1 = inst_24341;
                                                            var state_24390__$1 = function() {
                                                              var statearr_24430 = state_24390;
                                                              statearr_24430[10] = inst_24331__$1;
                                                              statearr_24430[12] = inst_24332__$1;
                                                              statearr_24430[13] = inst_24330__$1;
                                                              statearr_24430[14] = inst_24333__$1;
                                                              statearr_24430[16] = inst_24340;
                                                              return statearr_24430;
                                                            }();
                                                            var statearr_24431_24464 = state_24390__$1;
                                                            statearr_24431_24464[2] = null;
                                                            statearr_24431_24464[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_24391 === 18) {
                                                              var inst_24359 = state_24390[2];
                                                              var state_24390__$1 = state_24390;
                                                              var statearr_24432_24465 = state_24390__$1;
                                                              statearr_24432_24465[2] = inst_24359;
                                                              statearr_24432_24465[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_24391 === 8) {
                                                                var inst_24332 = state_24390[12];
                                                                var inst_24333 = state_24390[14];
                                                                var inst_24335 = inst_24333 < inst_24332;
                                                                var inst_24336 = inst_24335;
                                                                var state_24390__$1 = state_24390;
                                                                if (cljs.core.truth_(inst_24336)) {
                                                                  var statearr_24433_24466 = state_24390__$1;
                                                                  statearr_24433_24466[1] = 10;
                                                                } else {
                                                                  var statearr_24434_24467 = state_24390__$1;
                                                                  statearr_24434_24467[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6622__auto___24438, mults, ensure_mult, p);
          return function(switch__6578__auto__, c__6622__auto___24438, mults, ensure_mult, p) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_24436 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_24436[0] = state_machine__6579__auto__;
                statearr_24436[1] = 1;
                return statearr_24436;
              };
              var state_machine__6579__auto____1 = function(state_24390) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_24390);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_24390) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_24390);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto___24438, mults, ensure_mult, p);
        }();
        var state__6624__auto__ = function() {
          var statearr_24437 = f__6623__auto__.call(null);
          statearr_24437[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___24438;
          return statearr_24437;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto___24438, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6622__auto___24598 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___24598, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto___24598, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_24570) {
              var state_val_24571 = state_24570[1];
              if (state_val_24571 === 7) {
                var state_24570__$1 = state_24570;
                var statearr_24572_24599 = state_24570__$1;
                statearr_24572_24599[2] = null;
                statearr_24572_24599[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_24571 === 1) {
                  var state_24570__$1 = state_24570;
                  var statearr_24573_24600 = state_24570__$1;
                  statearr_24573_24600[2] = null;
                  statearr_24573_24600[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_24571 === 4) {
                    var inst_24535 = state_24570[5];
                    var inst_24537 = inst_24535 < cnt;
                    var state_24570__$1 = state_24570;
                    if (cljs.core.truth_(inst_24537)) {
                      var statearr_24574_24601 = state_24570__$1;
                      statearr_24574_24601[1] = 6;
                    } else {
                      var statearr_24575_24602 = state_24570__$1;
                      statearr_24575_24602[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_24571 === 15) {
                      var inst_24566 = state_24570[2];
                      var state_24570__$1 = state_24570;
                      var statearr_24576_24603 = state_24570__$1;
                      statearr_24576_24603[2] = inst_24566;
                      statearr_24576_24603[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_24571 === 13) {
                        var inst_24559 = cljs.core.async.close_BANG_.call(null, out);
                        var state_24570__$1 = state_24570;
                        var statearr_24577_24604 = state_24570__$1;
                        statearr_24577_24604[2] = inst_24559;
                        statearr_24577_24604[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_24571 === 6) {
                          var state_24570__$1 = state_24570;
                          var statearr_24578_24605 = state_24570__$1;
                          statearr_24578_24605[2] = null;
                          statearr_24578_24605[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_24571 === 3) {
                            var inst_24568 = state_24570[2];
                            var state_24570__$1 = state_24570;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24570__$1, inst_24568);
                          } else {
                            if (state_val_24571 === 12) {
                              var inst_24556 = state_24570[6];
                              var inst_24556__$1 = state_24570[2];
                              var inst_24557 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_24556__$1);
                              var state_24570__$1 = function() {
                                var statearr_24579 = state_24570;
                                statearr_24579[6] = inst_24556__$1;
                                return statearr_24579;
                              }();
                              if (cljs.core.truth_(inst_24557)) {
                                var statearr_24580_24606 = state_24570__$1;
                                statearr_24580_24606[1] = 13;
                              } else {
                                var statearr_24581_24607 = state_24570__$1;
                                statearr_24581_24607[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_24571 === 2) {
                                var inst_24534 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_24535 = 0;
                                var state_24570__$1 = function() {
                                  var statearr_24582 = state_24570;
                                  statearr_24582[5] = inst_24535;
                                  statearr_24582[7] = inst_24534;
                                  return statearr_24582;
                                }();
                                var statearr_24583_24608 = state_24570__$1;
                                statearr_24583_24608[2] = null;
                                statearr_24583_24608[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_24571 === 11) {
                                  try {
                                    var inst_24535 = state_24570[5];
                                    var inst_24543 = chs__$1.call(null, inst_24535);
                                    var inst_24544 = done.call(null, inst_24535);
                                    var inst_24545 = cljs.core.async.take_BANG_.call(null, inst_24543, inst_24544);
                                    var state_24570__$1 = state_24570;
                                    var statearr_24586_24609 = state_24570__$1;
                                    statearr_24586_24609[2] = inst_24545;
                                    statearr_24586_24609[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } catch (e24584) {
                                    if (e24584 instanceof Object) {
                                      var ex__6572__auto__ = e24584;
                                      var statearr_24585_24610 = state_24570;
                                      statearr_24585_24610[1] = 10;
                                      statearr_24585_24610[2] = ex__6572__auto__;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      throw e24584;
                                    }
                                  }
                                } else {
                                  if (state_val_24571 === 9) {
                                    var inst_24535 = state_24570[5];
                                    var inst_24547 = state_24570[2];
                                    var inst_24548 = inst_24535 + 1;
                                    var inst_24535__$1 = inst_24548;
                                    var state_24570__$1 = function() {
                                      var statearr_24587 = state_24570;
                                      statearr_24587[5] = inst_24535__$1;
                                      statearr_24587[8] = inst_24547;
                                      return statearr_24587;
                                    }();
                                    var statearr_24588_24611 = state_24570__$1;
                                    statearr_24588_24611[2] = null;
                                    statearr_24588_24611[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_24571 === 5) {
                                      var inst_24554 = state_24570[2];
                                      var state_24570__$1 = function() {
                                        var statearr_24589 = state_24570;
                                        statearr_24589[9] = inst_24554;
                                        return statearr_24589;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24570__$1, 12, dchan);
                                    } else {
                                      if (state_val_24571 === 14) {
                                        var inst_24556 = state_24570[6];
                                        var inst_24561 = cljs.core.apply.call(null, f, inst_24556);
                                        var state_24570__$1 = state_24570;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24570__$1, 16, out, inst_24561);
                                      } else {
                                        if (state_val_24571 === 16) {
                                          var inst_24563 = state_24570[2];
                                          var state_24570__$1 = function() {
                                            var statearr_24590 = state_24570;
                                            statearr_24590[10] = inst_24563;
                                            return statearr_24590;
                                          }();
                                          var statearr_24591_24612 = state_24570__$1;
                                          statearr_24591_24612[2] = null;
                                          statearr_24591_24612[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_24571 === 10) {
                                            var inst_24539 = state_24570[2];
                                            var inst_24540 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_24570__$1 = function() {
                                              var statearr_24592 = state_24570;
                                              statearr_24592[11] = inst_24539;
                                              return statearr_24592;
                                            }();
                                            var statearr_24593_24613 = state_24570__$1;
                                            statearr_24593_24613[2] = inst_24540;
                                            statearr_24593_24613[1] = 9;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_24571 === 8) {
                                              var inst_24552 = state_24570[2];
                                              var state_24570__$1 = state_24570;
                                              var statearr_24594_24614 = state_24570__$1;
                                              statearr_24594_24614[2] = inst_24552;
                                              statearr_24594_24614[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6622__auto___24598, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__6578__auto__, c__6622__auto___24598, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_24596 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_24596[0] = state_machine__6579__auto__;
                statearr_24596[1] = 1;
                return statearr_24596;
              };
              var state_machine__6579__auto____1 = function(state_24570) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_24570);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_24570) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_24570);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto___24598, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__6624__auto__ = function() {
          var statearr_24597 = f__6623__auto__.call(null);
          statearr_24597[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___24598;
          return statearr_24597;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto___24598, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6622__auto___24714 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___24714, out) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto___24714, out) {
            return function(state_24694) {
              var state_val_24695 = state_24694[1];
              if (state_val_24695 === 7) {
                var inst_24674 = state_24694[5];
                var inst_24673 = state_24694[6];
                var inst_24673__$1 = state_24694[2];
                var inst_24674__$1 = cljs.core.nth.call(null, inst_24673__$1, 0, null);
                var inst_24675 = cljs.core.nth.call(null, inst_24673__$1, 1, null);
                var inst_24676 = inst_24674__$1 == null;
                var state_24694__$1 = function() {
                  var statearr_24696 = state_24694;
                  statearr_24696[7] = inst_24675;
                  statearr_24696[5] = inst_24674__$1;
                  statearr_24696[6] = inst_24673__$1;
                  return statearr_24696;
                }();
                if (cljs.core.truth_(inst_24676)) {
                  var statearr_24697_24715 = state_24694__$1;
                  statearr_24697_24715[1] = 8;
                } else {
                  var statearr_24698_24716 = state_24694__$1;
                  statearr_24698_24716[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_24695 === 1) {
                  var inst_24665 = cljs.core.vec.call(null, chs);
                  var inst_24666 = inst_24665;
                  var state_24694__$1 = function() {
                    var statearr_24699 = state_24694;
                    statearr_24699[8] = inst_24666;
                    return statearr_24699;
                  }();
                  var statearr_24700_24717 = state_24694__$1;
                  statearr_24700_24717[2] = null;
                  statearr_24700_24717[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_24695 === 4) {
                    var inst_24666 = state_24694[8];
                    var state_24694__$1 = state_24694;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_24694__$1, 7, inst_24666);
                  } else {
                    if (state_val_24695 === 6) {
                      var inst_24690 = state_24694[2];
                      var state_24694__$1 = state_24694;
                      var statearr_24701_24718 = state_24694__$1;
                      statearr_24701_24718[2] = inst_24690;
                      statearr_24701_24718[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_24695 === 3) {
                        var inst_24692 = state_24694[2];
                        var state_24694__$1 = state_24694;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24694__$1, inst_24692);
                      } else {
                        if (state_val_24695 === 2) {
                          var inst_24666 = state_24694[8];
                          var inst_24668 = cljs.core.count.call(null, inst_24666);
                          var inst_24669 = inst_24668 > 0;
                          var state_24694__$1 = state_24694;
                          if (cljs.core.truth_(inst_24669)) {
                            var statearr_24703_24719 = state_24694__$1;
                            statearr_24703_24719[1] = 4;
                          } else {
                            var statearr_24704_24720 = state_24694__$1;
                            statearr_24704_24720[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_24695 === 11) {
                            var inst_24666 = state_24694[8];
                            var inst_24683 = state_24694[2];
                            var tmp24702 = inst_24666;
                            var inst_24666__$1 = tmp24702;
                            var state_24694__$1 = function() {
                              var statearr_24705 = state_24694;
                              statearr_24705[9] = inst_24683;
                              statearr_24705[8] = inst_24666__$1;
                              return statearr_24705;
                            }();
                            var statearr_24706_24721 = state_24694__$1;
                            statearr_24706_24721[2] = null;
                            statearr_24706_24721[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_24695 === 9) {
                              var inst_24674 = state_24694[5];
                              var state_24694__$1 = state_24694;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24694__$1, 11, out, inst_24674);
                            } else {
                              if (state_val_24695 === 5) {
                                var inst_24688 = cljs.core.async.close_BANG_.call(null, out);
                                var state_24694__$1 = state_24694;
                                var statearr_24707_24722 = state_24694__$1;
                                statearr_24707_24722[2] = inst_24688;
                                statearr_24707_24722[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_24695 === 10) {
                                  var inst_24686 = state_24694[2];
                                  var state_24694__$1 = state_24694;
                                  var statearr_24708_24723 = state_24694__$1;
                                  statearr_24708_24723[2] = inst_24686;
                                  statearr_24708_24723[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_24695 === 8) {
                                    var inst_24675 = state_24694[7];
                                    var inst_24674 = state_24694[5];
                                    var inst_24673 = state_24694[6];
                                    var inst_24666 = state_24694[8];
                                    var inst_24678 = function() {
                                      var c = inst_24675;
                                      var v = inst_24674;
                                      var vec__24671 = inst_24673;
                                      var cs = inst_24666;
                                      return function(c, v, vec__24671, cs, inst_24675, inst_24674, inst_24673, inst_24666, state_val_24695, c__6622__auto___24714, out) {
                                        return function(p1__24615_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__24615_SHARP_);
                                        };
                                      }(c, v, vec__24671, cs, inst_24675, inst_24674, inst_24673, inst_24666, state_val_24695, c__6622__auto___24714, out);
                                    }();
                                    var inst_24679 = cljs.core.filterv.call(null, inst_24678, inst_24666);
                                    var inst_24666__$1 = inst_24679;
                                    var state_24694__$1 = function() {
                                      var statearr_24709 = state_24694;
                                      statearr_24709[8] = inst_24666__$1;
                                      return statearr_24709;
                                    }();
                                    var statearr_24710_24724 = state_24694__$1;
                                    statearr_24710_24724[2] = null;
                                    statearr_24710_24724[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6622__auto___24714, out);
          return function(switch__6578__auto__, c__6622__auto___24714, out) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_24712 = [null, null, null, null, null, null, null, null, null, null];
                statearr_24712[0] = state_machine__6579__auto__;
                statearr_24712[1] = 1;
                return statearr_24712;
              };
              var state_machine__6579__auto____1 = function(state_24694) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_24694);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_24694) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_24694);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto___24714, out);
        }();
        var state__6624__auto__ = function() {
          var statearr_24713 = f__6623__auto__.call(null);
          statearr_24713[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___24714;
          return statearr_24713;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto___24714, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("logger");
goog.require("cljs.core");
goog.require("cljs.core.async");
cljs.core.enable_console_print_BANG_.call(null);
logger.tagsOn = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "all", "all", 892129742), new cljs.core.Keyword(null, "inv", "inv", 1526077438), new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), new cljs.core.Keyword(null, 
"makeBlock", "makeBlock", -1854081426), new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), new cljs.core.Keyword(null, "dbput", "dbput", 890434907), new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312)], null);
logger.tagsO1 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "invoke", "invoke", 1145927159)], null);
logger.tagsOFF = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "receive", "receive", 1830053389)], null);
logger.tags = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630)], null);
logger.og = function og(type, format, data) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_21945) {
            var state_val_21946 = state_21945[1];
            if (state_val_21946 === 7) {
              var inst_21936 = state_21945[2];
              var state_21945__$1 = state_21945;
              if (cljs.core.truth_(inst_21936)) {
                var statearr_21947_21965 = state_21945__$1;
                statearr_21947_21965[1] = 8;
              } else {
                var statearr_21948_21966 = state_21945__$1;
                statearr_21948_21966[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21946 === 1) {
                var inst_21920 = state_21945[5];
                var inst_21918 = [type];
                var inst_21919 = cljs.core.PersistentHashSet.fromArray(inst_21918, true);
                var inst_21920__$1 = cljs.core.some.call(null, inst_21919, logger.tagsOn);
                var state_21945__$1 = function() {
                  var statearr_21949 = state_21945;
                  statearr_21949[5] = inst_21920__$1;
                  return statearr_21949;
                }();
                if (cljs.core.truth_(inst_21920__$1)) {
                  var statearr_21950_21967 = state_21945__$1;
                  statearr_21950_21967[1] = 2;
                } else {
                  var statearr_21951_21968 = state_21945__$1;
                  statearr_21951_21968[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21946 === 4) {
                  var inst_21928 = state_21945[6];
                  var inst_21928__$1 = state_21945[2];
                  var state_21945__$1 = function() {
                    var statearr_21952 = state_21945;
                    statearr_21952[6] = inst_21928__$1;
                    return statearr_21952;
                  }();
                  if (cljs.core.truth_(inst_21928__$1)) {
                    var statearr_21953_21969 = state_21945__$1;
                    statearr_21953_21969[1] = 5;
                  } else {
                    var statearr_21954_21970 = state_21945__$1;
                    statearr_21954_21970[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21946 === 6) {
                    var inst_21928 = state_21945[6];
                    var state_21945__$1 = state_21945;
                    var statearr_21955_21971 = state_21945__$1;
                    statearr_21955_21971[2] = inst_21928;
                    statearr_21955_21971[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21946 === 3) {
                      var inst_21923 = [new cljs.core.Keyword(null, "all", "all", 892129742), null];
                      var inst_21924 = new cljs.core.PersistentArrayMap(null, 1, inst_21923, null);
                      var inst_21925 = new cljs.core.PersistentHashSet(null, inst_21924, null);
                      var inst_21926 = cljs.core.some.call(null, inst_21925, logger.tagsOn);
                      var state_21945__$1 = state_21945;
                      var statearr_21956_21972 = state_21945__$1;
                      statearr_21956_21972[2] = inst_21926;
                      statearr_21956_21972[1] = 4;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21946 === 2) {
                        var inst_21920 = state_21945[5];
                        var state_21945__$1 = state_21945;
                        var statearr_21957_21973 = state_21945__$1;
                        statearr_21957_21973[2] = inst_21920;
                        statearr_21957_21973[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21946 === 9) {
                          var state_21945__$1 = state_21945;
                          var statearr_21958_21974 = state_21945__$1;
                          statearr_21958_21974[2] = null;
                          statearr_21958_21974[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21946 === 5) {
                            var inst_21930 = [type];
                            var inst_21931 = cljs.core.PersistentHashSet.fromArray(inst_21930, true);
                            var inst_21932 = cljs.core.some.call(null, inst_21931, logger.tagsOFF);
                            var inst_21933 = cljs.core.not.call(null, inst_21932);
                            var state_21945__$1 = state_21945;
                            var statearr_21959_21975 = state_21945__$1;
                            statearr_21959_21975[2] = inst_21933;
                            statearr_21959_21975[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21946 === 10) {
                              var inst_21943 = state_21945[2];
                              var state_21945__$1 = function() {
                                var statearr_21960 = state_21945;
                                statearr_21960[7] = inst_21943;
                                return statearr_21960;
                              }();
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21945__$1, data);
                            } else {
                              if (state_val_21946 === 8) {
                                var inst_21938 = type + " ";
                                var inst_21939 = inst_21938 + format;
                                var inst_21940 = console.log(inst_21939, data);
                                var state_21945__$1 = state_21945;
                                var statearr_21961_21976 = state_21945__$1;
                                statearr_21961_21976[2] = inst_21940;
                                statearr_21961_21976[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_21963 = [null, null, null, null, null, null, null, null];
              statearr_21963[0] = state_machine__6577__auto__;
              statearr_21963[1] = 1;
              return statearr_21963;
            };
            var state_machine__6577__auto____1 = function(state_21945) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_21945);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_21945) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_21945);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_21964 = f__6621__auto__.call(null);
        statearr_21964[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_21964;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("pubsub");
goog.require("cljs.core");
goog.require("logger");
goog.require("cljs.core.async");
pubsub.proxychan = cljs.core.async.chan.call(null);
pubsub.proxychan2 = cljs.core.async.chan.call(null, 1);
pubsub.sendReceiveCh = cljs.core.async.chan.call(null, 1E3);
pubsub.statesCh = cljs.core.async.chan.call(null, 1E3);
pubsub.states = function() {
  var obj41716 = {};
  return obj41716;
}();
pubsub.receiveCH = cljs.core.async.chan.call(null, 1E3);
pubsub.get = function get() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_41740) {
            var state_val_41741 = state_41740[1];
            if (state_val_41741 === 3) {
              var inst_41737 = state_41740[2];
              var inst_41738 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
              var state_41740__$1 = function() {
                var statearr_41742 = state_41740;
                statearr_41742[5] = inst_41737;
                statearr_41742[6] = inst_41738;
                return statearr_41742;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_41740__$1, pubsub.a);
            } else {
              if (state_val_41741 === 2) {
                var inst_41733 = state_41740[2];
                var inst_41734 = pubsub.a = inst_41733;
                var inst_41735 = logger.og.call(null, new cljs.core.Keyword(null, "getpubsub", "getpubsub", -56419473), "peerjs", pubsub.a);
                var state_41740__$1 = function() {
                  var statearr_41743 = state_41740;
                  statearr_41743[7] = inst_41734;
                  statearr_41743[8] = inst_41735;
                  return statearr_41743;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_41740__$1, 3, pubsub.proxychan2, pubsub.a);
              } else {
                if (state_val_41741 === 1) {
                  var state_41740__$1 = state_41740;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_41740__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_41745 = [null, null, null, null, null, null, null, null, null];
              statearr_41745[0] = state_machine__6577__auto__;
              statearr_41745[1] = 1;
              return statearr_41745;
            };
            var state_machine__6577__auto____1 = function(state_41740) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_41740);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_41740) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_41740);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_41746 = f__6621__auto__.call(null);
        statearr_41746[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_41746;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.init = function init(what) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_41761) {
            var state_val_41762 = state_41761[1];
            if (state_val_41762 === 2) {
              var inst_41759 = state_41761[2];
              var state_41761__$1 = state_41761;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_41761__$1, inst_41759);
            } else {
              if (state_val_41762 === 1) {
                var inst_41757 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "peerjs", what);
                var state_41761__$1 = function() {
                  var statearr_41763 = state_41761;
                  statearr_41763[5] = inst_41757;
                  return statearr_41763;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_41761__$1, 2, pubsub.proxychan2, what);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_41765 = [null, null, null, null, null, null];
              statearr_41765[0] = state_machine__6577__auto__;
              statearr_41765[1] = 1;
              return statearr_41765;
            };
            var state_machine__6577__auto____1 = function(state_41761) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_41761);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_41761) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_41761);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_41766 = f__6621__auto__.call(null);
        statearr_41766[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_41766;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.set = function set(what) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_41783) {
            var state_val_41784 = state_41783[1];
            if (state_val_41784 === 3) {
              var inst_41781 = state_41783[2];
              var state_41783__$1 = state_41783;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_41783__$1, inst_41781);
            } else {
              if (state_val_41784 === 2) {
                var inst_41779 = state_41783[2];
                var state_41783__$1 = function() {
                  var statearr_41785 = state_41783;
                  statearr_41785[5] = inst_41779;
                  return statearr_41785;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_41783__$1, 3, pubsub.proxychan2, what);
              } else {
                if (state_val_41784 === 1) {
                  var state_41783__$1 = state_41783;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_41783__$1, 2, pubsub.proxychan2);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_41787 = [null, null, null, null, null, null];
              statearr_41787[0] = state_machine__6577__auto__;
              statearr_41787[1] = 1;
              return statearr_41787;
            };
            var state_machine__6577__auto____1 = function(state_41783) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_41783);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_41783) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_41783);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_41788 = f__6621__auto__.call(null);
        statearr_41788[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_41788;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.subs = function() {
  var obj41790 = {};
  return obj41790;
}();
pubsub.sub = function sub(typ, fun) {
  return pubsub.subs[typ] = fun;
};
pubsub.pub = function pub(typ, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "pub", "pub", -1189143908), "pubing ", typ + " " + msg);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_41808) {
            var state_val_41809 = state_41808[1];
            if (state_val_41809 === 2) {
              var inst_41806 = state_41808[2];
              var state_41808__$1 = state_41808;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_41808__$1, inst_41806);
            } else {
              if (state_val_41809 === 1) {
                var inst_41804 = {"typ":typ, "msg":msg};
                var state_41808__$1 = state_41808;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_41808__$1, 2, pubsub.proxychan, inst_41804);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_41811 = [null, null, null, null, null];
              statearr_41811[0] = state_machine__6577__auto__;
              statearr_41811[1] = 1;
              return statearr_41811;
            };
            var state_machine__6577__auto____1 = function(state_41808) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_41808);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_41808) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_41808);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_41812 = f__6621__auto__.call(null);
        statearr_41812[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_41812;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.initpubsub = function initpubsub() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_41850) {
            var state_val_41851 = state_41850[1];
            if (state_val_41851 === 4) {
              var inst_41839 = state_41850[2];
              var inst_41840 = pubsub.m = inst_41839;
              var inst_41841 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "about to deliver subbed %s", pubsub.m);
              var inst_41842 = pubsub.m["typ"];
              var inst_41843 = pubsub.subs[inst_41842];
              var inst_41844 = pubsub.m["msg"];
              var inst_41845 = inst_41843.call(null, inst_41844);
              var state_41850__$1 = function() {
                var statearr_41852 = state_41850;
                statearr_41852[5] = inst_41841;
                statearr_41852[6] = inst_41840;
                statearr_41852[7] = inst_41845;
                return statearr_41852;
              }();
              var statearr_41853_41859 = state_41850__$1;
              statearr_41853_41859[2] = null;
              statearr_41853_41859[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_41851 === 3) {
                var inst_41848 = state_41850[2];
                var state_41850__$1 = state_41850;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_41850__$1, inst_41848);
              } else {
                if (state_val_41851 === 2) {
                  var inst_41837 = logger.og.call(null, new cljs.core.Keyword(null, "initpubsub", "initpubsub", -596274170), "started loop");
                  var state_41850__$1 = function() {
                    var statearr_41854 = state_41850;
                    statearr_41854[8] = inst_41837;
                    return statearr_41854;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_41850__$1, 4, pubsub.proxychan);
                } else {
                  if (state_val_41851 === 1) {
                    var state_41850__$1 = state_41850;
                    var statearr_41855_41860 = state_41850__$1;
                    statearr_41855_41860[2] = null;
                    statearr_41855_41860[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_41857 = [null, null, null, null, null, null, null, null, null];
              statearr_41857[0] = state_machine__6577__auto__;
              statearr_41857[1] = 1;
              return statearr_41857;
            };
            var state_machine__6577__auto____1 = function(state_41850) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_41850);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_41850) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_41850);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_41858 = f__6621__auto__.call(null);
        statearr_41858[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_41858;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.makeMsg = function makeMsg(typ, m, pchannel) {
  var obj41864 = {"typ":typ, "msg":m};
  return obj41864;
};
pubsub.r = function r(typ) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_41947) {
            var state_val_41948 = state_41947[1];
            if (state_val_41948 === 7) {
              var inst_41935 = pubsub.mtemp["typ"];
              var inst_41936 = inst_41935 === 0;
              var state_41947__$1 = state_41947;
              if (cljs.core.truth_(inst_41936)) {
                var statearr_41949_41967 = state_41947__$1;
                statearr_41949_41967[1] = 10;
              } else {
                var statearr_41950_41968 = state_41947__$1;
                statearr_41950_41968[1] = 11;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_41948 === 1) {
                var inst_41916 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve %s", typ);
                var inst_41919 = {"typ":0};
                var state_41947__$1 = function() {
                  var statearr_41951 = state_41947;
                  statearr_41951[5] = inst_41916;
                  return statearr_41951;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_41947__$1, 2, pubsub.statesCh, inst_41919);
              } else {
                if (state_val_41948 === 4) {
                  var inst_41945 = state_41947[2];
                  var state_41947__$1 = state_41947;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_41947__$1, inst_41945);
                } else {
                  if (state_val_41948 === 6) {
                    var state_41947__$1 = state_41947;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_41947__$1, 9, pubsub.statesCh, pubsub.m);
                  } else {
                    if (state_val_41948 === 3) {
                      var inst_41923 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                      var state_41947__$1 = function() {
                        var statearr_41952 = state_41947;
                        statearr_41952[6] = inst_41923;
                        return statearr_41952;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_41947__$1, 5, pubsub.sendReceiveCh);
                    } else {
                      if (state_val_41948 === 12) {
                        var inst_41941 = state_41947[2];
                        var state_41947__$1 = state_41947;
                        var statearr_41953_41969 = state_41947__$1;
                        statearr_41953_41969[2] = inst_41941;
                        statearr_41953_41969[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_41948 === 2) {
                          var inst_41921 = state_41947[2];
                          var state_41947__$1 = function() {
                            var statearr_41954 = state_41947;
                            statearr_41954[7] = inst_41921;
                            return statearr_41954;
                          }();
                          var statearr_41955_41970 = state_41947__$1;
                          statearr_41955_41970[2] = null;
                          statearr_41955_41970[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_41948 === 11) {
                            var state_41947__$1 = state_41947;
                            var statearr_41956_41971 = state_41947__$1;
                            statearr_41956_41971[2] = null;
                            statearr_41956_41971[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_41948 === 9) {
                              var inst_41932 = state_41947[2];
                              var inst_41933 = pubsub.mtemp["msg"];
                              var state_41947__$1 = function() {
                                var statearr_41957 = state_41947;
                                statearr_41957[8] = inst_41932;
                                return statearr_41957;
                              }();
                              var statearr_41958_41972 = state_41947__$1;
                              statearr_41958_41972[2] = inst_41933;
                              statearr_41958_41972[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_41948 === 5) {
                                var inst_41925 = state_41947[2];
                                var inst_41926 = pubsub.mtemp = inst_41925;
                                var inst_41927 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                                var inst_41928 = pubsub.mtemp["typ"];
                                var inst_41929 = inst_41928 === typ;
                                var state_41947__$1 = function() {
                                  var statearr_41959 = state_41947;
                                  statearr_41959[9] = inst_41926;
                                  statearr_41959[10] = inst_41927;
                                  return statearr_41959;
                                }();
                                if (cljs.core.truth_(inst_41929)) {
                                  var statearr_41960_41973 = state_41947__$1;
                                  statearr_41960_41973[1] = 6;
                                } else {
                                  var statearr_41961_41974 = state_41947__$1;
                                  statearr_41961_41974[1] = 7;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_41948 === 10) {
                                  var state_41947__$1 = state_41947;
                                  var statearr_41962_41975 = state_41947__$1;
                                  statearr_41962_41975[2] = 0;
                                  statearr_41962_41975[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_41948 === 8) {
                                    var inst_41943 = state_41947[2];
                                    var state_41947__$1 = state_41947;
                                    var statearr_41963_41976 = state_41947__$1;
                                    statearr_41963_41976[2] = inst_41943;
                                    statearr_41963_41976[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_41965 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_41965[0] = state_machine__6577__auto__;
              statearr_41965[1] = 1;
              return statearr_41965;
            };
            var state_machine__6577__auto____1 = function(state_41947) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_41947);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_41947) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_41947);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_41966 = f__6621__auto__.call(null);
        statearr_41966[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_41966;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.check = function check(typ, v, ret) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_42128) {
            var state_val_42129 = state_42128[1];
            if (state_val_42129 === 7) {
              var inst_42090 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "found no val  ", pubsub.mtemp);
              var inst_42091 = pubsub.mtemp["typ"] = typ;
              var state_42128__$1 = function() {
                var statearr_42130 = state_42128;
                statearr_42130[5] = inst_42091;
                statearr_42130[6] = inst_42090;
                return statearr_42130;
              }();
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42128__$1, 11, pubsub.statesCh, pubsub.mtemp);
            } else {
              if (state_val_42129 === 20) {
                var state_42128__$1 = state_42128;
                var statearr_42131_42163 = state_42128__$1;
                statearr_42131_42163[2] = null;
                statearr_42131_42163[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_42129 === 1) {
                  var inst_42072 = {"typ":typ, "msg":v};
                  var inst_42073 = pubsub.m = inst_42072;
                  var state_42128__$1 = function() {
                    var statearr_42132 = state_42128;
                    statearr_42132[7] = inst_42073;
                    return statearr_42132;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42128__$1, 2, pubsub.statesCh);
                } else {
                  if (state_val_42129 === 24) {
                    var inst_42122 = state_42128[2];
                    var state_42128__$1 = state_42128;
                    var statearr_42133_42164 = state_42128__$1;
                    statearr_42133_42164[2] = inst_42122;
                    statearr_42133_42164[1] = 15;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_42129 === 4) {
                      var inst_42101 = pubsub.mtemp["typ"];
                      var inst_42102 = inst_42101 === 0;
                      var state_42128__$1 = state_42128;
                      if (cljs.core.truth_(inst_42102)) {
                        var statearr_42134_42165 = state_42128__$1;
                        statearr_42134_42165[1] = 13;
                      } else {
                        var statearr_42135_42166 = state_42128__$1;
                        statearr_42135_42166[1] = 14;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_42129 === 15) {
                        var inst_42124 = state_42128[2];
                        var state_42128__$1 = state_42128;
                        var statearr_42136_42167 = state_42128__$1;
                        statearr_42136_42167[2] = inst_42124;
                        statearr_42136_42167[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_42129 === 21) {
                          var inst_42113 = state_42128[2];
                          var state_42128__$1 = state_42128;
                          var statearr_42137_42168 = state_42128__$1;
                          statearr_42137_42168[2] = inst_42113;
                          statearr_42137_42168[1] = 18;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_42129 === 13) {
                            var state_42128__$1 = state_42128;
                            if (cljs.core.truth_(ret)) {
                              var statearr_42138_42169 = state_42128__$1;
                              statearr_42138_42169[1] = 16;
                            } else {
                              var statearr_42139_42170 = state_42128__$1;
                              statearr_42139_42170[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_42129 === 22) {
                              var inst_42110 = state_42128[2];
                              var state_42128__$1 = function() {
                                var statearr_42140 = state_42128;
                                statearr_42140[8] = inst_42110;
                                return statearr_42140;
                              }();
                              var statearr_42141_42171 = state_42128__$1;
                              statearr_42141_42171[2] = v;
                              statearr_42141_42171[1] = 21;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_42129 === 6) {
                                var inst_42082 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "found val  ", pubsub.mtemp);
                                var inst_42083 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "putting back   ", pubsub.m);
                                var state_42128__$1 = function() {
                                  var statearr_42142 = state_42128;
                                  statearr_42142[9] = inst_42082;
                                  statearr_42142[10] = inst_42083;
                                  return statearr_42142;
                                }();
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42128__$1, 9, pubsub.statesCh, pubsub.m);
                              } else {
                                if (state_val_42129 === 17) {
                                  var state_42128__$1 = state_42128;
                                  if (cljs.core.truth_(v)) {
                                    var statearr_42143_42172 = state_42128__$1;
                                    statearr_42143_42172[1] = 19;
                                  } else {
                                    var statearr_42144_42173 = state_42128__$1;
                                    statearr_42144_42173[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_42129 === 3) {
                                    var state_42128__$1 = state_42128;
                                    if (cljs.core.truth_(v)) {
                                      var statearr_42145_42174 = state_42128__$1;
                                      statearr_42145_42174[1] = 6;
                                    } else {
                                      var statearr_42146_42175 = state_42128__$1;
                                      statearr_42146_42175[1] = 7;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_42129 === 12) {
                                      var inst_42097 = state_42128[2];
                                      var state_42128__$1 = state_42128;
                                      var statearr_42147_42176 = state_42128__$1;
                                      statearr_42147_42176[2] = inst_42097;
                                      statearr_42147_42176[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_42129 === 2) {
                                        var inst_42075 = state_42128[2];
                                        var inst_42076 = pubsub.mtemp = inst_42075;
                                        var inst_42077 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "checking  ", pubsub.mtemp);
                                        var inst_42078 = pubsub.mtemp["typ"];
                                        var inst_42079 = inst_42078 === typ;
                                        var state_42128__$1 = function() {
                                          var statearr_42148 = state_42128;
                                          statearr_42148[11] = inst_42076;
                                          statearr_42148[12] = inst_42077;
                                          return statearr_42148;
                                        }();
                                        if (cljs.core.truth_(inst_42079)) {
                                          var statearr_42149_42177 = state_42128__$1;
                                          statearr_42149_42177[1] = 3;
                                        } else {
                                          var statearr_42150_42178 = state_42128__$1;
                                          statearr_42150_42178[1] = 4;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_42129 === 23) {
                                          var inst_42118 = state_42128[2];
                                          var inst_42119 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "itteration  ", ret);
                                          var inst_42120 = check.call(null, typ, v, ret);
                                          var state_42128__$1 = function() {
                                            var statearr_42151 = state_42128;
                                            statearr_42151[13] = inst_42119;
                                            statearr_42151[14] = inst_42118;
                                            return statearr_42151;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42128__$1, 24, inst_42120);
                                        } else {
                                          if (state_val_42129 === 19) {
                                            var inst_42108 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "got nul val is ", v);
                                            var state_42128__$1 = function() {
                                              var statearr_42152 = state_42128;
                                              statearr_42152[15] = inst_42108;
                                              return statearr_42152;
                                            }();
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42128__$1, 22, pubsub.statesCh, pubsub.m);
                                          } else {
                                            if (state_val_42129 === 11) {
                                              var inst_42093 = state_42128[2];
                                              var inst_42094 = pubsub.mtemp["msg"];
                                              var inst_42095 = check.call(null, typ, v, inst_42094);
                                              var state_42128__$1 = function() {
                                                var statearr_42153 = state_42128;
                                                statearr_42153[16] = inst_42093;
                                                return statearr_42153;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42128__$1, 12, inst_42095);
                                            } else {
                                              if (state_val_42129 === 9) {
                                                var inst_42085 = state_42128[2];
                                                var inst_42086 = check.call(null, typ, v, v);
                                                var state_42128__$1 = function() {
                                                  var statearr_42154 = state_42128;
                                                  statearr_42154[17] = inst_42085;
                                                  return statearr_42154;
                                                }();
                                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42128__$1, 10, inst_42086);
                                              } else {
                                                if (state_val_42129 === 5) {
                                                  var inst_42126 = state_42128[2];
                                                  var state_42128__$1 = state_42128;
                                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_42128__$1, inst_42126);
                                                } else {
                                                  if (state_val_42129 === 14) {
                                                    var state_42128__$1 = state_42128;
                                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42128__$1, 23, pubsub.statesCh, pubsub.mtemp);
                                                  } else {
                                                    if (state_val_42129 === 16) {
                                                      var inst_42105 = logger.og.call(null, new cljs.core.Keyword(null, "swp", "swp", -1952100902), "ending ", v);
                                                      var state_42128__$1 = function() {
                                                        var statearr_42155 = state_42128;
                                                        statearr_42155[18] = inst_42105;
                                                        return statearr_42155;
                                                      }();
                                                      var statearr_42156_42179 = state_42128__$1;
                                                      statearr_42156_42179[2] = ret;
                                                      statearr_42156_42179[1] = 18;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_42129 === 10) {
                                                        var inst_42088 = state_42128[2];
                                                        var state_42128__$1 = state_42128;
                                                        var statearr_42157_42180 = state_42128__$1;
                                                        statearr_42157_42180[2] = inst_42088;
                                                        statearr_42157_42180[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_42129 === 18) {
                                                          var inst_42115 = state_42128[2];
                                                          var state_42128__$1 = state_42128;
                                                          var statearr_42158_42181 = state_42128__$1;
                                                          statearr_42158_42181[2] = inst_42115;
                                                          statearr_42158_42181[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_42129 === 8) {
                                                            var inst_42099 = state_42128[2];
                                                            var state_42128__$1 = state_42128;
                                                            var statearr_42159_42182 = state_42128__$1;
                                                            statearr_42159_42182[2] = inst_42099;
                                                            statearr_42159_42182[1] = 5;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_42161 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_42161[0] = state_machine__6577__auto__;
              statearr_42161[1] = 1;
              return statearr_42161;
            };
            var state_machine__6577__auto____1 = function(state_42128) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_42128);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_42128) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_42128);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_42162 = f__6621__auto__.call(null);
        statearr_42162[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_42162;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.swp = function swp(typ, v) {
  if (cljs.core.truth_(v)) {
    return pubsub.states[typ] = v;
  } else {
    return pubsub.states[typ];
  }
};
pubsub.rr = function() {
  var rr__delegate = function(typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_42327) {
              var state_val_42328 = state_42327[1];
              if (state_val_42328 === 7) {
                var inst_42289 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                var inst_42290 = 0;
                var state_42327__$1 = function() {
                  var statearr_42329 = state_42327;
                  statearr_42329[5] = inst_42289;
                  statearr_42329[6] = inst_42290;
                  return statearr_42329;
                }();
                var statearr_42330_42357 = state_42327__$1;
                statearr_42330_42357[2] = null;
                statearr_42330_42357[1] = 9;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_42328 === 1) {
                  var inst_42270 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_42271 = cljs.core.count.call(null, typ);
                  var inst_42272 = inst_42271 / 2;
                  var inst_42273 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_42272);
                  var inst_42276 = {"typ":0};
                  var state_42327__$1 = function() {
                    var statearr_42331 = state_42327;
                    statearr_42331[7] = inst_42270;
                    statearr_42331[8] = inst_42273;
                    return statearr_42331;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42327__$1, 2, pubsub.sendReceiveCh, inst_42276);
                } else {
                  if (state_val_42328 === 4) {
                    var inst_42325 = state_42327[2];
                    var state_42327__$1 = state_42327;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_42327__$1, inst_42325);
                  } else {
                    if (state_val_42328 === 15) {
                      var inst_42290 = state_42327[6];
                      var inst_42312 = inst_42290 + 2;
                      var inst_42290__$1 = inst_42312;
                      var state_42327__$1 = function() {
                        var statearr_42332 = state_42327;
                        statearr_42332[6] = inst_42290__$1;
                        return statearr_42332;
                      }();
                      var statearr_42333_42358 = state_42327__$1;
                      statearr_42333_42358[2] = null;
                      statearr_42333_42358[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_42328 === 13) {
                        var inst_42318 = state_42327[2];
                        var state_42327__$1 = state_42327;
                        var statearr_42334_42359 = state_42327__$1;
                        statearr_42334_42359[2] = inst_42318;
                        statearr_42334_42359[1] = 10;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_42328 === 6) {
                          var inst_42287 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                          var state_42327__$1 = function() {
                            var statearr_42335 = state_42327;
                            statearr_42335[9] = inst_42287;
                            return statearr_42335;
                          }();
                          var statearr_42336_42360 = state_42327__$1;
                          statearr_42336_42360[2] = 0;
                          statearr_42336_42360[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_42328 === 17) {
                            var inst_42310 = state_42327[2];
                            var state_42327__$1 = state_42327;
                            var statearr_42337_42361 = state_42327__$1;
                            statearr_42337_42361[2] = inst_42310;
                            statearr_42337_42361[1] = 16;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_42328 === 3) {
                              var inst_42280 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                              var state_42327__$1 = function() {
                                var statearr_42338 = state_42327;
                                statearr_42338[10] = inst_42280;
                                return statearr_42338;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42327__$1, 5, pubsub.sendReceiveCh);
                            } else {
                              if (state_val_42328 === 12) {
                                var state_42327__$1 = state_42327;
                                var statearr_42339_42362 = state_42327__$1;
                                statearr_42339_42362[2] = null;
                                statearr_42339_42362[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_42328 === 2) {
                                  var inst_42278 = state_42327[2];
                                  var state_42327__$1 = function() {
                                    var statearr_42340 = state_42327;
                                    statearr_42340[11] = inst_42278;
                                    return statearr_42340;
                                  }();
                                  var statearr_42341_42363 = state_42327__$1;
                                  statearr_42341_42363[2] = null;
                                  statearr_42341_42363[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_42328 === 11) {
                                    var inst_42290 = state_42327[6];
                                    var inst_42295 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_42290);
                                    var inst_42296 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                    var inst_42297 = cljs.core.nth.call(null, typ, inst_42290);
                                    var inst_42298 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_42297);
                                    var inst_42299 = pubsub.mtemp["typ"];
                                    var inst_42300 = cljs.core.nth.call(null, typ, inst_42290);
                                    var inst_42301 = inst_42299 === inst_42300;
                                    var state_42327__$1 = function() {
                                      var statearr_42342 = state_42327;
                                      statearr_42342[12] = inst_42296;
                                      statearr_42342[13] = inst_42298;
                                      statearr_42342[14] = inst_42295;
                                      return statearr_42342;
                                    }();
                                    if (cljs.core.truth_(inst_42301)) {
                                      var statearr_42343_42364 = state_42327__$1;
                                      statearr_42343_42364[1] = 14;
                                    } else {
                                      var statearr_42344_42365 = state_42327__$1;
                                      statearr_42344_42365[1] = 15;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_42328 === 9) {
                                      var inst_42290 = state_42327[6];
                                      var inst_42292 = cljs.core.count.call(null, typ);
                                      var inst_42293 = inst_42290 < inst_42292;
                                      var state_42327__$1 = state_42327;
                                      if (cljs.core.truth_(inst_42293)) {
                                        var statearr_42345_42366 = state_42327__$1;
                                        statearr_42345_42366[1] = 11;
                                      } else {
                                        var statearr_42346_42367 = state_42327__$1;
                                        statearr_42346_42367[1] = 12;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_42328 === 5) {
                                        var inst_42282 = state_42327[2];
                                        var inst_42283 = pubsub.mtemp = inst_42282;
                                        var inst_42284 = pubsub.mtemp["typ"];
                                        var inst_42285 = inst_42284 === 0;
                                        var state_42327__$1 = function() {
                                          var statearr_42347 = state_42327;
                                          statearr_42347[15] = inst_42283;
                                          return statearr_42347;
                                        }();
                                        if (cljs.core.truth_(inst_42285)) {
                                          var statearr_42348_42368 = state_42327__$1;
                                          statearr_42348_42368[1] = 6;
                                        } else {
                                          var statearr_42349_42369 = state_42327__$1;
                                          statearr_42349_42369[1] = 7;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_42328 === 14) {
                                          var inst_42290 = state_42327[6];
                                          var inst_42303 = cljs.core.nth.call(null, typ, inst_42290);
                                          var inst_42304 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_42303);
                                          var inst_42305 = inst_42290 + 1;
                                          var inst_42306 = cljs.core.nth.call(null, typ, inst_42305);
                                          var inst_42307 = pubsub.mtemp["msg"];
                                          var inst_42308 = inst_42306.call(null, inst_42307);
                                          var state_42327__$1 = function() {
                                            var statearr_42350 = state_42327;
                                            statearr_42350[16] = inst_42304;
                                            return statearr_42350;
                                          }();
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42327__$1, 17, inst_42308);
                                        } else {
                                          if (state_val_42328 === 16) {
                                            var inst_42315 = state_42327[2];
                                            var state_42327__$1 = state_42327;
                                            var statearr_42351_42370 = state_42327__$1;
                                            statearr_42351_42370[2] = inst_42315;
                                            statearr_42351_42370[1] = 13;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_42328 === 10) {
                                              var inst_42320 = state_42327[2];
                                              var inst_42321 = pubsub.result = inst_42320;
                                              var state_42327__$1 = state_42327;
                                              var statearr_42352_42371 = state_42327__$1;
                                              statearr_42352_42371[2] = inst_42321;
                                              statearr_42352_42371[1] = 8;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_42328 === 8) {
                                                var inst_42323 = state_42327[2];
                                                var state_42327__$1 = state_42327;
                                                var statearr_42353_42372 = state_42327__$1;
                                                statearr_42353_42372[2] = inst_42323;
                                                statearr_42353_42372[1] = 4;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_42355 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_42355[0] = state_machine__6577__auto__;
                statearr_42355[1] = 1;
                return statearr_42355;
              };
              var state_machine__6577__auto____1 = function(state_42327) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_42327);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_42327) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_42327);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_42356 = f__6621__auto__.call(null);
          statearr_42356[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_42356;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var rr = function(var_args) {
    var typ = null;
    if (arguments.length > 0) {
      var G__42373__i = 0, G__42373__a = new Array(arguments.length - 0);
      while (G__42373__i < G__42373__a.length) {
        G__42373__a[G__42373__i] = arguments[G__42373__i + 0];
        ++G__42373__i;
      }
      typ = new cljs.core.IndexedSeq(G__42373__a, 0);
    }
    return rr__delegate.call(this, typ);
  };
  rr.cljs$lang$maxFixedArity = 0;
  rr.cljs$lang$applyTo = function(arglist__42374) {
    var typ = cljs.core.seq(arglist__42374);
    return rr__delegate(typ);
  };
  rr.cljs$core$IFn$_invoke$arity$variadic = rr__delegate;
  return rr;
}();
pubsub.rrs = function() {
  var rrs__delegate = function(typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_42515) {
              var state_val_42516 = state_42515[1];
              if (state_val_42516 === 7) {
                var inst_42510 = state_42515[2];
                var state_42515__$1 = function() {
                  var statearr_42517 = state_42515;
                  statearr_42517[5] = inst_42510;
                  return statearr_42517;
                }();
                var statearr_42518_42545 = state_42515__$1;
                statearr_42518_42545[2] = null;
                statearr_42518_42545[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_42516 === 1) {
                  var inst_42460 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_42461 = cljs.core.count.call(null, typ);
                  var inst_42462 = inst_42461 / 2;
                  var inst_42463 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_42462);
                  var state_42515__$1 = function() {
                    var statearr_42519 = state_42515;
                    statearr_42519[6] = inst_42460;
                    statearr_42519[7] = inst_42463;
                    return statearr_42519;
                  }();
                  var statearr_42520_42546 = state_42515__$1;
                  statearr_42520_42546[2] = null;
                  statearr_42520_42546[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_42516 === 4) {
                    var inst_42467 = state_42515[2];
                    var inst_42468 = pubsub.mtemp = inst_42467;
                    var inst_42469 = pubsub.mtemp["typ"];
                    var inst_42470 = inst_42469 === 0;
                    var state_42515__$1 = function() {
                      var statearr_42521 = state_42515;
                      statearr_42521[8] = inst_42468;
                      return statearr_42521;
                    }();
                    if (cljs.core.truth_(inst_42470)) {
                      var statearr_42522_42547 = state_42515__$1;
                      statearr_42522_42547[1] = 5;
                    } else {
                      var statearr_42523_42548 = state_42515__$1;
                      statearr_42523_42548[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_42516 === 15) {
                      var inst_42502 = state_42515[2];
                      var state_42515__$1 = state_42515;
                      var statearr_42524_42549 = state_42515__$1;
                      statearr_42524_42549[2] = inst_42502;
                      statearr_42524_42549[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_42516 === 13) {
                        var inst_42475 = state_42515[9];
                        var inst_42488 = cljs.core.nth.call(null, typ, inst_42475);
                        var inst_42489 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_42488);
                        var inst_42490 = inst_42475 + 1;
                        var inst_42491 = cljs.core.nth.call(null, typ, inst_42490);
                        var inst_42492 = pubsub.mtemp["msg"];
                        var inst_42493 = inst_42491.call(null, inst_42492);
                        var inst_42494 = pubsub.ret = inst_42493;
                        var inst_42495 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "return ", pubsub.ret);
                        var state_42515__$1 = function() {
                          var statearr_42525 = state_42515;
                          statearr_42525[10] = inst_42489;
                          statearr_42525[11] = inst_42495;
                          statearr_42525[12] = inst_42494;
                          return statearr_42525;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42515__$1, 16, pubsub.receiveCH, pubsub.ret);
                      } else {
                        if (state_val_42516 === 6) {
                          var inst_42474 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                          var inst_42475 = 0;
                          var state_42515__$1 = function() {
                            var statearr_42526 = state_42515;
                            statearr_42526[13] = inst_42474;
                            statearr_42526[9] = inst_42475;
                            return statearr_42526;
                          }();
                          var statearr_42527_42550 = state_42515__$1;
                          statearr_42527_42550[2] = null;
                          statearr_42527_42550[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_42516 === 3) {
                            var inst_42513 = state_42515[2];
                            var state_42515__$1 = state_42515;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_42515__$1, inst_42513);
                          } else {
                            if (state_val_42516 === 12) {
                              var inst_42505 = state_42515[2];
                              var state_42515__$1 = state_42515;
                              var statearr_42528_42551 = state_42515__$1;
                              statearr_42528_42551[2] = inst_42505;
                              statearr_42528_42551[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_42516 === 2) {
                                var inst_42465 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                var state_42515__$1 = function() {
                                  var statearr_42529 = state_42515;
                                  statearr_42529[14] = inst_42465;
                                  return statearr_42529;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42515__$1, 4, pubsub.sendReceiveCh);
                              } else {
                                if (state_val_42516 === 11) {
                                  var state_42515__$1 = state_42515;
                                  var statearr_42530_42552 = state_42515__$1;
                                  statearr_42530_42552[2] = null;
                                  statearr_42530_42552[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_42516 === 9) {
                                    var inst_42507 = state_42515[2];
                                    var inst_42508 = pubsub.result = inst_42507;
                                    var state_42515__$1 = state_42515;
                                    var statearr_42531_42553 = state_42515__$1;
                                    statearr_42531_42553[2] = inst_42508;
                                    statearr_42531_42553[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_42516 === 5) {
                                      var inst_42472 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                      var state_42515__$1 = function() {
                                        var statearr_42532 = state_42515;
                                        statearr_42532[15] = inst_42472;
                                        return statearr_42532;
                                      }();
                                      var statearr_42533_42554 = state_42515__$1;
                                      statearr_42533_42554[2] = 0;
                                      statearr_42533_42554[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_42516 === 14) {
                                        var inst_42475 = state_42515[9];
                                        var inst_42499 = inst_42475 + 2;
                                        var inst_42475__$1 = inst_42499;
                                        var state_42515__$1 = function() {
                                          var statearr_42534 = state_42515;
                                          statearr_42534[9] = inst_42475__$1;
                                          return statearr_42534;
                                        }();
                                        var statearr_42535_42555 = state_42515__$1;
                                        statearr_42535_42555[2] = null;
                                        statearr_42535_42555[1] = 8;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_42516 === 16) {
                                          var inst_42497 = state_42515[2];
                                          var state_42515__$1 = state_42515;
                                          var statearr_42536_42556 = state_42515__$1;
                                          statearr_42536_42556[2] = inst_42497;
                                          statearr_42536_42556[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_42516 === 10) {
                                            var inst_42475 = state_42515[9];
                                            var inst_42480 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_42475);
                                            var inst_42481 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                            var inst_42482 = cljs.core.nth.call(null, typ, inst_42475);
                                            var inst_42483 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_42482);
                                            var inst_42484 = pubsub.mtemp["typ"];
                                            var inst_42485 = cljs.core.nth.call(null, typ, inst_42475);
                                            var inst_42486 = inst_42484 === inst_42485;
                                            var state_42515__$1 = function() {
                                              var statearr_42537 = state_42515;
                                              statearr_42537[16] = inst_42481;
                                              statearr_42537[17] = inst_42480;
                                              statearr_42537[18] = inst_42483;
                                              return statearr_42537;
                                            }();
                                            if (cljs.core.truth_(inst_42486)) {
                                              var statearr_42538_42557 = state_42515__$1;
                                              statearr_42538_42557[1] = 13;
                                            } else {
                                              var statearr_42539_42558 = state_42515__$1;
                                              statearr_42539_42558[1] = 14;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_42516 === 8) {
                                              var inst_42475 = state_42515[9];
                                              var inst_42477 = cljs.core.count.call(null, typ);
                                              var inst_42478 = inst_42475 < inst_42477;
                                              var state_42515__$1 = state_42515;
                                              if (cljs.core.truth_(inst_42478)) {
                                                var statearr_42540_42559 = state_42515__$1;
                                                statearr_42540_42559[1] = 10;
                                              } else {
                                                var statearr_42541_42560 = state_42515__$1;
                                                statearr_42541_42560[1] = 11;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_42543 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_42543[0] = state_machine__6577__auto__;
                statearr_42543[1] = 1;
                return statearr_42543;
              };
              var state_machine__6577__auto____1 = function(state_42515) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_42515);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_42515) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_42515);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_42544 = f__6621__auto__.call(null);
          statearr_42544[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_42544;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var rrs = function(var_args) {
    var typ = null;
    if (arguments.length > 0) {
      var G__42561__i = 0, G__42561__a = new Array(arguments.length - 0);
      while (G__42561__i < G__42561__a.length) {
        G__42561__a[G__42561__i] = arguments[G__42561__i + 0];
        ++G__42561__i;
      }
      typ = new cljs.core.IndexedSeq(G__42561__a, 0);
    }
    return rrs__delegate.call(this, typ);
  };
  rrs.cljs$lang$maxFixedArity = 0;
  rrs.cljs$lang$applyTo = function(arglist__42562) {
    var typ = cljs.core.seq(arglist__42562);
    return rrs__delegate(typ);
  };
  rrs.cljs$core$IFn$_invoke$arity$variadic = rrs__delegate;
  return rrs;
}();
pubsub.rrsa = function() {
  var rrsa__delegate = function(rch, sch, typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_42714) {
              var state_val_42715 = state_42714[1];
              if (state_val_42715 === 7) {
                var inst_42709 = state_42714[2];
                var state_42714__$1 = function() {
                  var statearr_42716 = state_42714;
                  statearr_42716[5] = inst_42709;
                  return statearr_42716;
                }();
                var statearr_42717_42745 = state_42714__$1;
                statearr_42717_42745[2] = null;
                statearr_42717_42745[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_42715 === 1) {
                  var inst_42654 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_42655 = cljs.core.count.call(null, typ);
                  var inst_42656 = inst_42655 / 2;
                  var inst_42657 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_42656);
                  var state_42714__$1 = function() {
                    var statearr_42718 = state_42714;
                    statearr_42718[6] = inst_42654;
                    statearr_42718[7] = inst_42657;
                    return statearr_42718;
                  }();
                  var statearr_42719_42746 = state_42714__$1;
                  statearr_42719_42746[2] = null;
                  statearr_42719_42746[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_42715 === 4) {
                    var inst_42661 = state_42714[2];
                    var inst_42662 = pubsub.mtemp = inst_42661;
                    var inst_42663 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop", pubsub.mtemp);
                    var inst_42664 = pubsub.mtemp["typ"];
                    var inst_42665 = inst_42664 === 0;
                    var state_42714__$1 = function() {
                      var statearr_42720 = state_42714;
                      statearr_42720[8] = inst_42662;
                      statearr_42720[9] = inst_42663;
                      return statearr_42720;
                    }();
                    if (cljs.core.truth_(inst_42665)) {
                      var statearr_42721_42747 = state_42714__$1;
                      statearr_42721_42747[1] = 5;
                    } else {
                      var statearr_42722_42748 = state_42714__$1;
                      statearr_42722_42748[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_42715 === 15) {
                      var inst_42701 = state_42714[2];
                      var state_42714__$1 = state_42714;
                      var statearr_42723_42749 = state_42714__$1;
                      statearr_42723_42749[2] = inst_42701;
                      statearr_42723_42749[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_42715 === 13) {
                        var inst_42670 = state_42714[10];
                        var inst_42683 = cljs.core.nth.call(null, typ, inst_42670);
                        var inst_42684 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_42683);
                        var inst_42685 = pubsub.mtemp["msg"];
                        var inst_42686 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "args ", inst_42685);
                        var inst_42687 = inst_42670 + 1;
                        var inst_42688 = cljs.core.nth.call(null, typ, inst_42687);
                        var inst_42689 = pubsub.mtemp["msg"];
                        var inst_42690 = cljs.core.apply.call(null, inst_42688, inst_42689);
                        var state_42714__$1 = function() {
                          var statearr_42724 = state_42714;
                          statearr_42724[11] = inst_42684;
                          statearr_42724[12] = inst_42686;
                          return statearr_42724;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42714__$1, 16, inst_42690);
                      } else {
                        if (state_val_42715 === 6) {
                          var inst_42669 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                          var inst_42670 = 0;
                          var state_42714__$1 = function() {
                            var statearr_42725 = state_42714;
                            statearr_42725[10] = inst_42670;
                            statearr_42725[13] = inst_42669;
                            return statearr_42725;
                          }();
                          var statearr_42726_42750 = state_42714__$1;
                          statearr_42726_42750[2] = null;
                          statearr_42726_42750[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_42715 === 17) {
                            var inst_42696 = state_42714[2];
                            var state_42714__$1 = state_42714;
                            var statearr_42727_42751 = state_42714__$1;
                            statearr_42727_42751[2] = inst_42696;
                            statearr_42727_42751[1] = 15;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_42715 === 3) {
                              var inst_42712 = state_42714[2];
                              var state_42714__$1 = state_42714;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_42714__$1, inst_42712);
                            } else {
                              if (state_val_42715 === 12) {
                                var inst_42704 = state_42714[2];
                                var state_42714__$1 = state_42714;
                                var statearr_42728_42752 = state_42714__$1;
                                statearr_42728_42752[2] = inst_42704;
                                statearr_42728_42752[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_42715 === 2) {
                                  var inst_42659 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                  var state_42714__$1 = function() {
                                    var statearr_42729 = state_42714;
                                    statearr_42729[14] = inst_42659;
                                    return statearr_42729;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42714__$1, 4, sch);
                                } else {
                                  if (state_val_42715 === 11) {
                                    var state_42714__$1 = state_42714;
                                    var statearr_42730_42753 = state_42714__$1;
                                    statearr_42730_42753[2] = null;
                                    statearr_42730_42753[1] = 12;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_42715 === 9) {
                                      var inst_42706 = state_42714[2];
                                      var inst_42707 = pubsub.result = inst_42706;
                                      var state_42714__$1 = state_42714;
                                      var statearr_42731_42754 = state_42714__$1;
                                      statearr_42731_42754[2] = inst_42707;
                                      statearr_42731_42754[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_42715 === 5) {
                                        var inst_42667 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                        var state_42714__$1 = function() {
                                          var statearr_42732 = state_42714;
                                          statearr_42732[15] = inst_42667;
                                          return statearr_42732;
                                        }();
                                        var statearr_42733_42755 = state_42714__$1;
                                        statearr_42733_42755[2] = 0;
                                        statearr_42733_42755[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_42715 === 14) {
                                          var inst_42670 = state_42714[10];
                                          var inst_42698 = inst_42670 + 2;
                                          var inst_42670__$1 = inst_42698;
                                          var state_42714__$1 = function() {
                                            var statearr_42734 = state_42714;
                                            statearr_42734[10] = inst_42670__$1;
                                            return statearr_42734;
                                          }();
                                          var statearr_42735_42756 = state_42714__$1;
                                          statearr_42735_42756[2] = null;
                                          statearr_42735_42756[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_42715 === 16) {
                                            var inst_42692 = state_42714[2];
                                            var inst_42693 = pubsub.ret = inst_42692;
                                            var inst_42694 = logger.og.call(null, new cljs.core.Keyword(null, "receive1", "receive1", -1698206131), "return ", pubsub.ret);
                                            var state_42714__$1 = function() {
                                              var statearr_42736 = state_42714;
                                              statearr_42736[16] = inst_42693;
                                              statearr_42736[17] = inst_42694;
                                              return statearr_42736;
                                            }();
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42714__$1, 17, rch, pubsub.ret);
                                          } else {
                                            if (state_val_42715 === 10) {
                                              var inst_42670 = state_42714[10];
                                              var inst_42675 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_42670);
                                              var inst_42676 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                              var inst_42677 = cljs.core.nth.call(null, typ, inst_42670);
                                              var inst_42678 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_42677);
                                              var inst_42679 = pubsub.mtemp["typ"];
                                              var inst_42680 = cljs.core.nth.call(null, typ, inst_42670);
                                              var inst_42681 = inst_42679 === inst_42680;
                                              var state_42714__$1 = function() {
                                                var statearr_42737 = state_42714;
                                                statearr_42737[18] = inst_42675;
                                                statearr_42737[19] = inst_42676;
                                                statearr_42737[20] = inst_42678;
                                                return statearr_42737;
                                              }();
                                              if (cljs.core.truth_(inst_42681)) {
                                                var statearr_42738_42757 = state_42714__$1;
                                                statearr_42738_42757[1] = 13;
                                              } else {
                                                var statearr_42739_42758 = state_42714__$1;
                                                statearr_42739_42758[1] = 14;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_42715 === 8) {
                                                var inst_42670 = state_42714[10];
                                                var inst_42672 = cljs.core.count.call(null, typ);
                                                var inst_42673 = inst_42670 < inst_42672;
                                                var state_42714__$1 = state_42714;
                                                if (cljs.core.truth_(inst_42673)) {
                                                  var statearr_42740_42759 = state_42714__$1;
                                                  statearr_42740_42759[1] = 10;
                                                } else {
                                                  var statearr_42741_42760 = state_42714__$1;
                                                  statearr_42741_42760[1] = 11;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_42743 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_42743[0] = state_machine__6577__auto__;
                statearr_42743[1] = 1;
                return statearr_42743;
              };
              var state_machine__6577__auto____1 = function(state_42714) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_42714);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_42714) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_42714);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_42744 = f__6621__auto__.call(null);
          statearr_42744[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_42744;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var rrsa = function(rch, sch, var_args) {
    var typ = null;
    if (arguments.length > 2) {
      var G__42761__i = 0, G__42761__a = new Array(arguments.length - 2);
      while (G__42761__i < G__42761__a.length) {
        G__42761__a[G__42761__i] = arguments[G__42761__i + 2];
        ++G__42761__i;
      }
      typ = new cljs.core.IndexedSeq(G__42761__a, 0);
    }
    return rrsa__delegate.call(this, rch, sch, typ);
  };
  rrsa.cljs$lang$maxFixedArity = 2;
  rrsa.cljs$lang$applyTo = function(arglist__42762) {
    var rch = cljs.core.first(arglist__42762);
    arglist__42762 = cljs.core.next(arglist__42762);
    var sch = cljs.core.first(arglist__42762);
    var typ = cljs.core.rest(arglist__42762);
    return rrsa__delegate(rch, sch, typ);
  };
  rrsa.cljs$core$IFn$_invoke$arity$variadic = rrsa__delegate;
  return rrsa;
}();
pubsub.arrsa = function() {
  var arrsa__delegate = function(sch, typ) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_42905) {
              var state_val_42906 = state_42905[1];
              if (state_val_42906 === 7) {
                var inst_42900 = state_42905[2];
                var state_42905__$1 = function() {
                  var statearr_42907 = state_42905;
                  statearr_42907[5] = inst_42900;
                  return statearr_42907;
                }();
                var statearr_42908_42935 = state_42905__$1;
                statearr_42908_42935[2] = null;
                statearr_42908_42935[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_42906 === 1) {
                  var inst_42849 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", typ);
                  var inst_42850 = cljs.core.count.call(null, typ);
                  var inst_42851 = inst_42850 / 2;
                  var inst_42852 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve ", inst_42851);
                  var state_42905__$1 = function() {
                    var statearr_42909 = state_42905;
                    statearr_42909[6] = inst_42849;
                    statearr_42909[7] = inst_42852;
                    return statearr_42909;
                  }();
                  var statearr_42910_42936 = state_42905__$1;
                  statearr_42910_42936[2] = null;
                  statearr_42910_42936[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_42906 === 4) {
                    var inst_42856 = state_42905[2];
                    var inst_42857 = pubsub.mtemp = inst_42856;
                    var inst_42858 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop", pubsub.mtemp);
                    var inst_42859 = pubsub.mtemp["typ"];
                    var inst_42860 = inst_42859 === 0;
                    var state_42905__$1 = function() {
                      var statearr_42911 = state_42905;
                      statearr_42911[8] = inst_42858;
                      statearr_42911[9] = inst_42857;
                      return statearr_42911;
                    }();
                    if (cljs.core.truth_(inst_42860)) {
                      var statearr_42912_42937 = state_42905__$1;
                      statearr_42912_42937[1] = 5;
                    } else {
                      var statearr_42913_42938 = state_42905__$1;
                      statearr_42913_42938[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_42906 === 15) {
                      var inst_42892 = state_42905[2];
                      var state_42905__$1 = state_42905;
                      var statearr_42914_42939 = state_42905__$1;
                      statearr_42914_42939[2] = inst_42892;
                      statearr_42914_42939[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_42906 === 13) {
                        var inst_42865 = state_42905[10];
                        var inst_42878 = cljs.core.nth.call(null, typ, inst_42865);
                        var inst_42879 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "found ", inst_42878);
                        var inst_42880 = pubsub.mtemp["msg"];
                        var inst_42881 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "args ", inst_42880);
                        var inst_42882 = inst_42865 + 1;
                        var inst_42883 = cljs.core.nth.call(null, typ, inst_42882);
                        var inst_42884 = pubsub.mtemp["msg"];
                        var inst_42885 = cljs.core.apply.call(null, inst_42883, inst_42884);
                        var inst_42886 = pubsub.ret = inst_42885;
                        var inst_42887 = logger.og.call(null, new cljs.core.Keyword(null, "receive1", "receive1", -1698206131), "return ", pubsub.ret);
                        var state_42905__$1 = function() {
                          var statearr_42915 = state_42905;
                          statearr_42915[11] = inst_42879;
                          statearr_42915[12] = inst_42886;
                          statearr_42915[13] = inst_42881;
                          return statearr_42915;
                        }();
                        var statearr_42916_42940 = state_42905__$1;
                        statearr_42916_42940[2] = inst_42887;
                        statearr_42916_42940[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_42906 === 6) {
                          var inst_42864 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "now looking at ", pubsub.mtemp);
                          var inst_42865 = 0;
                          var state_42905__$1 = function() {
                            var statearr_42917 = state_42905;
                            statearr_42917[14] = inst_42864;
                            statearr_42917[10] = inst_42865;
                            return statearr_42917;
                          }();
                          var statearr_42918_42941 = state_42905__$1;
                          statearr_42918_42941[2] = null;
                          statearr_42918_42941[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_42906 === 3) {
                            var inst_42903 = state_42905[2];
                            var state_42905__$1 = state_42905;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_42905__$1, inst_42903);
                          } else {
                            if (state_val_42906 === 12) {
                              var inst_42895 = state_42905[2];
                              var state_42905__$1 = state_42905;
                              var statearr_42919_42942 = state_42905__$1;
                              statearr_42919_42942[2] = inst_42895;
                              statearr_42919_42942[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_42906 === 2) {
                                var inst_42854 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "about to recieve in loop");
                                var state_42905__$1 = function() {
                                  var statearr_42920 = state_42905;
                                  statearr_42920[15] = inst_42854;
                                  return statearr_42920;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_42905__$1, 4, sch);
                              } else {
                                if (state_val_42906 === 11) {
                                  var state_42905__$1 = state_42905;
                                  var statearr_42921_42943 = state_42905__$1;
                                  statearr_42921_42943[2] = null;
                                  statearr_42921_42943[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_42906 === 9) {
                                    var inst_42897 = state_42905[2];
                                    var inst_42898 = pubsub.result = inst_42897;
                                    var state_42905__$1 = state_42905;
                                    var statearr_42922_42944 = state_42905__$1;
                                    statearr_42922_42944[2] = inst_42898;
                                    statearr_42922_42944[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_42906 === 5) {
                                      var inst_42862 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got null");
                                      var state_42905__$1 = function() {
                                        var statearr_42923 = state_42905;
                                        statearr_42923[16] = inst_42862;
                                        return statearr_42923;
                                      }();
                                      var statearr_42924_42945 = state_42905__$1;
                                      statearr_42924_42945[2] = 0;
                                      statearr_42924_42945[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_42906 === 14) {
                                        var inst_42865 = state_42905[10];
                                        var inst_42889 = inst_42865 + 2;
                                        var inst_42865__$1 = inst_42889;
                                        var state_42905__$1 = function() {
                                          var statearr_42925 = state_42905;
                                          statearr_42925[10] = inst_42865__$1;
                                          return statearr_42925;
                                        }();
                                        var statearr_42926_42946 = state_42905__$1;
                                        statearr_42926_42946[2] = null;
                                        statearr_42926_42946[1] = 8;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_42906 === 10) {
                                          var inst_42865 = state_42905[10];
                                          var inst_42870 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "checking ", inst_42865);
                                          var inst_42871 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "got ", pubsub.mtemp);
                                          var inst_42872 = cljs.core.nth.call(null, typ, inst_42865);
                                          var inst_42873 = logger.og.call(null, new cljs.core.Keyword(null, "receive", "receive", 1830053389), "looking for ", inst_42872);
                                          var inst_42874 = pubsub.mtemp["typ"];
                                          var inst_42875 = cljs.core.nth.call(null, typ, inst_42865);
                                          var inst_42876 = inst_42874 === inst_42875;
                                          var state_42905__$1 = function() {
                                            var statearr_42927 = state_42905;
                                            statearr_42927[17] = inst_42870;
                                            statearr_42927[18] = inst_42873;
                                            statearr_42927[19] = inst_42871;
                                            return statearr_42927;
                                          }();
                                          if (cljs.core.truth_(inst_42876)) {
                                            var statearr_42928_42947 = state_42905__$1;
                                            statearr_42928_42947[1] = 13;
                                          } else {
                                            var statearr_42929_42948 = state_42905__$1;
                                            statearr_42929_42948[1] = 14;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_42906 === 8) {
                                            var inst_42865 = state_42905[10];
                                            var inst_42867 = cljs.core.count.call(null, typ);
                                            var inst_42868 = inst_42865 < inst_42867;
                                            var state_42905__$1 = state_42905;
                                            if (cljs.core.truth_(inst_42868)) {
                                              var statearr_42930_42949 = state_42905__$1;
                                              statearr_42930_42949[1] = 10;
                                            } else {
                                              var statearr_42931_42950 = state_42905__$1;
                                              statearr_42931_42950[1] = 11;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_42933 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_42933[0] = state_machine__6577__auto__;
                statearr_42933[1] = 1;
                return statearr_42933;
              };
              var state_machine__6577__auto____1 = function(state_42905) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_42905);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_42905) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_42905);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_42934 = f__6621__auto__.call(null);
          statearr_42934[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_42934;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var arrsa = function(sch, var_args) {
    var typ = null;
    if (arguments.length > 1) {
      var G__42951__i = 0, G__42951__a = new Array(arguments.length - 1);
      while (G__42951__i < G__42951__a.length) {
        G__42951__a[G__42951__i] = arguments[G__42951__i + 1];
        ++G__42951__i;
      }
      typ = new cljs.core.IndexedSeq(G__42951__a, 0);
    }
    return arrsa__delegate.call(this, sch, typ);
  };
  arrsa.cljs$lang$maxFixedArity = 1;
  arrsa.cljs$lang$applyTo = function(arglist__42952) {
    var sch = cljs.core.first(arglist__42952);
    var typ = cljs.core.rest(arglist__42952);
    return arrsa__delegate(sch, typ);
  };
  arrsa.cljs$core$IFn$_invoke$arity$variadic = arrsa__delegate;
  return arrsa;
}();
pubsub.s = function s(typ, m) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_42969) {
            var state_val_42970 = state_42969[1];
            if (state_val_42970 === 2) {
              var inst_42967 = state_42969[2];
              var state_42969__$1 = state_42969;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_42969__$1, inst_42967);
            } else {
              if (state_val_42970 === 1) {
                var inst_42964 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), typ, m);
                var inst_42965 = pubsub.makeMsg.call(null, typ, m);
                var state_42969__$1 = function() {
                  var statearr_42971 = state_42969;
                  statearr_42971[5] = inst_42964;
                  return statearr_42971;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_42969__$1, 2, pubsub.sendReceiveCh, inst_42965);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_42973 = [null, null, null, null, null, null];
              statearr_42973[0] = state_machine__6577__auto__;
              statearr_42973[1] = 1;
              return statearr_42973;
            };
            var state_machine__6577__auto____1 = function(state_42969) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_42969);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_42969) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_42969);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_42974 = f__6621__auto__.call(null);
        statearr_42974[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_42974;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.si = function si(typ, m) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_43005) {
            var state_val_43006 = state_43005[1];
            if (state_val_43006 === 3) {
              var inst_43001 = state_43005[2];
              var inst_43002 = pubsub.n = inst_43001;
              var inst_43003 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "recieved", pubsub.n);
              var state_43005__$1 = function() {
                var statearr_43007 = state_43005;
                statearr_43007[5] = inst_43002;
                return statearr_43007;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_43005__$1, inst_43003);
            } else {
              if (state_val_43006 === 2) {
                var inst_42999 = state_43005[2];
                var state_43005__$1 = function() {
                  var statearr_43008 = state_43005;
                  statearr_43008[6] = inst_42999;
                  return statearr_43008;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_43005__$1, 3, pubsub.pchannel);
              } else {
                if (state_val_43006 === 1) {
                  var inst_42994 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), typ, m);
                  var inst_42995 = cljs.core.async.chan.call(null);
                  var inst_42996 = pubsub.pchannel = inst_42995;
                  var inst_42997 = pubsub.makeMsg.call(null, typ, m, pubsub.pchannel);
                  var state_43005__$1 = function() {
                    var statearr_43009 = state_43005;
                    statearr_43009[7] = inst_42994;
                    statearr_43009[8] = inst_42996;
                    return statearr_43009;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_43005__$1, 2, pubsub.sendReceiveCh, inst_42997);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_43011 = [null, null, null, null, null, null, null, null, null];
              statearr_43011[0] = state_machine__6577__auto__;
              statearr_43011[1] = 1;
              return statearr_43011;
            };
            var state_machine__6577__auto____1 = function(state_43005) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_43005);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_43005) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_43005);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_43012 = f__6621__auto__.call(null);
        statearr_43012[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_43012;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
pubsub.order = [];
pubsub.sia = function() {
  var sia__delegate = function(typ, m) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_43080) {
              var state_val_43081 = state_43080[1];
              if (state_val_43081 === 7) {
                var inst_43075 = state_43080[2];
                var inst_43076 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "done routing2", inst_43075);
                var state_43080__$1 = state_43080;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_43080__$1, 6, inst_43076);
              } else {
                if (state_val_43081 === 6) {
                  var inst_43078 = state_43080[2];
                  var state_43080__$1 = state_43080;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_43080__$1, inst_43078);
                } else {
                  if (state_val_43081 === 5) {
                    var inst_43067 = state_43080[2];
                    var inst_43068 = {"typ":typ, "msg":inst_43067};
                    var state_43080__$1 = state_43080;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_43080__$1, 2, pubsub.sch, inst_43068);
                  } else {
                    if (state_val_43081 === 4) {
                      var inst_43065 = cljs.core.PersistentVector.EMPTY;
                      var state_43080__$1 = state_43080;
                      var statearr_43082_43091 = state_43080__$1;
                      statearr_43082_43091[2] = inst_43065;
                      statearr_43082_43091[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_43081 === 3) {
                        var inst_43061 = cljs.core.PersistentVector.EMPTY;
                        var inst_43062 = m.arr;
                        var inst_43063 = cljs.core.into.call(null, inst_43061, inst_43062);
                        var state_43080__$1 = state_43080;
                        var statearr_43083_43092 = state_43080__$1;
                        statearr_43083_43092[2] = inst_43063;
                        statearr_43083_43092[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_43081 === 2) {
                          var inst_43070 = state_43080[2];
                          var inst_43071 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "about to route");
                          var inst_43072 = routing.routea.call(null, pubsub.rrsa, pubsub.pchannel, pubsub.sch);
                          var inst_43073 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "done routing", pubsub.order);
                          var state_43080__$1 = function() {
                            var statearr_43084 = state_43080;
                            statearr_43084[5] = inst_43070;
                            statearr_43084[6] = inst_43073;
                            statearr_43084[7] = inst_43071;
                            statearr_43084[8] = inst_43072;
                            return statearr_43084;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_43080__$1, 7, pubsub.pchannel);
                        } else {
                          if (state_val_43081 === 1) {
                            var inst_43052 = logger.og.call(null, new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), typ, m);
                            var inst_43053 = cljs.core.async.chan.call(null, 1);
                            var inst_43054 = pubsub.pchannel = inst_43053;
                            var inst_43055 = cljs.core.async.chan.call(null, 1);
                            var inst_43056 = pubsub.sch = inst_43055;
                            var inst_43057 = pubsub.pchannel["typ"] = typ;
                            var state_43080__$1 = function() {
                              var statearr_43085 = state_43080;
                              statearr_43085[9] = inst_43052;
                              statearr_43085[10] = inst_43056;
                              statearr_43085[11] = inst_43057;
                              statearr_43085[12] = inst_43054;
                              return statearr_43085;
                            }();
                            if (cljs.core.truth_(m)) {
                              var statearr_43086_43093 = state_43080__$1;
                              statearr_43086_43093[1] = 3;
                            } else {
                              var statearr_43087_43094 = state_43080__$1;
                              statearr_43087_43094[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_43089 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_43089[0] = state_machine__6577__auto__;
                statearr_43089[1] = 1;
                return statearr_43089;
              };
              var state_machine__6577__auto____1 = function(state_43080) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_43080);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_43080) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_43080);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_43090 = f__6621__auto__.call(null);
          statearr_43090[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_43090;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var sia = function(typ, var_args) {
    var m = null;
    if (arguments.length > 1) {
      var G__43095__i = 0, G__43095__a = new Array(arguments.length - 1);
      while (G__43095__i < G__43095__a.length) {
        G__43095__a[G__43095__i] = arguments[G__43095__i + 1];
        ++G__43095__i;
      }
      m = new cljs.core.IndexedSeq(G__43095__a, 0);
    }
    return sia__delegate.call(this, typ, m);
  };
  sia.cljs$lang$maxFixedArity = 1;
  sia.cljs$lang$applyTo = function(arglist__43096) {
    var typ = cljs.core.first(arglist__43096);
    var m = cljs.core.rest(arglist__43096);
    return sia__delegate(typ, m);
  };
  sia.cljs$core$IFn$_invoke$arity$variadic = sia__delegate;
  return sia;
}();
pubsub.asia = function() {
  var asia__delegate = function(typ, m) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_43154) {
              var state_val_43155 = state_43154[1];
              if (state_val_43155 === 5) {
                var inst_43146 = state_43154[2];
                var inst_43147 = {"typ":typ, "msg":inst_43146};
                var state_43154__$1 = state_43154;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_43154__$1, 2, pubsub.sch, inst_43147);
              } else {
                if (state_val_43155 === 4) {
                  var inst_43144 = cljs.core.PersistentVector.EMPTY;
                  var state_43154__$1 = state_43154;
                  var statearr_43156_43165 = state_43154__$1;
                  statearr_43156_43165[2] = inst_43144;
                  statearr_43156_43165[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_43155 === 3) {
                    var inst_43140 = cljs.core.PersistentVector.EMPTY;
                    var inst_43141 = m.arr;
                    var inst_43142 = cljs.core.into.call(null, inst_43140, inst_43141);
                    var state_43154__$1 = state_43154;
                    var statearr_43157_43166 = state_43154__$1;
                    statearr_43157_43166[2] = inst_43142;
                    statearr_43157_43166[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_43155 === 2) {
                      var inst_43149 = state_43154[2];
                      var inst_43150 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "about to route");
                      var inst_43151 = routing.routea.call(null, pubsub.arrsa, pubsub.pchannel, pubsub.sch);
                      var inst_43152 = logger.og.call(null, new cljs.core.Keyword(null, "send", "send", -652151114), "done routing", pubsub.order);
                      var state_43154__$1 = function() {
                        var statearr_43158 = state_43154;
                        statearr_43158[5] = inst_43150;
                        statearr_43158[6] = inst_43149;
                        statearr_43158[7] = inst_43151;
                        return statearr_43158;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_43154__$1, inst_43152);
                    } else {
                      if (state_val_43155 === 1) {
                        var inst_43131 = logger.og.call(null, new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), typ, m);
                        var inst_43132 = cljs.core.async.chan.call(null, 1);
                        var inst_43133 = pubsub.pchannel = inst_43132;
                        var inst_43134 = cljs.core.async.chan.call(null, 1);
                        var inst_43135 = pubsub.sch = inst_43134;
                        var inst_43136 = pubsub.pchannel["typ"] = typ;
                        var state_43154__$1 = function() {
                          var statearr_43159 = state_43154;
                          statearr_43159[8] = inst_43131;
                          statearr_43159[9] = inst_43135;
                          statearr_43159[10] = inst_43133;
                          statearr_43159[11] = inst_43136;
                          return statearr_43159;
                        }();
                        if (cljs.core.truth_(m)) {
                          var statearr_43160_43167 = state_43154__$1;
                          statearr_43160_43167[1] = 3;
                        } else {
                          var statearr_43161_43168 = state_43154__$1;
                          statearr_43161_43168[1] = 4;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_43163 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_43163[0] = state_machine__6577__auto__;
                statearr_43163[1] = 1;
                return statearr_43163;
              };
              var state_machine__6577__auto____1 = function(state_43154) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_43154);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_43154) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_43154);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_43164 = f__6621__auto__.call(null);
          statearr_43164[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_43164;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  };
  var asia = function(typ, var_args) {
    var m = null;
    if (arguments.length > 1) {
      var G__43169__i = 0, G__43169__a = new Array(arguments.length - 1);
      while (G__43169__i < G__43169__a.length) {
        G__43169__a[G__43169__i] = arguments[G__43169__i + 1];
        ++G__43169__i;
      }
      m = new cljs.core.IndexedSeq(G__43169__a, 0);
    }
    return asia__delegate.call(this, typ, m);
  };
  asia.cljs$lang$maxFixedArity = 1;
  asia.cljs$lang$applyTo = function(arglist__43170) {
    var typ = cljs.core.first(arglist__43170);
    var m = cljs.core.rest(arglist__43170);
    return asia__delegate(typ, m);
  };
  asia.cljs$core$IFn$_invoke$arity$variadic = asia__delegate;
  return asia;
}();
goog.provide("mockdatabasew");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("pubsub");
mockdatabasew.states = function() {
  var obj45167 = {};
  return obj45167;
}();
mockdatabasew.cleandb = function cleandb() {
  logger.og.call(null, new cljs.core.Keyword(null, "cleandb", "cleandb", -510162900), "cleandb ", mockdatabasew.mdbase);
  mockdatabasew.states = function() {
    var obj45177 = {};
    return obj45177;
  }();
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45179) {
            var state_val_45180 = state_45179[1];
            if (state_val_45180 === 1) {
              var state_45179__$1 = state_45179;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45179__$1, 1);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45182 = [null, null, null, null, null];
              statearr_45182[0] = state_machine__6577__auto__;
              statearr_45182[1] = 1;
              return statearr_45182;
            };
            var state_machine__6577__auto____1 = function(state_45179) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45179);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45179) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45179);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45183 = f__6621__auto__.call(null);
        statearr_45183[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45183;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.dumpdb = function dumpdb() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45194) {
            var state_val_45195 = state_45194[1];
            if (state_val_45195 === 1) {
              var inst_45192 = logger.og.call(null, new cljs.core.Keyword(null, "dumpdb", "dumpdb", 1809492694), "dbase ", mockdatabasew.states);
              var state_45194__$1 = function() {
                var statearr_45196 = state_45194;
                statearr_45196[5] = inst_45192;
                return statearr_45196;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45194__$1, 1);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45198 = [null, null, null, null, null, null];
              statearr_45198[0] = state_machine__6577__auto__;
              statearr_45198[1] = 1;
              return statearr_45198;
            };
            var state_machine__6577__auto____1 = function(state_45194) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45194);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45194) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45194);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45199 = f__6621__auto__.call(null);
        statearr_45199[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45199;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.g = function g(k) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45209) {
            var state_val_45210 = state_45209[1];
            if (state_val_45210 === 1) {
              var inst_45207 = m.g.call(null, k);
              var state_45209__$1 = state_45209;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45209__$1, inst_45207);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45212 = [null, null, null, null, null];
              statearr_45212[0] = state_machine__6577__auto__;
              statearr_45212[1] = 1;
              return statearr_45212;
            };
            var state_machine__6577__auto____1 = function(state_45209) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45209);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45209) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45209);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45213 = f__6621__auto__.call(null);
        statearr_45213[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45213;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.update = function update(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45223) {
            var state_val_45224 = state_45223[1];
            if (state_val_45224 === 1) {
              var inst_45221 = m.update.call(null, k, v);
              var state_45223__$1 = state_45223;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45223__$1, inst_45221);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45226 = [null, null, null, null, null];
              statearr_45226[0] = state_machine__6577__auto__;
              statearr_45226[1] = 1;
              return statearr_45226;
            };
            var state_machine__6577__auto____1 = function(state_45223) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45223);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45223) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45223);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45227 = f__6621__auto__.call(null);
        statearr_45227[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45227;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.p = function p(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45237) {
            var state_val_45238 = state_45237[1];
            if (state_val_45238 === 1) {
              var inst_45235 = m.p.call(null, k, v);
              var state_45237__$1 = state_45237;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45237__$1, inst_45235);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45240 = [null, null, null, null, null];
              statearr_45240[0] = state_machine__6577__auto__;
              statearr_45240[1] = 1;
              return statearr_45240;
            };
            var state_machine__6577__auto____1 = function(state_45237) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45237);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45237) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45237);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45241 = f__6621__auto__.call(null);
        statearr_45241[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45241;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.ps = function ps(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45251) {
            var state_val_45252 = state_45251[1];
            if (state_val_45252 === 1) {
              var inst_45249 = m.ps.call(null, k, v);
              var state_45251__$1 = state_45251;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45251__$1, inst_45249);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45254 = [null, null, null, null, null];
              statearr_45254[0] = state_machine__6577__auto__;
              statearr_45254[1] = 1;
              return statearr_45254;
            };
            var state_machine__6577__auto____1 = function(state_45251) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45251);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45251) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45251);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45255 = f__6621__auto__.call(null);
        statearr_45255[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45255;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.reg = function reg(typ, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45294) {
            var state_val_45295 = state_45294[1];
            if (state_val_45295 === 7) {
              var inst_45290 = state_45294[2];
              var state_45294__$1 = state_45294;
              var statearr_45296_45308 = state_45294__$1;
              statearr_45296_45308[2] = inst_45290;
              statearr_45296_45308[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_45295 === 6) {
                var state_45294__$1 = state_45294;
                var statearr_45297_45309 = state_45294__$1;
                statearr_45297_45309[2] = 0;
                statearr_45297_45309[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_45295 === 5) {
                  var inst_45287 = mockdatabasew.states[typ];
                  var state_45294__$1 = state_45294;
                  var statearr_45298_45310 = state_45294__$1;
                  statearr_45298_45310[2] = inst_45287;
                  statearr_45298_45310[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_45295 === 4) {
                    var inst_45292 = state_45294[2];
                    var state_45294__$1 = state_45294;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45294__$1, inst_45292);
                  } else {
                    if (state_val_45295 === 3) {
                      var inst_45285 = mockdatabasew.states[typ];
                      var state_45294__$1 = state_45294;
                      if (cljs.core.truth_(inst_45285)) {
                        var statearr_45299_45311 = state_45294__$1;
                        statearr_45299_45311[1] = 5;
                      } else {
                        var statearr_45300_45312 = state_45294__$1;
                        statearr_45300_45312[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_45295 === 2) {
                        var inst_45283 = mockdatabasew.states[typ] = v;
                        var state_45294__$1 = function() {
                          var statearr_45301 = state_45294;
                          statearr_45301[5] = inst_45283;
                          return statearr_45301;
                        }();
                        var statearr_45302_45313 = state_45294__$1;
                        statearr_45302_45313[2] = v;
                        statearr_45302_45313[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_45295 === 1) {
                          var state_45294__$1 = state_45294;
                          if (cljs.core.truth_(v)) {
                            var statearr_45303_45314 = state_45294__$1;
                            statearr_45303_45314[1] = 2;
                          } else {
                            var statearr_45304_45315 = state_45294__$1;
                            statearr_45304_45315[1] = 3;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45306 = [null, null, null, null, null, null];
              statearr_45306[0] = state_machine__6577__auto__;
              statearr_45306[1] = 1;
              return statearr_45306;
            };
            var state_machine__6577__auto____1 = function(state_45294) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45294);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45294) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45294);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45307 = f__6621__auto__.call(null);
        statearr_45307[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45307;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.fixture1 = function fixture1() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45439) {
            var state_val_45440 = state_45439[1];
            if (state_val_45440 === 7) {
              var inst_45416 = state_45439[2];
              var inst_45417 = cljs.core.PersistentVector.EMPTY;
              var inst_45418 = {"header":0, "hash":inst_45416, "transactions":inst_45417};
              var inst_45419 = mockdatabasew.blck2 = inst_45418;
              var inst_45422 = pubsub.sia.call(null, "hash", 3);
              var state_45439__$1 = function() {
                var statearr_45441 = state_45439;
                statearr_45441[5] = inst_45419;
                return statearr_45441;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 8, inst_45422);
            } else {
              if (state_val_45440 === 1) {
                var inst_45387 = {"root":"somehash", "nonce":"somenonce", "newhash":"found"};
                var inst_45388 = mockdatabasew.fwork = inst_45387;
                var inst_45389 = pubsub.sia.call(null, "initdb");
                var state_45439__$1 = function() {
                  var statearr_45442 = state_45439;
                  statearr_45442[6] = inst_45388;
                  return statearr_45442;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 2, inst_45389);
              } else {
                if (state_val_45440 === 4) {
                  var inst_45401 = state_45439[2];
                  var inst_45402 = cljs.core.PersistentVector.EMPTY;
                  var inst_45403 = {"header":0, "hash":inst_45401, "transactions":inst_45402};
                  var inst_45404 = mockdatabasew.blck1 = inst_45403;
                  var inst_45405 = pubsub.sia.call(null, "saveBlock", mockdatabasew.blck1);
                  var state_45439__$1 = function() {
                    var statearr_45443 = state_45439;
                    statearr_45443[7] = inst_45404;
                    return statearr_45443;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 5, inst_45405);
                } else {
                  if (state_val_45440 === 6) {
                    var inst_45410 = state_45439[2];
                    var inst_45411 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_45410);
                    var inst_45414 = pubsub.sia.call(null, "hash", 2);
                    var state_45439__$1 = function() {
                      var statearr_45444 = state_45439;
                      statearr_45444[8] = inst_45411;
                      return statearr_45444;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 7, inst_45414);
                  } else {
                    if (state_val_45440 === 3) {
                      var inst_45395 = state_45439[2];
                      var inst_45396 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_45395);
                      var inst_45399 = pubsub.sia.call(null, "hash", 1);
                      var state_45439__$1 = function() {
                        var statearr_45445 = state_45439;
                        statearr_45445[9] = inst_45396;
                        return statearr_45445;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 4, inst_45399);
                    } else {
                      if (state_val_45440 === 2) {
                        var inst_45391 = state_45439[2];
                        var inst_45392 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_45391);
                        var inst_45393 = pubsub.sia.call(null, "dumpdb");
                        var state_45439__$1 = function() {
                          var statearr_45446 = state_45439;
                          statearr_45446[10] = inst_45392;
                          return statearr_45446;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 3, inst_45393);
                      } else {
                        if (state_val_45440 === 11) {
                          var inst_45436 = state_45439[2];
                          var inst_45437 = logger.og.call(null, new cljs.core.Keyword(null, "main", "main", -2117802661), "0\x3d", inst_45436);
                          var state_45439__$1 = state_45439;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45439__$1, inst_45437);
                        } else {
                          if (state_val_45440 === 9) {
                            var inst_45430 = state_45439[2];
                            var inst_45431 = pubsub.sia.call(null, "saveBlock", mockdatabasew.blck3);
                            var state_45439__$1 = function() {
                              var statearr_45447 = state_45439;
                              statearr_45447[11] = inst_45430;
                              return statearr_45447;
                            }();
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 10, inst_45431);
                          } else {
                            if (state_val_45440 === 5) {
                              var inst_45407 = state_45439[2];
                              var inst_45408 = pubsub.sia.call(null, "dumpdb");
                              var state_45439__$1 = function() {
                                var statearr_45448 = state_45439;
                                statearr_45448[12] = inst_45407;
                                return statearr_45448;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 6, inst_45408);
                            } else {
                              if (state_val_45440 === 10) {
                                var inst_45433 = state_45439[2];
                                var inst_45434 = pubsub.sia.call(null, "dumpdb");
                                var state_45439__$1 = function() {
                                  var statearr_45449 = state_45439;
                                  statearr_45449[13] = inst_45433;
                                  return statearr_45449;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 11, inst_45434);
                              } else {
                                if (state_val_45440 === 8) {
                                  var inst_45424 = state_45439[2];
                                  var inst_45425 = cljs.core.PersistentVector.EMPTY;
                                  var inst_45426 = {"header":0, "hash":inst_45424, "transactions":inst_45425};
                                  var inst_45427 = mockdatabasew.blck3 = inst_45426;
                                  var inst_45428 = pubsub.sia.call(null, "saveBlock", mockdatabasew.blck2);
                                  var state_45439__$1 = function() {
                                    var statearr_45450 = state_45439;
                                    statearr_45450[14] = inst_45427;
                                    return statearr_45450;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45439__$1, 9, inst_45428);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45452 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_45452[0] = state_machine__6577__auto__;
              statearr_45452[1] = 1;
              return statearr_45452;
            };
            var state_machine__6577__auto____1 = function(state_45439) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45439);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45439) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45439);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45453 = f__6621__auto__.call(null);
        statearr_45453[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45453;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
mockdatabasew.initDBase = function initDBase(x) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45551) {
            var state_val_45552 = state_45551[1];
            if (state_val_45552 === 7) {
              var inst_45530 = state_45551[2];
              var inst_45531 = cljs.core.PersistentVector.EMPTY;
              var inst_45532 = {"header":0, "hash":inst_45530, "transactions":inst_45531};
              var inst_45533 = mockdatabasew.blck = inst_45532;
              var inst_45534 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "saving ", mockdatabasew.blck);
              var inst_45535 = mockdatabasew.blck.header;
              var inst_45536 = inst_45535.heightFromRoot = 0;
              var inst_45537 = pubsub.sia.call(null, "db", "last", mockdatabasew.blck);
              var state_45551__$1 = function() {
                var statearr_45553 = state_45551;
                statearr_45553[5] = inst_45534;
                statearr_45553[6] = inst_45536;
                statearr_45553[7] = inst_45533;
                return statearr_45553;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45551__$1, 8, inst_45537);
            } else {
              if (state_val_45552 === 1) {
                var inst_45511 = logger.og.call(null, new cljs.core.Keyword(null, "initdbwraper2", "initdbwraper2", 161886543), "wrapper", x);
                var inst_45512 = cljs.core.async.chan.call(null);
                var inst_45513 = pubsub.sia.call(null, "db", "last");
                var state_45551__$1 = function() {
                  var statearr_45554 = state_45551;
                  statearr_45554[8] = inst_45512;
                  statearr_45554[9] = inst_45511;
                  return statearr_45554;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45551__$1, 2, inst_45513);
              } else {
                if (state_val_45552 === 4) {
                  var inst_45522 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "nothing in database");
                  var inst_45523 = pubsub.sia.call(null, "db", "height", 0);
                  var state_45551__$1 = function() {
                    var statearr_45555 = state_45551;
                    statearr_45555[10] = inst_45522;
                    return statearr_45555;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45551__$1, 6, inst_45523);
                } else {
                  if (state_val_45552 === 6) {
                    var inst_45525 = state_45551[2];
                    var inst_45528 = pubsub.sia.call(null, "hash", 0);
                    var state_45551__$1 = function() {
                      var statearr_45556 = state_45551;
                      statearr_45556[11] = inst_45525;
                      return statearr_45556;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45551__$1, 7, inst_45528);
                  } else {
                    if (state_val_45552 === 3) {
                      var inst_45520 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database is ", mockdatabasew.lastone);
                      var state_45551__$1 = state_45551;
                      var statearr_45557_45568 = state_45551__$1;
                      statearr_45557_45568[2] = inst_45520;
                      statearr_45557_45568[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_45552 === 2) {
                        var inst_45515 = state_45551[2];
                        var inst_45516 = mockdatabasew.lastone = inst_45515;
                        var inst_45517 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "about to init");
                        var inst_45518 = logger.og.call(null, new cljs.core.Keyword(null, "initDBase", "initDBase", -1070074220), "last one from database ", mockdatabasew.lastone);
                        var state_45551__$1 = function() {
                          var statearr_45558 = state_45551;
                          statearr_45558[12] = inst_45518;
                          statearr_45558[13] = inst_45516;
                          statearr_45558[14] = inst_45517;
                          return statearr_45558;
                        }();
                        var statearr_45560_45569 = state_45551__$1;
                        statearr_45560_45569[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_45552 === 9) {
                          var inst_45543 = state_45551[2];
                          var inst_45544 = "b" + 0;
                          var inst_45545 = pubsub.sia.call(null, "db", inst_45544, mockdatabasew.blck);
                          var state_45551__$1 = function() {
                            var statearr_45561 = state_45551;
                            statearr_45561[15] = inst_45543;
                            return statearr_45561;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45551__$1, 10, inst_45545);
                        } else {
                          if (state_val_45552 === 5) {
                            var inst_45549 = state_45551[2];
                            var state_45551__$1 = function() {
                              var statearr_45562 = state_45551;
                              statearr_45562[16] = inst_45549;
                              return statearr_45562;
                            }();
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45551__$1, 1);
                          } else {
                            if (state_val_45552 === 10) {
                              var inst_45547 = state_45551[2];
                              var state_45551__$1 = state_45551;
                              var statearr_45563_45570 = state_45551__$1;
                              statearr_45563_45570[2] = inst_45547;
                              statearr_45563_45570[1] = 5;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_45552 === 8) {
                                var inst_45539 = state_45551[2];
                                var inst_45540 = mockdatabasew.blck.hash;
                                var inst_45541 = pubsub.sia.call(null, "db", inst_45540, mockdatabasew.blck);
                                var state_45551__$1 = function() {
                                  var statearr_45564 = state_45551;
                                  statearr_45564[17] = inst_45539;
                                  return statearr_45564;
                                }();
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45551__$1, 9, inst_45541);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45566 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_45566[0] = state_machine__6577__auto__;
              statearr_45566[1] = 1;
              return statearr_45566;
            };
            var state_machine__6577__auto____1 = function(state_45551) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45551);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45551) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45551);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45567 = f__6621__auto__.call(null);
        statearr_45567[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45567;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("pouchDB");
goog.require("cljs.core");
pouchDB.flushdb = cljs.core.PersistentVector.EMPTY;
pouchDB.dumpdb = cljs.core.PersistentVector.EMPTY;
pouchDB.dbase = function() {
  var obj18100 = {};
  return obj18100;
}();
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj25122 = {};
  return obj25122;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3969__auto__ = reader;
    if (and__3969__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4625__auto__ = reader == null ? null : reader;
    return function() {
      var or__3981__auto__ = cljs.reader.read_char[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.read_char["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3969__auto__ = reader;
    if (and__3969__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4625__auto__ = reader == null ? null : reader;
    return function() {
      var or__3981__auto__ = cljs.reader.unread[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.unread["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3981__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__25123__i = 0, G__25123__a = new Array(arguments.length - 1);
      while (G__25123__i < G__25123__a.length) {
        G__25123__a[G__25123__i] = arguments[G__25123__i + 1];
        ++G__25123__i;
      }
      msg = new cljs.core.IndexedSeq(G__25123__a, 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__25124) {
    var rdr = cljs.core.first(arglist__25124);
    var msg = cljs.core.rest(arglist__25124);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3969__auto__ = !(ch === "#");
  if (and__3969__auto__) {
    var and__3969__auto____$1 = !(ch === "'");
    if (and__3969__auto____$1) {
      var and__3969__auto____$2 = !(ch === ":");
      if (and__3969__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3969__auto____$2;
      }
    } else {
      return and__3969__auto____$1;
    }
  } else {
    return and__3969__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__25125 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__25126 = cljs.reader.read_char.call(null, rdr);
      sb = G__25125;
      ch = G__25126;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__25127 = cljs.reader.read_char.call(null, rdr);
      ch = G__25127;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__25128 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__25128;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__25129 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__25129;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = ch == null;
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3981__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__25130 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__25131 = cljs.reader.read_char.call(null, reader);
      buffer = G__25130;
      ch = G__25131;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__25132 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__25133 = cljs.reader.read_char.call(null, reader);
        buffer = G__25132;
        ch = G__25133;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__25134 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__25135 = cljs.reader.read_char.call(null, reader);
          buffer = G__25134;
          ch = G__25135;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__25140 = function() {
            var G__25138 = buffer;
            G__25138.append(nch);
            return G__25138;
          }();
          var G__25141 = cljs.reader.read_char.call(null, reader);
          buffer = G__25140;
          ch = G__25141;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__25142 = function() {
            var G__25139 = buffer;
            G__25139.append(ch);
            return G__25139;
          }();
          var G__25143 = cljs.reader.read_char.call(null, reader);
          buffer = G__25142;
          ch = G__25143;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(token.length === 1);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__25145 = o;
    if (G__25145) {
      var bit__4662__auto__ = G__25145.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4662__auto__ || G__25145.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__25145.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__25145);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__25145);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__25146 = reader;
        var G__25147 = eof_is_error;
        var G__25148 = sentinel;
        var G__25149 = is_recursive;
        reader = G__25146;
        eof_is_error = G__25147;
        sentinel = G__25148;
        is_recursive = G__25149;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__25150 = cljs.reader.read_comment.call(null, reader, ch);
          var G__25151 = eof_is_error;
          var G__25152 = sentinel;
          var G__25153 = is_recursive;
          reader = G__25150;
          eof_is_error = G__25151;
          sentinel = G__25152;
          is_recursive = G__25153;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__25154 = reader;
            var G__25155 = eof_is_error;
            var G__25156 = sentinel;
            var G__25157 = is_recursive;
            reader = G__25154;
            eof_is_error = G__25155;
            sentinel = G__25156;
            is_recursive = G__25157;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__25158 = b.append("0");
          b = G__25158;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__25160 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__25160, 0, null);
  var years = cljs.core.nth.call(null, vec__25160, 1, null);
  var months = cljs.core.nth.call(null, vec__25160, 2, null);
  var days = cljs.core.nth.call(null, vec__25160, 3, null);
  var hours = cljs.core.nth.call(null, vec__25160, 4, null);
  var minutes = cljs.core.nth.call(null, vec__25160, 5, null);
  var seconds = cljs.core.nth.call(null, vec__25160, 6, null);
  var fraction = cljs.core.nth.call(null, vec__25160, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__25160, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__25160, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__25160, 10, null);
  var v = vec__25160;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__25162 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__25162, 0, null);
    var months = cljs.core.nth.call(null, vec__25162, 1, null);
    var days = cljs.core.nth.call(null, vec__25162, 2, null);
    var hours = cljs.core.nth.call(null, vec__25162, 3, null);
    var minutes = cljs.core.nth.call(null, vec__25162, 4, null);
    var seconds = cljs.core.nth.call(null, vec__25162, 5, null);
    var ms = cljs.core.nth.call(null, vec__25162, 6, null);
    var offset = cljs.core.nth.call(null, vec__25162, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__25175_25187 = cljs.core.seq.call(null, form);
    var chunk__25176_25188 = null;
    var count__25177_25189 = 0;
    var i__25178_25190 = 0;
    while (true) {
      if (i__25178_25190 < count__25177_25189) {
        var x_25191 = cljs.core._nth.call(null, chunk__25176_25188, i__25178_25190);
        arr.push(x_25191);
        var G__25192 = seq__25175_25187;
        var G__25193 = chunk__25176_25188;
        var G__25194 = count__25177_25189;
        var G__25195 = i__25178_25190 + 1;
        seq__25175_25187 = G__25192;
        chunk__25176_25188 = G__25193;
        count__25177_25189 = G__25194;
        i__25178_25190 = G__25195;
        continue;
      } else {
        var temp__4126__auto___25196 = cljs.core.seq.call(null, seq__25175_25187);
        if (temp__4126__auto___25196) {
          var seq__25175_25197__$1 = temp__4126__auto___25196;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__25175_25197__$1)) {
            var c__4768__auto___25198 = cljs.core.chunk_first.call(null, seq__25175_25197__$1);
            var G__25199 = cljs.core.chunk_rest.call(null, seq__25175_25197__$1);
            var G__25200 = c__4768__auto___25198;
            var G__25201 = cljs.core.count.call(null, c__4768__auto___25198);
            var G__25202 = 0;
            seq__25175_25187 = G__25199;
            chunk__25176_25188 = G__25200;
            count__25177_25189 = G__25201;
            i__25178_25190 = G__25202;
            continue;
          } else {
            var x_25203 = cljs.core.first.call(null, seq__25175_25197__$1);
            arr.push(x_25203);
            var G__25204 = cljs.core.next.call(null, seq__25175_25197__$1);
            var G__25205 = null;
            var G__25206 = 0;
            var G__25207 = 0;
            seq__25175_25187 = G__25204;
            chunk__25176_25188 = G__25205;
            count__25177_25189 = G__25206;
            i__25178_25190 = G__25207;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj25180 = {};
        return obj25180;
      }();
      var seq__25181_25208 = cljs.core.seq.call(null, form);
      var chunk__25182_25209 = null;
      var count__25183_25210 = 0;
      var i__25184_25211 = 0;
      while (true) {
        if (i__25184_25211 < count__25183_25210) {
          var vec__25185_25212 = cljs.core._nth.call(null, chunk__25182_25209, i__25184_25211);
          var k_25213 = cljs.core.nth.call(null, vec__25185_25212, 0, null);
          var v_25214 = cljs.core.nth.call(null, vec__25185_25212, 1, null);
          obj[cljs.core.name.call(null, k_25213)] = v_25214;
          var G__25215 = seq__25181_25208;
          var G__25216 = chunk__25182_25209;
          var G__25217 = count__25183_25210;
          var G__25218 = i__25184_25211 + 1;
          seq__25181_25208 = G__25215;
          chunk__25182_25209 = G__25216;
          count__25183_25210 = G__25217;
          i__25184_25211 = G__25218;
          continue;
        } else {
          var temp__4126__auto___25219 = cljs.core.seq.call(null, seq__25181_25208);
          if (temp__4126__auto___25219) {
            var seq__25181_25220__$1 = temp__4126__auto___25219;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__25181_25220__$1)) {
              var c__4768__auto___25221 = cljs.core.chunk_first.call(null, seq__25181_25220__$1);
              var G__25222 = cljs.core.chunk_rest.call(null, seq__25181_25220__$1);
              var G__25223 = c__4768__auto___25221;
              var G__25224 = cljs.core.count.call(null, c__4768__auto___25221);
              var G__25225 = 0;
              seq__25181_25208 = G__25222;
              chunk__25182_25209 = G__25223;
              count__25183_25210 = G__25224;
              i__25184_25211 = G__25225;
              continue;
            } else {
              var vec__25186_25226 = cljs.core.first.call(null, seq__25181_25220__$1);
              var k_25227 = cljs.core.nth.call(null, vec__25186_25226, 0, null);
              var v_25228 = cljs.core.nth.call(null, vec__25186_25226, 1, null);
              obj[cljs.core.name.call(null, k_25227)] = v_25228;
              var G__25229 = cljs.core.next.call(null, seq__25181_25220__$1);
              var G__25230 = null;
              var G__25231 = 0;
              var G__25232 = 0;
              seq__25181_25208 = G__25229;
              chunk__25182_25209 = G__25230;
              count__25183_25210 = G__25231;
              i__25184_25211 = G__25232;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("servant.worker");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.core.async");
servant.worker.worker_fn_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
servant.worker.register_servant_fn = function register_servant_fn(fn_name, f) {
  return cljs.core.swap_BANG_.call(null, servant.worker.worker_fn_map, cljs.core.assoc, cljs.core.keyword.call(null, fn_name), f);
};
servant.worker.run_function_name = function run_function_name(message_data) {
  var fn_key = cljs.reader.read_string.call(null, message_data["fn"]);
  var f = cljs.core.get.call(null, cljs.core.deref.call(null, servant.worker.worker_fn_map), fn_key);
  var args = message_data["args"];
  return cljs.core.apply.call(null, f, args);
};
servant.worker.post_array_buffer = function post_array_buffer(p__25110) {
  var vec__25112 = p__25110;
  var result = cljs.core.nth.call(null, vec__25112, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__25112, 1, null);
  return self.postMessage(result, cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.worker.decode_message = function decode_message(event) {
  var pred__25116 = cljs.core._EQ_;
  var expr__25117 = event.data["command"];
  if (cljs.core.truth_(pred__25116.call(null, "channel", expr__25117))) {
    return self.postMessage(servant.worker.run_function_name.call(null, event.data));
  } else {
    if (cljs.core.truth_(pred__25116.call(null, "channel-arraybuffer", expr__25117))) {
      return servant.worker.post_array_buffer.call(null, servant.worker.run_function_name.call(null, event.data));
    } else {
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__25117)].join(""));
    }
  }
};
servant.worker.bootstrap = function bootstrap() {
  return self.onmessage = servant.worker.decode_message;
};
goog.provide("servant.core");
goog.require("cljs.core");
goog.require("servant.worker");
goog.require("cljs.core.async");
servant.core.webworker_QMARK_ = function webworker_QMARK_() {
  return void 0 === self.document;
};
servant.core.not_webworker_QMARK_ = cljs.core.complement.call(null, servant.core.webworker_QMARK_);
servant.core.spawn_servants = function spawn_servants(worker_count, worker_script) {
  var servant_channel = cljs.core.async.chan.call(null, worker_count);
  var c__6622__auto___25385 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___25385, servant_channel) {
    return function() {
      var f__6623__auto__ = function() {
        var switch__6578__auto__ = function(c__6622__auto___25385, servant_channel) {
          return function(state_25356) {
            var state_val_25357 = state_25356[1];
            if (state_val_25357 === 7) {
              var inst_25316 = state_25356[5];
              var inst_25318 = state_25356[6];
              var inst_25319 = state_25356[7];
              var inst_25317 = state_25356[8];
              var inst_25327 = state_25356[2];
              var inst_25328 = inst_25319 + 1;
              var tmp25358 = inst_25316;
              var tmp25359 = inst_25318;
              var tmp25360 = inst_25317;
              var inst_25316__$1 = tmp25358;
              var inst_25317__$1 = tmp25360;
              var inst_25318__$1 = tmp25359;
              var inst_25319__$1 = inst_25328;
              var state_25356__$1 = function() {
                var statearr_25361 = state_25356;
                statearr_25361[5] = inst_25316__$1;
                statearr_25361[6] = inst_25318__$1;
                statearr_25361[7] = inst_25319__$1;
                statearr_25361[8] = inst_25317__$1;
                statearr_25361[9] = inst_25327;
                return statearr_25361;
              }();
              var statearr_25362_25386 = state_25356__$1;
              statearr_25362_25386[2] = null;
              statearr_25362_25386[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_25357 === 1) {
                var inst_25314 = cljs.core.range.call(null, worker_count);
                var inst_25315 = cljs.core.seq.call(null, inst_25314);
                var inst_25316 = inst_25315;
                var inst_25317 = null;
                var inst_25318 = 0;
                var inst_25319 = 0;
                var state_25356__$1 = function() {
                  var statearr_25363 = state_25356;
                  statearr_25363[5] = inst_25316;
                  statearr_25363[6] = inst_25318;
                  statearr_25363[7] = inst_25319;
                  statearr_25363[8] = inst_25317;
                  return statearr_25363;
                }();
                var statearr_25364_25387 = state_25356__$1;
                statearr_25364_25387[2] = null;
                statearr_25364_25387[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25357 === 4) {
                  var inst_25319 = state_25356[7];
                  var inst_25317 = state_25356[8];
                  var inst_25324 = cljs.core._nth.call(null, inst_25317, inst_25319);
                  var inst_25325 = new Worker(worker_script);
                  var state_25356__$1 = function() {
                    var statearr_25365 = state_25356;
                    statearr_25365[10] = inst_25324;
                    return statearr_25365;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25356__$1, 7, servant_channel, inst_25325);
                } else {
                  if (state_val_25357 === 13) {
                    var inst_25347 = state_25356[2];
                    var state_25356__$1 = state_25356;
                    var statearr_25366_25388 = state_25356__$1;
                    statearr_25366_25388[2] = inst_25347;
                    statearr_25366_25388[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25357 === 6) {
                      var inst_25352 = state_25356[2];
                      var state_25356__$1 = state_25356;
                      var statearr_25367_25389 = state_25356__$1;
                      statearr_25367_25389[2] = inst_25352;
                      statearr_25367_25389[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25357 === 3) {
                        var inst_25354 = state_25356[2];
                        var state_25356__$1 = state_25356;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25356__$1, inst_25354);
                      } else {
                        if (state_val_25357 === 12) {
                          var inst_25331 = state_25356[11];
                          var inst_25340 = cljs.core.first.call(null, inst_25331);
                          var inst_25341 = new Worker(worker_script);
                          var state_25356__$1 = function() {
                            var statearr_25368 = state_25356;
                            statearr_25368[12] = inst_25340;
                            return statearr_25368;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25356__$1, 14, servant_channel, inst_25341);
                        } else {
                          if (state_val_25357 === 2) {
                            var inst_25318 = state_25356[6];
                            var inst_25319 = state_25356[7];
                            var inst_25321 = inst_25319 < inst_25318;
                            var inst_25322 = inst_25321;
                            var state_25356__$1 = state_25356;
                            if (cljs.core.truth_(inst_25322)) {
                              var statearr_25369_25390 = state_25356__$1;
                              statearr_25369_25390[1] = 4;
                            } else {
                              var statearr_25370_25391 = state_25356__$1;
                              statearr_25370_25391[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25357 === 11) {
                              var inst_25331 = state_25356[11];
                              var inst_25335 = cljs.core.chunk_first.call(null, inst_25331);
                              var inst_25336 = cljs.core.chunk_rest.call(null, inst_25331);
                              var inst_25337 = cljs.core.count.call(null, inst_25335);
                              var inst_25316 = inst_25336;
                              var inst_25317 = inst_25335;
                              var inst_25318 = inst_25337;
                              var inst_25319 = 0;
                              var state_25356__$1 = function() {
                                var statearr_25371 = state_25356;
                                statearr_25371[5] = inst_25316;
                                statearr_25371[6] = inst_25318;
                                statearr_25371[7] = inst_25319;
                                statearr_25371[8] = inst_25317;
                                return statearr_25371;
                              }();
                              var statearr_25372_25392 = state_25356__$1;
                              statearr_25372_25392[2] = null;
                              statearr_25372_25392[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_25357 === 9) {
                                var state_25356__$1 = state_25356;
                                var statearr_25373_25393 = state_25356__$1;
                                statearr_25373_25393[2] = null;
                                statearr_25373_25393[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25357 === 5) {
                                  var inst_25316 = state_25356[5];
                                  var inst_25331 = state_25356[11];
                                  var inst_25331__$1 = cljs.core.seq.call(null, inst_25316);
                                  var state_25356__$1 = function() {
                                    var statearr_25374 = state_25356;
                                    statearr_25374[11] = inst_25331__$1;
                                    return statearr_25374;
                                  }();
                                  if (inst_25331__$1) {
                                    var statearr_25375_25394 = state_25356__$1;
                                    statearr_25375_25394[1] = 8;
                                  } else {
                                    var statearr_25376_25395 = state_25356__$1;
                                    statearr_25376_25395[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25357 === 14) {
                                    var inst_25331 = state_25356[11];
                                    var inst_25343 = state_25356[2];
                                    var inst_25344 = cljs.core.next.call(null, inst_25331);
                                    var inst_25316 = inst_25344;
                                    var inst_25317 = null;
                                    var inst_25318 = 0;
                                    var inst_25319 = 0;
                                    var state_25356__$1 = function() {
                                      var statearr_25377 = state_25356;
                                      statearr_25377[13] = inst_25343;
                                      statearr_25377[5] = inst_25316;
                                      statearr_25377[6] = inst_25318;
                                      statearr_25377[7] = inst_25319;
                                      statearr_25377[8] = inst_25317;
                                      return statearr_25377;
                                    }();
                                    var statearr_25378_25396 = state_25356__$1;
                                    statearr_25378_25396[2] = null;
                                    statearr_25378_25396[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_25357 === 10) {
                                      var inst_25350 = state_25356[2];
                                      var state_25356__$1 = state_25356;
                                      var statearr_25379_25397 = state_25356__$1;
                                      statearr_25379_25397[2] = inst_25350;
                                      statearr_25379_25397[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_25357 === 8) {
                                        var inst_25331 = state_25356[11];
                                        var inst_25333 = cljs.core.chunked_seq_QMARK_.call(null, inst_25331);
                                        var state_25356__$1 = state_25356;
                                        if (inst_25333) {
                                          var statearr_25380_25398 = state_25356__$1;
                                          statearr_25380_25398[1] = 11;
                                        } else {
                                          var statearr_25381_25399 = state_25356__$1;
                                          statearr_25381_25399[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6622__auto___25385, servant_channel);
        return function(switch__6578__auto__, c__6622__auto___25385, servant_channel) {
          return function() {
            var state_machine__6579__auto__ = null;
            var state_machine__6579__auto____0 = function() {
              var statearr_25383 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_25383[0] = state_machine__6579__auto__;
              statearr_25383[1] = 1;
              return statearr_25383;
            };
            var state_machine__6579__auto____1 = function(state_25356) {
              while (true) {
                var result__6580__auto__ = switch__6578__auto__.call(null, state_25356);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6580__auto__;
                }
                break;
              }
            };
            state_machine__6579__auto__ = function(state_25356) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6579__auto____0.call(this);
                case 1:
                  return state_machine__6579__auto____1.call(this, state_25356);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
            return state_machine__6579__auto__;
          }();
        }(switch__6578__auto__, c__6622__auto___25385, servant_channel);
      }();
      var state__6624__auto__ = function() {
        var statearr_25384 = f__6623__auto__.call(null);
        statearr_25384[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___25385;
        return statearr_25384;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
    };
  }(c__6622__auto___25385, servant_channel));
  return servant_channel;
};
servant.core.kill_servants = function kill_servants(servant_channel, worker_count) {
  var c__6622__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto__) {
    return function() {
      var f__6623__auto__ = function() {
        var switch__6578__auto__ = function(c__6622__auto__) {
          return function(state_25521) {
            var state_val_25522 = state_25521[1];
            if (state_val_25522 === 7) {
              var inst_25482 = state_25521[5];
              var inst_25483 = state_25521[6];
              var inst_25484 = state_25521[7];
              var inst_25481 = state_25521[8];
              var inst_25491 = state_25521[2];
              var inst_25492 = inst_25491.terminate();
              var inst_25493 = inst_25484 + 1;
              var tmp25523 = inst_25482;
              var tmp25524 = inst_25483;
              var tmp25525 = inst_25481;
              var inst_25481__$1 = tmp25525;
              var inst_25482__$1 = tmp25523;
              var inst_25483__$1 = tmp25524;
              var inst_25484__$1 = inst_25493;
              var state_25521__$1 = function() {
                var statearr_25526 = state_25521;
                statearr_25526[5] = inst_25482__$1;
                statearr_25526[6] = inst_25483__$1;
                statearr_25526[9] = inst_25492;
                statearr_25526[7] = inst_25484__$1;
                statearr_25526[8] = inst_25481__$1;
                return statearr_25526;
              }();
              var statearr_25527_25550 = state_25521__$1;
              statearr_25527_25550[2] = null;
              statearr_25527_25550[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_25522 === 1) {
                var inst_25479 = cljs.core.range.call(null, worker_count);
                var inst_25480 = cljs.core.seq.call(null, inst_25479);
                var inst_25481 = inst_25480;
                var inst_25482 = null;
                var inst_25483 = 0;
                var inst_25484 = 0;
                var state_25521__$1 = function() {
                  var statearr_25528 = state_25521;
                  statearr_25528[5] = inst_25482;
                  statearr_25528[6] = inst_25483;
                  statearr_25528[7] = inst_25484;
                  statearr_25528[8] = inst_25481;
                  return statearr_25528;
                }();
                var statearr_25529_25551 = state_25521__$1;
                statearr_25529_25551[2] = null;
                statearr_25529_25551[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25522 === 4) {
                  var inst_25482 = state_25521[5];
                  var inst_25484 = state_25521[7];
                  var inst_25489 = cljs.core._nth.call(null, inst_25482, inst_25484);
                  var state_25521__$1 = function() {
                    var statearr_25530 = state_25521;
                    statearr_25530[10] = inst_25489;
                    return statearr_25530;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25521__$1, 7, servant_channel);
                } else {
                  if (state_val_25522 === 13) {
                    var inst_25512 = state_25521[2];
                    var state_25521__$1 = state_25521;
                    var statearr_25531_25552 = state_25521__$1;
                    statearr_25531_25552[2] = inst_25512;
                    statearr_25531_25552[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25522 === 6) {
                      var inst_25517 = state_25521[2];
                      var state_25521__$1 = state_25521;
                      var statearr_25532_25553 = state_25521__$1;
                      statearr_25532_25553[2] = inst_25517;
                      statearr_25532_25553[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25522 === 3) {
                        var inst_25519 = state_25521[2];
                        var state_25521__$1 = state_25521;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25521__$1, inst_25519);
                      } else {
                        if (state_val_25522 === 12) {
                          var inst_25496 = state_25521[11];
                          var inst_25505 = cljs.core.first.call(null, inst_25496);
                          var state_25521__$1 = function() {
                            var statearr_25533 = state_25521;
                            statearr_25533[12] = inst_25505;
                            return statearr_25533;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25521__$1, 14, servant_channel);
                        } else {
                          if (state_val_25522 === 2) {
                            var inst_25483 = state_25521[6];
                            var inst_25484 = state_25521[7];
                            var inst_25486 = inst_25484 < inst_25483;
                            var inst_25487 = inst_25486;
                            var state_25521__$1 = state_25521;
                            if (cljs.core.truth_(inst_25487)) {
                              var statearr_25534_25554 = state_25521__$1;
                              statearr_25534_25554[1] = 4;
                            } else {
                              var statearr_25535_25555 = state_25521__$1;
                              statearr_25535_25555[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25522 === 11) {
                              var inst_25496 = state_25521[11];
                              var inst_25500 = cljs.core.chunk_first.call(null, inst_25496);
                              var inst_25501 = cljs.core.chunk_rest.call(null, inst_25496);
                              var inst_25502 = cljs.core.count.call(null, inst_25500);
                              var inst_25481 = inst_25501;
                              var inst_25482 = inst_25500;
                              var inst_25483 = inst_25502;
                              var inst_25484 = 0;
                              var state_25521__$1 = function() {
                                var statearr_25536 = state_25521;
                                statearr_25536[5] = inst_25482;
                                statearr_25536[6] = inst_25483;
                                statearr_25536[7] = inst_25484;
                                statearr_25536[8] = inst_25481;
                                return statearr_25536;
                              }();
                              var statearr_25537_25556 = state_25521__$1;
                              statearr_25537_25556[2] = null;
                              statearr_25537_25556[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_25522 === 9) {
                                var state_25521__$1 = state_25521;
                                var statearr_25538_25557 = state_25521__$1;
                                statearr_25538_25557[2] = null;
                                statearr_25538_25557[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25522 === 5) {
                                  var inst_25496 = state_25521[11];
                                  var inst_25481 = state_25521[8];
                                  var inst_25496__$1 = cljs.core.seq.call(null, inst_25481);
                                  var state_25521__$1 = function() {
                                    var statearr_25539 = state_25521;
                                    statearr_25539[11] = inst_25496__$1;
                                    return statearr_25539;
                                  }();
                                  if (inst_25496__$1) {
                                    var statearr_25540_25558 = state_25521__$1;
                                    statearr_25540_25558[1] = 8;
                                  } else {
                                    var statearr_25541_25559 = state_25521__$1;
                                    statearr_25541_25559[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25522 === 14) {
                                    var inst_25496 = state_25521[11];
                                    var inst_25507 = state_25521[2];
                                    var inst_25508 = inst_25507.terminate();
                                    var inst_25509 = cljs.core.next.call(null, inst_25496);
                                    var inst_25481 = inst_25509;
                                    var inst_25482 = null;
                                    var inst_25483 = 0;
                                    var inst_25484 = 0;
                                    var state_25521__$1 = function() {
                                      var statearr_25542 = state_25521;
                                      statearr_25542[5] = inst_25482;
                                      statearr_25542[13] = inst_25508;
                                      statearr_25542[6] = inst_25483;
                                      statearr_25542[7] = inst_25484;
                                      statearr_25542[8] = inst_25481;
                                      return statearr_25542;
                                    }();
                                    var statearr_25543_25560 = state_25521__$1;
                                    statearr_25543_25560[2] = null;
                                    statearr_25543_25560[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_25522 === 10) {
                                      var inst_25515 = state_25521[2];
                                      var state_25521__$1 = state_25521;
                                      var statearr_25544_25561 = state_25521__$1;
                                      statearr_25544_25561[2] = inst_25515;
                                      statearr_25544_25561[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_25522 === 8) {
                                        var inst_25496 = state_25521[11];
                                        var inst_25498 = cljs.core.chunked_seq_QMARK_.call(null, inst_25496);
                                        var state_25521__$1 = state_25521;
                                        if (inst_25498) {
                                          var statearr_25545_25562 = state_25521__$1;
                                          statearr_25545_25562[1] = 11;
                                        } else {
                                          var statearr_25546_25563 = state_25521__$1;
                                          statearr_25546_25563[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6622__auto__);
        return function(switch__6578__auto__, c__6622__auto__) {
          return function() {
            var state_machine__6579__auto__ = null;
            var state_machine__6579__auto____0 = function() {
              var statearr_25548 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_25548[0] = state_machine__6579__auto__;
              statearr_25548[1] = 1;
              return statearr_25548;
            };
            var state_machine__6579__auto____1 = function(state_25521) {
              while (true) {
                var result__6580__auto__ = switch__6578__auto__.call(null, state_25521);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6580__auto__;
                }
                break;
              }
            };
            state_machine__6579__auto__ = function(state_25521) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6579__auto____0.call(this);
                case 1:
                  return state_machine__6579__auto____1.call(this, state_25521);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
            state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
            return state_machine__6579__auto__;
          }();
        }(switch__6578__auto__, c__6622__auto__);
      }();
      var state__6624__auto__ = function() {
        var statearr_25549 = f__6623__auto__.call(null);
        statearr_25549[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto__;
        return statearr_25549;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
    };
  }(c__6622__auto__));
  return c__6622__auto__;
};
servant.core.f__GT_key = function f__GT_key(f) {
  return cljs.core.ffirst.call(null, cljs.core.filter.call(null, function(p1__25564_SHARP_) {
    return cljs.core._EQ_.call(null, f, cljs.core.second.call(null, p1__25564_SHARP_));
  }, cljs.core.deref.call(null, servant.worker.worker_fn_map)));
};
servant.core.standard_message = function standard_message(worker, fn_key, args) {
  return worker.postMessage(function() {
    var obj25568 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args)};
    return obj25568;
  }());
};
servant.core.array_buffer_message = function array_buffer_message(worker, fn_key, args) {
  var vec__25572 = args;
  var args__$1 = cljs.core.nth.call(null, vec__25572, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__25572, 1, null);
  return worker.postMessage(function() {
    var obj25574 = {"command":"channel-arraybuffer", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj25574;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.array_buffer_message_standard_reply = function array_buffer_message_standard_reply(worker, fn_key, args) {
  var vec__25578 = args;
  var args__$1 = cljs.core.nth.call(null, vec__25578, 0, null);
  var arraybuffers = cljs.core.nth.call(null, vec__25578, 1, null);
  return worker.postMessage(function() {
    var obj25580 = {"command":"channel", "fn":fn_key, "args":cljs.core.clj__GT_js.call(null, args__$1)};
    return obj25580;
  }(), cljs.core.clj__GT_js.call(null, arraybuffers));
};
servant.core.servant_thread_with_key = function() {
  var servant_thread_with_key__delegate = function(servant_channel, post_message_fn, fn_key, args) {
    var out_channel = cljs.core.async.chan.call(null, 1);
    var c__6622__auto___25632 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto___25632, out_channel) {
      return function() {
        var f__6623__auto__ = function() {
          var switch__6578__auto__ = function(c__6622__auto___25632, out_channel) {
            return function(state_25614) {
              var state_val_25615 = state_25614[1];
              if (state_val_25615 === 2) {
                var inst_25608 = state_25614[2];
                var inst_25609 = cljs.core.pr_str.call(null, fn_key);
                var inst_25610 = post_message_fn.call(null, inst_25608, inst_25609, args);
                var inst_25611 = function() {
                  var worker = inst_25608;
                  return function(worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel) {
                    return function(p1__25581_SHARP_) {
                      var c__6622__auto____$1 = cljs.core.async.chan.call(null, 1);
                      cljs.core.async.impl.dispatch.run.call(null, function(c__6622__auto____$1, worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel) {
                        return function() {
                          var f__6623__auto__ = function() {
                            var switch__6578__auto__ = function(c__6622__auto____$1, worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel) {
                              return function(state_25622) {
                                var state_val_25623 = state_25622[1];
                                if (state_val_25623 === 3) {
                                  var inst_25620 = state_25622[2];
                                  var state_25622__$1 = state_25622;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25622__$1, inst_25620);
                                } else {
                                  if (state_val_25623 === 2) {
                                    var inst_25618 = state_25622[2];
                                    var state_25622__$1 = function() {
                                      var statearr_25624 = state_25622;
                                      statearr_25624[5] = inst_25618;
                                      return statearr_25624;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25622__$1, 3, servant_channel, worker);
                                  } else {
                                    if (state_val_25623 === 1) {
                                      var inst_25616 = p1__25581_SHARP_.data;
                                      var state_25622__$1 = state_25622;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25622__$1, 2, out_channel, inst_25616);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              };
                            }(c__6622__auto____$1, worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel);
                            return function(switch__6578__auto__, c__6622__auto____$1, worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel) {
                              return function() {
                                var state_machine__6579__auto__ = null;
                                var state_machine__6579__auto____0 = function() {
                                  var statearr_25626 = [null, null, null, null, null, null];
                                  statearr_25626[0] = state_machine__6579__auto__;
                                  statearr_25626[1] = 1;
                                  return statearr_25626;
                                };
                                var state_machine__6579__auto____1 = function(state_25622) {
                                  while (true) {
                                    var result__6580__auto__ = switch__6578__auto__.call(null, state_25622);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__6580__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__6579__auto__ = function(state_25622) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__6579__auto____0.call(this);
                                    case 1:
                                      return state_machine__6579__auto____1.call(this, state_25622);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
                                state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
                                return state_machine__6579__auto__;
                              }();
                            }(switch__6578__auto__, c__6622__auto____$1, worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel);
                          }();
                          var state__6624__auto__ = function() {
                            var statearr_25627 = f__6623__auto__.call(null);
                            statearr_25627[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto____$1;
                            return statearr_25627;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
                        };
                      }(c__6622__auto____$1, worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel));
                      return c__6622__auto____$1;
                    };
                  }(worker, inst_25608, inst_25609, inst_25610, state_val_25615, c__6622__auto___25632, out_channel);
                }();
                var inst_25612 = inst_25608.addEventListener("message", inst_25611);
                var state_25614__$1 = function() {
                  var statearr_25628 = state_25614;
                  statearr_25628[5] = inst_25610;
                  return statearr_25628;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25614__$1, inst_25612);
              } else {
                if (state_val_25615 === 1) {
                  var state_25614__$1 = state_25614;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25614__$1, 2, servant_channel);
                } else {
                  return null;
                }
              }
            };
          }(c__6622__auto___25632, out_channel);
          return function(switch__6578__auto__, c__6622__auto___25632, out_channel) {
            return function() {
              var state_machine__6579__auto__ = null;
              var state_machine__6579__auto____0 = function() {
                var statearr_25630 = [null, null, null, null, null, null];
                statearr_25630[0] = state_machine__6579__auto__;
                statearr_25630[1] = 1;
                return statearr_25630;
              };
              var state_machine__6579__auto____1 = function(state_25614) {
                while (true) {
                  var result__6580__auto__ = switch__6578__auto__.call(null, state_25614);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6580__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6580__auto__;
                  }
                  break;
                }
              };
              state_machine__6579__auto__ = function(state_25614) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6579__auto____0.call(this);
                  case 1:
                    return state_machine__6579__auto____1.call(this, state_25614);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6579__auto____0;
              state_machine__6579__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6579__auto____1;
              return state_machine__6579__auto__;
            }();
          }(switch__6578__auto__, c__6622__auto___25632, out_channel);
        }();
        var state__6624__auto__ = function() {
          var statearr_25631 = f__6623__auto__.call(null);
          statearr_25631[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6622__auto___25632;
          return statearr_25631;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6624__auto__);
      };
    }(c__6622__auto___25632, out_channel));
    return out_channel;
  };
  var servant_thread_with_key = function(servant_channel, post_message_fn, fn_key, var_args) {
    var args = null;
    if (arguments.length > 3) {
      var G__25633__i = 0, G__25633__a = new Array(arguments.length - 3);
      while (G__25633__i < G__25633__a.length) {
        G__25633__a[G__25633__i] = arguments[G__25633__i + 3];
        ++G__25633__i;
      }
      args = new cljs.core.IndexedSeq(G__25633__a, 0);
    }
    return servant_thread_with_key__delegate.call(this, servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$lang$maxFixedArity = 3;
  servant_thread_with_key.cljs$lang$applyTo = function(arglist__25634) {
    var servant_channel = cljs.core.first(arglist__25634);
    arglist__25634 = cljs.core.next(arglist__25634);
    var post_message_fn = cljs.core.first(arglist__25634);
    arglist__25634 = cljs.core.next(arglist__25634);
    var fn_key = cljs.core.first(arglist__25634);
    var args = cljs.core.rest(arglist__25634);
    return servant_thread_with_key__delegate(servant_channel, post_message_fn, fn_key, args);
  };
  servant_thread_with_key.cljs$core$IFn$_invoke$arity$variadic = servant_thread_with_key__delegate;
  return servant_thread_with_key;
}();
servant.core.servant_thread = function() {
  var servant_thread__delegate = function(servant_channel, post_message_fn, f, args) {
    return cljs.core.apply.call(null, servant.core.servant_thread_with_key, servant_channel, post_message_fn, servant.core.f__GT_key.call(null, f), args);
  };
  var servant_thread = function(servant_channel, post_message_fn, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      var G__25635__i = 0, G__25635__a = new Array(arguments.length - 3);
      while (G__25635__i < G__25635__a.length) {
        G__25635__a[G__25635__i] = arguments[G__25635__i + 3];
        ++G__25635__i;
      }
      args = new cljs.core.IndexedSeq(G__25635__a, 0);
    }
    return servant_thread__delegate.call(this, servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$lang$maxFixedArity = 3;
  servant_thread.cljs$lang$applyTo = function(arglist__25636) {
    var servant_channel = cljs.core.first(arglist__25636);
    arglist__25636 = cljs.core.next(arglist__25636);
    var post_message_fn = cljs.core.first(arglist__25636);
    arglist__25636 = cljs.core.next(arglist__25636);
    var f = cljs.core.first(arglist__25636);
    var args = cljs.core.rest(arglist__25636);
    return servant_thread__delegate(servant_channel, post_message_fn, f, args);
  };
  servant_thread.cljs$core$IFn$_invoke$arity$variadic = servant_thread__delegate;
  return servant_thread;
}();
goog.provide("mining");
goog.require("cljs.core");
goog.require("pubsub");
goog.require("servant.worker");
goog.require("servant.core");
goog.require("cljs.core.async");
mining.hashmine = cljs.core.async.chan.call(null);
mining.hashmine.type = "workerch";
console.log("this runs in the browser");
mining.worker_count = 2;
mining.worker_script = "wrkr.js";
mining.servant_channel = servant.core.spawn_servants.call(null, mining.worker_count, mining.worker_script);
mining.mine = function mine(rootHash) {
  l.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to mine %s ", rootHash);
  mining.chann = servant.core.servant_thread.call(null, mining.servant_channel, servant.core.standard_message, "none", "newjob", rootHash);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45157) {
            var state_val_45158 = state_45157[1];
            if (state_val_45158 === 2) {
              var inst_45151 = state_45157[2];
              var inst_45152 = mining.v = inst_45151;
              var inst_45153 = l.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "recieved from mining", mining.v);
              var inst_45154 = JSON.parse(mining.v);
              var inst_45155 = mining.pub.call(null, "blockMined", inst_45154);
              var state_45157__$1 = function() {
                var statearr_45159 = state_45157;
                statearr_45159[5] = inst_45152;
                statearr_45159[6] = inst_45153;
                return statearr_45159;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45157__$1, inst_45155);
            } else {
              if (state_val_45158 === 1) {
                var inst_45149 = l.og.call(null, new cljs.core.Keyword(null, "mine", "mine", -130428525), "about to wait for mining to end ");
                var state_45157__$1 = function() {
                  var statearr_45160 = state_45157;
                  statearr_45160[7] = inst_45149;
                  return statearr_45160;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45157__$1, 2, mining.chann);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45162 = [null, null, null, null, null, null, null, null];
              statearr_45162[0] = state_machine__6577__auto__;
              statearr_45162[1] = 1;
              return statearr_45162;
            };
            var state_machine__6577__auto____1 = function(state_45157) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45157);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45157) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45157);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45163 = f__6621__auto__.call(null);
        statearr_45163[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45163;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function opts_merge(a, b) {
  var seq__14912_14916 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__14913_14917 = null;
  var count__14914_14918 = 0;
  var i__14915_14919 = 0;
  while (true) {
    if (i__14915_14919 < count__14914_14918) {
      var k_14920 = cljs.core._nth.call(null, chunk__14913_14917, i__14915_14919);
      var v_14921 = b[k_14920];
      a[k_14920] = v_14921;
      var G__14922 = seq__14912_14916;
      var G__14923 = chunk__14913_14917;
      var G__14924 = count__14914_14918;
      var G__14925 = i__14915_14919 + 1;
      seq__14912_14916 = G__14922;
      chunk__14913_14917 = G__14923;
      count__14914_14918 = G__14924;
      i__14915_14919 = G__14925;
      continue;
    } else {
      var temp__4126__auto___14926 = cljs.core.seq.call(null, seq__14912_14916);
      if (temp__4126__auto___14926) {
        var seq__14912_14927__$1 = temp__4126__auto___14926;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14912_14927__$1)) {
          var c__4768__auto___14928 = cljs.core.chunk_first.call(null, seq__14912_14927__$1);
          var G__14929 = cljs.core.chunk_rest.call(null, seq__14912_14927__$1);
          var G__14930 = c__4768__auto___14928;
          var G__14931 = cljs.core.count.call(null, c__4768__auto___14928);
          var G__14932 = 0;
          seq__14912_14916 = G__14929;
          chunk__14913_14917 = G__14930;
          count__14914_14918 = G__14931;
          i__14915_14919 = G__14932;
          continue;
        } else {
          var k_14933 = cljs.core.first.call(null, seq__14912_14927__$1);
          var v_14934 = b[k_14933];
          a[k_14933] = v_14934;
          var G__14935 = cljs.core.next.call(null, seq__14912_14927__$1);
          var G__14936 = null;
          var G__14937 = 0;
          var G__14938 = 0;
          seq__14912_14916 = G__14935;
          chunk__14913_14917 = G__14936;
          count__14914_14918 = G__14937;
          i__14915_14919 = G__14938;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function __GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function __GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var reader = null;
  var reader__1 = function(type) {
    return reader.call(null, type, null);
  };
  var reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__14939 = i + 2;
          var G__14940 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__14939;
          ret = G__14940;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return reader__1.call(this, type);
      case 2:
        return reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reader.cljs$core$IFn$_invoke$arity$1 = reader__1;
  reader.cljs$core$IFn$_invoke$arity$2 = reader__2;
  return reader;
}();
cognitect.transit.read = function read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function __GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function __GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__14941_14945 = cljs.core.seq.call(null, v);
  var chunk__14942_14946 = null;
  var count__14943_14947 = 0;
  var i__14944_14948 = 0;
  while (true) {
    if (i__14944_14948 < count__14943_14947) {
      var x_14949 = cljs.core._nth.call(null, chunk__14942_14946, i__14944_14948);
      ret.push(x_14949);
      var G__14950 = seq__14941_14945;
      var G__14951 = chunk__14942_14946;
      var G__14952 = count__14943_14947;
      var G__14953 = i__14944_14948 + 1;
      seq__14941_14945 = G__14950;
      chunk__14942_14946 = G__14951;
      count__14943_14947 = G__14952;
      i__14944_14948 = G__14953;
      continue;
    } else {
      var temp__4126__auto___14954 = cljs.core.seq.call(null, seq__14941_14945);
      if (temp__4126__auto___14954) {
        var seq__14941_14955__$1 = temp__4126__auto___14954;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14941_14955__$1)) {
          var c__4768__auto___14956 = cljs.core.chunk_first.call(null, seq__14941_14955__$1);
          var G__14957 = cljs.core.chunk_rest.call(null, seq__14941_14955__$1);
          var G__14958 = c__4768__auto___14956;
          var G__14959 = cljs.core.count.call(null, c__4768__auto___14956);
          var G__14960 = 0;
          seq__14941_14945 = G__14957;
          chunk__14942_14946 = G__14958;
          count__14943_14947 = G__14959;
          i__14944_14948 = G__14960;
          continue;
        } else {
          var x_14961 = cljs.core.first.call(null, seq__14941_14955__$1);
          ret.push(x_14961);
          var G__14962 = cljs.core.next.call(null, seq__14941_14955__$1);
          var G__14963 = null;
          var G__14964 = 0;
          var G__14965 = 0;
          seq__14941_14945 = G__14962;
          chunk__14942_14946 = G__14963;
          count__14943_14947 = G__14964;
          i__14944_14948 = G__14965;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function __GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function __GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__14966_14970 = cljs.core.seq.call(null, v);
  var chunk__14967_14971 = null;
  var count__14968_14972 = 0;
  var i__14969_14973 = 0;
  while (true) {
    if (i__14969_14973 < count__14968_14972) {
      var x_14974 = cljs.core._nth.call(null, chunk__14967_14971, i__14969_14973);
      ret.push(x_14974);
      var G__14975 = seq__14966_14970;
      var G__14976 = chunk__14967_14971;
      var G__14977 = count__14968_14972;
      var G__14978 = i__14969_14973 + 1;
      seq__14966_14970 = G__14975;
      chunk__14967_14971 = G__14976;
      count__14968_14972 = G__14977;
      i__14969_14973 = G__14978;
      continue;
    } else {
      var temp__4126__auto___14979 = cljs.core.seq.call(null, seq__14966_14970);
      if (temp__4126__auto___14979) {
        var seq__14966_14980__$1 = temp__4126__auto___14979;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14966_14980__$1)) {
          var c__4768__auto___14981 = cljs.core.chunk_first.call(null, seq__14966_14980__$1);
          var G__14982 = cljs.core.chunk_rest.call(null, seq__14966_14980__$1);
          var G__14983 = c__4768__auto___14981;
          var G__14984 = cljs.core.count.call(null, c__4768__auto___14981);
          var G__14985 = 0;
          seq__14966_14970 = G__14982;
          chunk__14967_14971 = G__14983;
          count__14968_14972 = G__14984;
          i__14969_14973 = G__14985;
          continue;
        } else {
          var x_14986 = cljs.core.first.call(null, seq__14966_14980__$1);
          ret.push(x_14986);
          var G__14987 = cljs.core.next.call(null, seq__14966_14980__$1);
          var G__14988 = null;
          var G__14989 = 0;
          var G__14990 = 0;
          seq__14966_14970 = G__14987;
          chunk__14967_14971 = G__14988;
          count__14968_14972 = G__14989;
          i__14969_14973 = G__14990;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function __GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__14991_14995 = cljs.core.seq.call(null, v);
  var chunk__14992_14996 = null;
  var count__14993_14997 = 0;
  var i__14994_14998 = 0;
  while (true) {
    if (i__14994_14998 < count__14993_14997) {
      var x_14999 = cljs.core._nth.call(null, chunk__14992_14996, i__14994_14998);
      ret.push(x_14999);
      var G__15000 = seq__14991_14995;
      var G__15001 = chunk__14992_14996;
      var G__15002 = count__14993_14997;
      var G__15003 = i__14994_14998 + 1;
      seq__14991_14995 = G__15000;
      chunk__14992_14996 = G__15001;
      count__14993_14997 = G__15002;
      i__14994_14998 = G__15003;
      continue;
    } else {
      var temp__4126__auto___15004 = cljs.core.seq.call(null, seq__14991_14995);
      if (temp__4126__auto___15004) {
        var seq__14991_15005__$1 = temp__4126__auto___15004;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14991_15005__$1)) {
          var c__4768__auto___15006 = cljs.core.chunk_first.call(null, seq__14991_15005__$1);
          var G__15007 = cljs.core.chunk_rest.call(null, seq__14991_15005__$1);
          var G__15008 = c__4768__auto___15006;
          var G__15009 = cljs.core.count.call(null, c__4768__auto___15006);
          var G__15010 = 0;
          seq__14991_14995 = G__15007;
          chunk__14992_14996 = G__15008;
          count__14993_14997 = G__15009;
          i__14994_14998 = G__15010;
          continue;
        } else {
          var x_15011 = cljs.core.first.call(null, seq__14991_15005__$1);
          ret.push(x_15011);
          var G__15012 = cljs.core.next.call(null, seq__14991_15005__$1);
          var G__15013 = null;
          var G__15014 = 0;
          var G__15015 = 0;
          seq__14991_14995 = G__15012;
          chunk__14992_14996 = G__15013;
          count__14993_14997 = G__15014;
          i__14994_14998 = G__15015;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function __GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function __GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function() {
  var writer = null;
  var writer__1 = function(type) {
    return writer.call(null, type, null);
  };
  var writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var uuid_handler = new cognitect.transit.UUIDHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
    symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
      var x15025 = cljs.core.clone.call(null, handlers);
      x15025.forEach = function(x15025, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__15026 = cljs.core.seq.call(null, coll);
          var chunk__15027 = null;
          var count__15028 = 0;
          var i__15029 = 0;
          while (true) {
            if (i__15029 < count__15028) {
              var vec__15030 = cljs.core._nth.call(null, chunk__15027, i__15029);
              var k = cljs.core.nth.call(null, vec__15030, 0, null);
              var v = cljs.core.nth.call(null, vec__15030, 1, null);
              f.call(null, v, k);
              var G__15032 = seq__15026;
              var G__15033 = chunk__15027;
              var G__15034 = count__15028;
              var G__15035 = i__15029 + 1;
              seq__15026 = G__15032;
              chunk__15027 = G__15033;
              count__15028 = G__15034;
              i__15029 = G__15035;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__15026);
              if (temp__4126__auto__) {
                var seq__15026__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__15026__$1)) {
                  var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__15026__$1);
                  var G__15036 = cljs.core.chunk_rest.call(null, seq__15026__$1);
                  var G__15037 = c__4768__auto__;
                  var G__15038 = cljs.core.count.call(null, c__4768__auto__);
                  var G__15039 = 0;
                  seq__15026 = G__15036;
                  chunk__15027 = G__15037;
                  count__15028 = G__15038;
                  i__15029 = G__15039;
                  continue;
                } else {
                  var vec__15031 = cljs.core.first.call(null, seq__15026__$1);
                  var k = cljs.core.nth.call(null, vec__15031, 0, null);
                  var v = cljs.core.nth.call(null, vec__15031, 1, null);
                  f.call(null, v, k);
                  var G__15040 = cljs.core.next.call(null, seq__15026__$1);
                  var G__15041 = null;
                  var G__15042 = 0;
                  var G__15043 = 0;
                  seq__15026 = G__15040;
                  chunk__15027 = G__15041;
                  count__15028 = G__15042;
                  i__15029 = G__15043;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x15025, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
      return x15025;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
          return function(obj, k, v) {
            var G__15024 = obj;
            G__15024.push(kfn.call(null, k), vfn.call(null, v));
            return G__15024;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return writer__1.call(this, type);
      case 2:
        return writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  writer.cljs$core$IFn$_invoke$arity$1 = writer__1;
  writer.cljs$core$IFn$_invoke$arity$2 = writer__2;
  return writer;
}();
cognitect.transit.write = function write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var write_handler = null;
  var write_handler__2 = function(tag_fn, rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t15047 !== "undefined") {
    } else {
      cognitect.transit.t15047 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta15048) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta15048 = meta15048;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t15047.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t15047.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t15047.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t15047.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t15047.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15049) {
        var self__ = this;
        var _15049__$1 = this;
        return self__.meta15048;
      };
      cognitect.transit.t15047.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15049, meta15048__$1) {
        var self__ = this;
        var _15049__$1 = this;
        return new cognitect.transit.t15047(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta15048__$1);
      };
      cognitect.transit.t15047.cljs$lang$type = true;
      cognitect.transit.t15047.cljs$lang$ctorStr = "cognitect.transit/t15047";
      cognitect.transit.t15047.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/t15047");
      };
      cognitect.transit.__GT_t15047 = function __GT_t15047(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta15048) {
        return new cognitect.transit.t15047(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta15048);
      };
    }
    return new cognitect.transit.t15047(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, cljs.core.PersistentArrayMap.EMPTY);
  };
  write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  write_handler.cljs$core$IFn$_invoke$arity$2 = write_handler__2;
  write_handler.cljs$core$IFn$_invoke$arity$3 = write_handler__3;
  write_handler.cljs$core$IFn$_invoke$arity$4 = write_handler__4;
  return write_handler;
}();
cognitect.transit.tagged_value = function tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__25701 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__25702 = cljs.core.next.call(null, coll__$1);
        sb = G__25701;
        coll__$1 = G__25702;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__25703 = sb;
        var G__25704 = coll__$2;
        sb = G__25703;
        coll__$1 = G__25704;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__25705 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__25705;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__25709 = cljs.core._EQ_;
    var expr__25710 = limit;
    if (cljs.core.truth_(pred__25709.call(null, 1, expr__25710))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__25709.call(null, 2, expr__25710))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__25712 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__25713 = limit__$1 - 1;
            var G__25714 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__25712;
            limit__$1 = G__25713;
            parts = G__25714;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__25715 = index - 1;
        index = G__25715;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___25716 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___25716)) {
        var replacement_25717 = temp__4124__auto___25716;
        buffer.append([cljs.core.str(replacement_25717)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__25718 = index + 1;
      index = G__25718;
      continue;
    }
    break;
  }
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.json");
goog.require("goog.Uri.QueryData");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.net.ErrorCode");
ajax.core.AjaxImpl = function() {
  var obj14779 = {};
  return obj14779;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
ajax.core.AjaxRequest = function() {
  var obj14781 = {};
  return obj14781;
}();
ajax.core._abort = function _abort(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxRequest$_abort$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxRequest$_abort$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._abort[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._abort["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core.DirectlySubmittable = function() {
  var obj14783 = {};
  return obj14783;
}();
ajax.core.AjaxResponse = function() {
  var obj14785 = {};
  return obj14785;
}();
ajax.core._status = function _status(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_status$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._status[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._status["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._status_text = function _status_text(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_status_text$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status_text$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._status_text[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._status_text["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status-text", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._body = function _body(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_body$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_body$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._body[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._body["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-body", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._get_response_header = function _get_response_header(this$, header) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_get_response_header$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_get_response_header$arity$2(this$, header);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._get_response_header[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._get_response_header["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-get-response-header", this$);
        }
      }
    }().call(null, this$, header);
  }
};
ajax.core._was_aborted = function _was_aborted(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_was_aborted$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_was_aborted$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._was_aborted[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._was_aborted["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-was-aborted", this$);
        }
      }
    }().call(null, this$);
  }
};
if (typeof FormData !== "undefined") {
  FormData.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof ArrayBufferView !== "undefined") {
  ArrayBufferView.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Blob !== "undefined") {
  Blob.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Document !== "undefined") {
  Document.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
ajax.core.submittable_QMARK_ = function submittable_QMARK_(params) {
  var or__3981__auto__ = function() {
    var G__14789 = params;
    if (G__14789) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__14789.ajax$core$DirectlySubmittable$;
        }
      }())) {
        return true;
      } else {
        if (!G__14789.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__14789);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__14789);
    }
  }();
  if (or__3981__auto__) {
    return or__3981__auto__;
  } else {
    return typeof params === "string";
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getResponseText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatus();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatusText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, this$__$1.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort(goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__14791) {
  var map__14792 = p__14791;
  var map__14792__$1 = cljs.core.seq_QMARK_.call(null, map__14792) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14792) : map__14792;
  var with_credentials = cljs.core.get.call(null, map__14792__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__14792__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  var G__14793 = this$__$1;
  goog.events.listen(G__14793, goog.net.EventType.COMPLETE, function(G__14793, this$__$1, map__14792, map__14792__$1, with_credentials, timeout) {
    return function(p1__14790_SHARP_) {
      return handler.call(null, p1__14790_SHARP_.target);
    };
  }(G__14793, this$__$1, map__14792, map__14792__$1, with_credentials, timeout));
  G__14793.setTimeoutInterval(timeout);
  G__14793.setWithCredentials(with_credentials);
  G__14793.send(uri, method, body, cljs.core.clj__GT_js.call(null, headers));
  return G__14793;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.response;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.status;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.statusText;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, 0, this$__$1.readyState);
};
XMLHttpRequest.prototype.ajax$core$AjaxRequest$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort();
};
XMLHttpRequest.prototype.ajax$core$AjaxImpl$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__14794) {
  var map__14795 = p__14794;
  var map__14795__$1 = cljs.core.seq_QMARK_.call(null, map__14795) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14795) : map__14795;
  var with_credentials = cljs.core.get.call(null, map__14795__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__14795__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  this$__$1.timeout = timeout;
  this$__$1.withCredentials = with_credentials;
  this$__$1.onreadystatechange = function(this$__$1, map__14795, map__14795__$1, with_credentials, timeout) {
    return function() {
      return handler.call(null, this$__$1);
    };
  }(this$__$1, map__14795, map__14795__$1, with_credentials, timeout);
  var G__14796 = this$__$1;
  G__14796.open(method, uri, true);
  var t_14803 = G__14796;
  var t_14804__$1 = function() {
    var seq__14797 = cljs.core.seq.call(null, headers);
    var chunk__14798 = null;
    var count__14799 = 0;
    var i__14800 = 0;
    while (true) {
      if (i__14800 < count__14799) {
        var vec__14801 = cljs.core._nth.call(null, chunk__14798, i__14800);
        var k = cljs.core.nth.call(null, vec__14801, 0, null);
        var v = cljs.core.nth.call(null, vec__14801, 1, null);
        t_14803.setRequestHeader(k, v);
        var G__14805 = seq__14797;
        var G__14806 = chunk__14798;
        var G__14807 = count__14799;
        var G__14808 = i__14800 + 1;
        seq__14797 = G__14805;
        chunk__14798 = G__14806;
        count__14799 = G__14807;
        i__14800 = G__14808;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__14797);
        if (temp__4126__auto__) {
          var seq__14797__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14797__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__14797__$1);
            var G__14809 = cljs.core.chunk_rest.call(null, seq__14797__$1);
            var G__14810 = c__4768__auto__;
            var G__14811 = cljs.core.count.call(null, c__4768__auto__);
            var G__14812 = 0;
            seq__14797 = G__14809;
            chunk__14798 = G__14810;
            count__14799 = G__14811;
            i__14800 = G__14812;
            continue;
          } else {
            var vec__14802 = cljs.core.first.call(null, seq__14797__$1);
            var k = cljs.core.nth.call(null, vec__14802, 0, null);
            var v = cljs.core.nth.call(null, vec__14802, 1, null);
            t_14803.setRequestHeader(k, v);
            var G__14813 = cljs.core.next.call(null, seq__14797__$1);
            var G__14814 = null;
            var G__14815 = 0;
            var G__14816 = 0;
            seq__14797 = G__14813;
            chunk__14798 = G__14814;
            count__14799 = G__14815;
            i__14800 = G__14816;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  G__14796.send(function() {
    var or__3981__auto__ = body;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "";
    }
  }());
  return G__14796;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__14817) {
  var map__14818 = p__14817;
  var map__14818__$1 = cljs.core.seq_QMARK_.call(null, map__14818) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14818) : map__14818;
  var max_retries = cljs.core.get.call(null, map__14818__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var priority = cljs.core.get.call(null, map__14818__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var timeout = cljs.core.get.call(null, map__14818__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var id = cljs.core.get.call(null, map__14818__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, cljs.core.clj__GT_js.call(null, headers), priority, handler, max_retries);
};
ajax.core.abort = function abort(this$) {
  return ajax.core._abort.call(null, this$);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, ajax.core._body.call(null, xhrio));
};
ajax.core.edn_response_format = function() {
  var edn_response_format = null;
  var edn_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", -1428560544), "EDN", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
  };
  var edn_response_format__1 = function(opts) {
    return edn_response_format.call(null);
  };
  edn_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return edn_response_format__0.call(this);
      case 1:
        return edn_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edn_response_format.cljs$core$IFn$_invoke$arity$0 = edn_response_format__0;
  edn_response_format.cljs$core$IFn$_invoke$arity$1 = edn_response_format__1;
  return edn_response_format;
}();
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
};
ajax.core.transit_content_type = "application/transit+json; charset\x3dutf-8";
ajax.core.transit_write = function() {
  var transit_write = null;
  var transit_write__1 = function(writer) {
    return function(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  };
  var transit_write__2 = function(writer, params) {
    return cognitect.transit.write.call(null, writer, params);
  };
  transit_write = function(writer, params) {
    switch(arguments.length) {
      case 1:
        return transit_write__1.call(this, writer);
      case 2:
        return transit_write__2.call(this, writer, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_write.cljs$core$IFn$_invoke$arity$1 = transit_write__1;
  transit_write.cljs$core$IFn$_invoke$arity$2 = transit_write__2;
  return transit_write;
}();
ajax.core.transit_request_format = function() {
  var transit_request_format = null;
  var transit_request_format__0 = function() {
    return transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_request_format__1 = function(p__14819) {
    var map__14821 = p__14819;
    var map__14821__$1 = cljs.core.seq_QMARK_.call(null, map__14821) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14821) : map__14821;
    var opts = map__14821__$1;
    var writer = cljs.core.get.call(null, map__14821__$1, new cljs.core.Keyword(null, "writer", "writer", -277568236));
    var type = cljs.core.get.call(null, map__14821__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var writer__$1 = function() {
      var or__3981__auto__ = writer;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cognitect.transit.writer.call(null, function() {
          var or__3981__auto____$1 = type;
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write.call(null, writer__$1), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), ajax.core.transit_content_type], null);
  };
  transit_request_format = function(p__14819) {
    switch(arguments.length) {
      case 0:
        return transit_request_format__0.call(this);
      case 1:
        return transit_request_format__1.call(this, p__14819);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_request_format.cljs$core$IFn$_invoke$arity$0 = transit_request_format__0;
  transit_request_format.cljs$core$IFn$_invoke$arity$1 = transit_request_format__1;
  return transit_request_format;
}();
ajax.core.transit_read = function() {
  var transit_read = null;
  var transit_read__1 = function(reader) {
    return function(raw, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__2 = function(reader, raw) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__3 = function(reader, raw, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var data = cognitect.transit.read.call(null, reader, text);
    if (cljs.core.truth_(raw)) {
      return data;
    } else {
      return cljs.core.js__GT_clj.call(null, data);
    }
  };
  transit_read = function(reader, raw, xhrio) {
    switch(arguments.length) {
      case 1:
        return transit_read__1.call(this, reader);
      case 2:
        return transit_read__2.call(this, reader, raw);
      case 3:
        return transit_read__3.call(this, reader, raw, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_read.cljs$core$IFn$_invoke$arity$1 = transit_read__1;
  transit_read.cljs$core$IFn$_invoke$arity$2 = transit_read__2;
  transit_read.cljs$core$IFn$_invoke$arity$3 = transit_read__3;
  return transit_read;
}();
ajax.core.transit_response_format = function() {
  var transit_response_format = null;
  var transit_response_format__0 = function() {
    return transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_response_format__1 = function(p__14822) {
    var map__14824 = p__14822;
    var map__14824__$1 = cljs.core.seq_QMARK_.call(null, map__14824) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14824) : map__14824;
    var opts = map__14824__$1;
    var raw = cljs.core.get.call(null, map__14824__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var reader = cljs.core.get.call(null, map__14824__$1, new cljs.core.Keyword(null, "reader", "reader", 169660853));
    var type = cljs.core.get.call(null, map__14824__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var reader__$1 = function() {
      var or__3981__auto__ = reader;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cognitect.transit.reader.call(null, function() {
          var or__3981__auto____$1 = type;
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read.call(null, reader__$1, raw), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/transit+json"], null);
  };
  transit_response_format = function(p__14822) {
    switch(arguments.length) {
      case 0:
        return transit_response_format__0.call(this);
      case 1:
        return transit_response_format__1.call(this, p__14822);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_response_format.cljs$core$IFn$_invoke$arity$0 = transit_response_format__0;
  transit_response_format.cljs$core$IFn$_invoke$arity$1 = transit_response_format__1;
  return transit_response_format;
}();
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function() {
  var raw_response_format = null;
  var raw_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core._body, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
  };
  var raw_response_format__1 = function(opts) {
    return raw_response_format.call(null);
  };
  raw_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return raw_response_format__0.call(this);
      case 1:
        return raw_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  raw_response_format.cljs$core$IFn$_invoke$arity$0 = raw_response_format__0;
  raw_response_format.cljs$core$IFn$_invoke$arity$1 = raw_response_format__1;
  return raw_response_format;
}();
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.json_read = function() {
  var json_read = null;
  var json_read__1 = function(prefix) {
    return function(raw, keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__2 = function(prefix, raw) {
    return function(keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__3 = function(prefix, raw, keywords_QMARK_) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__4 = function(prefix, raw, keywords_QMARK_, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var text__$1 = cljs.core.truth_(function() {
      var and__3969__auto__ = prefix;
      if (cljs.core.truth_(and__3969__auto__)) {
        return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
      } else {
        return and__3969__auto__;
      }
    }()) ? text.substring(prefix.length()) : text;
    var json = goog.json.parse(text__$1);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
  json_read = function(prefix, raw, keywords_QMARK_, xhrio) {
    switch(arguments.length) {
      case 1:
        return json_read__1.call(this, prefix);
      case 2:
        return json_read__2.call(this, prefix, raw);
      case 3:
        return json_read__3.call(this, prefix, raw, keywords_QMARK_);
      case 4:
        return json_read__4.call(this, prefix, raw, keywords_QMARK_, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_read.cljs$core$IFn$_invoke$arity$1 = json_read__1;
  json_read.cljs$core$IFn$_invoke$arity$2 = json_read__2;
  json_read.cljs$core$IFn$_invoke$arity$3 = json_read__3;
  json_read.cljs$core$IFn$_invoke$arity$4 = json_read__4;
  return json_read;
}();
ajax.core.json_response_format = function() {
  var json_response_format = null;
  var json_response_format__0 = function() {
    return json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var json_response_format__1 = function(p__14825) {
    var map__14827 = p__14825;
    var map__14827__$1 = cljs.core.seq_QMARK_.call(null, map__14827) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14827) : map__14827;
    var raw = cljs.core.get.call(null, map__14827__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var keywords_QMARK_ = cljs.core.get.call(null, map__14827__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
    var prefix = cljs.core.get.call(null, map__14827__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join(""), new cljs.core.Keyword(null, 
    "content-type", "content-type", -508222634), "application/json"], null);
  };
  json_response_format = function(p__14825) {
    switch(arguments.length) {
      case 0:
        return json_response_format__0.call(this);
      case 1:
        return json_response_format__1.call(this, p__14825);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_response_format.cljs$core$IFn$_invoke$arity$0 = json_response_format__0;
  json_response_format.cljs$core$IFn$_invoke$arity$1 = json_response_format__1;
  return json_response_format;
}();
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.json_response_format, ajax.core.edn_response_format, ajax.core.transit_response_format, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.raw_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.raw_response_format], null), ajax.core.raw_response_format], 
null);
ajax.core.get_format = function() {
  var get_format = null;
  var get_format__1 = function(opts) {
    return function(format_entry) {
      if (cljs.core.vector_QMARK_.call(null, format_entry)) {
        return get_format.call(null, opts, cljs.core.second.call(null, format_entry));
      } else {
        if (cljs.core.map_QMARK_.call(null, format_entry)) {
          return format_entry;
        } else {
          return format_entry.call(null, opts);
        }
      }
    };
  };
  var get_format__2 = function(opts, format_entry) {
    if (cljs.core.vector_QMARK_.call(null, format_entry)) {
      return get_format.call(null, opts, cljs.core.second.call(null, format_entry));
    } else {
      if (cljs.core.map_QMARK_.call(null, format_entry)) {
        return format_entry;
      } else {
        return format_entry.call(null, opts);
      }
    }
  };
  get_format = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return get_format__1.call(this, opts);
      case 2:
        return get_format__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_format.cljs$core$IFn$_invoke$arity$1 = get_format__1;
  get_format.cljs$core$IFn$_invoke$arity$2 = get_format__2;
  return get_format;
}();
ajax.core.accept_entry = function() {
  var accept_entry = null;
  var accept_entry__1 = function(opts) {
    return function(format_entry) {
      var or__3981__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return "*/*";
      }
    };
  };
  var accept_entry__2 = function(opts, format_entry) {
    var or__3981__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "*/*";
    }
  };
  accept_entry = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return accept_entry__1.call(this, opts);
      case 2:
        return accept_entry__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  accept_entry.cljs$core$IFn$_invoke$arity$1 = accept_entry__1;
  accept_entry.cljs$core$IFn$_invoke$arity$2 = accept_entry__2;
  return accept_entry;
}();
ajax.core.detect_content_type = function() {
  var detect_content_type = null;
  var detect_content_type__1 = function(content_type) {
    return function(opts, format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var detect_content_type__2 = function(content_type, opts) {
    return function(format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var detect_content_type__3 = function(content_type, opts, format_entry) {
    var accept = ajax.core.accept_entry.call(null, opts, format_entry);
    return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
  };
  detect_content_type = function(content_type, opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return detect_content_type__1.call(this, content_type);
      case 2:
        return detect_content_type__2.call(this, content_type, opts);
      case 3:
        return detect_content_type__3.call(this, content_type, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_content_type.cljs$core$IFn$_invoke$arity$1 = detect_content_type__1;
  detect_content_type.cljs$core$IFn$_invoke$arity$2 = detect_content_type__2;
  detect_content_type.cljs$core$IFn$_invoke$arity$3 = detect_content_type__3;
  return detect_content_type;
}();
ajax.core.get_default_format = function get_default_format(xhrio, p__14828) {
  var map__14830 = p__14828;
  var map__14830__$1 = cljs.core.seq_QMARK_.call(null, map__14830) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14830) : map__14830;
  var opts = map__14830__$1;
  var response_format = cljs.core.get.call(null, map__14830__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var f = ajax.core.detect_content_type.call(null, function() {
    var or__3981__auto__ = ajax.core._get_response_header.call(null, xhrio, "Content-Type");
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "";
    }
  }(), opts);
  return ajax.core.get_format.call(null, opts, cljs.core.first.call(null, cljs.core.filter.call(null, f, response_format)));
};
ajax.core.detect_response_format_read = function() {
  var detect_response_format_read = null;
  var detect_response_format_read__1 = function(opts) {
    return function(xhrio) {
      return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
    };
  };
  var detect_response_format_read__2 = function(opts, xhrio) {
    return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
  };
  detect_response_format_read = function(opts, xhrio) {
    switch(arguments.length) {
      case 1:
        return detect_response_format_read__1.call(this, opts);
      case 2:
        return detect_response_format_read__2.call(this, opts, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = detect_response_format_read__1;
  detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = detect_response_format_read__2;
  return detect_response_format_read;
}();
ajax.core.accept_header = function accept_header(p__14831) {
  var map__14833 = p__14831;
  var map__14833__$1 = cljs.core.seq_QMARK_.call(null, map__14833) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14833) : map__14833;
  var opts = map__14833__$1;
  var response_format = cljs.core.get.call(null, map__14833__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return clojure.string.join.call(null, ", ", cljs.core.map.call(null, ajax.core.accept_entry.call(null, opts), response_format));
  } else {
    return ajax.core.accept_entry.call(null, opts, response_format);
  }
};
ajax.core.detect_response_format = function() {
  var detect_response_format = null;
  var detect_response_format__0 = function() {
    return detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.default_formats], null));
  };
  var detect_response_format__1 = function(opts) {
    var accept = ajax.core.accept_header.call(null, opts);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), [cljs.core.str("(from "), cljs.core.str(accept), cljs.core.str(")")].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), accept], null);
  };
  detect_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return detect_response_format__0.call(this);
      case 1:
        return detect_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format.cljs$core$IFn$_invoke$arity$0 = detect_response_format__0;
  detect_response_format.cljs$core$IFn$_invoke$arity$1 = detect_response_format__1;
  return detect_response_format;
}();
ajax.core.get_response_format = function get_response_format(p__14834) {
  var map__14836 = p__14834;
  var map__14836__$1 = cljs.core.seq_QMARK_.call(null, map__14836) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14836) : map__14836;
  var opts = map__14836__$1;
  var response_format = cljs.core.get.call(null, map__14836__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return ajax.core.detect_response_format.call(null, opts);
  } else {
    if (cljs.core.map_QMARK_.call(null, response_format)) {
      return response_format;
    } else {
      if (cljs.core.ifn_QMARK_.call(null, response_format)) {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), response_format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
      } else {
        throw new Error([cljs.core.str("unrecognized response format: "), cljs.core.str(response_format)].join(""));
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__14837, xhrio) {
  var map__14839 = p__14837;
  var map__14839__$1 = cljs.core.seq_QMARK_.call(null, map__14839) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14839) : map__14839;
  var description = cljs.core.get.call(null, map__14839__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), ajax.core._body.call(null, xhrio));
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function() {
  var fail__delegate = function(status, status_text, failure, params) {
    var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
  };
  var fail = function(status, status_text, failure, var_args) {
    var params = null;
    if (arguments.length > 3) {
      var G__14840__i = 0, G__14840__a = new Array(arguments.length - 3);
      while (G__14840__i < G__14840__a.length) {
        G__14840__a[G__14840__i] = arguments[G__14840__i + 3];
        ++G__14840__i;
      }
      params = new cljs.core.IndexedSeq(G__14840__a, 0);
    }
    return fail__delegate.call(this, status, status_text, failure, params);
  };
  fail.cljs$lang$maxFixedArity = 3;
  fail.cljs$lang$applyTo = function(arglist__14841) {
    var status = cljs.core.first(arglist__14841);
    arglist__14841 = cljs.core.next(arglist__14841);
    var status_text = cljs.core.first(arglist__14841);
    arglist__14841 = cljs.core.next(arglist__14841);
    var failure = cljs.core.first(arglist__14841);
    var params = cljs.core.rest(arglist__14841);
    return fail__delegate(status, status_text, failure, params);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
ajax.core.interpret_response = function interpret_response(p__14842, xhrio) {
  var map__14846 = p__14842;
  var map__14846__$1 = cljs.core.seq_QMARK_.call(null, map__14846) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14846) : map__14846;
  var format = map__14846__$1;
  var read = cljs.core.get.call(null, map__14846__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var status = ajax.core._status.call(null, xhrio);
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    if (cljs.core._EQ_.call(null, -1, status)) {
      if (cljs.core.truth_(ajax.core._was_aborted.call(null, xhrio))) {
        return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
      } else {
        return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
      }
    } else {
      try {
        var response = read.call(null, xhrio);
        if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response], null);
        } else {
          return fail.call(null, ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response);
        }
      } catch (e14848) {
        if (e14848 instanceof Object) {
          var e = e14848;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format, xhrio)], null);
        } else {
          throw e14848;
        }
      }
    }
  } catch (e14847) {
    if (e14847 instanceof Object) {
      var e = e14847;
      return ajax.core.fail.call(null, 0, e.message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e14847;
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.get_request_format = function get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return null;
    }
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.process_inputs = function process_inputs(p__14849, p__14850) {
  var map__14854 = p__14849;
  var map__14854__$1 = cljs.core.seq_QMARK_.call(null, map__14854) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14854) : map__14854;
  var headers = cljs.core.get.call(null, map__14854__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__14854__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var format = cljs.core.get.call(null, map__14854__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__14854__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__14854__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var map__14855 = p__14850;
  var map__14855__$1 = cljs.core.seq_QMARK_.call(null, map__14855) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14855) : map__14855;
  var content_type = cljs.core.get.call(null, map__14855__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["Accept", content_type], null), function() {
    var or__3981__auto__ = headers;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }());
  if (cljs.core._EQ_.call(null, ajax.core.normalize_method.call(null, method), "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers__$1], null);
  } else {
    var map__14856 = ajax.core.get_request_format.call(null, format);
    var map__14856__$1 = cljs.core.seq_QMARK_.call(null, map__14856) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14856) : map__14856;
    var content_type__$1 = cljs.core.get.call(null, map__14856__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
    var write = cljs.core.get.call(null, map__14856__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
    var body = !(write == null) ? write.call(null, params) : ajax.core.submittable_QMARK_.call(null, params) ? params : function() {
      throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
    }();
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$2 = cljs.core.merge.call(null, headers__$1, content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$2], null);
  }
};
ajax.core.js_handler = function() {
  var js_handler = null;
  var js_handler__1 = function(response_format) {
    return function(handler, xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__2 = function(response_format, handler) {
    return function(xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__3 = function(response_format, handler, xhrio) {
    var response = ajax.core.interpret_response.call(null, response_format, xhrio);
    return handler.call(null, response);
  };
  js_handler = function(response_format, handler, xhrio) {
    switch(arguments.length) {
      case 1:
        return js_handler__1.call(this, response_format);
      case 2:
        return js_handler__2.call(this, response_format, handler);
      case 3:
        return js_handler__3.call(this, response_format, handler, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_handler.cljs$core$IFn$_invoke$arity$1 = js_handler__1;
  js_handler.cljs$core$IFn$_invoke$arity$2 = js_handler__2;
  js_handler.cljs$core$IFn$_invoke$arity$3 = js_handler__3;
  return js_handler;
}();
ajax.core.base_handler = function base_handler(response_format, p__14857) {
  var map__14859 = p__14857;
  var map__14859__$1 = cljs.core.seq_QMARK_.call(null, map__14859) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14859) : map__14859;
  var handler = cljs.core.get.call(null, map__14859__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, response_format, handler);
  } else {
    throw new Error("No ajax handler provided.");
  }
};
ajax.core.ajax_request = function ajax_request(p__14860) {
  var map__14863 = p__14860;
  var map__14863__$1 = cljs.core.seq_QMARK_.call(null, map__14863) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14863) : map__14863;
  var opts = map__14863__$1;
  var api = cljs.core.get.call(null, map__14863__$1, new cljs.core.Keyword(null, "api", "api", -899839580));
  var method = cljs.core.get.call(null, map__14863__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var response_format = ajax.core.get_response_format.call(null, opts);
  var method__$1 = ajax.core.normalize_method.call(null, method);
  var vec__14864 = ajax.core.process_inputs.call(null, opts, response_format);
  var uri = cljs.core.nth.call(null, vec__14864, 0, null);
  var body = cljs.core.nth.call(null, vec__14864, 1, null);
  var headers = cljs.core.nth.call(null, vec__14864, 2, null);
  var handler = ajax.core.base_handler.call(null, response_format, opts);
  var api__$1 = function() {
    var or__3981__auto__ = api;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return new goog.net.XhrIo;
    }
  }();
  return ajax.core._js_ajax_request.call(null, api__$1, uri, method__$1, body, headers, handler, opts);
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__14866 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__14866) {
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_request_format.call(null);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format_2 = function keyword_response_format_2(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, format), keyword_response_format_2.call(null, cljs.core.second.call(null, format), format_params)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, format)) {
      return format;
    } else {
      if (cljs.core.fn_QMARK_.call(null, format)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
      } else {
        if (format == null) {
          return ajax.core.detect_response_format.call(null);
        } else {
          var G__14869 = format instanceof cljs.core.Keyword ? format.fqn : null;
          switch(G__14869) {
            case "detect":
              return ajax.core.detect_response_format.call(null);
              break;
            case "raw":
              return ajax.core.raw_response_format.call(null);
              break;
            case "edn":
              return ajax.core.edn_response_format.call(null);
              break;
            case "json":
              return ajax.core.json_response_format.call(null, format_params);
              break;
            case "transit":
              return ajax.core.transit_response_format.call(null, format_params);
              break;
            default:
              return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return cljs.core.apply.call(null, cljs.core.vector, cljs.core.map.call(null, function(p1__14871_SHARP_) {
      return ajax.core.keyword_response_format_2.call(null, p1__14871_SHARP_, format_params);
    }, format));
  } else {
    return ajax.core.keyword_response_format_2.call(null, format, format_params);
  }
};
ajax.core.transform_handler = function() {
  var transform_handler = null;
  var transform_handler__1 = function(p__14874) {
    var map__14882 = p__14874;
    var map__14882__$1 = cljs.core.seq_QMARK_.call(null, map__14882) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14882) : map__14882;
    var finally$ = cljs.core.get.call(null, map__14882__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__14882__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__14882__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    return function(map__14882, map__14882__$1, finally$, error_handler, handler) {
      return function(p__14883) {
        var vec__14884 = p__14883;
        var ok = cljs.core.nth.call(null, vec__14884, 0, null);
        var result = cljs.core.nth.call(null, vec__14884, 1, null);
        var temp__4124__auto___14885 = cljs.core.truth_(ok) ? handler : error_handler;
        if (cljs.core.truth_(temp__4124__auto___14885)) {
          var h_14886 = temp__4124__auto___14885;
          h_14886.call(null, result);
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, finally$)) {
          return finally$.call(null);
        } else {
          return null;
        }
      };
    }(map__14882, map__14882__$1, finally$, error_handler, handler);
  };
  var transform_handler__2 = function(p__14872, p__14873) {
    var map__14880 = p__14872;
    var map__14880__$1 = cljs.core.seq_QMARK_.call(null, map__14880) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14880) : map__14880;
    var finally$ = cljs.core.get.call(null, map__14880__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__14880__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__14880__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    var vec__14881 = p__14873;
    var ok = cljs.core.nth.call(null, vec__14881, 0, null);
    var result = cljs.core.nth.call(null, vec__14881, 1, null);
    var temp__4124__auto___14887 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4124__auto___14887)) {
      var h_14888 = temp__4124__auto___14887;
      h_14888.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
  transform_handler = function(p__14872, p__14873) {
    switch(arguments.length) {
      case 1:
        return transform_handler__1.call(this, p__14872);
      case 2:
        return transform_handler__2.call(this, p__14872, p__14873);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transform_handler.cljs$core$IFn$_invoke$arity$1 = transform_handler__1;
  transform_handler.cljs$core$IFn$_invoke$arity$2 = transform_handler__2;
  return transform_handler;
}();
ajax.core.transform_opts = function transform_opts(p__14889) {
  var map__14891 = p__14889;
  var map__14891__$1 = cljs.core.seq_QMARK_.call(null, map__14891) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14891) : map__14891;
  var opts = map__14891__$1;
  var params = cljs.core.get.call(null, map__14891__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var response_format = cljs.core.get.call(null, map__14891__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var format = cljs.core.get.call(null, map__14891__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__14891__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var needs_format = !(ajax.core.submittable_QMARK_.call(null, params) || cljs.core._EQ_.call(null, method, "GET"));
  var rf = cljs.core.truth_(function() {
    var or__3981__auto__ = format;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), rf, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, ajax.core.transform_opts.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method)));
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, opts) {
    var f__14638__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "GET", f__14638__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__14638__auto__);
  };
  var GET = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__14892__i = 0, G__14892__a = new Array(arguments.length - 1);
      while (G__14892__i < G__14892__a.length) {
        G__14892__a[G__14892__i] = arguments[G__14892__i + 1];
        ++G__14892__i;
      }
      opts = new cljs.core.IndexedSeq(G__14892__a, 0);
    }
    return GET__delegate.call(this, uri, opts);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__14893) {
    var uri = cljs.core.first(arglist__14893);
    var opts = cljs.core.rest(arglist__14893);
    return GET__delegate(uri, opts);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.HEAD = function() {
  var HEAD__delegate = function(uri, opts) {
    var f__14638__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__14638__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__14638__auto__);
  };
  var HEAD = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__14894__i = 0, G__14894__a = new Array(arguments.length - 1);
      while (G__14894__i < G__14894__a.length) {
        G__14894__a[G__14894__i] = arguments[G__14894__i + 1];
        ++G__14894__i;
      }
      opts = new cljs.core.IndexedSeq(G__14894__a, 0);
    }
    return HEAD__delegate.call(this, uri, opts);
  };
  HEAD.cljs$lang$maxFixedArity = 1;
  HEAD.cljs$lang$applyTo = function(arglist__14895) {
    var uri = cljs.core.first(arglist__14895);
    var opts = cljs.core.rest(arglist__14895);
    return HEAD__delegate(uri, opts);
  };
  HEAD.cljs$core$IFn$_invoke$arity$variadic = HEAD__delegate;
  return HEAD;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, opts) {
    var f__14638__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "POST", f__14638__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__14638__auto__);
  };
  var POST = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__14896__i = 0, G__14896__a = new Array(arguments.length - 1);
      while (G__14896__i < G__14896__a.length) {
        G__14896__a[G__14896__i] = arguments[G__14896__i + 1];
        ++G__14896__i;
      }
      opts = new cljs.core.IndexedSeq(G__14896__a, 0);
    }
    return POST__delegate.call(this, uri, opts);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__14897) {
    var uri = cljs.core.first(arglist__14897);
    var opts = cljs.core.rest(arglist__14897);
    return POST__delegate(uri, opts);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, opts) {
    var f__14638__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__14638__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__14638__auto__);
  };
  var PUT = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__14898__i = 0, G__14898__a = new Array(arguments.length - 1);
      while (G__14898__i < G__14898__a.length) {
        G__14898__a[G__14898__i] = arguments[G__14898__i + 1];
        ++G__14898__i;
      }
      opts = new cljs.core.IndexedSeq(G__14898__a, 0);
    }
    return PUT__delegate.call(this, uri, opts);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__14899) {
    var uri = cljs.core.first(arglist__14899);
    var opts = cljs.core.rest(arglist__14899);
    return PUT__delegate(uri, opts);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.DELETE = function() {
  var DELETE__delegate = function(uri, opts) {
    var f__14638__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__14638__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__14638__auto__);
  };
  var DELETE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__14900__i = 0, G__14900__a = new Array(arguments.length - 1);
      while (G__14900__i < G__14900__a.length) {
        G__14900__a[G__14900__i] = arguments[G__14900__i + 1];
        ++G__14900__i;
      }
      opts = new cljs.core.IndexedSeq(G__14900__a, 0);
    }
    return DELETE__delegate.call(this, uri, opts);
  };
  DELETE.cljs$lang$maxFixedArity = 1;
  DELETE.cljs$lang$applyTo = function(arglist__14901) {
    var uri = cljs.core.first(arglist__14901);
    var opts = cljs.core.rest(arglist__14901);
    return DELETE__delegate(uri, opts);
  };
  DELETE.cljs$core$IFn$_invoke$arity$variadic = DELETE__delegate;
  return DELETE;
}();
ajax.core.OPTIONS = function() {
  var OPTIONS__delegate = function(uri, opts) {
    var f__14638__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__14638__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__14638__auto__);
  };
  var OPTIONS = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__14902__i = 0, G__14902__a = new Array(arguments.length - 1);
      while (G__14902__i < G__14902__a.length) {
        G__14902__a[G__14902__i] = arguments[G__14902__i + 1];
        ++G__14902__i;
      }
      opts = new cljs.core.IndexedSeq(G__14902__a, 0);
    }
    return OPTIONS__delegate.call(this, uri, opts);
  };
  OPTIONS.cljs$lang$maxFixedArity = 1;
  OPTIONS.cljs$lang$applyTo = function(arglist__14903) {
    var uri = cljs.core.first(arglist__14903);
    var opts = cljs.core.rest(arglist__14903);
    return OPTIONS__delegate(uri, opts);
  };
  OPTIONS.cljs$core$IFn$_invoke$arity$variadic = OPTIONS__delegate;
  return OPTIONS;
}();
ajax.core.TRACE = function() {
  var TRACE__delegate = function(uri, opts) {
    var f__14638__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__14638__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__14638__auto__);
  };
  var TRACE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__14904__i = 0, G__14904__a = new Array(arguments.length - 1);
      while (G__14904__i < G__14904__a.length) {
        G__14904__a[G__14904__i] = arguments[G__14904__i + 1];
        ++G__14904__i;
      }
      opts = new cljs.core.IndexedSeq(G__14904__a, 0);
    }
    return TRACE__delegate.call(this, uri, opts);
  };
  TRACE.cljs$lang$maxFixedArity = 1;
  TRACE.cljs$lang$applyTo = function(arglist__14905) {
    var uri = cljs.core.first(arglist__14905);
    var opts = cljs.core.rest(arglist__14905);
    return TRACE__delegate(uri, opts);
  };
  TRACE.cljs$core$IFn$_invoke$arity$variadic = TRACE__delegate;
  return TRACE;
}();
goog.provide("plainText");
goog.require("cljs.core");
goog.provide("peerjs");
goog.require("cljs.core");
peerjs.peerParams = function() {
  var obj18096 = {"host":"localhost", "port":8E3, "key":"peerjs", "debug":true};
  return obj18096;
}();
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("servantWorkers");
goog.require("cljs.core");
goog.require("servant.worker");
goog.require("servant.core");
servantWorkers.worker_count = 2;
servantWorkers.worker_script = "wrkr.js";
servantWorkers.servant_channel = servant.core.spawn_servants.call(null, servantWorkers.worker_count, servantWorkers.worker_script);
goog.provide("intercomMake");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
intercomMake.makeInv = function makeInv(typ, message) {
  var obj45580 = {"type":"json", "data":JSON.stringify(function() {
    var obj45582 = {"type":"inv", "data":function() {
      var obj45584 = {"type":typ, "vector":message};
      return obj45584;
    }()};
    return obj45582;
  }())};
  return obj45580;
};
intercomMake.makeData = function makeData(typ, message) {
  return null;
};
intercomMake.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
intercomMake.makeVersion = function makeVersion(message) {
  var obj45588 = {"type":"version", "data":message};
  return obj45588;
};
intercomMake.makeConn = function makeConn(conn) {
  l.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj45592 = {"type":"conn", "data":conn};
  return obj45592;
};
intercomMake.makeGetBlock = function makeGetBlock(hash) {
  l.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45698) {
            var state_val_45699 = state_45698[1];
            if (state_val_45699 === 7) {
              var state_45698__$1 = state_45698;
              var statearr_45700_45719 = state_45698__$1;
              statearr_45700_45719[2] = null;
              statearr_45700_45719[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_45699 === 1) {
                var inst_45658 = [];
                var inst_45659 = {"count":0, "blocks":inst_45658};
                var inst_45660 = inst_45659[intercomMake.hash_stop] = 0;
                var inst_45661 = intercomMake.gtBlock = inst_45659;
                var inst_45662 = app.blockchain.blockchainHeight.call(null, 1);
                var state_45698__$1 = function() {
                  var statearr_45701 = state_45698;
                  statearr_45701[5] = inst_45661;
                  statearr_45701[6] = inst_45660;
                  return statearr_45701;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45698__$1, 2, inst_45662);
              } else {
                if (state_val_45699 === 4) {
                  var inst_45696 = state_45698[2];
                  var state_45698__$1 = function() {
                    var statearr_45702 = state_45698;
                    statearr_45702[7] = inst_45696;
                    return statearr_45702;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45698__$1, intercomMake.gtBlock);
                } else {
                  if (state_val_45699 === 6) {
                    var inst_45667 = state_45698[8];
                    var inst_45683 = inst_45667 < 10;
                    var state_45698__$1 = state_45698;
                    if (cljs.core.truth_(inst_45683)) {
                      var statearr_45703_45720 = state_45698__$1;
                      statearr_45703_45720[1] = 9;
                    } else {
                      var statearr_45704_45721 = state_45698__$1;
                      statearr_45704_45721[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_45699 === 3) {
                      var inst_45666 = state_45698[9];
                      var inst_45667 = state_45698[8];
                      var inst_45669 = "new loop " + inst_45666;
                      var inst_45670 = inst_45669 + " ";
                      var inst_45671 = l.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_45670, inst_45667);
                      var inst_45672 = "b" + inst_45666;
                      var inst_45673 = db.g.call(null, inst_45672);
                      var state_45698__$1 = function() {
                        var statearr_45705 = state_45698;
                        statearr_45705[10] = inst_45671;
                        return statearr_45705;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45698__$1, 5, inst_45673);
                    } else {
                      if (state_val_45699 === 2) {
                        var inst_45664 = state_45698[2];
                        var inst_45665 = intercomMake.heightForBlock = inst_45664;
                        var inst_45666 = intercomMake.heightForBlock;
                        var inst_45667 = 0;
                        var state_45698__$1 = function() {
                          var statearr_45706 = state_45698;
                          statearr_45706[9] = inst_45666;
                          statearr_45706[11] = inst_45665;
                          statearr_45706[8] = inst_45667;
                          return statearr_45706;
                        }();
                        var statearr_45707_45722 = state_45698__$1;
                        statearr_45707_45722[2] = null;
                        statearr_45707_45722[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_45699 === 11) {
                          var inst_45667 = state_45698[8];
                          var inst_45689 = state_45698[2];
                          var inst_45690 = inst_45667 + 1;
                          var inst_45666 = inst_45689;
                          var inst_45667__$1 = inst_45690;
                          var state_45698__$1 = function() {
                            var statearr_45708 = state_45698;
                            statearr_45708[9] = inst_45666;
                            statearr_45708[8] = inst_45667__$1;
                            return statearr_45708;
                          }();
                          var statearr_45709_45723 = state_45698__$1;
                          statearr_45709_45723[2] = null;
                          statearr_45709_45723[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_45699 === 9) {
                            var inst_45666 = state_45698[9];
                            var inst_45685 = inst_45666 - 1;
                            var state_45698__$1 = state_45698;
                            var statearr_45710_45724 = state_45698__$1;
                            statearr_45710_45724[2] = inst_45685;
                            statearr_45710_45724[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_45699 === 5) {
                              var inst_45666 = state_45698[9];
                              var inst_45675 = state_45698[2];
                              var inst_45676 = intercomMake.blockg = inst_45675;
                              var inst_45677 = l.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_45678 = intercomMake.gtBlock.count = inst_45666;
                              var inst_45679 = intercomMake.gtBlock.blocks;
                              var inst_45680 = inst_45679.push(intercomMake.blockg);
                              var inst_45681 = 0 < inst_45666;
                              var state_45698__$1 = function() {
                                var statearr_45711 = state_45698;
                                statearr_45711[12] = inst_45677;
                                statearr_45711[13] = inst_45676;
                                statearr_45711[14] = inst_45680;
                                statearr_45711[15] = inst_45678;
                                return statearr_45711;
                              }();
                              if (cljs.core.truth_(inst_45681)) {
                                var statearr_45712_45725 = state_45698__$1;
                                statearr_45712_45725[1] = 6;
                              } else {
                                var statearr_45713_45726 = state_45698__$1;
                                statearr_45713_45726[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_45699 === 10) {
                                var inst_45666 = state_45698[9];
                                var inst_45687 = cljs.core.quot.call(null, inst_45666, 2);
                                var state_45698__$1 = state_45698;
                                var statearr_45714_45727 = state_45698__$1;
                                statearr_45714_45727[2] = inst_45687;
                                statearr_45714_45727[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_45699 === 8) {
                                  var inst_45694 = state_45698[2];
                                  var state_45698__$1 = state_45698;
                                  var statearr_45715_45728 = state_45698__$1;
                                  statearr_45715_45728[2] = inst_45694;
                                  statearr_45715_45728[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45717 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_45717[0] = state_machine__6577__auto__;
              statearr_45717[1] = 1;
              return statearr_45717;
            };
            var state_machine__6577__auto____1 = function(state_45698) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45698);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45698) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45698);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45718 = f__6621__auto__.call(null);
        statearr_45718[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45718;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("crypt");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
crypt.arraybtostring = function arraybtostring(buff) {
  return arrayBToString(buff);
};
crypt.encode = function encode(x) {
  return(new TextEncoder("utf-8")).encode(x);
};
crypt.shaC = cljs.core.async.chan.call(null);
crypt.resultToCh = function resultToCh(chan, digest) {
  crypt.m = crypt.arraybtostring.call(null, digest);
  l.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "to channel: %s", crypt.m);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45742) {
            var state_val_45743 = state_45742[1];
            if (state_val_45743 === 2) {
              var inst_45740 = state_45742[2];
              var state_45742__$1 = state_45742;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45742__$1, inst_45740);
            } else {
              if (state_val_45743 === 1) {
                var state_45742__$1 = state_45742;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_45742__$1, 2, chan, crypt.m);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45745 = [null, null, null, null, null];
              statearr_45745[0] = state_machine__6577__auto__;
              statearr_45745[1] = 1;
              return statearr_45745;
            };
            var state_machine__6577__auto____1 = function(state_45742) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45742);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45742) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45742);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45746 = f__6621__auto__.call(null);
        statearr_45746[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45746;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
crypt.shaCallb = function shaCallb(digest) {
  l.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "%s", "about to do hash2");
  crypt.h = crypt.arraybtostring.call(null, digest);
  l.og.call(null, new cljs.core.Keyword(null, "shaCallB", "shaCallB", 117825821), "", crypt.h);
  return pubsub.pub.call(null, "crypto", crypt.h);
};
crypt.sha256 = function sha256(x) {
  l.og.call(null, new cljs.core.Keyword(null, "sha256", "sha256", 1890611800), "sha256 %s", x);
  return crypto.subtle.digest(function() {
    var obj45750 = {"name":"SHA-256"};
    return obj45750;
  }(), crypt.encode.call(null, x)).then(crypt.shaCallb);
};
crypt.sha256c = function sha256c(c, x) {
  return crypto.subtle.digest(function() {
    var obj45754 = {"name":"SHA-256"};
    return obj45754;
  }(), crypt.encode.call(null, x)).then(c);
};
crypt.s256 = function s256(k) {
  console.log((new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049)).toString(), "about to sha256 ", k);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45795) {
            var state_val_45796 = state_45795[1];
            if (state_val_45796 === 2) {
              var inst_45788 = state_45795[2];
              var inst_45789 = crypt.arraybtostring.call(null, inst_45788);
              var inst_45790 = crypt.r = inst_45789;
              var inst_45791 = (new cljs.core.Keyword(null, "s256", "s256", -1445609188)).toString();
              var inst_45792 = "got from sha256 " + k;
              var inst_45793 = console.log(inst_45791, inst_45792, crypt.r);
              var state_45795__$1 = function() {
                var statearr_45797 = state_45795;
                statearr_45797[5] = inst_45790;
                statearr_45797[6] = inst_45793;
                return statearr_45797;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45795__$1, crypt.r);
            } else {
              if (state_val_45796 === 1) {
                var inst_45779 = cljs.core.async.chan.call(null);
                var inst_45782 = {"name":"SHA-256"};
                var inst_45783 = crypt.encode.call(null, k);
                var inst_45784 = crypto.subtle.digest(inst_45782, inst_45783);
                var inst_45785 = function() {
                  var c = inst_45779;
                  return function(c, inst_45779, inst_45782, inst_45783, inst_45784, state_val_45796, c__6620__auto__) {
                    return function(p1__45755_SHARP_) {
                      return cljs.core.async.put_BANG_.call(null, c, p1__45755_SHARP_);
                    };
                  }(c, inst_45779, inst_45782, inst_45783, inst_45784, state_val_45796, c__6620__auto__);
                }();
                var inst_45786 = inst_45784.then(inst_45785);
                var state_45795__$1 = function() {
                  var statearr_45798 = state_45795;
                  statearr_45798[7] = inst_45786;
                  return statearr_45798;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45795__$1, 2, inst_45779);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45800 = [null, null, null, null, null, null, null, null];
              statearr_45800[0] = state_machine__6577__auto__;
              statearr_45800[1] = 1;
              return statearr_45800;
            };
            var state_machine__6577__auto____1 = function(state_45795) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45795);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45795) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45795);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45801 = f__6621__auto__.call(null);
        statearr_45801[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45801;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
crypt.bHash = function bHash(blockHeader) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45825) {
            var state_val_45826 = state_45825[1];
            if (state_val_45826 === 2) {
              var inst_45822 = state_45825[2];
              var inst_45823 = crypt.blockHash = inst_45822;
              var state_45825__$1 = function() {
                var statearr_45827 = state_45825;
                statearr_45827[5] = inst_45823;
                return statearr_45827;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45825__$1, crypt.blockHash);
            } else {
              if (state_val_45826 === 1) {
                var inst_45817 = JSON.stringify(blockHeader);
                var inst_45818 = crypt.stringified = inst_45817;
                var inst_45819 = l.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "stringified", crypt.stringified);
                var inst_45820 = crypt.s256.call(null, crypt.stringified);
                var state_45825__$1 = function() {
                  var statearr_45828 = state_45825;
                  statearr_45828[6] = inst_45819;
                  statearr_45828[7] = inst_45818;
                  return statearr_45828;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45825__$1, 2, inst_45820);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45830 = [null, null, null, null, null, null, null, null];
              statearr_45830[0] = state_machine__6577__auto__;
              statearr_45830[1] = 1;
              return statearr_45830;
            };
            var state_machine__6577__auto____1 = function(state_45825) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45825);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45825) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45825);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45831 = f__6621__auto__.call(null);
        statearr_45831[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45831;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
crypt.merkleRoot = function merkleRoot(transactions) {
  l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions ", transactions);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45973) {
            var state_val_45974 = state_45973[1];
            if (state_val_45974 === 9) {
              var inst_45965 = state_45973[2];
              var inst_45966 = crypt.fromC = inst_45965;
              var inst_45967 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "from ch ", crypt.fromC);
              var inst_45968 = crypt.fromC.type = "fmr";
              var inst_45971 = {"value":crypt.fromC, "type":"fmr"};
              var state_45973__$1 = function() {
                var statearr_45976 = state_45973;
                statearr_45976[5] = inst_45967;
                statearr_45976[6] = inst_45966;
                statearr_45976[7] = inst_45968;
                return statearr_45976;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45973__$1, inst_45971);
            } else {
              if (state_val_45974 === 8) {
                var inst_45961 = state_45973[2];
                var state_45973__$1 = state_45973;
                var statearr_45977_45996 = state_45973__$1;
                statearr_45977_45996[2] = inst_45961;
                statearr_45977_45996[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_45974 === 7) {
                  var inst_45939 = state_45973[8];
                  var inst_45957 = inst_45939.shift();
                  var inst_45958 = inst_45939.length;
                  var tmp45975 = inst_45939;
                  var inst_45937 = inst_45957;
                  var inst_45938 = inst_45958;
                  var inst_45939__$1 = tmp45975;
                  var state_45973__$1 = function() {
                    var statearr_45978 = state_45973;
                    statearr_45978[9] = inst_45938;
                    statearr_45978[10] = inst_45937;
                    statearr_45978[8] = inst_45939__$1;
                    return statearr_45978;
                  }();
                  var statearr_45979_45997 = state_45973__$1;
                  statearr_45979_45997[2] = null;
                  statearr_45979_45997[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_45974 === 6) {
                    var inst_45938 = state_45973[9];
                    var inst_45937 = state_45973[10];
                    var inst_45939 = state_45973[8];
                    var inst_45953 = cljs.core.async.chan.call(null, 1);
                    var inst_45954 = function() {
                      var c__6620__auto____$1 = inst_45953;
                      var next = inst_45937;
                      var cnt = inst_45938;
                      var txs = inst_45939;
                      return function(c__6620__auto____$1, next, cnt, txs, inst_45938, inst_45937, inst_45939, inst_45953, state_val_45974, c__6620__auto__) {
                        return function() {
                          var f__6621__auto__ = function() {
                            var switch__6576__auto__ = function(c__6620__auto____$1, next, cnt, txs, inst_45938, inst_45937, inst_45939, inst_45953, state_val_45974, c__6620__auto__) {
                              return function(state_45951) {
                                var state_val_45952 = state_45951[1];
                                if (state_val_45952 === 1) {
                                  var state_45951__$1 = state_45951;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45951__$1, null);
                                } else {
                                  return null;
                                }
                              };
                            }(c__6620__auto____$1, next, cnt, txs, inst_45938, inst_45937, inst_45939, inst_45953, state_val_45974, c__6620__auto__);
                            return function(switch__6576__auto__, c__6620__auto____$1, next, cnt, txs, inst_45938, inst_45937, inst_45939, inst_45953, state_val_45974, c__6620__auto__) {
                              return function() {
                                var state_machine__6577__auto__ = null;
                                var state_machine__6577__auto____0 = function() {
                                  var statearr_45981 = [null, null, null, null, null];
                                  statearr_45981[0] = state_machine__6577__auto__;
                                  statearr_45981[1] = 1;
                                  return statearr_45981;
                                };
                                var state_machine__6577__auto____1 = function(state_45951) {
                                  while (true) {
                                    var result__6578__auto__ = switch__6576__auto__.call(null, state_45951);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__6578__auto__;
                                    }
                                    break;
                                  }
                                };
                                state_machine__6577__auto__ = function(state_45951) {
                                  switch(arguments.length) {
                                    case 0:
                                      return state_machine__6577__auto____0.call(this);
                                    case 1:
                                      return state_machine__6577__auto____1.call(this, state_45951);
                                  }
                                  throw new Error("Invalid arity: " + arguments.length);
                                };
                                state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
                                state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
                                return state_machine__6577__auto__;
                              }();
                            }(switch__6576__auto__, c__6620__auto____$1, next, cnt, txs, inst_45938, inst_45937, inst_45939, inst_45953, state_val_45974, c__6620__auto__);
                          }();
                          var state__6622__auto__ = function() {
                            var statearr_45982 = f__6621__auto__.call(null);
                            statearr_45982[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto____$1;
                            return statearr_45982;
                          }();
                          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
                        };
                      }(c__6620__auto____$1, next, cnt, txs, inst_45938, inst_45937, inst_45939, inst_45953, state_val_45974, c__6620__auto__);
                    }();
                    var inst_45955 = cljs.core.async.impl.dispatch.run.call(null, inst_45954);
                    var state_45973__$1 = function() {
                      var statearr_45983 = state_45973;
                      statearr_45983[11] = inst_45955;
                      return statearr_45983;
                    }();
                    var statearr_45984_45998 = state_45973__$1;
                    statearr_45984_45998[2] = inst_45953;
                    statearr_45984_45998[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_45974 === 5) {
                      var inst_45938 = state_45973[9];
                      var inst_45937 = state_45973[10];
                      var inst_45943 = state_45973[2];
                      var inst_45944 = crypt.tx = inst_45943;
                      var inst_45945 = cljs.core.partial.call(null, crypt.resultToCh, crypt.shaC);
                      var inst_45946 = crypt.tx + inst_45937;
                      var inst_45947 = crypt.sha256c.call(null, inst_45945, inst_45946);
                      var inst_45948 = 0 === inst_45938;
                      var state_45973__$1 = function() {
                        var statearr_45985 = state_45973;
                        statearr_45985[12] = inst_45947;
                        statearr_45985[13] = inst_45944;
                        return statearr_45985;
                      }();
                      if (cljs.core.truth_(inst_45948)) {
                        var statearr_45986_45999 = state_45973__$1;
                        statearr_45986_45999[1] = 6;
                      } else {
                        var statearr_45987_46000 = state_45973__$1;
                        statearr_45987_46000[1] = 7;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_45974 === 4) {
                        var inst_45963 = state_45973[2];
                        var state_45973__$1 = function() {
                          var statearr_45988 = state_45973;
                          statearr_45988[14] = inst_45963;
                          return statearr_45988;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45973__$1, 9, crypt.shaC);
                      } else {
                        if (state_val_45974 === 3) {
                          var inst_45938 = state_45973[9];
                          var inst_45941 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "count  %s", inst_45938);
                          var state_45973__$1 = function() {
                            var statearr_45989 = state_45973;
                            statearr_45989[15] = inst_45941;
                            return statearr_45989;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45973__$1, 5, crypt.shaC);
                        } else {
                          if (state_val_45974 === 2) {
                            var inst_45922 = state_45973[2];
                            var inst_45923 = cljs.core.async.chan.call(null);
                            var inst_45924 = crypt.shaC = inst_45923;
                            var inst_45925 = transactions.length;
                            var inst_45926 = crypt.originl = inst_45925;
                            var inst_45927 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions length ", crypt.originl);
                            var inst_45928 = transactions.shift();
                            var inst_45929 = crypt.tx = inst_45928;
                            var inst_45930 = transactions.shift();
                            var inst_45931 = crypt.next = inst_45930;
                            var inst_45932 = cljs.core.partial.call(null, crypt.resultToCh, crypt.shaC);
                            var inst_45933 = crypt.tx + crypt.next;
                            var inst_45934 = crypt.sha256c.call(null, inst_45932, inst_45933);
                            var inst_45935 = transactions.shift();
                            var inst_45936 = transactions.length;
                            var inst_45937 = inst_45935;
                            var inst_45938 = inst_45936;
                            var inst_45939 = transactions;
                            var state_45973__$1 = function() {
                              var statearr_45990 = state_45973;
                              statearr_45990[16] = inst_45922;
                              statearr_45990[17] = inst_45931;
                              statearr_45990[18] = inst_45927;
                              statearr_45990[19] = inst_45926;
                              statearr_45990[9] = inst_45938;
                              statearr_45990[20] = inst_45924;
                              statearr_45990[10] = inst_45937;
                              statearr_45990[8] = inst_45939;
                              statearr_45990[21] = inst_45934;
                              statearr_45990[22] = inst_45929;
                              return statearr_45990;
                            }();
                            var statearr_45991_46001 = state_45973__$1;
                            statearr_45991_46001[2] = null;
                            statearr_45991_46001[1] = 3;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_45974 === 1) {
                              var inst_45914 = l.og.call(null, new cljs.core.Keyword(null, "merkleRoot", "merkleRoot", -1567310602), "transactions2 ", transactions);
                              var inst_45915 = crypt.tr = transactions;
                              var inst_45916 = function() {
                                return function(inst_45914, inst_45915, state_val_45974, c__6620__auto__) {
                                  return function(x) {
                                    console.log("OLD : ", x);
                                    console.log("NEW : ", crypt.tr);
                                    return crypt.tr;
                                  };
                                }(inst_45914, inst_45915, state_val_45974, c__6620__auto__);
                              }();
                              var inst_45917 = crypt.a = inst_45916;
                              var inst_45918 = function() {
                                return function(inst_45914, inst_45915, inst_45916, inst_45917, state_val_45974, c__6620__auto__) {
                                  return function() {
                                    return db.update.call(null, "txs", crypt.a);
                                  };
                                }(inst_45914, inst_45915, inst_45916, inst_45917, state_val_45974, c__6620__auto__);
                              }();
                              var inst_45919 = crypt.utx = inst_45918;
                              var inst_45920 = db.update.call(null, "txs", crypt.a);
                              var state_45973__$1 = function() {
                                var statearr_45992 = state_45973;
                                statearr_45992[23] = inst_45915;
                                statearr_45992[24] = inst_45917;
                                statearr_45992[25] = inst_45919;
                                statearr_45992[26] = inst_45914;
                                return statearr_45992;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45973__$1, 2, inst_45920);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45994 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_45994[0] = state_machine__6577__auto__;
              statearr_45994[1] = 1;
              return statearr_45994;
            };
            var state_machine__6577__auto____1 = function(state_45973) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45973);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45973) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45973);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45995 = f__6621__auto__.call(null);
        statearr_45995[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45995;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("reagent.interop");
goog.require("cljs.core");
reagent.interop.fvars = {};
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__25859 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__25859, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__25859, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__25861__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__3981__auto___25862 = self__.p;
    if (cljs.core.truth_(or__3981__auto___25862)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__25861 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__25863__i = 0, G__25863__a = new Array(arguments.length - 1);
      while (G__25863__i < G__25863__a.length) {
        G__25863__a[G__25863__i] = arguments[G__25863__i + 1];
        ++G__25863__i;
      }
      a = new cljs.core.IndexedSeq(G__25863__a, 0);
    }
    return G__25861__delegate.call(this, self__, a);
  };
  G__25861.cljs$lang$maxFixedArity = 1;
  G__25861.cljs$lang$applyTo = function(arglist__25864) {
    var self__ = cljs.core.first(arglist__25864);
    var a = cljs.core.rest(arglist__25864);
    return G__25861__delegate(self__, a);
  };
  G__25861.cljs$core$IFn$_invoke$arity$variadic = G__25861__delegate;
  return G__25861;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args25860) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25860)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__25865__delegate = function(a) {
    var _ = this;
    var or__3981__auto___25866 = self__.p;
    if (cljs.core.truth_(or__3981__auto___25866)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__25865 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__25867__i = 0, G__25867__a = new Array(arguments.length - 0);
      while (G__25867__i < G__25867__a.length) {
        G__25867__a[G__25867__i] = arguments[G__25867__i + 0];
        ++G__25867__i;
      }
      a = new cljs.core.IndexedSeq(G__25867__a, 0);
    }
    return G__25865__delegate.call(this, a);
  };
  G__25865.cljs$lang$maxFixedArity = 0;
  G__25865.cljs$lang$applyTo = function(arglist__25868) {
    var a = cljs.core.seq(arglist__25868);
    return G__25865__delegate(a);
  };
  G__25865.cljs$core$IFn$_invoke$arity$variadic = G__25865__delegate;
  return G__25865;
}();
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function __GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return[cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null))))].join(""));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e25870) {
    if (e25870 instanceof Object) {
      var e = e25870;
      if (typeof console !== "undefined") {
        console.log("Error unmounting:");
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e25870;
    }
  }
};
reagent.impl.util.render_component = function render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_25875 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_25875) {
        return function() {
          var _STAR_always_update_STAR_25876 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_25876;
          }
        };
      }(_STAR_always_update_STAR_25875));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_25875;
    }
  } catch (e25874) {
    if (e25874 instanceof Object) {
      var e = e25874;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e25874;
    }
  }
};
reagent.impl.util.re_render_component = function re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function force_update_all() {
  var seq__25881_25885 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__25882_25886 = null;
  var count__25883_25887 = 0;
  var i__25884_25888 = 0;
  while (true) {
    if (i__25884_25888 < count__25883_25887) {
      var v_25889 = cljs.core._nth.call(null, chunk__25882_25886, i__25884_25888);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_25889);
      var G__25890 = seq__25881_25885;
      var G__25891 = chunk__25882_25886;
      var G__25892 = count__25883_25887;
      var G__25893 = i__25884_25888 + 1;
      seq__25881_25885 = G__25890;
      chunk__25882_25886 = G__25891;
      count__25883_25887 = G__25892;
      i__25884_25888 = G__25893;
      continue;
    } else {
      var temp__4126__auto___25894 = cljs.core.seq.call(null, seq__25881_25885);
      if (temp__4126__auto___25894) {
        var seq__25881_25895__$1 = temp__4126__auto___25894;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__25881_25895__$1)) {
          var c__4768__auto___25896 = cljs.core.chunk_first.call(null, seq__25881_25895__$1);
          var G__25897 = cljs.core.chunk_rest.call(null, seq__25881_25895__$1);
          var G__25898 = c__4768__auto___25896;
          var G__25899 = cljs.core.count.call(null, c__4768__auto___25896);
          var G__25900 = 0;
          seq__25881_25885 = G__25897;
          chunk__25882_25886 = G__25898;
          count__25883_25887 = G__25899;
          i__25884_25888 = G__25900;
          continue;
        } else {
          var v_25901 = cljs.core.first.call(null, seq__25881_25895__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_25901);
          var G__25902 = cljs.core.next.call(null, seq__25881_25895__$1);
          var G__25903 = null;
          var G__25904 = 0;
          var G__25905 = 0;
          seq__25881_25885 = G__25902;
          chunk__25882_25886 = G__25903;
          count__25883_25887 = G__25904;
          i__25884_25888 = G__25905;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
reagent.impl.util.Wrapper = function(state, callback, changed) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114688;
};
reagent.impl.util.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.impl.util.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.impl.util.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.impl.util.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.impl.util.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  self__.changed = true;
  self__.state = newval;
  self__.callback.call(null, newval);
  return self__.state;
};
reagent.impl.util.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.state;
};
reagent.impl.util.Wrapper.cljs$lang$type = true;
reagent.impl.util.Wrapper.cljs$lang$ctorStr = "reagent.impl.util/Wrapper";
reagent.impl.util.Wrapper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.impl.util/Wrapper");
};
reagent.impl.util.__GT_Wrapper = function __GT_Wrapper(state, callback, changed) {
  return new reagent.impl.util.Wrapper(state, callback, changed);
};
reagent.impl.util.make_wrapper = function make_wrapper(value, callback_fn, args) {
  return new reagent.impl.util.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false);
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_25756 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_25756;
  }
};
reagent.ratom.captured = function captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function __GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__25760__delegate = function(x, p__25757) {
      var map__25759 = p__25757;
      var map__25759__$1 = cljs.core.seq_QMARK_.call(null, map__25759) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25759) : map__25759;
      var validator = cljs.core.get.call(null, map__25759__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__25759__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__25760 = function(x, var_args) {
      var p__25757 = null;
      if (arguments.length > 1) {
        var G__25761__i = 0, G__25761__a = new Array(arguments.length - 1);
        while (G__25761__i < G__25761__a.length) {
          G__25761__a[G__25761__i] = arguments[G__25761__i + 1];
          ++G__25761__i;
        }
        p__25757 = new cljs.core.IndexedSeq(G__25761__a, 0);
      }
      return G__25760__delegate.call(this, x, p__25757);
    };
    G__25760.cljs$lang$maxFixedArity = 1;
    G__25760.cljs$lang$applyTo = function(arglist__25762) {
      var x = cljs.core.first(arglist__25762);
      var p__25757 = cljs.core.rest(arglist__25762);
      return G__25760__delegate(x, p__25757);
    };
    G__25760.cljs$core$IFn$_invoke$arity$variadic = G__25760__delegate;
    return G__25760;
  }();
  atom = function(x, var_args) {
    var p__25757 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__25763 = null;
        if (arguments.length > 1) {
          var G__25764__i = 0, G__25764__a = new Array(arguments.length - 1);
          while (G__25764__i < G__25764__a.length) {
            G__25764__a[G__25764__i] = arguments[G__25764__i + 1];
            ++G__25764__i;
          }
          G__25763 = new cljs.core.IndexedSeq(G__25764__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__25763);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.ratom.peek_at = function peek_at(a, path) {
  var _STAR_ratom_context_STAR_25766 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, a), path);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_25766;
  }
};
reagent.ratom.RCursor = function(path, ratom, setf, reaction) {
  this.path = path;
  this.ratom = ratom;
  this.setf = setf;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path, self__.setf], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, self__.ratom, oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, self__.ratom, key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, self__.ratom, key);
};
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cCursor: ");
  cljs.core.pr_writer.call(null, self__.path, writer, opts);
  cljs.core._write.call(null, writer, " ");
  cljs.core.pr_writer.call(null, self__.ratom, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path)));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y));
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, reagent.ratom.peek_at.call(null, self__.ratom, self__.path), x, y, more));
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.setf == null) {
    return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, new_value);
  } else {
    return self__.setf.call(null, new_value);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
  } else {
    if (self__.reaction == null) {
      self__.reaction = reagent.ratom.make_reaction.call(null, function(this$__$1) {
        return function() {
          return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
        };
      }(this$__$1));
    } else {
    }
    return cljs.core.deref.call(null, self__.reaction);
  }
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom) && cljs.core._EQ_.call(null, self__.setf, other.setf);
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function __GT_RCursor(path, ratom, setf, reaction) {
  return new reagent.ratom.RCursor(path, ratom, setf, reaction);
};
reagent.ratom.cursor = function() {
  var cursor = null;
  var cursor__2 = function(path, ra) {
    return new reagent.ratom.RCursor(path, ra, null, null);
  };
  var cursor__4 = function(path, ra, setf, args) {
    return new reagent.ratom.RCursor(path, ra, new reagent.impl.util.partial_ifn(setf, args, null), null);
  };
  cursor = function(path, ra, setf, args) {
    switch(arguments.length) {
      case 2:
        return cursor__2.call(this, path, ra);
      case 4:
        return cursor__4.call(this, path, ra, setf, args);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$4 = cursor__4;
  return cursor;
}();
reagent.ratom.IDisposable = function() {
  var obj25768 = {};
  return obj25768;
}();
reagent.ratom.dispose_BANG_ = function dispose_BANG_(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj25770 = {};
  return obj25770;
}();
reagent.ratom.run = function run(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = reagent.ratom.run[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom.run["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj25772 = {};
  return obj25772;
}();
reagent.ratom._update_watching = function _update_watching(this$, derefed) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function _handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__3969__auto__ = k;
    if (and__3969__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4625__auto__ = k == null ? null : k;
    return function() {
      var or__3981__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom.call_watches = function call_watches(obs, watches, oldval, newval) {
  return cljs.core.reduce_kv.call(null, function(_, key, f) {
    f.call(null, key, obs, oldval, newval);
    return null;
  }, null, watches);
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__3969__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__3969__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__3981__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__25773_25785 = cljs.core.seq.call(null, derefed);
  var chunk__25774_25786 = null;
  var count__25775_25787 = 0;
  var i__25776_25788 = 0;
  while (true) {
    if (i__25776_25788 < count__25775_25787) {
      var w_25789 = cljs.core._nth.call(null, chunk__25774_25786, i__25776_25788);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_25789)) {
      } else {
        cljs.core.add_watch.call(null, w_25789, this$__$1, reagent.ratom._handle_change);
      }
      var G__25790 = seq__25773_25785;
      var G__25791 = chunk__25774_25786;
      var G__25792 = count__25775_25787;
      var G__25793 = i__25776_25788 + 1;
      seq__25773_25785 = G__25790;
      chunk__25774_25786 = G__25791;
      count__25775_25787 = G__25792;
      i__25776_25788 = G__25793;
      continue;
    } else {
      var temp__4126__auto___25794 = cljs.core.seq.call(null, seq__25773_25785);
      if (temp__4126__auto___25794) {
        var seq__25773_25795__$1 = temp__4126__auto___25794;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__25773_25795__$1)) {
          var c__4768__auto___25796 = cljs.core.chunk_first.call(null, seq__25773_25795__$1);
          var G__25797 = cljs.core.chunk_rest.call(null, seq__25773_25795__$1);
          var G__25798 = c__4768__auto___25796;
          var G__25799 = cljs.core.count.call(null, c__4768__auto___25796);
          var G__25800 = 0;
          seq__25773_25785 = G__25797;
          chunk__25774_25786 = G__25798;
          count__25775_25787 = G__25799;
          i__25776_25788 = G__25800;
          continue;
        } else {
          var w_25801 = cljs.core.first.call(null, seq__25773_25795__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_25801)) {
          } else {
            cljs.core.add_watch.call(null, w_25801, this$__$1, reagent.ratom._handle_change);
          }
          var G__25802 = cljs.core.next.call(null, seq__25773_25795__$1);
          var G__25803 = null;
          var G__25804 = 0;
          var G__25805 = 0;
          seq__25773_25785 = G__25802;
          chunk__25774_25786 = G__25803;
          count__25775_25787 = G__25804;
          i__25776_25788 = G__25805;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__25777_25806 = cljs.core.seq.call(null, self__.watching);
  var chunk__25778_25807 = null;
  var count__25779_25808 = 0;
  var i__25780_25809 = 0;
  while (true) {
    if (i__25780_25809 < count__25779_25808) {
      var w_25810 = cljs.core._nth.call(null, chunk__25778_25807, i__25780_25809);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_25810)) {
      } else {
        cljs.core.remove_watch.call(null, w_25810, this$__$1);
      }
      var G__25811 = seq__25777_25806;
      var G__25812 = chunk__25778_25807;
      var G__25813 = count__25779_25808;
      var G__25814 = i__25780_25809 + 1;
      seq__25777_25806 = G__25811;
      chunk__25778_25807 = G__25812;
      count__25779_25808 = G__25813;
      i__25780_25809 = G__25814;
      continue;
    } else {
      var temp__4126__auto___25815 = cljs.core.seq.call(null, seq__25777_25806);
      if (temp__4126__auto___25815) {
        var seq__25777_25816__$1 = temp__4126__auto___25815;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__25777_25816__$1)) {
          var c__4768__auto___25817 = cljs.core.chunk_first.call(null, seq__25777_25816__$1);
          var G__25818 = cljs.core.chunk_rest.call(null, seq__25777_25816__$1);
          var G__25819 = c__4768__auto___25817;
          var G__25820 = cljs.core.count.call(null, c__4768__auto___25817);
          var G__25821 = 0;
          seq__25777_25806 = G__25818;
          chunk__25778_25807 = G__25819;
          count__25779_25808 = G__25820;
          i__25780_25809 = G__25821;
          continue;
        } else {
          var w_25822 = cljs.core.first.call(null, seq__25777_25816__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_25822)) {
          } else {
            cljs.core.remove_watch.call(null, w_25822, this$__$1);
          }
          var G__25823 = cljs.core.next.call(null, seq__25777_25816__$1);
          var G__25824 = null;
          var G__25825 = 0;
          var G__25826 = 0;
          seq__25777_25806 = G__25823;
          chunk__25778_25807 = G__25824;
          count__25779_25808 = G__25825;
          i__25780_25809 = G__25826;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__25781_25827 = cljs.core.seq.call(null, self__.watching);
  var chunk__25782_25828 = null;
  var count__25783_25829 = 0;
  var i__25784_25830 = 0;
  while (true) {
    if (i__25784_25830 < count__25783_25829) {
      var w_25831 = cljs.core._nth.call(null, chunk__25782_25828, i__25784_25830);
      cljs.core.remove_watch.call(null, w_25831, this$__$1);
      var G__25832 = seq__25781_25827;
      var G__25833 = chunk__25782_25828;
      var G__25834 = count__25783_25829;
      var G__25835 = i__25784_25830 + 1;
      seq__25781_25827 = G__25832;
      chunk__25782_25828 = G__25833;
      count__25783_25829 = G__25834;
      i__25784_25830 = G__25835;
      continue;
    } else {
      var temp__4126__auto___25836 = cljs.core.seq.call(null, seq__25781_25827);
      if (temp__4126__auto___25836) {
        var seq__25781_25837__$1 = temp__4126__auto___25836;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__25781_25837__$1)) {
          var c__4768__auto___25838 = cljs.core.chunk_first.call(null, seq__25781_25837__$1);
          var G__25839 = cljs.core.chunk_rest.call(null, seq__25781_25837__$1);
          var G__25840 = c__4768__auto___25838;
          var G__25841 = cljs.core.count.call(null, c__4768__auto___25838);
          var G__25842 = 0;
          seq__25781_25827 = G__25839;
          chunk__25782_25828 = G__25840;
          count__25783_25829 = G__25841;
          i__25784_25830 = G__25842;
          continue;
        } else {
          var w_25843 = cljs.core.first.call(null, seq__25781_25837__$1);
          cljs.core.remove_watch.call(null, w_25843, this$__$1);
          var G__25844 = cljs.core.next.call(null, seq__25781_25837__$1);
          var G__25845 = null;
          var G__25846 = 0;
          var G__25847 = 0;
          seq__25781_25827 = G__25844;
          chunk__25782_25828 = G__25845;
          count__25783_25829 = G__25846;
          i__25784_25830 = G__25847;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = cljs.core.PersistentHashSet.EMPTY;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  var old_value = self__.state;
  self__.state = new_value;
  cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  return new_value;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, self__.state, x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, self__.state, x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(self__.on_set)) {
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  return reagent.ratom.call_watches.call(null, this$__$1, self__.watches, oldval, newval);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, function() {
    var or__3981__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
    var x__11106__auto___25848 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.auto_run, reagent.ratom._STAR_ratom_context_STAR_], null);
    if (typeof console !== "undefined") {
      console.log([cljs.core.str([cljs.core.str("dbg "), cljs.core.str("reagent.ratom"), cljs.core.str(":"), cljs.core.str(249), cljs.core.str(": "), cljs.core.str("[auto-run *ratom-context*]"), cljs.core.str(": "), cljs.core.str(cljs.core.pr_str.call(null, x__11106__auto___25848))].join(""))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(function() {
    var or__3981__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return reagent.ratom._STAR_ratom_context_STAR_;
    }
  }())) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Reaction derefed outside auto-running context"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), new cljs.core.Symbol(null, "auto-run", "auto-run", -696035332, null), new cljs.core.Symbol(null, "*ratom-context*", "*ratom-context*", -1557728360, null))))].join(""));
  }
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  if (cljs.core.truth_(self__.dirty_QMARK_)) {
    return reagent.ratom.run.call(null, this$__$1);
  } else {
    return self__.state;
  }
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function __GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var make_reaction__delegate = function(f, p__25849) {
    var map__25851 = p__25849;
    var map__25851__$1 = cljs.core.seq_QMARK_.call(null, map__25851) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25851) : map__25851;
    var derefed = cljs.core.get.call(null, map__25851__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__25851__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__25851__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__25851__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, cljs.core.PersistentArrayMap.EMPTY, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var make_reaction = function(f, var_args) {
    var p__25849 = null;
    if (arguments.length > 1) {
      var G__25852__i = 0, G__25852__a = new Array(arguments.length - 1);
      while (G__25852__i < G__25852__a.length) {
        G__25852__a[G__25852__i] = arguments[G__25852__i + 1];
        ++G__25852__i;
      }
      p__25849 = new cljs.core.IndexedSeq(G__25852__a, 0);
    }
    return make_reaction__delegate.call(this, f, p__25849);
  };
  make_reaction.cljs$lang$maxFixedArity = 1;
  make_reaction.cljs$lang$applyTo = function(arglist__25853) {
    var f = cljs.core.first(arglist__25853);
    var p__25849 = cljs.core.rest(arglist__25853);
    return make_reaction__delegate(f, p__25849);
  };
  make_reaction.cljs$core$IFn$_invoke$arity$variadic = make_reaction__delegate;
  return make_reaction;
}();
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__3981__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var or__3981__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__3981__auto____$1)) {
      return or__3981__auto____$1;
    } else {
      var or__3981__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__3981__auto____$2)) {
        return or__3981__auto____$2;
      } else {
        var or__3981__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__3981__auto____$3)) {
          return or__3981__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__4868__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4868__auto__) {
      var c_25690 = a[i];
      if (cljs.core.truth_(c_25690["cljsIsDirty"])) {
        c_25690["forceUpdate"]();
      } else {
      }
      var G__25691 = i + 1;
      i = G__25691;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function run_funs(a) {
  var n__4868__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__4868__auto__) {
      a[i].call(null);
      var G__25692 = i + 1;
      i = G__25692;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function __GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function is_reagent_component(c) {
  var G__25694 = c;
  var G__25694__$1 = G__25694 == null ? null : G__25694["props"];
  var G__25694__$2 = G__25694__$1 == null ? null : G__25694__$1["argv"];
  return G__25694__$2;
};
reagent.impl.batching.run_reactively = function run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function dispose(c) {
  var G__25696_25697 = c["cljsRatom"];
  var G__25696_25698__$1 = G__25696_25697 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__25696_25697);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.state = function state(this$) {
  return cljs.core.deref.call(null, reagent.impl.component.state_atom.call(null, this$));
};
reagent.impl.component.replace_state = function replace_state(this$, new_state) {
  return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), new_state);
};
reagent.impl.component.set_state = function set_state(this$, new_state) {
  return cljs.core.swap_BANG_.call(null, reagent.impl.component.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.impl.component.as_element = function as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function do_render(c) {
  var _STAR_current_component_STAR_25672 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }();
    var p = c["props"];
    var res = c["componentFunction"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__25673 = n;
      switch(G__25673) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_25672;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function custom_wrapper(key, f) {
  var G__25676 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__25676) {
    case "componentWillUnmount":
      return function(G__25676) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__25676);
      break;
    case "componentWillMount":
      return function(G__25676) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__25676);
      break;
    case "componentDidUpdate":
      return function(G__25676) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__25676);
      break;
    case "componentWillUpdate":
      return function(G__25676) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__25676);
      break;
    case "shouldComponentUpdate":
      return function(G__25676) {
        return function(nextprops, nextstate) {
          var or__3981__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__25676);
      break;
    case "componentWillReceiveProps":
      return function(G__25676) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__25676);
      break;
    case "getInitialState":
      return function(G__25676) {
        return function() {
          var c = this;
          return reagent.impl.component.set_state.call(null, c, f.call(null, c));
        };
      }(G__25676);
      break;
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__25678__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__25678 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__25679__i = 0, G__25679__a = new Array(arguments.length - 0);
          while (G__25679__i < G__25679__a.length) {
            G__25679__a[G__25679__i] = arguments[G__25679__i + 0];
            ++G__25679__i;
          }
          args = new cljs.core.IndexedSeq(G__25679__a, 0);
        }
        return G__25678__delegate.call(this, args);
      };
      G__25678.cljs$lang$maxFixedArity = 0;
      G__25678.cljs$lang$applyTo = function(arglist__25680) {
        var args = cljs.core.seq(arglist__25680);
        return G__25678__delegate(args);
      };
      G__25678.cljs$core$IFn$_invoke$arity$variadic = G__25678__delegate;
      return G__25678;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104), null], null), null);
reagent.impl.component.dont_bind = function dont_bind(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    var G__25682 = f;
    G__25682["__reactDontBind"] = true;
    return G__25682;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = wrap;
      if (cljs.core.truth_(and__3969__auto__)) {
        return f;
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
      }
    } else {
    }
    var or__3981__auto__ = wrap;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function add_render(fun_map, render_f) {
  return cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
};
reagent.impl.component.wrap_funs = function wrap_funs(fun_map) {
  var render_fun = function() {
    var or__3981__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null))))].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__3981__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      var or__3981__auto____$1 = render_fun["displayName"];
      if (cljs.core.truth_(or__3981__auto____$1)) {
        return or__3981__auto____$1;
      } else {
        var or__3981__auto____$2 = render_fun["name"];
        if (cljs.core.truth_(or__3981__auto____$2)) {
          return or__3981__auto____$2;
        } else {
          return "";
        }
      }
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : name;
  var fmap = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun);
  return cljs.core.reduce_kv.call(null, function(render_fun, _, name, name_SINGLEQUOTE_, fmap) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(render_fun, _, name, name_SINGLEQUOTE_, fmap), cljs.core.PersistentArrayMap.EMPTY, fmap);
};
reagent.impl.component.map_to_js = function map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__25684 = o;
    G__25684[cljs.core.name.call(null, k)] = v;
    return G__25684;
  }, {}, m);
};
reagent.impl.component.cljsify = function cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null))))].join(""));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__25685__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__25685 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__25686__i = 0, G__25686__a = new Array(arguments.length - 0);
          while (G__25686__i < G__25686__a.length) {
            G__25686__a[G__25686__i] = arguments[G__25686__i + 0];
            ++G__25686__i;
          }
          args = new cljs.core.IndexedSeq(G__25686__a, 0);
        }
        return G__25685__delegate.call(this, args);
      };
      G__25685.cljs$lang$maxFixedArity = 0;
      G__25685.cljs$lang$applyTo = function(arglist__25687) {
        var args = cljs.core.seq(arglist__25687);
        return G__25685__delegate(args);
      };
      G__25685.cljs$core$IFn$_invoke$arity$variadic = G__25685__delegate;
      return G__25685;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.attr_aliases = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class", "class", -2030961996), "className", new cljs.core.Keyword(null, "for", "for", -1323786319), "htmlFor", new cljs.core.Keyword(null, "charset", "charset", -1063822193), "charSet"], null);
reagent.impl.template.hiccup_tag_QMARK_ = function hiccup_tag_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || cljs.core.ifn_QMARK_.call(null, x);
};
reagent.impl.template.to_js_val = function to_js_val(v) {
  if (typeof v === "string" || typeof v === "number") {
    return v;
  } else {
    if (function() {
      var G__25722 = v;
      if (G__25722) {
        var bit__4655__auto__ = G__25722.cljs$lang$protocol_mask$partition1$ & 4096;
        if (bit__4655__auto__ || G__25722.cljs$core$INamed$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.name.call(null, v);
    } else {
      if (cljs.core.coll_QMARK_.call(null, v)) {
        return cljs.core.clj__GT_js.call(null, v);
      } else {
        if (cljs.core.ifn_QMARK_.call(null, v)) {
          return function() {
            var G__25723__delegate = function(args) {
              return cljs.core.apply.call(null, v, args);
            };
            var G__25723 = function(var_args) {
              var args = null;
              if (arguments.length > 0) {
                var G__25724__i = 0, G__25724__a = new Array(arguments.length - 0);
                while (G__25724__i < G__25724__a.length) {
                  G__25724__a[G__25724__i] = arguments[G__25724__i + 0];
                  ++G__25724__i;
                }
                args = new cljs.core.IndexedSeq(G__25724__a, 0);
              }
              return G__25723__delegate.call(this, args);
            };
            G__25723.cljs$lang$maxFixedArity = 0;
            G__25723.cljs$lang$applyTo = function(arglist__25725) {
              var args = cljs.core.seq(arglist__25725);
              return G__25723__delegate(args);
            };
            G__25723.cljs$core$IFn$_invoke$arity$variadic = G__25723__delegate;
            return G__25723;
          }();
        } else {
          return v;
        }
      }
    }
  }
};
reagent.impl.template.undash_prop_name = function undash_prop_name(n) {
  var or__3981__auto__ = reagent.impl.template.attr_aliases.call(null, n);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return reagent.impl.util.dash_to_camel.call(null, n);
  }
};
reagent.impl.template.cached_prop_name = reagent.impl.util.memoize_1.call(null, reagent.impl.template.undash_prop_name);
reagent.impl.template.convert_prop_value = function convert_prop_value(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (typeof x === "number") {
      return x;
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__25727 = o;
          G__25727[reagent.impl.template.cached_prop_name.call(null, k)] = reagent.impl.template.to_js_val.call(null, v);
          return G__25727;
        }, {}, x);
      } else {
        return reagent.impl.template.to_js_val.call(null, x);
      }
    }
  }
};
reagent.impl.template.set_id_class = function set_id_class(props, p__25728) {
  var vec__25730 = p__25728;
  var id = cljs.core.nth.call(null, vec__25730, 0, null);
  var class$ = cljs.core.nth.call(null, vec__25730, 1, null);
  var pid = props["id"];
  props["id"] = cljs.core.some_QMARK_.call(null, pid) ? pid : id;
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old = props["className"];
    return props["className"] = cljs.core.some_QMARK_.call(null, old) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old)].join("") : class$;
  } else {
    return null;
  }
};
reagent.impl.template.convert_props = function convert_props(props, id_class) {
  if (cljs.core.empty_QMARK_.call(null, props) && id_class == null) {
    return null;
  } else {
    var objprops = cljs.core.reduce_kv.call(null, function(o, k, v) {
      var pname_25731 = reagent.impl.template.cached_prop_name.call(null, k);
      o[pname_25731] = reagent.impl.template.convert_prop_value.call(null, v);
      return o;
    }, {}, props);
    if (cljs.core.some_QMARK_.call(null, id_class)) {
      reagent.impl.template.set_id_class.call(null, objprops, id_class);
    } else {
    }
    return objprops;
  }
};
reagent.impl.template.input_unmount = function input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__3969__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__3969__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__25734 = jsprops;
    G__25734["defaultValue"] = value;
    G__25734["onChange"] = function(G__25734, v, value, on_change) {
      return function(p1__25732_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__25732_SHARP_);
      };
    }(G__25734, v, value, on_change);
    return G__25734;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function parse_tag(hiccup_tag) {
  var vec__25736 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__25736, 0, null);
  var id = cljs.core.nth.call(null, vec__25736, 1, null);
  var class$ = cljs.core.nth.call(null, vec__25736, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Unknown tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))].join(""));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, cljs.core.truth_(function() {
    var or__3981__auto__ = id;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return class_SINGLEQUOTE_;
    }
  }()) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, class_SINGLEQUOTE_], null) : null], null);
};
reagent.impl.template.fn_to_class = function fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "component-function", "component-function", 654728922), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.reag_element = function reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var key_25741 = function() {
    var temp__4128__auto__ = function() {
      var G__25739 = cljs.core.meta.call(null, v);
      var G__25739__$1 = G__25739 == null ? null : reagent.impl.template.get_key.call(null, G__25739);
      return G__25739__$1;
    }();
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
    } else {
      var k = temp__4128__auto__;
      return k;
    }
  }();
  var G__25740_25742 = key_25741;
  var G__25740_25743__$1 = G__25740_25742 == null ? null : jsprops["key"] = G__25740_25742;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.cached_parse = reagent.impl.util.memoize_1.call(null, reagent.impl.template.parse_tag);
reagent.impl.template.native_element = function native_element(tag, argv) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, tag)) {
    var vec__25747 = reagent.impl.template.cached_parse.call(null, tag);
    var comp = cljs.core.nth.call(null, vec__25747, 0, null);
    var id_class = cljs.core.nth.call(null, vec__25747, 1, null);
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, id_class);
    var first_child = hasprops ? 2 : 1;
    if (reagent.impl.template.input_component_QMARK_.call(null, comp)) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__25748 = cljs.core.meta.call(null, argv);
          var G__25748__$1 = G__25748 == null ? null : reagent.impl.template.get_key.call(null, G__25748);
          return G__25748__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__25749 = jsprops == null ? {} : jsprops;
          G__25749["key"] = key;
          return G__25749;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Hiccup form should not be empty"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)))))].join(""));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (reagent.impl.template.valid_tag_QMARK_.call(null, tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))))].join(""));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.seq_ctx = {};
reagent.impl.template.warn_on_deref = function warn_on_deref(x) {
  if (cljs.core.truth_(reagent.impl.template.seq_ctx["warned"])) {
    return null;
  } else {
    if (typeof console !== "undefined") {
      console.log("Warning: Reactive deref not supported in seq in ", cljs.core.pr_str.call(null, x));
    } else {
    }
    return reagent.impl.template.seq_ctx["warned"] = true;
  }
};
reagent.impl.template.as_element = function as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        if (reagent.ratom._STAR_ratom_context_STAR_ == null) {
          return reagent.impl.template.expand_seq.call(null, x);
        } else {
          var s = reagent.ratom.capture_derefed.call(null, function() {
            return reagent.impl.template.expand_seq.call(null, x);
          }, reagent.impl.template.seq_ctx);
          if (cljs.core.truth_(reagent.ratom.captured.call(null, reagent.impl.template.seq_ctx))) {
            reagent.impl.template.warn_on_deref.call(null, x);
          } else {
          }
          return s;
        }
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__4868__auto___25750 = a.length;
  var i_25751 = 0;
  while (true) {
    if (i_25751 < n__4868__auto___25750) {
      a[i_25751] = reagent.impl.template.as_element.call(null, a[i_25751]);
      var G__25752 = i_25751 + 1;
      i_25751 = G__25752;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.make_element = function make_element(argv, comp, jsprops, first_child) {
  if (cljs.core.count.call(null, argv) === first_child + 1) {
    return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
  } else {
    return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(a, k, v) {
      if (k >= first_child) {
        a.push(reagent.impl.template.as_element.call(null, v));
      } else {
      }
      return a;
    }, [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function() {
  var create_element = null;
  var create_element__1 = function(type) {
    return create_element.call(null, type, null);
  };
  var create_element__2 = function(type, props) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props);
  };
  var create_element__3 = function(type, props, child) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props, child);
  };
  var create_element__4 = function() {
    var G__25639__delegate = function(type, props, child, children) {
      if (!cljs.core.map_QMARK_.call(null, props)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
      }
      return cljs.core.apply.call(null, React.createElement, type, props, child, children);
    };
    var G__25639 = function(type, props, child, var_args) {
      var children = null;
      if (arguments.length > 3) {
        var G__25640__i = 0, G__25640__a = new Array(arguments.length - 3);
        while (G__25640__i < G__25640__a.length) {
          G__25640__a[G__25640__i] = arguments[G__25640__i + 3];
          ++G__25640__i;
        }
        children = new cljs.core.IndexedSeq(G__25640__a, 0);
      }
      return G__25639__delegate.call(this, type, props, child, children);
    };
    G__25639.cljs$lang$maxFixedArity = 3;
    G__25639.cljs$lang$applyTo = function(arglist__25641) {
      var type = cljs.core.first(arglist__25641);
      arglist__25641 = cljs.core.next(arglist__25641);
      var props = cljs.core.first(arglist__25641);
      arglist__25641 = cljs.core.next(arglist__25641);
      var child = cljs.core.first(arglist__25641);
      var children = cljs.core.rest(arglist__25641);
      return G__25639__delegate(type, props, child, children);
    };
    G__25639.cljs$core$IFn$_invoke$arity$variadic = G__25639__delegate;
    return G__25639;
  }();
  create_element = function(type, props, child, var_args) {
    var children = var_args;
    switch(arguments.length) {
      case 1:
        return create_element__1.call(this, type);
      case 2:
        return create_element__2.call(this, type, props);
      case 3:
        return create_element__3.call(this, type, props, child);
      default:
        var G__25642 = null;
        if (arguments.length > 3) {
          var G__25643__i = 0, G__25643__a = new Array(arguments.length - 3);
          while (G__25643__i < G__25643__a.length) {
            G__25643__a[G__25643__i] = arguments[G__25643__i + 3];
            ++G__25643__i;
          }
          G__25642 = new cljs.core.IndexedSeq(G__25643__a, 0);
        }
        return create_element__4.cljs$core$IFn$_invoke$arity$variadic(type, props, child, G__25642);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_element.cljs$lang$maxFixedArity = 3;
  create_element.cljs$lang$applyTo = create_element__4.cljs$lang$applyTo;
  create_element.cljs$core$IFn$_invoke$arity$1 = create_element__1;
  create_element.cljs$core$IFn$_invoke$arity$2 = create_element__2;
  create_element.cljs$core$IFn$_invoke$arity$3 = create_element__3;
  create_element.cljs$core$IFn$_invoke$arity$variadic = create_element__4.cljs$core$IFn$_invoke$arity$variadic;
  return create_element;
}();
reagent.core.as_element = function as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.render = function() {
  var render = null;
  var render__2 = function(comp, container) {
    return render.call(null, comp, container, null);
  };
  var render__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  render = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return render__2.call(this, comp, container);
      case 3:
        return render__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render.cljs$core$IFn$_invoke$arity$2 = render__2;
  render.cljs$core$IFn$_invoke$arity$3 = render__3;
  return render;
}();
reagent.core.unmount_component_at_node = function unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function render_to_string(component) {
  var _STAR_non_reactive_STAR_25645 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_25645;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_25647 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_25647;
  }
};
reagent.core.force_update_all = function force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state = function state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.component.state.call(null, this$);
};
reagent.core.replace_state = function replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return reagent.impl.component.replace_state.call(null, this$, new_state);
};
reagent.core.set_state = function set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return reagent.impl.component.set_state.call(null, this$, new_state);
};
reagent.core.props = function props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var atom__2 = function() {
    var G__25648__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__25648 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        var G__25649__i = 0, G__25649__a = new Array(arguments.length - 1);
        while (G__25649__i < G__25649__a.length) {
          G__25649__a[G__25649__i] = arguments[G__25649__i + 1];
          ++G__25649__i;
        }
        rest = new cljs.core.IndexedSeq(G__25649__a, 0);
      }
      return G__25648__delegate.call(this, x, rest);
    };
    G__25648.cljs$lang$maxFixedArity = 1;
    G__25648.cljs$lang$applyTo = function(arglist__25650) {
      var x = cljs.core.first(arglist__25650);
      var rest = cljs.core.rest(arglist__25650);
      return G__25648__delegate(x, rest);
    };
    G__25648.cljs$core$IFn$_invoke$arity$variadic = G__25648__delegate;
    return G__25648;
  }();
  atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__25651 = null;
        if (arguments.length > 1) {
          var G__25652__i = 0, G__25652__a = new Array(arguments.length - 1);
          while (G__25652__i < G__25652__a.length) {
            G__25652__a[G__25652__i] = arguments[G__25652__i + 1];
            ++G__25652__i;
          }
          G__25651 = new cljs.core.IndexedSeq(G__25652__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__25651);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
reagent.core.wrap = function() {
  var wrap__delegate = function(value, reset_fn, args) {
    if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
    }
    return reagent.impl.util.make_wrapper.call(null, value, reset_fn, args);
  };
  var wrap = function(value, reset_fn, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__25653__i = 0, G__25653__a = new Array(arguments.length - 2);
      while (G__25653__i < G__25653__a.length) {
        G__25653__a[G__25653__i] = arguments[G__25653__i + 2];
        ++G__25653__i;
      }
      args = new cljs.core.IndexedSeq(G__25653__a, 0);
    }
    return wrap__delegate.call(this, value, reset_fn, args);
  };
  wrap.cljs$lang$maxFixedArity = 2;
  wrap.cljs$lang$applyTo = function(arglist__25654) {
    var value = cljs.core.first(arglist__25654);
    arglist__25654 = cljs.core.next(arglist__25654);
    var reset_fn = cljs.core.first(arglist__25654);
    var args = cljs.core.rest(arglist__25654);
    return wrap__delegate(value, reset_fn, args);
  };
  wrap.cljs$core$IFn$_invoke$arity$variadic = wrap__delegate;
  return wrap;
}();
reagent.core.cursor = function() {
  var cursor = null;
  var cursor__1 = function(path) {
    return function(ra) {
      return cursor.call(null, path, ra);
    };
  };
  var cursor__2 = function(path, ra) {
    if (function() {
      var G__25657 = ra;
      if (G__25657) {
        var bit__4662__auto__ = G__25657.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4662__auto__ || G__25657.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__25657.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__25657);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__25657);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null))))].join(""));
    }
    return reagent.ratom.cursor.call(null, path, ra);
  };
  var cursor__4 = function() {
    var G__25659__delegate = function(path, ra, reset_fn, args) {
      if (function() {
        var G__25658 = ra;
        if (G__25658) {
          var bit__4662__auto__ = G__25658.cljs$lang$protocol_mask$partition0$ & 32768;
          if (bit__4662__auto__ || G__25658.cljs$core$IDeref$) {
            return true;
          } else {
            if (!G__25658.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__25658);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__25658);
        }
      }()) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "ra", "ra", 1258496501, null))))].join(""));
      }
      if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
      }
      return reagent.ratom.cursor.call(null, path, ra, reset_fn, args);
    };
    var G__25659 = function(path, ra, reset_fn, var_args) {
      var args = null;
      if (arguments.length > 3) {
        var G__25660__i = 0, G__25660__a = new Array(arguments.length - 3);
        while (G__25660__i < G__25660__a.length) {
          G__25660__a[G__25660__i] = arguments[G__25660__i + 3];
          ++G__25660__i;
        }
        args = new cljs.core.IndexedSeq(G__25660__a, 0);
      }
      return G__25659__delegate.call(this, path, ra, reset_fn, args);
    };
    G__25659.cljs$lang$maxFixedArity = 3;
    G__25659.cljs$lang$applyTo = function(arglist__25661) {
      var path = cljs.core.first(arglist__25661);
      arglist__25661 = cljs.core.next(arglist__25661);
      var ra = cljs.core.first(arglist__25661);
      arglist__25661 = cljs.core.next(arglist__25661);
      var reset_fn = cljs.core.first(arglist__25661);
      var args = cljs.core.rest(arglist__25661);
      return G__25659__delegate(path, ra, reset_fn, args);
    };
    G__25659.cljs$core$IFn$_invoke$arity$variadic = G__25659__delegate;
    return G__25659;
  }();
  cursor = function(path, ra, reset_fn, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cursor__1.call(this, path);
      case 2:
        return cursor__2.call(this, path, ra);
      default:
        var G__25662 = null;
        if (arguments.length > 3) {
          var G__25663__i = 0, G__25663__a = new Array(arguments.length - 3);
          while (G__25663__i < G__25663__a.length) {
            G__25663__a[G__25663__i] = arguments[G__25663__i + 3];
            ++G__25663__i;
          }
          G__25662 = new cljs.core.IndexedSeq(G__25663__a, 0);
        }
        return cursor__4.cljs$core$IFn$_invoke$arity$variadic(path, ra, reset_fn, G__25662);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cursor.cljs$lang$maxFixedArity = 3;
  cursor.cljs$lang$applyTo = cursor__4.cljs$lang$applyTo;
  cursor.cljs$core$IFn$_invoke$arity$1 = cursor__1;
  cursor.cljs$core$IFn$_invoke$arity$2 = cursor__2;
  cursor.cljs$core$IFn$_invoke$arity$variadic = cursor__4.cljs$core$IFn$_invoke$arity$variadic;
  return cursor;
}();
reagent.core.next_tick = function next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__25664__i = 0, G__25664__a = new Array(arguments.length - 1);
      while (G__25664__i < G__25664__a.length) {
        G__25664__a[G__25664__i] = arguments[G__25664__i + 1];
        ++G__25664__i;
      }
      args = new cljs.core.IndexedSeq(G__25664__a, 0);
    }
    return partial__delegate.call(this, f, args);
  };
  partial.cljs$lang$maxFixedArity = 1;
  partial.cljs$lang$applyTo = function(arglist__25665) {
    var f = cljs.core.first(arglist__25665);
    var args = cljs.core.rest(arglist__25665);
    return partial__delegate(f, args);
  };
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__delegate;
  return partial;
}();
goog.provide("blockchain");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("pubsub");
cljs.core.enable_console_print_BANG_.call(null);
blockchain.memPool = [];
blockchain.blockhainInfo = function() {
  var obj44467 = {};
  return obj44467;
}();
blockchain.blockhainInfo.dificulty = 5;
blockchain.addTransactionToMemPool = function addTransactionToMemPool(x) {
  blockchain.memPool.push(x);
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after adding ", blockchain.memPool);
};
blockchain.removeTransactionFromMemPool = function removeTransactionFromMemPool(x) {
  blockchain.memPool.splice(blockchain.memPool.indexOf(x));
  return logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "new memPool after remove ", blockchain.memPool);
};
blockchain.makeBlockHeader1 = function makeBlockHeader1(version, previous, fmroot, timestamp, bits, nonce, txcount) {
  var obj44471 = {"version":1, "heightFromRoot":0, "previous":previous, "merkleRoot":fmroot, "timestamp":timestamp, "bits":bits, "nonce":nonce, "txcount":txcount};
  return obj44471;
};
blockchain.makeTransaction = function makeTransaction() {
  var obj44475 = {"":1};
  return obj44475;
};
blockchain.addTransactionToBlock = function addTransactionToBlock() {
  var obj44479 = {"":1};
  return obj44479;
};
blockchain.prevblk = function prevblk(blockk) {
  blockchain._LT__BANG_.call(null, pubsub.sia.call(null, "log", new cljs.core.Keyword(null, "prevblk", "prevblk", 1731240431), "about to get prev blk ", blockk));
  return blockk.header.previous;
};
blockchain.blockKnown_QMARK_ = function blockKnown_QMARK_(blockk) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44557) {
            var state_val_44558 = state_44557[1];
            if (state_val_44558 === 7) {
              var inst_44551 = state_44557[2];
              var inst_44552 = blockchain.res = inst_44551;
              var state_44557__$1 = function() {
                var statearr_44559 = state_44557;
                statearr_44559[5] = inst_44552;
                return statearr_44559;
              }();
              var statearr_44560_44580 = state_44557__$1;
              statearr_44560_44580[2] = blockchain.res;
              statearr_44560_44580[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_44558 === 1) {
                var state_44557__$1 = state_44557;
                if (cljs.core.truth_(blockk)) {
                  var statearr_44561_44581 = state_44557__$1;
                  statearr_44561_44581[1] = 2;
                } else {
                  var statearr_44562_44582 = state_44557__$1;
                  statearr_44562_44582[1] = 3;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_44558 === 4) {
                  var inst_44555 = state_44557[2];
                  var state_44557__$1 = state_44557;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44557__$1, inst_44555);
                } else {
                  if (state_val_44558 === 15) {
                    var inst_44549 = state_44557[2];
                    var state_44557__$1 = state_44557;
                    var statearr_44563_44583 = state_44557__$1;
                    statearr_44563_44583[2] = inst_44549;
                    statearr_44563_44583[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_44558 === 13) {
                      var state_44557__$1 = state_44557;
                      var statearr_44564_44584 = state_44557__$1;
                      statearr_44564_44584[2] = true;
                      statearr_44564_44584[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_44558 === 6) {
                        var inst_44543 = pubsub.sia.call(null, "g", blockk);
                        var state_44557__$1 = state_44557;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44557__$1, 12, inst_44543);
                      } else {
                        if (state_val_44558 === 3) {
                          var state_44557__$1 = state_44557;
                          var statearr_44565_44585 = state_44557__$1;
                          statearr_44565_44585[2] = false;
                          statearr_44565_44585[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_44558 === 12) {
                            var inst_44545 = state_44557[2];
                            var state_44557__$1 = state_44557;
                            if (cljs.core.truth_(inst_44545)) {
                              var statearr_44566_44586 = state_44557__$1;
                              statearr_44566_44586[1] = 13;
                            } else {
                              var statearr_44567_44587 = state_44557__$1;
                              statearr_44567_44587[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_44558 === 2) {
                              var inst_44531 = logger.og.call(null, new cljs.core.Keyword(null, "blockknown", "blockknown", -1662820144), "block known? ", blockk);
                              var inst_44532 = blockk.hash;
                              var state_44557__$1 = function() {
                                var statearr_44568 = state_44557;
                                statearr_44568[6] = inst_44531;
                                return statearr_44568;
                              }();
                              if (cljs.core.truth_(inst_44532)) {
                                var statearr_44569_44588 = state_44557__$1;
                                statearr_44569_44588[1] = 5;
                              } else {
                                var statearr_44570_44589 = state_44557__$1;
                                statearr_44570_44589[1] = 6;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_44558 === 11) {
                                var inst_44541 = state_44557[2];
                                var state_44557__$1 = state_44557;
                                var statearr_44571_44590 = state_44557__$1;
                                statearr_44571_44590[2] = inst_44541;
                                statearr_44571_44590[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_44558 === 9) {
                                  var state_44557__$1 = state_44557;
                                  var statearr_44572_44591 = state_44557__$1;
                                  statearr_44572_44591[2] = true;
                                  statearr_44572_44591[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_44558 === 5) {
                                    var inst_44534 = blockk.hash;
                                    var inst_44535 = pubsub.sia.call(null, "g", inst_44534);
                                    var state_44557__$1 = state_44557;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44557__$1, 8, inst_44535);
                                  } else {
                                    if (state_val_44558 === 14) {
                                      var state_44557__$1 = state_44557;
                                      var statearr_44573_44592 = state_44557__$1;
                                      statearr_44573_44592[2] = false;
                                      statearr_44573_44592[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_44558 === 10) {
                                        var state_44557__$1 = state_44557;
                                        var statearr_44574_44593 = state_44557__$1;
                                        statearr_44574_44593[2] = false;
                                        statearr_44574_44593[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_44558 === 8) {
                                          var inst_44537 = state_44557[2];
                                          var state_44557__$1 = state_44557;
                                          if (cljs.core.truth_(inst_44537)) {
                                            var statearr_44575_44594 = state_44557__$1;
                                            statearr_44575_44594[1] = 9;
                                          } else {
                                            var statearr_44576_44595 = state_44557__$1;
                                            statearr_44576_44595[1] = 10;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44578 = [null, null, null, null, null, null, null];
              statearr_44578[0] = state_machine__6577__auto__;
              statearr_44578[1] = 1;
              return statearr_44578;
            };
            var state_machine__6577__auto____1 = function(state_44557) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44557);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44557) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44557);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44579 = f__6621__auto__.call(null);
        statearr_44579[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44579;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.last_QMARK_ = function last_QMARK_(blockk) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44682) {
            var state_val_44683 = state_44682[1];
            if (state_val_44683 === 7) {
              var state_44682__$1 = state_44682;
              var statearr_44684_44702 = state_44682__$1;
              statearr_44684_44702[2] = true;
              statearr_44684_44702[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_44683 === 1) {
                var inst_44649 = logger.og.call(null, new cljs.core.Keyword(null, "blockchain", "blockchain", -1030570049), "block known? ", blockk);
                var inst_44650 = pubsub.sia.call(null, "g", "last");
                var state_44682__$1 = function() {
                  var statearr_44685 = state_44682;
                  statearr_44685[5] = inst_44649;
                  return statearr_44685;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44682__$1, 2, inst_44650);
              } else {
                if (state_val_44683 === 4) {
                  var inst_44668 = pubsub.sia.call(null, "g", blockk);
                  var state_44682__$1 = state_44682;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44682__$1, 10, inst_44668);
                } else {
                  if (state_val_44683 === 13) {
                    var inst_44677 = state_44682[2];
                    var state_44682__$1 = state_44682;
                    var statearr_44686_44703 = state_44682__$1;
                    statearr_44686_44703[2] = inst_44677;
                    statearr_44686_44703[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_44683 === 6) {
                      var inst_44659 = state_44682[2];
                      var inst_44660 = inst_44659.hash;
                      var inst_44661 = blockk.hash;
                      var inst_44662 = inst_44660 === inst_44661;
                      var state_44682__$1 = state_44682;
                      if (cljs.core.truth_(inst_44662)) {
                        var statearr_44687_44704 = state_44682__$1;
                        statearr_44687_44704[1] = 7;
                      } else {
                        var statearr_44688_44705 = state_44682__$1;
                        statearr_44688_44705[1] = 8;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_44683 === 3) {
                        var inst_44656 = blockk.hash;
                        var inst_44657 = pubsub.sia.call(null, "g", inst_44656);
                        var state_44682__$1 = state_44682;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44682__$1, 6, inst_44657);
                      } else {
                        if (state_val_44683 === 12) {
                          var state_44682__$1 = state_44682;
                          var statearr_44689_44706 = state_44682__$1;
                          statearr_44689_44706[2] = false;
                          statearr_44689_44706[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_44683 === 2) {
                            var inst_44652 = state_44682[2];
                            var inst_44653 = blockchain.lastt = inst_44652;
                            var inst_44654 = blockk.hash;
                            var state_44682__$1 = function() {
                              var statearr_44690 = state_44682;
                              statearr_44690[6] = inst_44653;
                              return statearr_44690;
                            }();
                            if (cljs.core.truth_(inst_44654)) {
                              var statearr_44691_44707 = state_44682__$1;
                              statearr_44691_44707[1] = 3;
                            } else {
                              var statearr_44692_44708 = state_44682__$1;
                              statearr_44692_44708[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_44683 === 11) {
                              var state_44682__$1 = state_44682;
                              var statearr_44693_44709 = state_44682__$1;
                              statearr_44693_44709[2] = true;
                              statearr_44693_44709[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_44683 === 9) {
                                var inst_44666 = state_44682[2];
                                var state_44682__$1 = state_44682;
                                var statearr_44694_44710 = state_44682__$1;
                                statearr_44694_44710[2] = inst_44666;
                                statearr_44694_44710[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_44683 === 5) {
                                  var inst_44679 = state_44682[2];
                                  var inst_44680 = blockchain.res = inst_44679;
                                  var state_44682__$1 = function() {
                                    var statearr_44695 = state_44682;
                                    statearr_44695[7] = inst_44680;
                                    return statearr_44695;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44682__$1, blockchain.res);
                                } else {
                                  if (state_val_44683 === 10) {
                                    var inst_44670 = state_44682[2];
                                    var inst_44671 = inst_44670.hash;
                                    var inst_44672 = blockk.hash;
                                    var inst_44673 = inst_44671 === inst_44672;
                                    var state_44682__$1 = state_44682;
                                    if (cljs.core.truth_(inst_44673)) {
                                      var statearr_44696_44711 = state_44682__$1;
                                      statearr_44696_44711[1] = 11;
                                    } else {
                                      var statearr_44697_44712 = state_44682__$1;
                                      statearr_44697_44712[1] = 12;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_44683 === 8) {
                                      var state_44682__$1 = state_44682;
                                      var statearr_44698_44713 = state_44682__$1;
                                      statearr_44698_44713[2] = false;
                                      statearr_44698_44713[1] = 9;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44700 = [null, null, null, null, null, null, null, null];
              statearr_44700[0] = state_machine__6577__auto__;
              statearr_44700[1] = 1;
              return statearr_44700;
            };
            var state_machine__6577__auto____1 = function(state_44682) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44682);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44682) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44682);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44701 = f__6621__auto__.call(null);
        statearr_44701[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44701;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.heightFromBlock = function heightFromBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "heightFromBlock", "heightFromBlock", 328660240), "getting height from block ", blockk);
  return blockk.header.heightFromRoot;
};
blockchain.makeBlock = function makeBlock(work) {
  console.log((new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString(), "about to make block ", work);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44794) {
            var state_val_44795 = state_44794[1];
            if (state_val_44795 === 4) {
              var inst_44788 = state_44794[2];
              var inst_44789 = {"header":blockchain.blockHeader, "hash":inst_44788, "transactions":blockchain.transactions};
              var inst_44790 = blockchain.blockk = inst_44789;
              var inst_44791 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
              var inst_44792 = console.log(inst_44791, "newly made block ", blockchain.blockk);
              var state_44794__$1 = function() {
                var statearr_44796 = state_44794;
                statearr_44796[5] = inst_44792;
                statearr_44796[6] = inst_44790;
                return statearr_44796;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44794__$1, blockchain.blockk);
            } else {
              if (state_val_44795 === 3) {
                var inst_44766 = state_44794[2];
                var inst_44767 = blockchain.transactions = inst_44766;
                var inst_44768 = blockchain.lastv = blockchain.lastt2;
                var inst_44769 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                var inst_44770 = console.log(inst_44769, "last ", blockchain.lastv);
                var inst_44771 = blockchain.lastv.hash;
                var inst_44772 = work.root;
                var inst_44773 = new Date;
                var inst_44774 = inst_44773.getTime();
                var inst_44775 = blockchain.blockhainInfo.dificulty;
                var inst_44776 = work.nonce;
                var inst_44777 = blockchain.transactions.lenght;
                var inst_44778 = blockchain.makeBlockHeader1.call(null, "0", inst_44771, inst_44772, inst_44774, inst_44775, inst_44776, inst_44777);
                var inst_44779 = blockchain.blockHeader = inst_44778;
                var inst_44780 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                var inst_44781 = console.log(inst_44780, "block header ", blockchain.blockHeader);
                var inst_44782 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                var inst_44783 = console.log(inst_44782, "transactions when saving block ", blockchain.transactions);
                var inst_44786 = pubsub.sia.call(null, "hash", blockchain.blockHeader);
                var state_44794__$1 = function() {
                  var statearr_44797 = state_44794;
                  statearr_44797[7] = inst_44781;
                  statearr_44797[8] = inst_44783;
                  statearr_44797[9] = inst_44779;
                  statearr_44797[10] = inst_44767;
                  statearr_44797[11] = inst_44770;
                  statearr_44797[12] = inst_44768;
                  return statearr_44797;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44794__$1, 4, inst_44786);
              } else {
                if (state_val_44795 === 2) {
                  var inst_44760 = state_44794[2];
                  var inst_44761 = blockchain.lastt2 = inst_44760;
                  var inst_44762 = (new cljs.core.Keyword(null, "makeBlock", "makeBlock", -1854081426)).toString();
                  var inst_44763 = console.log(inst_44762, "last ", blockchain.lastt2);
                  var inst_44764 = pubsub.sia.call(null, "g", "txs");
                  var state_44794__$1 = function() {
                    var statearr_44798 = state_44794;
                    statearr_44798[13] = inst_44763;
                    statearr_44798[14] = inst_44761;
                    return statearr_44798;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44794__$1, 3, inst_44764);
                } else {
                  if (state_val_44795 === 1) {
                    var inst_44758 = pubsub.sia.call(null, "g", "last");
                    var state_44794__$1 = state_44794;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44794__$1, 2, inst_44758);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44800 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_44800[0] = state_machine__6577__auto__;
              statearr_44800[1] = 1;
              return statearr_44800;
            };
            var state_machine__6577__auto____1 = function(state_44794) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44794);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44794) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44794);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44801 = f__6621__auto__.call(null);
        statearr_44801[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44801;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.saveBlock = function saveBlock(blockR) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44855) {
            var state_val_44856 = state_44855[1];
            if (state_val_44856 === 5) {
              var inst_44853 = state_44855[2];
              var state_44855__$1 = state_44855;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44855__$1, inst_44853);
            } else {
              if (state_val_44856 === 4) {
                var inst_44849 = state_44855[2];
                var inst_44850 = "b" + blockchain.heightForBlock;
                var inst_44851 = pubsub.sia.call(null, "db", inst_44850, blockR);
                var state_44855__$1 = function() {
                  var statearr_44857 = state_44855;
                  statearr_44857[5] = inst_44849;
                  return statearr_44857;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44855__$1, 5, inst_44851);
              } else {
                if (state_val_44856 === 3) {
                  var inst_44845 = state_44855[2];
                  var inst_44846 = blockR.hash;
                  var inst_44847 = pubsub.sia.call(null, "db", inst_44846, blockR);
                  var state_44855__$1 = function() {
                    var statearr_44858 = state_44855;
                    statearr_44858[6] = inst_44845;
                    return statearr_44858;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44855__$1, 4, inst_44847);
                } else {
                  if (state_val_44856 === 2) {
                    var inst_44836 = state_44855[2];
                    var inst_44837 = blockchain.heightForBlock = inst_44836;
                    var inst_44838 = blockR.header;
                    var inst_44839 = inst_44838.heightFromRoot = blockchain.heightForBlock;
                    var inst_44840 = function() {
                      return function(inst_44836, inst_44837, inst_44838, inst_44839, state_val_44856, c__6620__auto__) {
                        return function() {
                          return blockR;
                        };
                      }(inst_44836, inst_44837, inst_44838, inst_44839, state_val_44856, c__6620__auto__);
                    }();
                    var inst_44841 = blockchain.a = inst_44840;
                    var inst_44842 = blockR.hash;
                    var inst_44843 = pubsub.sia.call(null, "db", "last", inst_44842, blockR);
                    var state_44855__$1 = function() {
                      var statearr_44859 = state_44855;
                      statearr_44859[7] = inst_44841;
                      statearr_44859[8] = inst_44839;
                      statearr_44859[9] = inst_44837;
                      return statearr_44859;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44855__$1, 3, inst_44843);
                  } else {
                    if (state_val_44856 === 1) {
                      var inst_44833 = logger.og.call(null, new cljs.core.Keyword(null, "saveBlock", "saveBlock", 2070754850), "saving ", blockR);
                      var inst_44834 = pubsub.sia.call(null, "blockchainHeight", 1);
                      var state_44855__$1 = function() {
                        var statearr_44860 = state_44855;
                        statearr_44860[10] = inst_44833;
                        return statearr_44860;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44855__$1, 2, inst_44834);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44862 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_44862[0] = state_machine__6577__auto__;
              statearr_44862[1] = 1;
              return statearr_44862;
            };
            var state_machine__6577__auto____1 = function(state_44855) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44855);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44855) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44855);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44863 = f__6621__auto__.call(null);
        statearr_44863[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44863;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.addToChain = function addToChain(schain) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44943) {
            var state_val_44944 = state_44943[1];
            if (state_val_44944 === 7) {
              var inst_44915 = state_44943[5];
              var inst_44929 = state_44943[2];
              var inst_44930 = schain.length;
              var inst_44931 = inst_44915 < inst_44930;
              var state_44943__$1 = function() {
                var statearr_44945 = state_44943;
                statearr_44945[6] = inst_44929;
                return statearr_44945;
              }();
              if (cljs.core.truth_(inst_44931)) {
                var statearr_44946_44964 = state_44943__$1;
                statearr_44946_44964[1] = 8;
              } else {
                var statearr_44947_44965 = state_44943__$1;
                statearr_44947_44965[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_44944 === 1) {
                var inst_44914 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to add to chain");
                var inst_44915 = 0;
                var state_44943__$1 = function() {
                  var statearr_44948 = state_44943;
                  statearr_44948[7] = inst_44914;
                  statearr_44948[5] = inst_44915;
                  return statearr_44948;
                }();
                var statearr_44949_44966 = state_44943__$1;
                statearr_44949_44966[2] = null;
                statearr_44949_44966[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_44944 === 4) {
                  var inst_44922 = state_44943[2];
                  var state_44943__$1 = state_44943;
                  if (cljs.core.truth_(inst_44922)) {
                    var statearr_44950_44967 = state_44943__$1;
                    statearr_44950_44967[1] = 5;
                  } else {
                    var statearr_44951_44968 = state_44943__$1;
                    statearr_44951_44968[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_44944 === 6) {
                    var inst_44915 = state_44943[5];
                    var inst_44926 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is not known ", inst_44915);
                    var inst_44927 = blockchain.saveBlock.call(null, inst_44915);
                    var state_44943__$1 = function() {
                      var statearr_44952 = state_44943;
                      statearr_44952[8] = inst_44926;
                      return statearr_44952;
                    }();
                    var statearr_44953_44969 = state_44943__$1;
                    statearr_44953_44969[2] = inst_44927;
                    statearr_44953_44969[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_44944 === 3) {
                      var inst_44939 = state_44943[2];
                      var inst_44940 = cljs.core.last.call(null, schain);
                      var inst_44941 = db.update.call(null, "last", inst_44940);
                      var state_44943__$1 = function() {
                        var statearr_44954 = state_44943;
                        statearr_44954[9] = inst_44939;
                        return statearr_44954;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44943__$1, inst_44941);
                    } else {
                      if (state_val_44944 === 2) {
                        var inst_44915 = state_44943[5];
                        var inst_44917 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "itterating current step ", inst_44915);
                        var inst_44918 = schain[inst_44915];
                        var inst_44919 = blockchain.prevblk.call(null, inst_44918);
                        var inst_44920 = blockchain.blockKnown_QMARK_.call(null, inst_44919);
                        var state_44943__$1 = function() {
                          var statearr_44955 = state_44943;
                          statearr_44955[10] = inst_44917;
                          return statearr_44955;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44943__$1, 4, inst_44920);
                      } else {
                        if (state_val_44944 === 9) {
                          var state_44943__$1 = state_44943;
                          var statearr_44956_44970 = state_44943__$1;
                          statearr_44956_44970[2] = null;
                          statearr_44956_44970[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_44944 === 5) {
                            var inst_44915 = state_44943[5];
                            var inst_44924 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ", inst_44915);
                            var state_44943__$1 = state_44943;
                            var statearr_44957_44971 = state_44943__$1;
                            statearr_44957_44971[2] = inst_44924;
                            statearr_44957_44971[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_44944 === 10) {
                              var inst_44937 = state_44943[2];
                              var state_44943__$1 = state_44943;
                              var statearr_44958_44972 = state_44943__$1;
                              statearr_44958_44972[2] = inst_44937;
                              statearr_44958_44972[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_44944 === 8) {
                                var inst_44915 = state_44943[5];
                                var inst_44933 = inst_44915 + 1;
                                var inst_44915__$1 = inst_44933;
                                var state_44943__$1 = function() {
                                  var statearr_44959 = state_44943;
                                  statearr_44959[5] = inst_44915__$1;
                                  return statearr_44959;
                                }();
                                var statearr_44960_44973 = state_44943__$1;
                                statearr_44960_44973[2] = null;
                                statearr_44960_44973[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44962 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_44962[0] = state_machine__6577__auto__;
              statearr_44962[1] = 1;
              return statearr_44962;
            };
            var state_machine__6577__auto____1 = function(state_44943) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44943);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44943) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44943);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44963 = f__6621__auto__.call(null);
        statearr_44963[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44963;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.blockchainHeight = function blockchainHeight(x) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_45012) {
            var state_val_45013 = state_45012[1];
            if (state_val_45013 === 6) {
              var inst_45007 = state_45012[2];
              var state_45012__$1 = state_45012;
              var statearr_45014_45022 = state_45012__$1;
              statearr_45014_45022[2] = inst_45007;
              statearr_45014_45022[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_45013 === 5) {
                var inst_45010 = state_45012[2];
                var state_45012__$1 = state_45012;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_45012__$1, inst_45010);
              } else {
                if (state_val_45013 === 4) {
                  var state_45012__$1 = state_45012;
                  var statearr_45015_45023 = state_45012__$1;
                  statearr_45015_45023[2] = blockchain.hght;
                  statearr_45015_45023[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_45013 === 3) {
                    var inst_45004 = blockchain.hght + 1;
                    var inst_45005 = pubsub.sia.call(null, "db", "height", inst_45004);
                    var state_45012__$1 = state_45012;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45012__$1, 6, inst_45005);
                  } else {
                    if (state_val_45013 === 2) {
                      var inst_45000 = state_45012[2];
                      var inst_45001 = blockchain.hght = inst_45000;
                      var inst_45002 = logger.og.call(null, new cljs.core.Keyword(null, "blockchainHeight", "blockchainHeight", -607390728), "blockchain height ", blockchain.hght);
                      var state_45012__$1 = function() {
                        var statearr_45016 = state_45012;
                        statearr_45016[5] = inst_45001;
                        statearr_45016[6] = inst_45002;
                        return statearr_45016;
                      }();
                      if (cljs.core.truth_(x)) {
                        var statearr_45017_45024 = state_45012__$1;
                        statearr_45017_45024[1] = 3;
                      } else {
                        var statearr_45018_45025 = state_45012__$1;
                        statearr_45018_45025[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_45013 === 1) {
                        var inst_44998 = pubsub.sia.call(null, "db", "height");
                        var state_45012__$1 = state_45012;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_45012__$1, 2, inst_44998);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_45020 = [null, null, null, null, null, null, null];
              statearr_45020[0] = state_machine__6577__auto__;
              statearr_45020[1] = 1;
              return statearr_45020;
            };
            var state_machine__6577__auto____1 = function(state_45012) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_45012);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_45012) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_45012);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_45021 = f__6621__auto__.call(null);
        statearr_45021[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_45021;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
blockchain.popA = function popA(a) {
  return a.splice(0, 1);
};
blockchain.log2 = function log2(n) {
  return Math.log.call(null, n) / Math.log.call(null, 2);
};
goog.provide("intercomTakeUtil");
goog.require("cljs.core");
goog.provide("communications");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
communications.intercomMeta = function() {
  var obj55530 = {"id":1, "knownPeers":cljs.core.PersistentVector.EMPTY, "knownPeersChannels":cljs.core.PersistentVector.EMPTY, "p2pchans":cljs.core.PersistentVector.EMPTY};
  return obj55530;
}();
communications.peers = cljs.core.PersistentVector.EMPTY;
communications.transactionch = cljs.core.async.chan.call(null);
communications.transactionch.type = "transactionch";
communications.cryptoCh = cljs.core.async.chan.call(null);
communications.cryptoCh.type = "cryptoch";
communications.connectTo = function connectTo(ev, id) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_55553) {
            var state_val_55554 = state_55553[1];
            if (state_val_55554 === 2) {
              var inst_55547 = state_55553[2];
              var inst_55548 = inst_55547.connect(id);
              var inst_55549 = cljs.core.partial.call(null, communications.onOpen, inst_55548);
              var inst_55550 = inst_55548.on("open", inst_55549);
              var inst_55551 = communications.channelsFromConnection.call(null, inst_55548);
              var state_55553__$1 = function() {
                var statearr_55555 = state_55553;
                statearr_55555[5] = inst_55550;
                return statearr_55555;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55553__$1, inst_55551);
            } else {
              if (state_val_55554 === 1) {
                var inst_55545 = pubsub.sia.call(null, "db", "peerjs");
                var state_55553__$1 = state_55553;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_55553__$1, 2, inst_55545);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55557 = [null, null, null, null, null, null];
              statearr_55557[0] = state_machine__6577__auto__;
              statearr_55557[1] = 1;
              return statearr_55557;
            };
            var state_machine__6577__auto____1 = function(state_55553) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55553);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55553) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55553);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_55558 = f__6621__auto__.call(null);
        statearr_55558[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_55558;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.peerParams = function() {
  var obj55560 = {"host":"localhost", "port":8E3, "key":"peerjs", "debug":true};
  return obj55560;
}();
communications.setID = function setID(ev, id) {
  console.log((new cljs.core.Keyword(null, "setID", "setID", -1552962901)).toString(), ev, id);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_55600) {
            var state_val_55601 = state_55600[1];
            if (state_val_55601 === 4) {
              var inst_55596 = state_55600[2];
              var inst_55597 = function() {
                return function(inst_55596, state_val_55601, c__6620__auto__) {
                  return function(p1__55561_SHARP_) {
                    return pubsub.sia.call(null, "onConnection", p1__55561_SHARP_);
                  };
                }(inst_55596, state_val_55601, c__6620__auto__);
              }();
              var inst_55598 = communications.peerjs.on("connection", inst_55597);
              var state_55600__$1 = function() {
                var statearr_55602 = state_55600;
                statearr_55602[5] = inst_55596;
                return statearr_55602;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55600__$1, inst_55598);
            } else {
              if (state_val_55601 === 3) {
                var inst_55590 = state_55600[2];
                var inst_55591 = console.log(inst_55590);
                var inst_55592 = new Peer(id, communications.peerParams);
                var inst_55593 = communications.peerjs = inst_55592;
                var inst_55594 = pubsub.sia.call(null, "db", "peerjs", communications.peerjs);
                var state_55600__$1 = function() {
                  var statearr_55603 = state_55600;
                  statearr_55603[6] = inst_55593;
                  statearr_55603[7] = inst_55591;
                  return statearr_55603;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_55600__$1, 4, inst_55594);
              } else {
                if (state_val_55601 === 2) {
                  var inst_55587 = state_55600[2];
                  var inst_55588 = pubsub.sia.call(null, "db", "lid");
                  var state_55600__$1 = function() {
                    var statearr_55604 = state_55600;
                    statearr_55604[8] = inst_55587;
                    return statearr_55604;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_55600__$1, 3, inst_55588);
                } else {
                  if (state_val_55601 === 1) {
                    var inst_55585 = pubsub.sia.call(null, "db", "lid", id);
                    var state_55600__$1 = state_55600;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_55600__$1, 2, inst_55585);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55606 = [null, null, null, null, null, null, null, null, null];
              statearr_55606[0] = state_machine__6577__auto__;
              statearr_55606[1] = 1;
              return statearr_55606;
            };
            var state_machine__6577__auto____1 = function(state_55600) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55600);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55600) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55600);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_55607 = f__6621__auto__.call(null);
        statearr_55607[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_55607;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.start = cljs.core.async.chan.call(null);
communications.initial = function initial() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_55662) {
            var state_val_55663 = state_55662[1];
            if (state_val_55663 === 5) {
              var inst_55656 = state_55662[2];
              var inst_55657 = pubsub.initpubsub.call(null);
              var inst_55658 = comm.setupComm.call(null);
              var inst_55659 = comm.startP2PCommLoop.call(null);
              var inst_55660 = ht.run.call(null, "Taras Bulba", "zaparozie r0x", "i4c32d4308e1fe.jpg", "- zaparozie");
              var state_55662__$1 = function() {
                var statearr_55664 = state_55662;
                statearr_55664[5] = inst_55658;
                statearr_55664[6] = inst_55657;
                statearr_55664[7] = inst_55659;
                statearr_55664[8] = inst_55656;
                return statearr_55664;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55662__$1, inst_55660);
            } else {
              if (state_val_55663 === 4) {
                var state_55662__$1 = state_55662;
                var statearr_55665_55674 = state_55662__$1;
                statearr_55665_55674[2] = null;
                statearr_55665_55674[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_55663 === 3) {
                  var inst_55647 = console.log(communications.id);
                  var inst_55648 = $("#id");
                  var inst_55649 = inst_55648.val(communications.id);
                  var inst_55650 = new Peer(communications.id, communications.peerParams);
                  var inst_55651 = communications.peerjs = inst_55650;
                  var inst_55652 = communications.init.call(null, communications.peerjs);
                  var inst_55653 = communications.peerjs.on("connection", comm.onConnection);
                  var state_55662__$1 = function() {
                    var statearr_55666 = state_55662;
                    statearr_55666[9] = inst_55651;
                    statearr_55666[10] = inst_55647;
                    statearr_55666[11] = inst_55649;
                    statearr_55666[12] = inst_55652;
                    return statearr_55666;
                  }();
                  var statearr_55667_55675 = state_55662__$1;
                  statearr_55667_55675[2] = inst_55653;
                  statearr_55667_55675[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_55663 === 2) {
                    var inst_55643 = state_55662[2];
                    var inst_55644 = communications.id = inst_55643;
                    var inst_55645 = logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", communications.id);
                    var state_55662__$1 = function() {
                      var statearr_55668 = state_55662;
                      statearr_55668[13] = inst_55644;
                      statearr_55668[14] = inst_55645;
                      return statearr_55668;
                    }();
                    if (cljs.core.truth_(communications.id)) {
                      var statearr_55669_55676 = state_55662__$1;
                      statearr_55669_55676[1] = 3;
                    } else {
                      var statearr_55670_55677 = state_55662__$1;
                      statearr_55670_55677[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_55663 === 1) {
                      var inst_55641 = communications.g.call(null, "lid");
                      var state_55662__$1 = state_55662;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_55662__$1, 2, inst_55641);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55672 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_55672[0] = state_machine__6577__auto__;
              statearr_55672[1] = 1;
              return statearr_55672;
            };
            var state_machine__6577__auto____1 = function(state_55662) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55662);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55662) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55662);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_55673 = f__6621__auto__.call(null);
        statearr_55673[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_55673;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.bootstrapInternetDriverLayer = function bootstrapInternetDriverLayer() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_55730) {
            var state_val_55731 = state_55730[1];
            if (state_val_55731 === 6) {
              var inst_55725 = state_55730[2];
              var state_55730__$1 = state_55730;
              var statearr_55732_55742 = state_55730__$1;
              statearr_55732_55742[2] = inst_55725;
              statearr_55732_55742[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_55731 === 5) {
                var inst_55727 = state_55730[2];
                var inst_55728 = comm.startP2PCommLoop.call(null);
                var state_55730__$1 = function() {
                  var statearr_55733 = state_55730;
                  statearr_55733[5] = inst_55727;
                  return statearr_55733;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55730__$1, inst_55728);
              } else {
                if (state_val_55731 === 4) {
                  var inst_55723 = pubsub.sia.call(null, "initdb", communications.initDBase);
                  var state_55730__$1 = state_55730;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_55730__$1, 6, inst_55723);
                } else {
                  if (state_val_55731 === 3) {
                    var inst_55716 = console.log(communications.id);
                    var inst_55717 = $("#id");
                    var inst_55718 = inst_55717.val(communications.id);
                    var inst_55719 = new Peer(communications.id, communications.peerParams);
                    var inst_55720 = communications.peerjs = inst_55719;
                    var inst_55721 = communications.peerjs.on("connection", comm.onConnection);
                    var state_55730__$1 = function() {
                      var statearr_55734 = state_55730;
                      statearr_55734[6] = inst_55716;
                      statearr_55734[7] = inst_55718;
                      statearr_55734[8] = inst_55720;
                      return statearr_55734;
                    }();
                    var statearr_55735_55743 = state_55730__$1;
                    statearr_55735_55743[2] = inst_55721;
                    statearr_55735_55743[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_55731 === 2) {
                      var inst_55712 = state_55730[2];
                      var inst_55713 = communications.id = inst_55712;
                      var inst_55714 = logger.og.call(null, new cljs.core.Keyword(null, "entryy", "entryy", -1997262549), "got id %s ", communications.id);
                      var state_55730__$1 = function() {
                        var statearr_55736 = state_55730;
                        statearr_55736[9] = inst_55713;
                        statearr_55736[10] = inst_55714;
                        return statearr_55736;
                      }();
                      if (cljs.core.truth_(communications.id)) {
                        var statearr_55737_55744 = state_55730__$1;
                        statearr_55737_55744[1] = 3;
                      } else {
                        var statearr_55738_55745 = state_55730__$1;
                        statearr_55738_55745[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_55731 === 1) {
                        var inst_55710 = pubsub.sia.call(null, "lid");
                        var state_55730__$1 = state_55730;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_55730__$1, 2, inst_55710);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55740 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_55740[0] = state_machine__6577__auto__;
              statearr_55740[1] = 1;
              return statearr_55740;
            };
            var state_machine__6577__auto____1 = function(state_55730) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55730);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55730) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55730);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_55741 = f__6621__auto__.call(null);
        statearr_55741[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_55741;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.connectionch = cljs.core.async.chan.call(null);
communications.broadcastNewBlock = function broadcastNewBlock(blockk) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block", blockk);
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "broadsacting new block to ", communications.intercomMeta.knownPeersChannels);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_55891) {
            var state_val_55892 = state_55891[1];
            if (state_val_55892 === 7) {
              var inst_55841 = state_55891[5];
              var inst_55839 = state_55891[6];
              var inst_55842 = state_55891[7];
              var inst_55840 = state_55891[8];
              var inst_55856 = state_55891[2];
              var inst_55857 = inst_55842 + 1;
              var tmp55893 = inst_55841;
              var tmp55894 = inst_55839;
              var tmp55895 = inst_55840;
              var inst_55839__$1 = tmp55894;
              var inst_55840__$1 = tmp55895;
              var inst_55841__$1 = tmp55893;
              var inst_55842__$1 = inst_55857;
              var state_55891__$1 = function() {
                var statearr_55896 = state_55891;
                statearr_55896[5] = inst_55841__$1;
                statearr_55896[6] = inst_55839__$1;
                statearr_55896[7] = inst_55842__$1;
                statearr_55896[8] = inst_55840__$1;
                statearr_55896[9] = inst_55856;
                return statearr_55896;
              }();
              var statearr_55897_55920 = state_55891__$1;
              statearr_55897_55920[2] = null;
              statearr_55897_55920[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_55892 === 1) {
                var inst_55837 = communications.intercomMeta.knownPeersChannels;
                var inst_55838 = cljs.core.seq.call(null, inst_55837);
                var inst_55839 = inst_55838;
                var inst_55840 = null;
                var inst_55841 = 0;
                var inst_55842 = 0;
                var state_55891__$1 = function() {
                  var statearr_55898 = state_55891;
                  statearr_55898[5] = inst_55841;
                  statearr_55898[6] = inst_55839;
                  statearr_55898[7] = inst_55842;
                  statearr_55898[8] = inst_55840;
                  return statearr_55898;
                }();
                var statearr_55899_55921 = state_55891__$1;
                statearr_55899_55921[2] = null;
                statearr_55899_55921[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_55892 === 4) {
                  var inst_55842 = state_55891[7];
                  var inst_55840 = state_55891[8];
                  var inst_55847 = cljs.core._nth.call(null, inst_55840, inst_55842);
                  var inst_55848 = "broadsacting new block to peer " + inst_55847;
                  var inst_55849 = inst_55848 + " ";
                  var inst_55850 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_55849, blockk);
                  var inst_55851 = [];
                  var inst_55852 = communications.vectoR = inst_55851;
                  var inst_55853 = communications.vectoR.push(blockk);
                  var inst_55854 = im.makeInv.call(null, "block", communications.vectoR);
                  var state_55891__$1 = function() {
                    var statearr_55900 = state_55891;
                    statearr_55900[10] = inst_55852;
                    statearr_55900[11] = inst_55853;
                    statearr_55900[12] = inst_55850;
                    return statearr_55900;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_55891__$1, 7, inst_55847, inst_55854);
                } else {
                  if (state_val_55892 === 13) {
                    var inst_55882 = state_55891[2];
                    var state_55891__$1 = state_55891;
                    var statearr_55901_55922 = state_55891__$1;
                    statearr_55901_55922[2] = inst_55882;
                    statearr_55901_55922[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_55892 === 6) {
                      var inst_55887 = state_55891[2];
                      var state_55891__$1 = state_55891;
                      var statearr_55902_55923 = state_55891__$1;
                      statearr_55902_55923[2] = inst_55887;
                      statearr_55902_55923[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_55892 === 3) {
                        var inst_55889 = state_55891[2];
                        var state_55891__$1 = state_55891;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55891__$1, inst_55889);
                      } else {
                        if (state_val_55892 === 12) {
                          var inst_55860 = state_55891[13];
                          var inst_55869 = cljs.core.first.call(null, inst_55860);
                          var inst_55870 = "broadsacting new block to peer " + inst_55869;
                          var inst_55871 = inst_55870 + " ";
                          var inst_55872 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), inst_55871, blockk);
                          var inst_55873 = [];
                          var inst_55874 = communications.vectoR = inst_55873;
                          var inst_55875 = communications.vectoR.push(blockk);
                          var inst_55876 = im.makeInv.call(null, "block", communications.vectoR);
                          var state_55891__$1 = function() {
                            var statearr_55903 = state_55891;
                            statearr_55903[14] = inst_55874;
                            statearr_55903[15] = inst_55872;
                            statearr_55903[16] = inst_55875;
                            return statearr_55903;
                          }();
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_55891__$1, 14, inst_55869, inst_55876);
                        } else {
                          if (state_val_55892 === 2) {
                            var inst_55841 = state_55891[5];
                            var inst_55842 = state_55891[7];
                            var inst_55844 = inst_55842 < inst_55841;
                            var inst_55845 = inst_55844;
                            var state_55891__$1 = state_55891;
                            if (cljs.core.truth_(inst_55845)) {
                              var statearr_55904_55924 = state_55891__$1;
                              statearr_55904_55924[1] = 4;
                            } else {
                              var statearr_55905_55925 = state_55891__$1;
                              statearr_55905_55925[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_55892 === 11) {
                              var inst_55860 = state_55891[13];
                              var inst_55864 = cljs.core.chunk_first.call(null, inst_55860);
                              var inst_55865 = cljs.core.chunk_rest.call(null, inst_55860);
                              var inst_55866 = cljs.core.count.call(null, inst_55864);
                              var inst_55839 = inst_55865;
                              var inst_55840 = inst_55864;
                              var inst_55841 = inst_55866;
                              var inst_55842 = 0;
                              var state_55891__$1 = function() {
                                var statearr_55906 = state_55891;
                                statearr_55906[5] = inst_55841;
                                statearr_55906[6] = inst_55839;
                                statearr_55906[7] = inst_55842;
                                statearr_55906[8] = inst_55840;
                                return statearr_55906;
                              }();
                              var statearr_55907_55926 = state_55891__$1;
                              statearr_55907_55926[2] = null;
                              statearr_55907_55926[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_55892 === 9) {
                                var state_55891__$1 = state_55891;
                                var statearr_55908_55927 = state_55891__$1;
                                statearr_55908_55927[2] = null;
                                statearr_55908_55927[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_55892 === 5) {
                                  var inst_55839 = state_55891[6];
                                  var inst_55860 = state_55891[13];
                                  var inst_55860__$1 = cljs.core.seq.call(null, inst_55839);
                                  var state_55891__$1 = function() {
                                    var statearr_55909 = state_55891;
                                    statearr_55909[13] = inst_55860__$1;
                                    return statearr_55909;
                                  }();
                                  if (inst_55860__$1) {
                                    var statearr_55910_55928 = state_55891__$1;
                                    statearr_55910_55928[1] = 8;
                                  } else {
                                    var statearr_55911_55929 = state_55891__$1;
                                    statearr_55911_55929[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_55892 === 14) {
                                    var inst_55860 = state_55891[13];
                                    var inst_55878 = state_55891[2];
                                    var inst_55879 = cljs.core.next.call(null, inst_55860);
                                    var inst_55839 = inst_55879;
                                    var inst_55840 = null;
                                    var inst_55841 = 0;
                                    var inst_55842 = 0;
                                    var state_55891__$1 = function() {
                                      var statearr_55912 = state_55891;
                                      statearr_55912[5] = inst_55841;
                                      statearr_55912[6] = inst_55839;
                                      statearr_55912[7] = inst_55842;
                                      statearr_55912[8] = inst_55840;
                                      statearr_55912[17] = inst_55878;
                                      return statearr_55912;
                                    }();
                                    var statearr_55913_55930 = state_55891__$1;
                                    statearr_55913_55930[2] = null;
                                    statearr_55913_55930[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_55892 === 10) {
                                      var inst_55885 = state_55891[2];
                                      var state_55891__$1 = state_55891;
                                      var statearr_55914_55931 = state_55891__$1;
                                      statearr_55914_55931[2] = inst_55885;
                                      statearr_55914_55931[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_55892 === 8) {
                                        var inst_55860 = state_55891[13];
                                        var inst_55862 = cljs.core.chunked_seq_QMARK_.call(null, inst_55860);
                                        var state_55891__$1 = state_55891;
                                        if (inst_55862) {
                                          var statearr_55915_55932 = state_55891__$1;
                                          statearr_55915_55932[1] = 11;
                                        } else {
                                          var statearr_55916_55933 = state_55891__$1;
                                          statearr_55916_55933[1] = 12;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55918 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_55918[0] = state_machine__6577__auto__;
              statearr_55918[1] = 1;
              return statearr_55918;
            };
            var state_machine__6577__auto____1 = function(state_55891) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55891);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55891) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55891);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_55919 = f__6621__auto__.call(null);
        statearr_55919[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_55919;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.sendmsg = function sendmsg(peer, type, msg) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "sending " + type, msg);
  logger.og.call(null, new cljs.core.Keyword(null, "sendmsg", "sendmsg", -606247143), "peer ", peer);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_55951) {
            var state_val_55952 = state_55951[1];
            if (state_val_55952 === 2) {
              var inst_55949 = state_55951[2];
              var state_55951__$1 = state_55951;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55951__$1, inst_55949);
            } else {
              if (state_val_55952 === 1) {
                var inst_55947 = {"type":type, "msg":msg};
                var state_55951__$1 = state_55951;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_55951__$1, 2, peer, inst_55947);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55954 = [null, null, null, null, null];
              statearr_55954[0] = state_machine__6577__auto__;
              statearr_55954[1] = 1;
              return statearr_55954;
            };
            var state_machine__6577__auto____1 = function(state_55951) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55951);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55951) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55951);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_55955 = f__6621__auto__.call(null);
        statearr_55955[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_55955;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onOpen = function onOpen(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection opened trying to send data trough");
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), conn);
  conn.connType = "saltan";
  var c__6620__auto___55972 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___55972) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto___55972) {
          return function(state_55967) {
            var state_val_55968 = state_55967[1];
            if (state_val_55968 === 2) {
              var inst_55965 = state_55967[2];
              var state_55967__$1 = state_55967;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55967__$1, inst_55965);
            } else {
              if (state_val_55968 === 1) {
                var state_55967__$1 = state_55967;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_55967__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto___55972);
        return function(switch__6576__auto__, c__6620__auto___55972) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55970 = [null, null, null, null, null];
              statearr_55970[0] = state_machine__6577__auto__;
              statearr_55970[1] = 1;
              return statearr_55970;
            };
            var state_machine__6577__auto____1 = function(state_55967) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55967);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55967) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55967);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto___55972);
      }();
      var state__6622__auto__ = function() {
        var statearr_55971 = f__6621__auto__.call(null);
        statearr_55971[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___55972;
        return statearr_55971;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto___55972));
  return logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "conn: ", conn);
};
communications.onConnection = function onConnection(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "connection is opened now try to send something");
  conn.connType = "tsaritsa";
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_55984) {
            var state_val_55985 = state_55984[1];
            if (state_val_55985 === 2) {
              var inst_55982 = state_55984[2];
              var state_55984__$1 = state_55984;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_55984__$1, inst_55982);
            } else {
              if (state_val_55985 === 1) {
                var state_55984__$1 = state_55984;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_55984__$1, 2, communications.connectionch, conn);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_55987 = [null, null, null, null, null];
              statearr_55987[0] = state_machine__6577__auto__;
              statearr_55987[1] = 1;
              return statearr_55987;
            };
            var state_machine__6577__auto____1 = function(state_55984) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_55984);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_55984) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_55984);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_55988 = f__6621__auto__.call(null);
        statearr_55988[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_55988;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onData = function onData(read, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "conn", "conn", 278309663), "data recieved", data);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56000) {
            var state_val_56001 = state_56000[1];
            if (state_val_56001 === 2) {
              var inst_55998 = state_56000[2];
              var state_56000__$1 = state_56000;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56000__$1, inst_55998);
            } else {
              if (state_val_56001 === 1) {
                var state_56000__$1 = state_56000;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_56000__$1, 2, read, data);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56003 = [null, null, null, null, null];
              statearr_56003[0] = state_machine__6577__auto__;
              statearr_56003[1] = 1;
              return statearr_56003;
            };
            var state_machine__6577__auto____1 = function(state_56000) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56000);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56000) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56000);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56004 = f__6621__auto__.call(null);
        statearr_56004[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56004;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.startP2PCommLoop = function startP2PCommLoop() {
  communications.stated = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.connectionch], null);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56172) {
            var state_val_56173 = state_56172[1];
            if (state_val_56173 === 7) {
              var inst_56167 = state_56172[2];
              var state_56172__$1 = function() {
                var statearr_56174 = state_56172;
                statearr_56174[5] = inst_56167;
                return statearr_56174;
              }();
              var statearr_56175_56203 = state_56172__$1;
              statearr_56175_56203[2] = null;
              statearr_56175_56203[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_56173 === 1) {
                var state_56172__$1 = state_56172;
                var statearr_56176_56204 = state_56172__$1;
                statearr_56176_56204[2] = null;
                statearr_56176_56204[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_56173 === 4) {
                  var inst_56108 = state_56172[2];
                  var inst_56109 = communications.v = inst_56108;
                  var inst_56110 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got from state", communications.v);
                  var inst_56111 = cljs.core.nth.call(null, communications.v, 0);
                  var inst_56112 = communications.vrecieved = inst_56111;
                  var inst_56113 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_56114 = communications.ch2 = inst_56113;
                  var inst_56115 = cljs.core.nth.call(null, communications.v, 1);
                  var inst_56116 = inst_56115 === communications.connectionch;
                  var state_56172__$1 = function() {
                    var statearr_56177 = state_56172;
                    statearr_56177[6] = inst_56110;
                    statearr_56177[7] = inst_56114;
                    statearr_56177[8] = inst_56109;
                    statearr_56177[9] = inst_56112;
                    return statearr_56177;
                  }();
                  if (cljs.core.truth_(inst_56116)) {
                    var statearr_56178_56205 = state_56172__$1;
                    statearr_56178_56205[1] = 5;
                  } else {
                    var statearr_56179_56206 = state_56172__$1;
                    statearr_56179_56206[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_56173 === 15) {
                    var inst_56145 = state_56172[2];
                    var inst_56146 = communications.ch2.writec;
                    var inst_56147 = communications.vrecieved.peer = inst_56146;
                    var inst_56148 = communications.ch2.conn;
                    var inst_56149 = pubsub.sia.call(null, "intercomstatemachine", inst_56148, communications.vrecieved);
                    var state_56172__$1 = function() {
                      var statearr_56180 = state_56172;
                      statearr_56180[10] = inst_56147;
                      statearr_56180[11] = inst_56145;
                      return statearr_56180;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56172__$1, 16, inst_56149);
                  } else {
                    if (state_val_56173 === 13) {
                      var inst_56140 = communications.vrecieved.data;
                      var inst_56141 = JSON.parse(inst_56140);
                      var inst_56142 = communications.vrecieved = inst_56141;
                      var state_56172__$1 = state_56172;
                      var statearr_56181_56207 = state_56172__$1;
                      statearr_56181_56207[2] = inst_56142;
                      statearr_56181_56207[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_56173 === 6) {
                        var inst_56133 = communications.ch2.type;
                        var inst_56134 = inst_56133 === "readch";
                        var state_56172__$1 = state_56172;
                        if (cljs.core.truth_(inst_56134)) {
                          var statearr_56182_56208 = state_56172__$1;
                          statearr_56182_56208[1] = 10;
                        } else {
                          var statearr_56183_56209 = state_56172__$1;
                          statearr_56183_56209[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_56173 === 17) {
                          var inst_56156 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "sending to peer ", communications.vrecieved);
                          var inst_56157 = communications.ch2.conn;
                          var inst_56158 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "connection being sent to ", inst_56157);
                          var inst_56159 = communications.ch2.conn;
                          var inst_56160 = inst_56159.send(communications.vrecieved);
                          var state_56172__$1 = function() {
                            var statearr_56184 = state_56172;
                            statearr_56184[12] = inst_56156;
                            statearr_56184[13] = inst_56158;
                            return statearr_56184;
                          }();
                          var statearr_56185_56210 = state_56172__$1;
                          statearr_56185_56210[2] = inst_56160;
                          statearr_56185_56210[1] = 19;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_56173 === 3) {
                            var inst_56170 = state_56172[2];
                            var state_56172__$1 = state_56172;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56172__$1, inst_56170);
                          } else {
                            if (state_val_56173 === 12) {
                              var inst_56165 = state_56172[2];
                              var state_56172__$1 = state_56172;
                              var statearr_56186_56211 = state_56172__$1;
                              statearr_56186_56211[2] = inst_56165;
                              statearr_56186_56211[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_56173 === 2) {
                                var inst_56105 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "new iteration with state");
                                var inst_56106 = logger.og.call(null, new cljs.core.Keyword(null, "p2pCommLoop", "p2pCommLoop", -1999314115), "state ", communications.stated);
                                var state_56172__$1 = function() {
                                  var statearr_56187 = state_56172;
                                  statearr_56187[14] = inst_56106;
                                  statearr_56187[15] = inst_56105;
                                  return statearr_56187;
                                }();
                                return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_56172__$1, 4, communications.stated);
                              } else {
                                if (state_val_56173 === 19) {
                                  var inst_56163 = state_56172[2];
                                  var state_56172__$1 = state_56172;
                                  var statearr_56188_56212 = state_56172__$1;
                                  statearr_56188_56212[2] = inst_56163;
                                  statearr_56188_56212[1] = 12;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_56173 === 11) {
                                    var inst_56153 = communications.ch2.type;
                                    var inst_56154 = inst_56153 === "writech";
                                    var state_56172__$1 = state_56172;
                                    if (cljs.core.truth_(inst_56154)) {
                                      var statearr_56189_56213 = state_56172__$1;
                                      statearr_56189_56213[1] = 17;
                                    } else {
                                      var statearr_56190_56214 = state_56172__$1;
                                      statearr_56190_56214[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_56173 === 9) {
                                      var inst_56131 = state_56172[2];
                                      var state_56172__$1 = state_56172;
                                      var statearr_56191_56215 = state_56172__$1;
                                      statearr_56191_56215[2] = inst_56131;
                                      statearr_56191_56215[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_56173 === 5) {
                                        var inst_56118 = cljs.core.PersistentVector.EMPTY;
                                        var inst_56119 = communications.onNewConnection.call(null, communications.vrecieved);
                                        var state_56172__$1 = function() {
                                          var statearr_56192 = state_56172;
                                          statearr_56192[16] = inst_56118;
                                          return statearr_56192;
                                        }();
                                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56172__$1, 8, inst_56119);
                                      } else {
                                        if (state_val_56173 === 14) {
                                          var state_56172__$1 = state_56172;
                                          var statearr_56193_56216 = state_56172__$1;
                                          statearr_56193_56216[2] = null;
                                          statearr_56193_56216[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_56173 === 16) {
                                            var inst_56151 = state_56172[2];
                                            var state_56172__$1 = state_56172;
                                            var statearr_56194_56217 = state_56172__$1;
                                            statearr_56194_56217[2] = inst_56151;
                                            statearr_56194_56217[1] = 12;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_56173 === 10) {
                                              var inst_56136 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "recieved from peer ", communications.vrecieved);
                                              var inst_56137 = communications.vrecieved.type;
                                              var inst_56138 = inst_56137 === "json";
                                              var state_56172__$1 = function() {
                                                var statearr_56195 = state_56172;
                                                statearr_56195[17] = inst_56136;
                                                return statearr_56195;
                                              }();
                                              if (cljs.core.truth_(inst_56138)) {
                                                var statearr_56196_56218 = state_56172__$1;
                                                statearr_56196_56218[1] = 13;
                                              } else {
                                                var statearr_56197_56219 = state_56172__$1;
                                                statearr_56197_56219[1] = 14;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_56173 === 18) {
                                                var state_56172__$1 = state_56172;
                                                var statearr_56198_56220 = state_56172__$1;
                                                statearr_56198_56220[2] = null;
                                                statearr_56198_56220[1] = 19;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_56173 === 8) {
                                                  var inst_56118 = state_56172[16];
                                                  var inst_56121 = state_56172[2];
                                                  var inst_56122 = cljs.core.concat.call(null, communications.stated, inst_56121);
                                                  var inst_56123 = cljs.core.into.call(null, inst_56118, inst_56122);
                                                  var inst_56124 = communications.stated = inst_56123;
                                                  var inst_56125 = logger.og.call(null, new cljs.core.Keyword(null, "p2ploop", "p2ploop", -674348610), "got connection in p2ploop", communications.vrecieved);
                                                  var inst_56128 = {"type":"conn", "data":communications.vrecieved};
                                                  var inst_56129 = pubsub.sia.call(null, "intercomstatemachine", communications.vrecieved, inst_56128);
                                                  var state_56172__$1 = function() {
                                                    var statearr_56199 = state_56172;
                                                    statearr_56199[18] = inst_56124;
                                                    statearr_56199[19] = inst_56125;
                                                    return statearr_56199;
                                                  }();
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56172__$1, 9, inst_56129);
                                                } else {
                                                  return null;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56201 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_56201[0] = state_machine__6577__auto__;
              statearr_56201[1] = 1;
              return statearr_56201;
            };
            var state_machine__6577__auto____1 = function(state_56172) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56172);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56172) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56172);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56202 = f__6621__auto__.call(null);
        statearr_56202[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56202;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.channelsFromConnection = function channelsFromConnection(conn) {
  communications.readc = cljs.core.async.chan.call(null, 10);
  communications.writec = cljs.core.async.chan.call(null, 10);
  communications.readc.writec = communications.writec;
  communications.readc.type = "readch";
  communications.writec.type = "writech";
  conn.writec = communications.writec;
  conn.readc = communications.readc;
  communications.readc.conn = conn;
  communications.writec.conn = conn;
  conn.on("data", cljs.core.partial.call(null, communications.onData, communications.readc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [communications.readc, communications.writec], null);
};
communications.onNewConnection = function onNewConnection(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56272) {
            var state_val_56273 = state_56272[1];
            if (state_val_56273 === 2) {
              var inst_56253 = state_56272[2];
              var inst_56254 = logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "got new connection", message);
              var inst_56255 = communications.channelsFromConnection.call(null, message);
              var inst_56256 = communications.peerChannels = inst_56255;
              var inst_56257 = communications.intercomMeta.knownPeers;
              var inst_56258 = message.peer;
              var inst_56259 = cljs.core.conj.call(null, inst_56257, inst_56258);
              var inst_56260 = communications.intercomMeta.knownPeers = inst_56259;
              var inst_56261 = cljs.core.nth.call(null, communications.peerChannels, 1);
              var inst_56262 = logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "adding w channel to kpeers ", inst_56261);
              var inst_56263 = communications.intercomMeta.p2pchans;
              var inst_56264 = cljs.core.concat.call(null, inst_56263, communications.peerChannels);
              var inst_56265 = communications.intercomMeta.p2pchans = inst_56264;
              var inst_56266 = communications.intercomMeta.knownPeersChannels;
              var inst_56267 = cljs.core.nth.call(null, communications.peerChannels, 1);
              var inst_56268 = cljs.core.conj.call(null, inst_56266, inst_56267);
              var inst_56269 = communications.intercomMeta.knownPeersChannels = inst_56268;
              var inst_56270 = logger.og.call(null, new cljs.core.Keyword(null, "mloop", "mloop", -1729555731), "new state");
              var state_56272__$1 = function() {
                var statearr_56274 = state_56272;
                statearr_56274[5] = inst_56270;
                statearr_56274[6] = inst_56256;
                statearr_56274[7] = inst_56269;
                statearr_56274[8] = inst_56254;
                statearr_56274[9] = inst_56262;
                statearr_56274[10] = inst_56253;
                statearr_56274[11] = inst_56260;
                statearr_56274[12] = inst_56265;
                return statearr_56274;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56272__$1, communications.peerChannels);
            } else {
              if (state_val_56273 === 1) {
                var inst_56250 = communications.gconn = message;
                var inst_56251 = pubsub.sia.call(null, "setIntercomState", message, "start");
                var state_56272__$1 = function() {
                  var statearr_56275 = state_56272;
                  statearr_56275[13] = inst_56250;
                  return statearr_56275;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56272__$1, 2, inst_56251);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56277 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_56277[0] = state_machine__6577__auto__;
              statearr_56277[1] = 1;
              return statearr_56277;
            };
            var state_machine__6577__auto____1 = function(state_56272) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56272);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56272) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56272);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56278 = f__6621__auto__.call(null);
        statearr_56278[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56278;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onBlockMined = function onBlockMined(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56326) {
            var state_val_56327 = state_56326[1];
            if (state_val_56327 === 4) {
              var inst_56321 = state_56326[2];
              var inst_56322 = communications.gotFromHash = inst_56321;
              var inst_56323 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got from hash ", communications.gotFromHash);
              var inst_56324 = communications.broadcastNewBlock.call(null, communications.gotFromHash);
              var state_56326__$1 = function() {
                var statearr_56328 = state_56326;
                statearr_56328[5] = inst_56323;
                statearr_56328[6] = inst_56322;
                return statearr_56328;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56326__$1, inst_56324);
            } else {
              if (state_val_56327 === 3) {
                var inst_56317 = state_56326[2];
                var inst_56318 = communications.blockk.hash;
                var inst_56319 = db.g.call(null, inst_56318);
                var state_56326__$1 = function() {
                  var statearr_56329 = state_56326;
                  statearr_56329[7] = inst_56317;
                  return statearr_56329;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56326__$1, 4, inst_56319);
              } else {
                if (state_val_56327 === 2) {
                  var inst_56310 = state_56326[2];
                  var inst_56311 = communications.blockk = inst_56310;
                  var inst_56312 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "just made new block ", communications.blockk);
                  var inst_56313 = communications.blockk.hash;
                  var inst_56314 = logger.og.call(null, new cljs.core.Keyword(null, "message", "message", -406056002), "hash to get ", inst_56313);
                  var inst_56315 = b.saveBlock.call(null, app.pouchDB.dbase, communications.blockk);
                  var state_56326__$1 = function() {
                    var statearr_56330 = state_56326;
                    statearr_56330[8] = inst_56314;
                    statearr_56330[9] = inst_56312;
                    statearr_56330[10] = inst_56311;
                    return statearr_56330;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56326__$1, 3, inst_56315);
                } else {
                  if (state_val_56327 === 1) {
                    var inst_56307 = logger.og.call(null, new cljs.core.Keyword(null, "onBlockMined", "onBlockMined", -993463133), "recieved from worker ", message);
                    var inst_56308 = b.makeBlock.call(null, message);
                    var state_56326__$1 = function() {
                      var statearr_56331 = state_56326;
                      statearr_56331[11] = inst_56307;
                      return statearr_56331;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56326__$1, 2, inst_56308);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56333 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_56333[0] = state_machine__6577__auto__;
              statearr_56333[1] = 1;
              return statearr_56333;
            };
            var state_machine__6577__auto____1 = function(state_56326) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56326);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56326) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56326);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56334 = f__6621__auto__.call(null);
        statearr_56334[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56334;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
communications.onTransaction = function onTransaction(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onTransaction", "onTransaction", 1991881135), "recieved new transaction ", message);
  return communications.sha256.call(null, message);
};
communications.onCrypto = function onCrypto(message) {
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "recieved from crypto ", message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "mempoll \x3d ", b.memPool);
  b.addTransactionToMemPool.call(null, message);
  logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), message["type"]);
  if (message["type"] === "fmr") {
    logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "merkle root ", message);
    communications.mine.call(null, message["value"]);
  } else {
  }
  if (cljs.core.count.call(null, b.memPool) > 3) {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_56355) {
              var state_val_56356 = state_56355[1];
              if (state_val_56356 === 2) {
                var inst_56350 = state_56355[2];
                var inst_56351 = communications.fmroot = inst_56350;
                var inst_56352 = logger.og.call(null, new cljs.core.Keyword(null, "onCrypto", "onCrypto", -1930465906), "calculating hash of transactions %s", communications.fmroot);
                var inst_56353 = communications.mine.call(null, communications.fmroot);
                var state_56355__$1 = function() {
                  var statearr_56357 = state_56355;
                  statearr_56357[5] = inst_56351;
                  statearr_56357[6] = inst_56352;
                  return statearr_56357;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56355__$1, inst_56353);
              } else {
                if (state_val_56356 === 1) {
                  var inst_56348 = crypto.merkleRoot.call(null, b.memPool);
                  var state_56355__$1 = state_56355;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56355__$1, 2, inst_56348);
                } else {
                  return null;
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_56359 = [null, null, null, null, null, null, null];
                statearr_56359[0] = state_machine__6577__auto__;
                statearr_56359[1] = 1;
                return statearr_56359;
              };
              var state_machine__6577__auto____1 = function(state_56355) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_56355);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_56355) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_56355);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_56360 = f__6621__auto__.call(null);
          statearr_56360[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_56360;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  } else {
    return null;
  }
};
communications.setupComm = function setupComm() {
  communications.sub.call(null, "blockMined", communications.onBlockMined);
  communications.sub.call(null, "crypto", communications.onCrypto);
  communications.sub.call(null, "transaction", communications.onTransaction);
  return communications.sub.call(null, "newConnection", communications.onNewConnection);
};
goog.provide("display.html");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("ajax.core");
goog.require("reagent.core");
goog.require("pubsub");
goog.require("logger");
display.html.timer = reagent.core.atom.call(null, new Date);
display.html.time_color = reagent.core.atom.call(null, "#f34");
display.html.update_time = function update_time(time) {
  return setTimeout(function() {
    return cljs.core.reset_BANG_.call(null, time, new Date);
  }, 100);
};
display.html.greeting = function greeting(message) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), message], null);
};
display.html.proFile = function proFile(name, desc, pic, extra) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "width", "width", -384071477), "200px"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", 
  "ul.unstyled", -1948620308), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.list-item", "a.list-item", -1757304900), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.pull-left", "div.pull-left", 727555294), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.circle", "div.circle", 2134211799), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", -1651076051), pic, new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "width", "width", 
  -384071477), "40px", new cljs.core.Keyword(null, "height", "height", 1025178622), "40px"], null)], null)], null)], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.text", "div.text", 645060726), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), desc, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.small", "span.small", 1761756015), name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.text-grey", "span.text-grey", 391584589), extra], null)], null)], null)], null)], null)], null)], null)], null);
};
display.html.clock = function clock() {
  display.html.update_time.call(null, display.html.timer);
  var time_str = cljs.core.first.call(null, clojure.string.split.call(null, cljs.core.deref.call(null, display.html.timer).toTimeString(), " "));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.example-clock", "div.example-clock", 1559289088), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1011675173), cljs.core.deref.call(null, display.html.time_color)], null)], null), time_str], null);
};
display.html.color_input = function color_input() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.color-input", "div.color-input", -879914246), "Time color: ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, 
  display.html.time_color), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(p1__46259_SHARP_) {
    return cljs.core.reset_BANG_.call(null, display.html.time_color, p1__46259_SHARP_.target.value);
  }], null)], null)], null);
};
display.html.connetorForm = function connetorForm() {
  return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "inputs"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input.form-control", "input.form-control", -1123419636), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
  "placeholder", "placeholder", -104873083), "label", new cljs.core.Keyword(null, "type", "type", 1174270348), "text"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("cleandb");
  }], null), "cleand"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input.form-control", "input.form-control", -1123419636), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "label", new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "id", "id", -1388402092), "id"], null)], null), new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("setid", $("#id").val());
  }], null), "setid"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input.form-control", "input.form-control", -1123419636), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "label", new cljs.core.Keyword(null, "type", 
  "type", 1174270348), "text"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("connectTo", $("#idt").val());
  }], null), "connect"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("flushdb", 0);
  }], null), "flushdb"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("dumpdb", 0);
  }], null), "dumpdb"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return $(document).trigger("transaction", (new Date).getTime());
  }], null), "transact"], null)], null);
};
display.html.transactions = function transactions() {
  var seconds_elapsed = reagent.core.atom.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["none r now"], null));
  return function(seconds_elapsed) {
    return function() {
      display.html.handler = function(seconds_elapsed) {
        return function handler(response) {
          return cljs.core.swap_BANG_.call(null, seconds_elapsed, function(seconds_elapsed) {
            return function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [response], null);
            };
          }(seconds_elapsed));
        };
      }(seconds_elapsed);
      pubsub.sub.call(null, "transaction", display.html.handler);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", "ul.unstyled", -1948620308), cljs.core.map.call(null, display.html.peer, cljs.core.deref.call(null, seconds_elapsed))], null);
    };
  }(seconds_elapsed);
};
display.html.peer = function peer(peer__$1) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.list-item", "a.list-item", -1757304900), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.text", "div.text", 645060726), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "on-click", "on-click", 1632826543), function() {
    var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
      return function() {
        var f__6621__auto__ = function() {
          var switch__6576__auto__ = function(c__6620__auto__) {
            return function(state_46273) {
              var state_val_46274 = state_46273[1];
              if (state_val_46274 === 2) {
                var inst_46271 = state_46273[2];
                var state_46273__$1 = state_46273;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_46273__$1, inst_46271);
              } else {
                if (state_val_46274 === 1) {
                  var inst_46269 = pubsub.sia.call(null, "connectTo", 0, peer__$1);
                  var state_46273__$1 = state_46273;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_46273__$1, 2, inst_46269);
                } else {
                  return null;
                }
              }
            };
          }(c__6620__auto__);
          return function(switch__6576__auto__, c__6620__auto__) {
            return function() {
              var state_machine__6577__auto__ = null;
              var state_machine__6577__auto____0 = function() {
                var statearr_46276 = [null, null, null, null, null];
                statearr_46276[0] = state_machine__6577__auto__;
                statearr_46276[1] = 1;
                return statearr_46276;
              };
              var state_machine__6577__auto____1 = function(state_46273) {
                while (true) {
                  var result__6578__auto__ = switch__6576__auto__.call(null, state_46273);
                  if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    continue;
                  } else {
                    return result__6578__auto__;
                  }
                  break;
                }
              };
              state_machine__6577__auto__ = function(state_46273) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6577__auto____0.call(this);
                  case 1:
                    return state_machine__6577__auto____1.call(this, state_46273);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
              state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
              return state_machine__6577__auto__;
            }();
          }(switch__6576__auto__, c__6620__auto__);
        }();
        var state__6622__auto__ = function() {
          var statearr_46277 = f__6621__auto__.call(null);
          statearr_46277[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
          return statearr_46277;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
      };
    }(c__6620__auto__));
    return c__6620__auto__;
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span", "span", 1394872991), peer__$1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "br", "br", 934104792)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "span.text-grey.small", "span.text-grey.small", -250272740)], null)], null)], 
  null)], null);
};
display.html.timer_component = function timer_component() {
  var seconds_elapsed = reagent.core.atom.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["none r now"], null));
  return function(seconds_elapsed) {
    return function() {
      setTimeout(function(seconds_elapsed) {
        return function() {
          display.html.handler = function(seconds_elapsed) {
            return function handler(response) {
              return cljs.core.swap_BANG_.call(null, seconds_elapsed, function(seconds_elapsed) {
                return function() {
                  return response;
                };
              }(seconds_elapsed));
            };
          }(seconds_elapsed);
          return ajax.core.GET.call(null, "http://localhost:8000/peerjs/peers", new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "handler", "handler", -195596612), display.html.handler, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), new cljs.core.Keyword(null, "json", "json", 1279968570)], null));
        };
      }(seconds_elapsed), 1E4);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "peers"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.unstyled", "ul.unstyled", -1948620308), cljs.core.map.call(null, display.html.peer, 
      cljs.core.deref.call(null, seconds_elapsed))], null)], null);
    };
  }(seconds_elapsed);
};
display.html.simple_example = function simple_example(name, desc, pic, extra) {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.proFile, name, desc, pic, extra], null);
};
display.html.run = function run(name, desc, pic, extra) {
  return reagent.core.render_component.call(null, function() {
    return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.crow", "div.crow", -1931321925), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.ws-3", "div.ws-3", 228143952), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.connetorForm], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Keyword(null, "div.ws-3", "div.ws-3", 228143952), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.proFile, name, desc, pic, extra], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.ws-3", "div.ws-3", 228143952), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.timer_component], null)], null), new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.ws-3", "div.ws-3", 228143952), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [display.html.transactions], null)], null)], null);
  }, document.body);
};
display.html.ui = function ui() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_46287) {
            var state_val_46288 = state_46287[1];
            if (state_val_46288 === 1) {
              var inst_46285 = display.html.run.call(null, "Taras Bulba", "zaparozie r0x", "i4c32d4308e1fe.jpg", "- zaparozie");
              var state_46287__$1 = state_46287;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_46287__$1, inst_46285);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_46290 = [null, null, null, null, null];
              statearr_46290[0] = state_machine__6577__auto__;
              statearr_46290[1] = 1;
              return statearr_46290;
            };
            var state_machine__6577__auto____1 = function(state_46287) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_46287);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_46287) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_46287);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_46291 = f__6621__auto__.call(null);
        statearr_46291[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_46291;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("display.renderStrategy");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("display.html");
display.renderStrategy.run = function run(renderer) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_46303) {
            var state_val_46304 = state_46303[1];
            if (state_val_46304 === 1) {
              var inst_46301 = display.html.ui.call(null);
              var state_46303__$1 = state_46303;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_46303__$1, inst_46301);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_46306 = [null, null, null, null, null];
              statearr_46306[0] = state_machine__6577__auto__;
              statearr_46306[1] = 1;
              return statearr_46306;
            };
            var state_machine__6577__auto____1 = function(state_46303) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_46303);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_46303) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_46303);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_46307 = f__6621__auto__.call(null);
        statearr_46307[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_46307;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("intercomTake");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
intercomTake.sendm = function sendm(peer, payload) {
  l.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  l.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44104) {
            var state_val_44105 = state_44104[1];
            if (state_val_44105 === 2) {
              var inst_44102 = state_44104[2];
              var state_44104__$1 = state_44104;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44104__$1, inst_44102);
            } else {
              if (state_val_44105 === 1) {
                var state_44104__$1 = state_44104;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_44104__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44107 = [null, null, null, null, null];
              statearr_44107[0] = state_machine__6577__auto__;
              statearr_44107[1] = 1;
              return statearr_44107;
            };
            var state_machine__6577__auto____1 = function(state_44104) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44104);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44104) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44104);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44108 = f__6621__auto__.call(null);
        statearr_44108[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44108;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeInv = function takeInv(fullMessage) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44240) {
            var state_val_44241 = state_44240[1];
            if (state_val_44241 === 7) {
              var inst_44207 = state_44240[2];
              var inst_44208 = intercomTake.heightFromBlock.call(null, inst_44207);
              var inst_44209 = intercomTake.blocks.vector;
              var inst_44210 = inst_44209.length;
              var inst_44211 = inst_44208 + inst_44210;
              var inst_44212 = inst_44211 + 1;
              var inst_44213 = intercomTake.newHeight = inst_44212;
              var inst_44214 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercomTake.newHeight);
              var inst_44215 = intercomTake.bchainHeight < intercomTake.newHeight;
              var state_44240__$1 = function() {
                var statearr_44242 = state_44240;
                statearr_44242[5] = inst_44214;
                statearr_44242[6] = inst_44213;
                return statearr_44242;
              }();
              if (cljs.core.truth_(inst_44215)) {
                var statearr_44243_44261 = state_44240__$1;
                statearr_44243_44261[1] = 8;
              } else {
                var statearr_44244_44262 = state_44240__$1;
                statearr_44244_44262[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_44241 === 1) {
                var inst_44185 = fullMessage.data;
                var inst_44186 = intercomTake.blocks = inst_44185;
                var inst_44187 = l.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercomTake.blocks);
                var inst_44188 = intercomTake.blocks.vector;
                var inst_44189 = inst_44188[0];
                var inst_44190 = blockchain.prevblk.call(null, inst_44189);
                var inst_44191 = blockchain.blockKnown_QMARK_.call(null, inst_44190);
                var state_44240__$1 = function() {
                  var statearr_44245 = state_44240;
                  statearr_44245[7] = inst_44187;
                  statearr_44245[8] = inst_44186;
                  return statearr_44245;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44240__$1, 2, inst_44191);
              } else {
                if (state_val_44241 === 4) {
                  var inst_44224 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercomTake.blocks);
                  var inst_44225 = db.g.call(null, "last");
                  var state_44240__$1 = function() {
                    var statearr_44246 = state_44240;
                    statearr_44246[9] = inst_44224;
                    return statearr_44246;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44240__$1, 11, inst_44225);
                } else {
                  if (state_val_44241 === 13) {
                    var inst_44231 = state_44240[10];
                    var inst_44234 = state_44240[2];
                    var state_44240__$1 = state_44240;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_44240__$1, 12, inst_44231, inst_44234);
                  } else {
                    if (state_val_44241 === 6) {
                      var inst_44199 = state_44240[2];
                      var inst_44200 = intercomTake.bchainHeight = inst_44199;
                      var inst_44201 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercomTake.bchainHeight);
                      var inst_44202 = intercomTake.blocks.vector;
                      var inst_44203 = inst_44202[0];
                      var inst_44204 = blockchain.prevblk.call(null, inst_44203);
                      var inst_44205 = db.g.call(null, inst_44204);
                      var state_44240__$1 = function() {
                        var statearr_44247 = state_44240;
                        statearr_44247[11] = inst_44200;
                        statearr_44247[12] = inst_44201;
                        return statearr_44247;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44240__$1, 7, inst_44205);
                    } else {
                      if (state_val_44241 === 3) {
                        var inst_44195 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                        var inst_44196 = "blockchainHeight".call(null);
                        var inst_44197 = cljs.core.apply.call(null, pubsub.sia, inst_44196);
                        var state_44240__$1 = function() {
                          var statearr_44248 = state_44240;
                          statearr_44248[13] = inst_44195;
                          return statearr_44248;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44240__$1, 6, inst_44197);
                      } else {
                        if (state_val_44241 === 12) {
                          var inst_44236 = state_44240[2];
                          var state_44240__$1 = state_44240;
                          var statearr_44249_44263 = state_44240__$1;
                          statearr_44249_44263[2] = inst_44236;
                          statearr_44249_44263[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_44241 === 2) {
                            var inst_44193 = state_44240[2];
                            var state_44240__$1 = state_44240;
                            if (cljs.core.truth_(inst_44193)) {
                              var statearr_44250_44264 = state_44240__$1;
                              statearr_44250_44264[1] = 3;
                            } else {
                              var statearr_44251_44265 = state_44240__$1;
                              statearr_44251_44265[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_44241 === 11) {
                              var inst_44227 = state_44240[2];
                              var inst_44228 = inst_44227.hash;
                              var inst_44229 = intercomTake.lblock = inst_44228;
                              var inst_44230 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercomTake.lblock);
                              var inst_44231 = fullMessage.peer;
                              var inst_44232 = im.makeGetBlock.call(null, intercomTake.lblock);
                              var state_44240__$1 = function() {
                                var statearr_44252 = state_44240;
                                statearr_44252[14] = inst_44229;
                                statearr_44252[10] = inst_44231;
                                statearr_44252[15] = inst_44230;
                                return statearr_44252;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44240__$1, 13, inst_44232);
                            } else {
                              if (state_val_44241 === 9) {
                                var inst_44220 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                var state_44240__$1 = state_44240;
                                var statearr_44253_44266 = state_44240__$1;
                                statearr_44253_44266[2] = inst_44220;
                                statearr_44253_44266[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_44241 === 5) {
                                  var inst_44238 = state_44240[2];
                                  var state_44240__$1 = function() {
                                    var statearr_44254 = state_44240;
                                    statearr_44254[16] = inst_44238;
                                    return statearr_44254;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44240__$1, "grind");
                                } else {
                                  if (state_val_44241 === 10) {
                                    var inst_44222 = state_44240[2];
                                    var state_44240__$1 = state_44240;
                                    var statearr_44255_44267 = state_44240__$1;
                                    statearr_44255_44267[2] = inst_44222;
                                    statearr_44255_44267[1] = 5;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_44241 === 8) {
                                      var inst_44217 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
                                      var inst_44218 = blockchain.addToChain.call(null, intercomTake.blocks);
                                      var state_44240__$1 = function() {
                                        var statearr_44256 = state_44240;
                                        statearr_44256[17] = inst_44217;
                                        return statearr_44256;
                                      }();
                                      var statearr_44257_44268 = state_44240__$1;
                                      statearr_44257_44268[2] = inst_44218;
                                      statearr_44257_44268[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44259 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_44259[0] = state_machine__6577__auto__;
              statearr_44259[1] = 1;
              return statearr_44259;
            };
            var state_machine__6577__auto____1 = function(state_44240) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44240);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44240) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44240);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44260 = f__6621__auto__.call(null);
        statearr_44260[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44260;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeData = function takeData(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44289) {
            var state_val_44290 = state_44289[1];
            if (state_val_44290 === 1) {
              var inst_44282 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_44283 = l.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_44284 = intercomTake.v.data;
              var inst_44285 = it.handleInvBlock.call(null, inst_44284, intercomTake.v);
              var inst_44286 = intercomTake.tostate.call(null, "grind");
              var inst_44287 = intercomTake.tostate.call(null, "grind", intercomTake.handleInvBlock);
              var state_44289__$1 = function() {
                var statearr_44291 = state_44289;
                statearr_44291[5] = inst_44285;
                statearr_44291[6] = inst_44286;
                statearr_44291[7] = inst_44282;
                statearr_44291[8] = inst_44283;
                return statearr_44291;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44289__$1, inst_44287);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44293 = [null, null, null, null, null, null, null, null, null];
              statearr_44293[0] = state_machine__6577__auto__;
              statearr_44293[1] = 1;
              return statearr_44293;
            };
            var state_machine__6577__auto____1 = function(state_44289) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44289);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44289) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44289);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44294 = f__6621__auto__.call(null);
        statearr_44294[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44294;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeGetVersion = function takeGetVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44311) {
            var state_val_44312 = state_44311[1];
            if (state_val_44312 === 1) {
              var inst_44306 = intercomTake.v.peer;
              var inst_44307 = intercomTake.sendmsg.call(null, inst_44306, "version", "0");
              var inst_44308 = intercomTake.tostate.call(null, "grind");
              var inst_44309 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_44311__$1 = function() {
                var statearr_44313 = state_44311;
                statearr_44313[5] = inst_44307;
                statearr_44313[6] = inst_44308;
                return statearr_44313;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44311__$1, inst_44309);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44315 = [null, null, null, null, null, null, null];
              statearr_44315[0] = state_machine__6577__auto__;
              statearr_44315[1] = 1;
              return statearr_44315;
            };
            var state_machine__6577__auto____1 = function(state_44311) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44311);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44311) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44311);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44316 = f__6621__auto__.call(null);
        statearr_44316[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44316;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeVersion = function takeVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44327) {
            var state_val_44328 = state_44327[1];
            if (state_val_44328 === 1) {
              var inst_44325 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_44327__$1 = function() {
                var statearr_44329 = state_44327;
                statearr_44329[5] = inst_44325;
                return statearr_44329;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44327__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44331 = [null, null, null, null, null, null];
              statearr_44331[0] = state_machine__6577__auto__;
              statearr_44331[1] = 1;
              return statearr_44331;
            };
            var state_machine__6577__auto____1 = function(state_44327) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44327);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44327) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44327);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44332 = f__6621__auto__.call(null);
        statearr_44332[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44332;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeConn = function takeConn(conn) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44373) {
            var state_val_44374 = state_44373[1];
            if (state_val_44374 === 4) {
              var inst_44371 = state_44373[2];
              var state_44373__$1 = state_44373;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44373__$1, inst_44371);
            } else {
              if (state_val_44374 === 3) {
                var state_44373__$1 = state_44373;
                var statearr_44375_44383 = state_44373__$1;
                statearr_44375_44383[2] = "version";
                statearr_44375_44383[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_44374 === 2) {
                  var state_44373__$1 = state_44373;
                  var statearr_44376_44384 = state_44373__$1;
                  statearr_44376_44384[2] = "grind";
                  statearr_44376_44384[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_44374 === 1) {
                    var inst_44358 = l.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_44359 = conn.data;
                    var inst_44360 = inst_44359.writec;
                    var inst_44361 = im.makeVersion.call(null, "0");
                    var inst_44362 = intercomTake.sendm.call(null, inst_44360, inst_44361);
                    var inst_44363 = conn.connType;
                    var inst_44364 = l.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_44363);
                    var inst_44365 = conn.data;
                    var inst_44366 = inst_44365.connType;
                    var inst_44367 = inst_44366 === "saltan";
                    var state_44373__$1 = function() {
                      var statearr_44377 = state_44373;
                      statearr_44377[5] = inst_44364;
                      statearr_44377[6] = inst_44362;
                      statearr_44377[7] = inst_44358;
                      return statearr_44377;
                    }();
                    if (cljs.core.truth_(inst_44367)) {
                      var statearr_44378_44385 = state_44373__$1;
                      statearr_44378_44385[1] = 2;
                    } else {
                      var statearr_44379_44386 = state_44373__$1;
                      statearr_44379_44386[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44381 = [null, null, null, null, null, null, null, null];
              statearr_44381[0] = state_machine__6577__auto__;
              statearr_44381[1] = 1;
              return statearr_44381;
            };
            var state_machine__6577__auto____1 = function(state_44373) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44373);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44373) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44373);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44382 = f__6621__auto__.call(null);
        statearr_44382[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44382;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercomTake.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44407) {
            var state_val_44408 = state_44407[1];
            if (state_val_44408 === 2) {
              var inst_44404 = state_44407[2];
              var inst_44405 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_44404);
              var state_44407__$1 = state_44407;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44407__$1, inst_44405);
            } else {
              if (state_val_44408 === 1) {
                var inst_44400 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_44401 = l.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_44402 = intercomTake.makeGetBlock.call(null, hash);
                var state_44407__$1 = function() {
                  var statearr_44409 = state_44407;
                  statearr_44409[5] = inst_44401;
                  statearr_44409[6] = inst_44400;
                  return statearr_44409;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44407__$1, 2, inst_44402);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44411 = [null, null, null, null, null, null, null];
              statearr_44411[0] = state_machine__6577__auto__;
              statearr_44411[1] = 1;
              return statearr_44411;
            };
            var state_machine__6577__auto____1 = function(state_44407) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44407);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44407) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44407);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44412 = f__6621__auto__.call(null);
        statearr_44412[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44412;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("routing");
goog.require("cljs.core");
goog.require("display.renderStrategy");
goog.require("intercomMake");
goog.require("blockchain");
goog.require("cljs.core.async");
goog.require("mockdatabasew");
goog.require("communications");
goog.require("intercomTake");
goog.require("crypt");
goog.require("logger");
goog.require("mining");
routing.routea = function routea(f, rch, sch) {
  return f.call(null, rch, sch, "cleandb", mockdatabasew.cleandb, "connectTo", communications.connectTo, "dumpdb", mockdatabasew.dumpdb, "g", mockdatabasew.reg, "db", mockdatabasew.reg, "initdb", mockdatabasew.initDBase, "onDatabaseChange", mockdatabasew.onDatabaseChange, "p", mockdatabasew.reg, "s", mockdatabasew.s, "update", mockdatabasew.update, "database", mockdatabasew.reg, "ui", display.renderStrategy.run, "addToChain", blockchain.addToChain, "addTransactionToBlock", blockchain.addTransactionToBlock, 
  "blockKnown?", blockchain.blockKnown_QMARK_, "blockchainHeight", blockchain.blockchainHeight, "heightFromBlock", blockchain.heightFromBlock, "last?", blockchain.last_QMARK_, "log2", blockchain.log2, "makeBlock", blockchain.makeBlock, "makeBlockHeader", blockchain.makeBlockHeader, "makeTransaction", blockchain.makeTransaction, "popA", blockchain.popA, "prevblk", blockchain.prevblk, "removeTransactionFromMemPool", blockchain.removeTransactionFromMemPool, "saveBlock", blockchain.saveBlock, "broadcastNewBlock", 
  communications.broadcastNewBlock, "channelsFromConnection", communications.channelsFromConnection, "cryptoCh", communications.cryptoCh, "initial", communications.initial, "intercomMeta", communications.intercomMeta, "onBlockMined", communications.onBlockMined, "onConnection", communications.onConnection, "onCrypto", communications.onCrypto, "onData", communications.onData, "onNewConnection", communications.onNewConnection, "onOpen", communications.onOpen, "onTransaction", communications.onTransaction, 
  "sendmsg", communications.sendmsg, "setID", communications.setID, "setupComm", communications.setupComm, "startP2PCommLoop", communications.startP2PCommLoop, "arraybtostring", crypt.arraybtostring, "bHash", crypt.bHash, "encode", crypt.encode, "hash", crypt.s256, "merkleRoot", crypt.merkleRoot, "resultToCh", crypt.resultToCh, "s256", crypt.s256, "sha256", crypt.sha256, "sha256c", crypt.sha256c, "shaCallb", crypt.shaCallb, "getIntercomState", intercom.getIntercomState, "intercomstatemachine", intercom.intercomstatemachine, 
  "is?", intercom.is_QMARK_, "onMessage", intercom.onMessage, "setIntercomState", intercom.setIntercomState, "tostateu", intercom.tostateu, "typeof?", intercom.typeof_QMARK_, "makeConn", intercomMake.makeConn, "makeData", intercomMake.makeData, "makeGetBlock", intercomMake.makeGetBlock, "makeInv", intercomMake.makeGetVersion, "makeInv", intercomMake.makeInv, "makeVersion", intercomMake.makeVersion, "sendm", intercomTake.sendm, "takeConn", intercomTake.takeConn, "takeData", intercomTake.takeData, 
  "takeGetBlocks", intercomTake.takeGetBlocks, "takeGetVersion", intercomTake.takeGetVersion, "takeInv", intercomTake.takeInv, "log", logger.og, "mine", mining.mine, "mg", mockdatabase.g, "mp", mockdatabase.p, "mps", mockdatabase.ps, "mupdate", mockdatabase.update, "mcleandb", mockdatabasew.cleandb, "mdumpdb", mockdatabasew.dumpdb, "mg", mockdatabasew.g, "minitDBase", mockdatabasew.initDBase, "mp", mockdatabasew.p, "mps", mockdatabasew.ps, "mupdate", mockdatabasew.update);
};
goog.provide("database");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
database.states = function() {
  var obj43934 = {};
  return obj43934;
}();
database.cleandb = function cleandb() {
  return m.cleandb.call(null);
};
database.dumpdb = function dumpdb() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_43945) {
            var state_val_43946 = state_43945[1];
            if (state_val_43946 === 1) {
              var inst_43943 = logger.og.call(null, database.states);
              var state_43945__$1 = function() {
                var statearr_43947 = state_43945;
                statearr_43947[5] = inst_43943;
                return statearr_43947;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_43945__$1, 1);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_43949 = [null, null, null, null, null, null];
              statearr_43949[0] = state_machine__6577__auto__;
              statearr_43949[1] = 1;
              return statearr_43949;
            };
            var state_machine__6577__auto____1 = function(state_43945) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_43945);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_43945) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_43945);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_43950 = f__6621__auto__.call(null);
        statearr_43950[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_43950;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.onDatabaseChange = cljs.core.async.chan.call(null);
database.onDatabaseChange.type = "databaseChange";
database.update = function update(k, f) {
  return logger.og.call(null, new cljs.core.Keyword(null, "dbupdate", "dbupdate", 1437384630), "getting from db ", k);
};
database.g = function g(k) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_43964) {
            var state_val_43965 = state_43964[1];
            if (state_val_43965 === 2) {
              var inst_43962 = state_43964[2];
              var state_43964__$1 = state_43964;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_43964__$1, inst_43962);
            } else {
              if (state_val_43965 === 1) {
                var inst_43960 = m.g.call(null, k);
                var state_43964__$1 = state_43964;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_43964__$1, 2, inst_43960);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_43967 = [null, null, null, null, null];
              statearr_43967[0] = state_machine__6577__auto__;
              statearr_43967[1] = 1;
              return statearr_43967;
            };
            var state_machine__6577__auto____1 = function(state_43964) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_43964);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_43964) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_43964);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_43968 = f__6621__auto__.call(null);
        statearr_43968[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_43968;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.update = function update(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_43982) {
            var state_val_43983 = state_43982[1];
            if (state_val_43983 === 2) {
              var inst_43980 = state_43982[2];
              var state_43982__$1 = state_43982;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_43982__$1, inst_43980);
            } else {
              if (state_val_43983 === 1) {
                var inst_43978 = m.update.call(null, k, v);
                var state_43982__$1 = state_43982;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_43982__$1, 2, inst_43978);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_43985 = [null, null, null, null, null];
              statearr_43985[0] = state_machine__6577__auto__;
              statearr_43985[1] = 1;
              return statearr_43985;
            };
            var state_machine__6577__auto____1 = function(state_43982) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_43982);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_43982) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_43982);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_43986 = f__6621__auto__.call(null);
        statearr_43986[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_43986;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.p = function p(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44000) {
            var state_val_44001 = state_44000[1];
            if (state_val_44001 === 2) {
              var inst_43998 = state_44000[2];
              var state_44000__$1 = state_44000;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44000__$1, inst_43998);
            } else {
              if (state_val_44001 === 1) {
                var inst_43996 = m.p.call(null, k, v);
                var state_44000__$1 = state_44000;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44000__$1, 2, inst_43996);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44003 = [null, null, null, null, null];
              statearr_44003[0] = state_machine__6577__auto__;
              statearr_44003[1] = 1;
              return statearr_44003;
            };
            var state_machine__6577__auto____1 = function(state_44000) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44000);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44000) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44000);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44004 = f__6621__auto__.call(null);
        statearr_44004[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44004;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.ps = function ps(k, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44018) {
            var state_val_44019 = state_44018[1];
            if (state_val_44019 === 2) {
              var inst_44016 = state_44018[2];
              var state_44018__$1 = state_44018;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44018__$1, inst_44016);
            } else {
              if (state_val_44019 === 1) {
                var inst_44014 = m.p.call(null, k, v);
                var state_44018__$1 = state_44018;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_44018__$1, 2, inst_44014);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44021 = [null, null, null, null, null];
              statearr_44021[0] = state_machine__6577__auto__;
              statearr_44021[1] = 1;
              return statearr_44021;
            };
            var state_machine__6577__auto____1 = function(state_44018) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44018);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44018) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44018);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44022 = f__6621__auto__.call(null);
        statearr_44022[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44022;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.reg = function reg(typ, v) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_44063) {
            var state_val_44064 = state_44063[1];
            if (state_val_44064 === 7) {
              var inst_44059 = state_44063[2];
              var state_44063__$1 = state_44063;
              var statearr_44065_44077 = state_44063__$1;
              statearr_44065_44077[2] = inst_44059;
              statearr_44065_44077[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_44064 === 6) {
                var state_44063__$1 = state_44063;
                var statearr_44066_44078 = state_44063__$1;
                statearr_44066_44078[2] = 0;
                statearr_44066_44078[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_44064 === 5) {
                  var inst_44056 = database.states[typ];
                  var state_44063__$1 = state_44063;
                  var statearr_44067_44079 = state_44063__$1;
                  statearr_44067_44079[2] = inst_44056;
                  statearr_44067_44079[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_44064 === 4) {
                    var inst_44061 = state_44063[2];
                    var state_44063__$1 = state_44063;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_44063__$1, inst_44061);
                  } else {
                    if (state_val_44064 === 3) {
                      var inst_44054 = database.states[typ];
                      var state_44063__$1 = state_44063;
                      if (cljs.core.truth_(inst_44054)) {
                        var statearr_44068_44080 = state_44063__$1;
                        statearr_44068_44080[1] = 5;
                      } else {
                        var statearr_44069_44081 = state_44063__$1;
                        statearr_44069_44081[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_44064 === 2) {
                        var inst_44052 = database.states[typ] = v;
                        var state_44063__$1 = state_44063;
                        var statearr_44070_44082 = state_44063__$1;
                        statearr_44070_44082[2] = inst_44052;
                        statearr_44070_44082[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_44064 === 1) {
                          var inst_44050 = logger.og.call(null, new cljs.core.Keyword(null, "reg", "reg", 1636216344), typ, v);
                          var state_44063__$1 = function() {
                            var statearr_44071 = state_44063;
                            statearr_44071[5] = inst_44050;
                            return statearr_44071;
                          }();
                          if (cljs.core.truth_(v)) {
                            var statearr_44072_44083 = state_44063__$1;
                            statearr_44072_44083[1] = 2;
                          } else {
                            var statearr_44073_44084 = state_44063__$1;
                            statearr_44073_44084[1] = 3;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_44075 = [null, null, null, null, null, null];
              statearr_44075[0] = state_machine__6577__auto__;
              statearr_44075[1] = 1;
              return statearr_44075;
            };
            var state_machine__6577__auto____1 = function(state_44063) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_44063);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_44063) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_44063);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_44076 = f__6621__auto__.call(null);
        statearr_44076[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_44076;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
database.initDBase = function initDBase(x) {
  logger.og.call(null, new cljs.core.Keyword(null, "initdbwraper", "initdbwraper", 631490056), "wrapper", x);
  return m.initDBase.call(null, x);
};
goog.provide("intercomMakeUtil");
goog.require("cljs.core");
goog.provide("intercom");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("logger");
goog.require("pubsub");
cljs.core.enable_console_print_BANG_.call(null);
intercom.intercomState = "start";
intercom.state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
intercom.inputch = cljs.core.async.chan.call(null);
intercom.outputch = cljs.core.async.chan.call(null);
intercom.statech = cljs.core.async.chan.call(null);
intercom.onMessage = function onMessage(wch, type, data) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), type + " message in intercom", data);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_58890) {
            var state_val_58891 = state_58890[1];
            if (state_val_58891 === 2) {
              var inst_58888 = state_58890[2];
              var state_58890__$1 = state_58890;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_58890__$1, inst_58888);
            } else {
              if (state_val_58891 === 1) {
                var inst_58886 = {"type":type, "data":data, "peer":wch};
                var state_58890__$1 = state_58890;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_58890__$1, 2, intercom.inputch, inst_58886);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_58893 = [null, null, null, null, null];
              statearr_58893[0] = state_machine__6577__auto__;
              statearr_58893[1] = 1;
              return statearr_58893;
            };
            var state_machine__6577__auto____1 = function(state_58890) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_58890);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_58890) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_58890);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_58894 = f__6621__auto__.call(null);
        statearr_58894[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_58894;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.setIntercomState = function setIntercomState(conn, state) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_58904) {
            var state_val_58905 = state_58904[1];
            if (state_val_58905 === 1) {
              var inst_58902 = conn.intercomstate = state;
              var state_58904__$1 = state_58904;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_58904__$1, inst_58902);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_58907 = [null, null, null, null, null];
              statearr_58907[0] = state_machine__6577__auto__;
              statearr_58907[1] = 1;
              return statearr_58907;
            };
            var state_machine__6577__auto____1 = function(state_58904) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_58904);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_58904) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_58904);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_58908 = f__6621__auto__.call(null);
        statearr_58908[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_58908;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.getIntercomState = function getIntercomState(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "getIntercomState", "getIntercomState", -1128989799), "intercom state", conn);
  return conn["intercomstate"];
};
intercom.tostateu = function tostateu(conn, statename) {
  logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "changing state to: ", statename);
  return conn["intercomstate"] = statename;
};
intercom.typeof_QMARK_ = function typeof_QMARK_(message, type) {
  return message.type === type;
};
intercom.is_QMARK_ = function is_QMARK_(state, qstate) {
  return state === qstate;
};
intercom.intercomstatemachine = function intercomstatemachine(conn, message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59138) {
            var state_val_59139 = state_59138[1];
            if (state_val_59139 === 7) {
              var inst_59081 = intercom.is_QMARK_.call(null, intercom.state, "grind");
              var state_59138__$1 = state_59138;
              if (inst_59081) {
                var statearr_59140_59189 = state_59138__$1;
                statearr_59140_59189[1] = 13;
              } else {
                var statearr_59141_59190 = state_59138__$1;
                statearr_59141_59190[1] = 14;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_59139 === 20) {
                var inst_59093 = intercom.typeof_QMARK_.call(null, message, "getdata");
                var state_59138__$1 = state_59138;
                if (inst_59093) {
                  var statearr_59142_59191 = state_59138__$1;
                  statearr_59142_59191[1] = 22;
                } else {
                  var statearr_59143_59192 = state_59138__$1;
                  statearr_59143_59192[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_59139 === 27) {
                  var inst_59123 = state_59138[2];
                  var state_59138__$1 = state_59138;
                  var statearr_59144_59193 = state_59138__$1;
                  statearr_59144_59193[2] = inst_59123;
                  statearr_59144_59193[1] = 24;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_59139 === 1) {
                    var inst_59049 = cljs.core.partial.call(null, intercom.tostateu, conn);
                    var inst_59050 = intercom.tostate = inst_59049;
                    var inst_59051 = intercom.getIntercomState.call(null, conn);
                    var inst_59052 = intercom.state = inst_59051;
                    var inst_59053 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "starting loop in intercom");
                    var inst_59054 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state in intercom ", intercom.state);
                    var inst_59055 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message in intercom ", message);
                    var inst_59056 = message.data;
                    var inst_59057 = intercom.v = inst_59056;
                    var inst_59058 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "state ", intercom.state);
                    var inst_59059 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "message ", message);
                    var inst_59060 = intercom.is_QMARK_.call(null, intercom.state, "start");
                    var state_59138__$1 = function() {
                      var statearr_59145 = state_59138;
                      statearr_59145[5] = inst_59059;
                      statearr_59145[6] = inst_59055;
                      statearr_59145[7] = inst_59058;
                      statearr_59145[8] = inst_59053;
                      statearr_59145[9] = inst_59050;
                      statearr_59145[10] = inst_59057;
                      statearr_59145[11] = inst_59052;
                      statearr_59145[12] = inst_59054;
                      return statearr_59145;
                    }();
                    if (inst_59060) {
                      var statearr_59146_59194 = state_59138__$1;
                      statearr_59146_59194[1] = 2;
                    } else {
                      var statearr_59147_59195 = state_59138__$1;
                      statearr_59147_59195[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_59139 === 24) {
                      var inst_59125 = state_59138[2];
                      var state_59138__$1 = state_59138;
                      var statearr_59148_59196 = state_59138__$1;
                      statearr_59148_59196[2] = inst_59125;
                      statearr_59148_59196[1] = 21;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_59139 === 4) {
                        var inst_59136 = state_59138[2];
                        var state_59138__$1 = state_59138;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59138__$1, inst_59136);
                      } else {
                        if (state_val_59139 === 15) {
                          var inst_59132 = state_59138[2];
                          var state_59138__$1 = state_59138;
                          var statearr_59149_59197 = state_59138__$1;
                          statearr_59149_59197[2] = inst_59132;
                          statearr_59149_59197[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_59139 === 21) {
                            var inst_59127 = state_59138[2];
                            var state_59138__$1 = state_59138;
                            var statearr_59150_59198 = state_59138__$1;
                            statearr_59150_59198[2] = inst_59127;
                            statearr_59150_59198[1] = 18;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_59139 === 31) {
                              var inst_59110 = intercom.takeData.call(null, message);
                              var inst_59111 = intercom.tostate.call(null, inst_59110);
                              var state_59138__$1 = state_59138;
                              var statearr_59151_59199 = state_59138__$1;
                              statearr_59151_59199[2] = inst_59111;
                              statearr_59151_59199[1] = 33;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_59139 === 32) {
                                var state_59138__$1 = state_59138;
                                var statearr_59152_59200 = state_59138__$1;
                                statearr_59152_59200[1] = 34;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_59139 === 33) {
                                  var inst_59119 = state_59138[2];
                                  var state_59138__$1 = state_59138;
                                  var statearr_59154_59201 = state_59138__$1;
                                  statearr_59154_59201[2] = inst_59119;
                                  statearr_59154_59201[1] = 30;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_59139 === 13) {
                                    var inst_59083 = intercom.typeof_QMARK_.call(null, message, "conn");
                                    var state_59138__$1 = state_59138;
                                    if (inst_59083) {
                                      var statearr_59155_59202 = state_59138__$1;
                                      statearr_59155_59202[1] = 16;
                                    } else {
                                      var statearr_59156_59203 = state_59138__$1;
                                      statearr_59156_59203[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_59139 === 22) {
                                      var inst_59095 = intercom.takeGetData.call(null, message);
                                      var inst_59096 = intercom.tostate.call(null, inst_59095);
                                      var state_59138__$1 = state_59138;
                                      var statearr_59157_59204 = state_59138__$1;
                                      statearr_59157_59204[2] = inst_59096;
                                      statearr_59157_59204[1] = 24;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_59139 === 36) {
                                        var inst_59117 = state_59138[2];
                                        var state_59138__$1 = state_59138;
                                        var statearr_59158_59205 = state_59138__$1;
                                        statearr_59158_59205[2] = inst_59117;
                                        statearr_59158_59205[1] = 33;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_59139 === 29) {
                                          var inst_59108 = intercom.typeof_QMARK_.call(null, message, "data");
                                          var state_59138__$1 = state_59138;
                                          if (inst_59108) {
                                            var statearr_59159_59206 = state_59138__$1;
                                            statearr_59159_59206[1] = 31;
                                          } else {
                                            var statearr_59160_59207 = state_59138__$1;
                                            statearr_59160_59207[1] = 32;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_59139 === 6) {
                                            var inst_59071 = intercom.typeof_QMARK_.call(null, message, "version");
                                            var state_59138__$1 = state_59138;
                                            if (inst_59071) {
                                              var statearr_59161_59208 = state_59138__$1;
                                              statearr_59161_59208[1] = 9;
                                            } else {
                                              var statearr_59162_59209 = state_59138__$1;
                                              statearr_59162_59209[1] = 10;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_59139 === 28) {
                                              var inst_59105 = intercom.takeTx.call(null, message);
                                              var inst_59106 = intercom.tostate.call(null, inst_59105);
                                              var state_59138__$1 = state_59138;
                                              var statearr_59163_59210 = state_59138__$1;
                                              statearr_59163_59210[2] = inst_59106;
                                              statearr_59163_59210[1] = 30;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_59139 === 25) {
                                                var inst_59100 = intercom.takeGetTx.call(null, message);
                                                var inst_59101 = intercom.tostate.call(null, inst_59100);
                                                var state_59138__$1 = state_59138;
                                                var statearr_59164_59211 = state_59138__$1;
                                                statearr_59164_59211[2] = inst_59101;
                                                statearr_59164_59211[1] = 27;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_59139 === 34) {
                                                  var inst_59114 = intercom.tostate.call(null, "grind");
                                                  var state_59138__$1 = state_59138;
                                                  var statearr_59165_59212 = state_59138__$1;
                                                  statearr_59165_59212[2] = inst_59114;
                                                  statearr_59165_59212[1] = 36;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_59139 === 17) {
                                                    var inst_59088 = intercom.typeof_QMARK_.call(null, message, "inv");
                                                    var state_59138__$1 = state_59138;
                                                    if (inst_59088) {
                                                      var statearr_59166_59213 = state_59138__$1;
                                                      statearr_59166_59213[1] = 19;
                                                    } else {
                                                      var statearr_59167_59214 = state_59138__$1;
                                                      statearr_59167_59214[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_59139 === 3) {
                                                      var inst_59069 = intercom.is_QMARK_.call(null, intercom.state, "version");
                                                      var state_59138__$1 = state_59138;
                                                      if (inst_59069) {
                                                        var statearr_59168_59215 = state_59138__$1;
                                                        statearr_59168_59215[1] = 6;
                                                      } else {
                                                        var statearr_59169_59216 = state_59138__$1;
                                                        statearr_59169_59216[1] = 7;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_59139 === 12) {
                                                        var inst_59075 = state_59138[2];
                                                        var inst_59076 = intercom.tostate.call(null, inst_59075);
                                                        var state_59138__$1 = state_59138;
                                                        var statearr_59170_59217 = state_59138__$1;
                                                        statearr_59170_59217[2] = inst_59076;
                                                        statearr_59170_59217[1] = 11;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_59139 === 2) {
                                                          var inst_59062 = intercom.takeConn.call(null, message);
                                                          var state_59138__$1 = state_59138;
                                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59138__$1, 5, inst_59062);
                                                        } else {
                                                          if (state_val_59139 === 23) {
                                                            var inst_59098 = intercom.typeof_QMARK_.call(null, message, "gettx");
                                                            var state_59138__$1 = state_59138;
                                                            if (inst_59098) {
                                                              var statearr_59171_59218 = state_59138__$1;
                                                              statearr_59171_59218[1] = 25;
                                                            } else {
                                                              var statearr_59172_59219 = state_59138__$1;
                                                              statearr_59172_59219[1] = 26;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_59139 === 35) {
                                                              var state_59138__$1 = state_59138;
                                                              var statearr_59173_59220 = state_59138__$1;
                                                              statearr_59173_59220[2] = null;
                                                              statearr_59173_59220[1] = 36;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_59139 === 19) {
                                                                var inst_59090 = intercom.takeInv.call(null, message);
                                                                var inst_59091 = intercom.tostate.call(null, inst_59090);
                                                                var state_59138__$1 = state_59138;
                                                                var statearr_59174_59221 = state_59138__$1;
                                                                statearr_59174_59221[2] = inst_59091;
                                                                statearr_59174_59221[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_59139 === 11) {
                                                                  var inst_59079 = state_59138[2];
                                                                  var state_59138__$1 = state_59138;
                                                                  var statearr_59175_59222 = state_59138__$1;
                                                                  statearr_59175_59222[2] = inst_59079;
                                                                  statearr_59175_59222[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_59139 === 9) {
                                                                    var inst_59073 = intercom.takeVersion.call(null, message);
                                                                    var state_59138__$1 = state_59138;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59138__$1, 12, inst_59073);
                                                                  } else {
                                                                    if (state_val_59139 === 5) {
                                                                      var inst_59064 = state_59138[2];
                                                                      var inst_59065 = intercom.newstate = inst_59064;
                                                                      var inst_59066 = logger.og.call(null, new cljs.core.Keyword(null, "intercom", "intercom", -1489804996), "start -\x3e ", intercom.newstate);
                                                                      var inst_59067 = intercom.tostate.call(null, intercom.newstate);
                                                                      var state_59138__$1 = function() {
                                                                        var statearr_59176 = state_59138;
                                                                        statearr_59176[13] = inst_59065;
                                                                        statearr_59176[14] = inst_59066;
                                                                        return statearr_59176;
                                                                      }();
                                                                      var statearr_59177_59223 = state_59138__$1;
                                                                      statearr_59177_59223[2] = inst_59067;
                                                                      statearr_59177_59223[1] = 4;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_59139 === 14) {
                                                                        var state_59138__$1 = state_59138;
                                                                        var statearr_59178_59224 = state_59138__$1;
                                                                        statearr_59178_59224[2] = null;
                                                                        statearr_59178_59224[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_59139 === 26) {
                                                                          var inst_59103 = intercom.typeof_QMARK_.call(null, message, "tx");
                                                                          var state_59138__$1 = state_59138;
                                                                          if (inst_59103) {
                                                                            var statearr_59179_59225 = state_59138__$1;
                                                                            statearr_59179_59225[1] = 28;
                                                                          } else {
                                                                            var statearr_59180_59226 = state_59138__$1;
                                                                            statearr_59180_59226[1] = 29;
                                                                          }
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_59139 === 16) {
                                                                            var inst_59085 = intercom.takeConn.call(null, message);
                                                                            var inst_59086 = intercom.tostate.call(null, inst_59085);
                                                                            var state_59138__$1 = state_59138;
                                                                            var statearr_59181_59227 = state_59138__$1;
                                                                            statearr_59181_59227[2] = inst_59086;
                                                                            statearr_59181_59227[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_59139 === 30) {
                                                                              var inst_59121 = state_59138[2];
                                                                              var state_59138__$1 = state_59138;
                                                                              var statearr_59182_59228 = state_59138__$1;
                                                                              statearr_59182_59228[2] = inst_59121;
                                                                              statearr_59182_59228[1] = 27;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_59139 === 10) {
                                                                                var state_59138__$1 = state_59138;
                                                                                var statearr_59183_59229 = state_59138__$1;
                                                                                statearr_59183_59229[2] = null;
                                                                                statearr_59183_59229[1] = 11;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_59139 === 18) {
                                                                                  var inst_59129 = state_59138[2];
                                                                                  var state_59138__$1 = state_59138;
                                                                                  var statearr_59184_59230 = state_59138__$1;
                                                                                  statearr_59184_59230[2] = inst_59129;
                                                                                  statearr_59184_59230[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_59139 === 8) {
                                                                                    var inst_59134 = state_59138[2];
                                                                                    var state_59138__$1 = state_59138;
                                                                                    var statearr_59185_59231 = state_59138__$1;
                                                                                    statearr_59185_59231[2] = inst_59134;
                                                                                    statearr_59185_59231[1] = 4;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    return null;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59187 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_59187[0] = state_machine__6577__auto__;
              statearr_59187[1] = 1;
              return statearr_59187;
            };
            var state_machine__6577__auto____1 = function(state_59138) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59138);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59138) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59138);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59188 = f__6621__auto__.call(null);
        statearr_59188[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59188;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.sendm = function sendm(peer, payload) {
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "sending ", payload);
  logger.og.call(null, new cljs.core.Keyword(null, "sendm", "sendm", -1454310736), "peer ", peer);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59243) {
            var state_val_59244 = state_59243[1];
            if (state_val_59244 === 2) {
              var inst_59241 = state_59243[2];
              var state_59243__$1 = state_59243;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59243__$1, inst_59241);
            } else {
              if (state_val_59244 === 1) {
                var state_59243__$1 = state_59243;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_59243__$1, 2, peer, payload);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59246 = [null, null, null, null, null];
              statearr_59246[0] = state_machine__6577__auto__;
              statearr_59246[1] = 1;
              return statearr_59246;
            };
            var state_machine__6577__auto____1 = function(state_59243) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59243);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59243) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59243);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59247 = f__6621__auto__.call(null);
        statearr_59247[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59247;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeInv = function takeInv(fullMessage) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59379) {
            var state_val_59380 = state_59379[1];
            if (state_val_59380 === 7) {
              var inst_59346 = state_59379[2];
              var inst_59347 = intercom.heightFromBlock.call(null, inst_59346);
              var inst_59348 = intercom.blocks.vector;
              var inst_59349 = inst_59348.length;
              var inst_59350 = inst_59347 + inst_59349;
              var inst_59351 = inst_59350 + 1;
              var inst_59352 = intercom.newHeight = inst_59351;
              var inst_59353 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "newHeight ", intercom.newHeight);
              var inst_59354 = intercom.bchainHeight < intercom.newHeight;
              var state_59379__$1 = function() {
                var statearr_59381 = state_59379;
                statearr_59381[5] = inst_59352;
                statearr_59381[6] = inst_59353;
                return statearr_59381;
              }();
              if (cljs.core.truth_(inst_59354)) {
                var statearr_59382_59400 = state_59379__$1;
                statearr_59382_59400[1] = 8;
              } else {
                var statearr_59383_59401 = state_59379__$1;
                statearr_59383_59401[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_59380 === 1) {
                var inst_59324 = fullMessage.data;
                var inst_59325 = intercom.blocks = inst_59324;
                var inst_59326 = logger.og.call(null, new cljs.core.Keyword(null, "takeInv", "takeInv", 1845315889), "now about to handle inv block message ", intercom.blocks);
                var inst_59327 = intercom.blocks.vector;
                var inst_59328 = inst_59327[0];
                var inst_59329 = blockchain.prevblk.call(null, inst_59328);
                var inst_59330 = blockchain.blockKnown_QMARK_.call(null, inst_59329);
                var state_59379__$1 = function() {
                  var statearr_59384 = state_59379;
                  statearr_59384[7] = inst_59326;
                  statearr_59384[8] = inst_59325;
                  return statearr_59384;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59379__$1, 2, inst_59330);
              } else {
                if (state_val_59380 === 4) {
                  var inst_59363 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "request previous", intercom.blocks);
                  var inst_59364 = db.g.call(null, "last");
                  var state_59379__$1 = function() {
                    var statearr_59385 = state_59379;
                    statearr_59385[9] = inst_59363;
                    return statearr_59385;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59379__$1, 11, inst_59364);
                } else {
                  if (state_val_59380 === 13) {
                    var inst_59370 = state_59379[10];
                    var inst_59373 = state_59379[2];
                    var state_59379__$1 = state_59379;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_59379__$1, 12, inst_59370, inst_59373);
                  } else {
                    if (state_val_59380 === 6) {
                      var inst_59338 = state_59379[2];
                      var inst_59339 = intercom.bchainHeight = inst_59338;
                      var inst_59340 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "blockchainHeight ", intercom.bchainHeight);
                      var inst_59341 = intercom.blocks.vector;
                      var inst_59342 = inst_59341[0];
                      var inst_59343 = blockchain.prevblk.call(null, inst_59342);
                      var inst_59344 = db.g.call(null, inst_59343);
                      var state_59379__$1 = function() {
                        var statearr_59386 = state_59379;
                        statearr_59386[11] = inst_59340;
                        statearr_59386[12] = inst_59339;
                        return statearr_59386;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59379__$1, 7, inst_59344);
                    } else {
                      if (state_val_59380 === 3) {
                        var inst_59334 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "block is known ");
                        var inst_59335 = "blockchainHeight".call(null);
                        var inst_59336 = cljs.core.apply.call(null, ps.sia, inst_59335);
                        var state_59379__$1 = function() {
                          var statearr_59387 = state_59379;
                          statearr_59387[13] = inst_59334;
                          return statearr_59387;
                        }();
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59379__$1, 6, inst_59336);
                      } else {
                        if (state_val_59380 === 12) {
                          var inst_59375 = state_59379[2];
                          var state_59379__$1 = state_59379;
                          var statearr_59388_59402 = state_59379__$1;
                          statearr_59388_59402[2] = inst_59375;
                          statearr_59388_59402[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_59380 === 2) {
                            var inst_59332 = state_59379[2];
                            var state_59379__$1 = state_59379;
                            if (cljs.core.truth_(inst_59332)) {
                              var statearr_59389_59403 = state_59379__$1;
                              statearr_59389_59403[1] = 3;
                            } else {
                              var statearr_59390_59404 = state_59379__$1;
                              statearr_59390_59404[1] = 4;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_59380 === 11) {
                              var inst_59366 = state_59379[2];
                              var inst_59367 = inst_59366.hash;
                              var inst_59368 = intercom.lblock = inst_59367;
                              var inst_59369 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "last block ", intercom.lblock);
                              var inst_59370 = fullMessage.peer;
                              var inst_59371 = intercom.makeGetBlock.call(null, intercom.lblock);
                              var state_59379__$1 = function() {
                                var statearr_59391 = state_59379;
                                statearr_59391[14] = inst_59369;
                                statearr_59391[15] = inst_59368;
                                statearr_59391[10] = inst_59370;
                                return statearr_59391;
                              }();
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59379__$1, 13, inst_59371);
                            } else {
                              if (state_val_59380 === 9) {
                                var inst_59359 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "about to drop inv");
                                var state_59379__$1 = state_59379;
                                var statearr_59392_59405 = state_59379__$1;
                                statearr_59392_59405[2] = inst_59359;
                                statearr_59392_59405[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_59380 === 5) {
                                  var inst_59377 = state_59379[2];
                                  var state_59379__$1 = function() {
                                    var statearr_59393 = state_59379;
                                    statearr_59393[16] = inst_59377;
                                    return statearr_59393;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59379__$1, "grind");
                                } else {
                                  if (state_val_59380 === 10) {
                                    var inst_59361 = state_59379[2];
                                    var state_59379__$1 = state_59379;
                                    var statearr_59394_59406 = state_59379__$1;
                                    statearr_59394_59406[2] = inst_59361;
                                    statearr_59394_59406[1] = 5;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_59380 === 8) {
                                      var inst_59356 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "now adding to chain");
                                      var inst_59357 = blockchain.addToChain.call(null, intercom.blocks);
                                      var state_59379__$1 = function() {
                                        var statearr_59395 = state_59379;
                                        statearr_59395[17] = inst_59356;
                                        return statearr_59395;
                                      }();
                                      var statearr_59396_59407 = state_59379__$1;
                                      statearr_59396_59407[2] = inst_59357;
                                      statearr_59396_59407[1] = 10;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59398 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_59398[0] = state_machine__6577__auto__;
              statearr_59398[1] = 1;
              return statearr_59398;
            };
            var state_machine__6577__auto____1 = function(state_59379) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59379);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59379) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59379);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59399 = f__6621__auto__.call(null);
        statearr_59399[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59399;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeData = function takeData(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59428) {
            var state_val_59429 = state_59428[1];
            if (state_val_59429 === 1) {
              var inst_59421 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take data ", message);
              var inst_59422 = logger.og.call(null, new cljs.core.Keyword(null, "inv", "inv", 1526077438), "got inv here ");
              var inst_59423 = intercom.v.data;
              var inst_59424 = intercom.handleInvBlock.call(null, inst_59423, intercom.v);
              var inst_59425 = intercom.tostate.call(null, "grind");
              var inst_59426 = intercom.tostate.call(null, "grind", intercom.handleInvBlock);
              var state_59428__$1 = function() {
                var statearr_59430 = state_59428;
                statearr_59430[5] = inst_59421;
                statearr_59430[6] = inst_59424;
                statearr_59430[7] = inst_59422;
                statearr_59430[8] = inst_59425;
                return statearr_59430;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59428__$1, inst_59426);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59432 = [null, null, null, null, null, null, null, null, null];
              statearr_59432[0] = state_machine__6577__auto__;
              statearr_59432[1] = 1;
              return statearr_59432;
            };
            var state_machine__6577__auto____1 = function(state_59428) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59428);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59428) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59428);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59433 = f__6621__auto__.call(null);
        statearr_59433[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59433;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeGetVersion = function takeGetVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59450) {
            var state_val_59451 = state_59450[1];
            if (state_val_59451 === 1) {
              var inst_59445 = intercom.v.peer;
              var inst_59446 = intercom.sendmsg.call(null, inst_59445, "version", "0");
              var inst_59447 = intercom.tostate.call(null, "grind");
              var inst_59448 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take get version ", message);
              var state_59450__$1 = function() {
                var statearr_59452 = state_59450;
                statearr_59452[5] = inst_59446;
                statearr_59452[6] = inst_59447;
                return statearr_59452;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59450__$1, inst_59448);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59454 = [null, null, null, null, null, null, null];
              statearr_59454[0] = state_machine__6577__auto__;
              statearr_59454[1] = 1;
              return statearr_59454;
            };
            var state_machine__6577__auto____1 = function(state_59450) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59450);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59450) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59450);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59455 = f__6621__auto__.call(null);
        statearr_59455[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59455;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeVersion = function takeVersion(message) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59466) {
            var state_val_59467 = state_59466[1];
            if (state_val_59467 === 1) {
              var inst_59464 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "take version ", message);
              var state_59466__$1 = function() {
                var statearr_59468 = state_59466;
                statearr_59468[5] = inst_59464;
                return statearr_59468;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59466__$1, "grind");
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59470 = [null, null, null, null, null, null];
              statearr_59470[0] = state_machine__6577__auto__;
              statearr_59470[1] = 1;
              return statearr_59470;
            };
            var state_machine__6577__auto____1 = function(state_59466) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59466);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59466) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59466);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59471 = f__6621__auto__.call(null);
        statearr_59471[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59471;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeConn = function takeConn(conn) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59512) {
            var state_val_59513 = state_59512[1];
            if (state_val_59513 === 4) {
              var inst_59510 = state_59512[2];
              var state_59512__$1 = state_59512;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59512__$1, inst_59510);
            } else {
              if (state_val_59513 === 3) {
                var state_59512__$1 = state_59512;
                var statearr_59514_59522 = state_59512__$1;
                statearr_59514_59522[2] = "version";
                statearr_59514_59522[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_59513 === 2) {
                  var state_59512__$1 = state_59512;
                  var statearr_59515_59523 = state_59512__$1;
                  statearr_59515_59523[2] = "grind";
                  statearr_59515_59523[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_59513 === 1) {
                    var inst_59497 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "take conn ", conn);
                    var inst_59498 = conn.data;
                    var inst_59499 = inst_59498.writec;
                    var inst_59500 = intercom.makeVersion.call(null, "0");
                    var inst_59501 = intercom.sendm.call(null, inst_59499, inst_59500);
                    var inst_59502 = conn.connType;
                    var inst_59503 = logger.og.call(null, new cljs.core.Keyword(null, "takeConn", "takeConn", -426297678), "conn type ", inst_59502);
                    var inst_59504 = conn.data;
                    var inst_59505 = inst_59504.connType;
                    var inst_59506 = inst_59505 === "saltan";
                    var state_59512__$1 = function() {
                      var statearr_59516 = state_59512;
                      statearr_59516[5] = inst_59503;
                      statearr_59516[6] = inst_59497;
                      statearr_59516[7] = inst_59501;
                      return statearr_59516;
                    }();
                    if (cljs.core.truth_(inst_59506)) {
                      var statearr_59517_59524 = state_59512__$1;
                      statearr_59517_59524[1] = 2;
                    } else {
                      var statearr_59518_59525 = state_59512__$1;
                      statearr_59518_59525[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59520 = [null, null, null, null, null, null, null, null];
              statearr_59520[0] = state_machine__6577__auto__;
              statearr_59520[1] = 1;
              return statearr_59520;
            };
            var state_machine__6577__auto____1 = function(state_59512) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59512);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59512) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59512);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59521 = f__6621__auto__.call(null);
        statearr_59521[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59521;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.takeGetBlocks = function takeGetBlocks(peer, hash) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59546) {
            var state_val_59547 = state_59546[1];
            if (state_val_59547 === 2) {
              var inst_59543 = state_59546[2];
              var inst_59544 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "make Get Blck", inst_59543);
              var state_59546__$1 = state_59546;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59546__$1, inst_59544);
            } else {
              if (state_val_59547 === 1) {
                var inst_59539 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from peer ", peer);
                var inst_59540 = logger.og.call(null, new cljs.core.Keyword(null, "getBlocks", "getBlocks", 333767312), "getting data from hash ", hash);
                var inst_59541 = intercom.makeGetBlock.call(null, hash);
                var state_59546__$1 = function() {
                  var statearr_59548 = state_59546;
                  statearr_59548[5] = inst_59539;
                  statearr_59548[6] = inst_59540;
                  return statearr_59548;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59546__$1, 2, inst_59541);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59550 = [null, null, null, null, null, null, null];
              statearr_59550[0] = state_machine__6577__auto__;
              statearr_59550[1] = 1;
              return statearr_59550;
            };
            var state_machine__6577__auto____1 = function(state_59546) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59546);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59546) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59546);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59551 = f__6621__auto__.call(null);
        statearr_59551[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59551;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
intercom.makeInv = function makeInv(typ, message) {
  var obj59559 = {"type":"json", "data":JSON.stringify(function() {
    var obj59561 = {"type":"inv", "data":function() {
      var obj59563 = {"type":typ, "vector":message};
      return obj59563;
    }()};
    return obj59561;
  }())};
  return obj59559;
};
intercom.makeData = function makeData(typ, message) {
  return null;
};
intercom.makeGetVersion = function makeGetVersion(typ, message) {
  return null;
};
intercom.makeVersion = function makeVersion(message) {
  var obj59567 = {"type":"version", "data":message};
  return obj59567;
};
intercom.makeConn = function makeConn(conn) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeConn", "makeConn", 176409920), "make conn ", conn);
  var obj59571 = {"type":"conn", "data":conn};
  return obj59571;
};
intercom.makeGetBlock = function makeGetBlock(hash) {
  logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "about to make block ", hash);
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_59677) {
            var state_val_59678 = state_59677[1];
            if (state_val_59678 === 7) {
              var state_59677__$1 = state_59677;
              var statearr_59679_59698 = state_59677__$1;
              statearr_59679_59698[2] = null;
              statearr_59679_59698[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_59678 === 1) {
                var inst_59637 = [];
                var inst_59638 = {"count":0, "blocks":inst_59637};
                var inst_59639 = inst_59638[intercom.hash_stop] = 0;
                var inst_59640 = intercom.gtBlock = inst_59638;
                var inst_59641 = app.blockchain.blockchainHeight.call(null, 1);
                var state_59677__$1 = function() {
                  var statearr_59680 = state_59677;
                  statearr_59680[5] = inst_59639;
                  statearr_59680[6] = inst_59640;
                  return statearr_59680;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59677__$1, 2, inst_59641);
              } else {
                if (state_val_59678 === 4) {
                  var inst_59675 = state_59677[2];
                  var state_59677__$1 = function() {
                    var statearr_59681 = state_59677;
                    statearr_59681[7] = inst_59675;
                    return statearr_59681;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_59677__$1, intercom.gtBlock);
                } else {
                  if (state_val_59678 === 6) {
                    var inst_59646 = state_59677[8];
                    var inst_59662 = inst_59646 < 10;
                    var state_59677__$1 = state_59677;
                    if (cljs.core.truth_(inst_59662)) {
                      var statearr_59682_59699 = state_59677__$1;
                      statearr_59682_59699[1] = 9;
                    } else {
                      var statearr_59683_59700 = state_59677__$1;
                      statearr_59683_59700[1] = 10;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_59678 === 3) {
                      var inst_59645 = state_59677[9];
                      var inst_59646 = state_59677[8];
                      var inst_59648 = "new loop " + inst_59645;
                      var inst_59649 = inst_59648 + " ";
                      var inst_59650 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), inst_59649, inst_59646);
                      var inst_59651 = "b" + inst_59645;
                      var inst_59652 = db.g.call(null, inst_59651);
                      var state_59677__$1 = function() {
                        var statearr_59684 = state_59677;
                        statearr_59684[10] = inst_59650;
                        return statearr_59684;
                      }();
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_59677__$1, 5, inst_59652);
                    } else {
                      if (state_val_59678 === 2) {
                        var inst_59643 = state_59677[2];
                        var inst_59644 = intercom.heightForBlock = inst_59643;
                        var inst_59645 = intercom.heightForBlock;
                        var inst_59646 = 0;
                        var state_59677__$1 = function() {
                          var statearr_59685 = state_59677;
                          statearr_59685[9] = inst_59645;
                          statearr_59685[11] = inst_59644;
                          statearr_59685[8] = inst_59646;
                          return statearr_59685;
                        }();
                        var statearr_59686_59701 = state_59677__$1;
                        statearr_59686_59701[2] = null;
                        statearr_59686_59701[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_59678 === 11) {
                          var inst_59646 = state_59677[8];
                          var inst_59668 = state_59677[2];
                          var inst_59669 = inst_59646 + 1;
                          var inst_59645 = inst_59668;
                          var inst_59646__$1 = inst_59669;
                          var state_59677__$1 = function() {
                            var statearr_59687 = state_59677;
                            statearr_59687[9] = inst_59645;
                            statearr_59687[8] = inst_59646__$1;
                            return statearr_59687;
                          }();
                          var statearr_59688_59702 = state_59677__$1;
                          statearr_59688_59702[2] = null;
                          statearr_59688_59702[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_59678 === 9) {
                            var inst_59645 = state_59677[9];
                            var inst_59664 = inst_59645 - 1;
                            var state_59677__$1 = state_59677;
                            var statearr_59689_59703 = state_59677__$1;
                            statearr_59689_59703[2] = inst_59664;
                            statearr_59689_59703[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_59678 === 5) {
                              var inst_59645 = state_59677[9];
                              var inst_59654 = state_59677[2];
                              var inst_59655 = intercom.blockg = inst_59654;
                              var inst_59656 = logger.og.call(null, new cljs.core.Keyword(null, "makeGetBlock", "makeGetBlock", -1966015644), "curr block ");
                              var inst_59657 = intercom.gtBlock.count = inst_59645;
                              var inst_59658 = intercom.gtBlock.blocks;
                              var inst_59659 = inst_59658.push(intercom.blockg);
                              var inst_59660 = 0 < inst_59645;
                              var state_59677__$1 = function() {
                                var statearr_59690 = state_59677;
                                statearr_59690[12] = inst_59659;
                                statearr_59690[13] = inst_59655;
                                statearr_59690[14] = inst_59656;
                                statearr_59690[15] = inst_59657;
                                return statearr_59690;
                              }();
                              if (cljs.core.truth_(inst_59660)) {
                                var statearr_59691_59704 = state_59677__$1;
                                statearr_59691_59704[1] = 6;
                              } else {
                                var statearr_59692_59705 = state_59677__$1;
                                statearr_59692_59705[1] = 7;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_59678 === 10) {
                                var inst_59645 = state_59677[9];
                                var inst_59666 = cljs.core.quot.call(null, inst_59645, 2);
                                var state_59677__$1 = state_59677;
                                var statearr_59693_59706 = state_59677__$1;
                                statearr_59693_59706[2] = inst_59666;
                                statearr_59693_59706[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_59678 === 8) {
                                  var inst_59673 = state_59677[2];
                                  var state_59677__$1 = state_59677;
                                  var statearr_59694_59707 = state_59677__$1;
                                  statearr_59694_59707[2] = inst_59673;
                                  statearr_59694_59707[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_59696 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_59696[0] = state_machine__6577__auto__;
              statearr_59696[1] = 1;
              return statearr_59696;
            };
            var state_machine__6577__auto____1 = function(state_59677) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_59677);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_59677) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_59677);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_59697 = f__6621__auto__.call(null);
        statearr_59697[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_59697;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
goog.provide("app.main");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
goog.require("logger");
goog.require("communications");
cljs.core.enable_console_print_BANG_.call(null);
$(document).on("transaction", function(a1, a2) {
  return pubsub.pub.call(null, "transaction", a2);
});
app.main.connectTo = function connectTo(ev, id) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56376) {
            var state_val_56377 = state_56376[1];
            if (state_val_56377 === 2) {
              var inst_56374 = state_56376[2];
              var state_56376__$1 = state_56376;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56376__$1, inst_56374);
            } else {
              if (state_val_56377 === 1) {
                var inst_56372 = pubsub.sia.call(null, "connectTo", ev, id);
                var state_56376__$1 = state_56376;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56376__$1, 2, inst_56372);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56379 = [null, null, null, null, null];
              statearr_56379[0] = state_machine__6577__auto__;
              statearr_56379[1] = 1;
              return statearr_56379;
            };
            var state_machine__6577__auto____1 = function(state_56376) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56376);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56376) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56376);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56380 = f__6621__auto__.call(null);
        statearr_56380[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56380;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
$(document).on("connectTo", app.main.connectTo);
app.main.dumpdb = function dumpdb() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56394) {
            var state_val_56395 = state_56394[1];
            if (state_val_56395 === 2) {
              var inst_56392 = state_56394[2];
              var state_56394__$1 = state_56394;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56394__$1, inst_56392);
            } else {
              if (state_val_56395 === 1) {
                var inst_56390 = pubsub.sia.call(null, "dumpdb");
                var state_56394__$1 = state_56394;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56394__$1, 2, inst_56390);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56397 = [null, null, null, null, null];
              statearr_56397[0] = state_machine__6577__auto__;
              statearr_56397[1] = 1;
              return statearr_56397;
            };
            var state_machine__6577__auto____1 = function(state_56394) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56394);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56394) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56394);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56398 = f__6621__auto__.call(null);
        statearr_56398[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56398;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
$(document).on("dumpdb", app.main.dumpdb);
app.main.cleandb = function cleandb(x, y) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56412) {
            var state_val_56413 = state_56412[1];
            if (state_val_56413 === 2) {
              var inst_56410 = state_56412[2];
              var state_56412__$1 = state_56412;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56412__$1, inst_56410);
            } else {
              if (state_val_56413 === 1) {
                var inst_56408 = pubsub.sia.call(null, "cleandb");
                var state_56412__$1 = state_56412;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56412__$1, 2, inst_56408);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56415 = [null, null, null, null, null];
              statearr_56415[0] = state_machine__6577__auto__;
              statearr_56415[1] = 1;
              return statearr_56415;
            };
            var state_machine__6577__auto____1 = function(state_56412) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56412);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56412) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56412);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56416 = f__6621__auto__.call(null);
        statearr_56416[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56416;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
$(document).on("flushdb", app.main.cleandb);
$(document).on("setid", function(x, y) {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56419) {
            var state_val_56420 = state_56419[1];
            if (state_val_56420 === 1) {
              var inst_56417 = pubsub.sia.call(null, "setID", x, y);
              var state_56419__$1 = state_56419;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56419__$1, inst_56417);
            } else {
              return null;
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56422 = [null, null, null, null, null];
              statearr_56422[0] = state_machine__6577__auto__;
              statearr_56422[1] = 1;
              return statearr_56422;
            };
            var state_machine__6577__auto____1 = function(state_56419) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56419);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56419) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56419);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56423 = f__6621__auto__.call(null);
        statearr_56423[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56423;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
});
app.main.replScratchFunction = function replScratchFunction() {
  pubsub.si.call(null, "dumpdb");
  var c__6620__auto___56442 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto___56442) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto___56442) {
          return function(state_56437) {
            var state_val_56438 = state_56437[1];
            if (state_val_56438 === 2) {
              var inst_56435 = state_56437[2];
              var state_56437__$1 = state_56437;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56437__$1, inst_56435);
            } else {
              if (state_val_56438 === 1) {
                var inst_56433 = pubsub.sia.call(null, "hash", "s");
                var state_56437__$1 = state_56437;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56437__$1, 2, inst_56433);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto___56442);
        return function(switch__6576__auto__, c__6620__auto___56442) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56440 = [null, null, null, null, null];
              statearr_56440[0] = state_machine__6577__auto__;
              statearr_56440[1] = 1;
              return statearr_56440;
            };
            var state_machine__6577__auto____1 = function(state_56437) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56437);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56437) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56437);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto___56442);
      }();
      var state__6622__auto__ = function() {
        var statearr_56441 = f__6621__auto__.call(null);
        statearr_56441[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto___56442;
        return statearr_56441;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto___56442));
  app.main._LT__BANG_.call(null, pubsub.sia.call(null, "makeBlock", "wadsdsad"));
  app.main.dumpdb.call(null);
  return app.main.cleandb.call(null);
};
app.main.empty_string = "";
app.main.pri = function pri(x) {
  cljs.core.println.call(null, x);
  return 3;
};
app.main.entryy = function entryy() {
  var c__6620__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6620__auto__) {
    return function() {
      var f__6621__auto__ = function() {
        var switch__6576__auto__ = function(c__6620__auto__) {
          return function(state_56461) {
            var state_val_56462 = state_56461[1];
            if (state_val_56462 === 2) {
              var inst_56459 = state_56461[2];
              var state_56461__$1 = state_56461;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_56461__$1, inst_56459);
            } else {
              if (state_val_56462 === 1) {
                var inst_56455 = pubsub.initpubsub.call(null);
                var inst_56456 = communications.startP2PCommLoop.call(null);
                var inst_56457 = pubsub.sia.call(null, "ui", "html");
                var state_56461__$1 = function() {
                  var statearr_56463 = state_56461;
                  statearr_56463[5] = inst_56456;
                  statearr_56463[6] = inst_56455;
                  return statearr_56463;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_56461__$1, 2, inst_56457);
              } else {
                return null;
              }
            }
          };
        }(c__6620__auto__);
        return function(switch__6576__auto__, c__6620__auto__) {
          return function() {
            var state_machine__6577__auto__ = null;
            var state_machine__6577__auto____0 = function() {
              var statearr_56465 = [null, null, null, null, null, null, null];
              statearr_56465[0] = state_machine__6577__auto__;
              statearr_56465[1] = 1;
              return statearr_56465;
            };
            var state_machine__6577__auto____1 = function(state_56461) {
              while (true) {
                var result__6578__auto__ = switch__6576__auto__.call(null, state_56461);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__6578__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  continue;
                } else {
                  return result__6578__auto__;
                }
                break;
              }
            };
            state_machine__6577__auto__ = function(state_56461) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6577__auto____0.call(this);
                case 1:
                  return state_machine__6577__auto____1.call(this, state_56461);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6577__auto____0;
            state_machine__6577__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6577__auto____1;
            return state_machine__6577__auto__;
          }();
        }(switch__6576__auto__, c__6620__auto__);
      }();
      var state__6622__auto__ = function() {
        var statearr_56466 = f__6621__auto__.call(null);
        statearr_56466[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6620__auto__;
        return statearr_56466;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6622__auto__);
    };
  }(c__6620__auto__));
  return c__6620__auto__;
};
window.onload = app.main.entryy;
goog.provide("mockdatabase");
goog.require("cljs.core");
goog.require("cljs.core.async");
mockdatabase.mdbase = function() {
  var obj17659 = {};
  return obj17659;
}();
mockdatabase.g = function g(kie) {
  return mockdatabase.mdbase[kie];
};
mockdatabase.p = function p(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.ps = function ps(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
mockdatabase.update = function update(kie, v) {
  return mockdatabase.mdbase[kie] = v;
};
goog.provide("router");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("pubsub");
router.a = function a(x) {
  var obj44090 = {"a":1};
  return obj44090;
};
